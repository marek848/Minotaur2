/**
  ******************************************************************************
  * @file    stm32f1xx_it.c
  * @brief   Interrupt Service Routines.
  ******************************************************************************
  *
  * COPYRIGHT(c) 2015 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "stm32f1xx_hal.h"
#include "stm32f1xx.h"
#include "stm32f1xx_it.h"

/* USER CODE BEGIN 0 */
#include "jazda.h"

/* USER CODE END 0 */

/* External variables --------------------------------------------------------*/
extern DMA_HandleTypeDef hdma_adc1;
extern TIM_HandleTypeDef htim4;

/******************************************************************************/
/*            Cortex-M3 Processor Interruption and Exception Handlers         */ 
/******************************************************************************/

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}

/******************************************************************************/
/* STM32F1xx Peripheral Interrupt Handlers                                    */
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f1xx.s).                    */
/******************************************************************************/

/**
* @brief This function handles DMA1 channel1 global interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	uint8_t i;
	counter++;

		for(i=0;i<6;i++)
		{
			test=adcData[i];
			if(test>Max3[i]) Max3[i]=test;
			if(test<Min3[i]) Min3[i]=test;
		}

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}

/**
* @brief This function handles TIM4 global interrupt.
*/
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */
	int32_t speed[2];
	uint8_t i,j;
	static uint32_t adcavg[6][5];
	uint32_t tmp;
	count++;
	if(count%2==0)
	{
		HAL_GPIO_WritePin(Sensor2_GPIO_Port,Sensor2_Pin,0);
		HAL_GPIO_WritePin(Sensor1_GPIO_Port,Sensor1_Pin,1);

		for(i=0;i<6;i++)
		{
			if(i==1||i==2||i==5) MinMax[i][0]=Max3[i];
			if(i==0||i==3||i==4) MinMax[i][1]=Min3[i];
			Min3[i]=4000;
			Max3[i]=0;
		}
	}
	else
	{
		HAL_GPIO_WritePin(Sensor1_GPIO_Port,Sensor1_Pin,0);
		HAL_GPIO_WritePin(Sensor2_GPIO_Port,Sensor2_Pin,1);

		for(i=0;i<6;i++)
		{
			if(i==0||i==3||i==4) MinMax[i][0]=Max3[i];
			if(i==1||i==2||i==5) MinMax[i][1]=Min3[i];
			Min3[i]=4000;
			Max3[i]=0;
		}
	}
//	for(i=0;i<6;i++) SensorTab[i]=MinMax[i];
	for(i=0;i<6;i++)
	{
		for(j=4;j>0;j--)
		{
			adcavg[i][j]=adcavg[i][j-1];
		}
		adcavg[i][0]=MinMax[i][0]-MinMax[i][1];
		tmp=0;
		for(j=0;j<5;j++)
		{
			tmp+=adcavg[i][j];
		}
		SensorTab[i]=tmp/5;
	}
	error[0]=(dyslt-SensorTab[0])/10+(TIM2->CNT-TIM3->CNT);//+(SensorTab[2]-dyslp)/10;//(-SensorTab[0]+SensorTab[2])/5;
	error[1]=(SensorTab[1]-dysrt)/10+(TIM2->CNT-TIM3->CNT);//+(dysrp-SensorTab[3])/10;//(SensorTab[1]-SensorTab[3])/5;
	if (test3==1)
	{
		if (SensorTab[2]<SL_Tresh && SensorTab[3]<SR_Tresh) //enkodery
				{
					HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,0);
					HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,0);
					speed[0]=VEL;
					speed[1]=VEL;
				}
				else if (SensorTab[2]>SL_Tresh)
				{
					HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,1);
					HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,0);
					speed[0]=VEL+error[0];
					speed[1]=VEL-error[0];
				}
				else if (SensorTab[3]>SR_Tresh)
				{
					HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,0);
					HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,1);
					speed[0]=VEL+error[1];
					speed[1]=VEL-error[1];
				}

			   if(speed[0]>999) speed[0]=999;
			   if(speed[0]<0) speed[0]=0;
			   if(speed[1]>999) speed[1]=999;
			   if(speed[1]<0) speed[1]=0;

			   TIM1->CCR1=speed[0];
			   TIM1->CCR2=speed[1];
	}
	else
	{
		TIM1->CCR1=0;
		TIM1->CCR2=0;
	}

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	start=1;
	HAL_TIM_Base_Start_IT(&htim4);
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}

/* USER CODE BEGIN 1 */

/* USER CODE END 1 */
/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
