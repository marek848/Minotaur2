
Minotaur Configuration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ed4  0800010c  0800010c  0000810c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08008fe0  08008fe0  00010fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009018  08009018  00011018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800901c  0800901c  0001101c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08009020  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000007f4  2000000c  0800902c  0001800c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000800  0800902c  00018800  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0001800c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000111bf  00000000  00000000  00018035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000027cf  00000000  00000000  000291f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001098  00000000  00000000  0002b9c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f50  00000000  00000000  0002ca60  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00008531  00000000  00000000  0002d9b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000047f8  00000000  00000000  00035ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000082  00000000  00000000  0003a6d9  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003800  00000000  00000000  0003a75c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08008fc8 	.word	0x08008fc8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4803      	ldr	r0, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	08008fc8 	.word	0x08008fc8
 8000148:	20000010 	.word	0x20000010

0800014c <rotary>:
#include "jazda.h"
int32_t lef_back, rig_back, lef_fr, rig_fr;

 /**************************************************************/
 void rotary(int power, int32_t obrot)
  {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	 int32_t speed1;
	 obrot*=-1;
 8000156:	683b      	ldr	r3, [r7, #0]
 8000158:	425b      	negs	r3, r3
 800015a:	603b      	str	r3, [r7, #0]
	 test3[1]=obrot;
 800015c:	4b5f      	ldr	r3, [pc, #380]	; (80002dc <rotary+0x190>)
 800015e:	683a      	ldr	r2, [r7, #0]
 8000160:	605a      	str	r2, [r3, #4]
	 angle=0;
 8000162:	4b5f      	ldr	r3, [pc, #380]	; (80002e0 <rotary+0x194>)
 8000164:	2200      	movs	r2, #0
 8000166:	601a      	str	r2, [r3, #0]
	 test3[2]=0;
 8000168:	4b5c      	ldr	r3, [pc, #368]	; (80002dc <rotary+0x190>)
 800016a:	2200      	movs	r2, #0
 800016c:	609a      	str	r2, [r3, #8]

	 Transmit=0;
 800016e:	4b5d      	ldr	r3, [pc, #372]	; (80002e4 <rotary+0x198>)
 8000170:	2200      	movs	r2, #0
 8000172:	701a      	strb	r2, [r3, #0]

	 while(test3[2]<20)
 8000174:	e052      	b.n	800021c <rotary+0xd0>
	 {
		 speed1=(obrot-angle)/80;
 8000176:	4b5a      	ldr	r3, [pc, #360]	; (80002e0 <rotary+0x194>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	683a      	ldr	r2, [r7, #0]
 800017c:	1ad3      	subs	r3, r2, r3
 800017e:	4a5a      	ldr	r2, [pc, #360]	; (80002e8 <rotary+0x19c>)
 8000180:	fb82 1203 	smull	r1, r2, r2, r3
 8000184:	1152      	asrs	r2, r2, #5
 8000186:	17db      	asrs	r3, r3, #31
 8000188:	1ad3      	subs	r3, r2, r3
 800018a:	60fb      	str	r3, [r7, #12]

		 if(speed1<0)
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	2b00      	cmp	r3, #0
 8000190:	da18      	bge.n	80001c4 <rotary+0x78>
		 {
			 HAL_GPIO_WritePin(AIN1_GPIO_Port,AIN1_Pin,1);
 8000192:	4856      	ldr	r0, [pc, #344]	; (80002ec <rotary+0x1a0>)
 8000194:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000198:	2201      	movs	r2, #1
 800019a:	f006 f8a7 	bl	80062ec <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(AIN2_GPIO_Port,AIN2_Pin,0);
 800019e:	4853      	ldr	r0, [pc, #332]	; (80002ec <rotary+0x1a0>)
 80001a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001a4:	2200      	movs	r2, #0
 80001a6:	f006 f8a1 	bl	80062ec <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(BIN1_GPIO_Port,BIN1_Pin,0);
 80001aa:	4851      	ldr	r0, [pc, #324]	; (80002f0 <rotary+0x1a4>)
 80001ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001b0:	2200      	movs	r2, #0
 80001b2:	f006 f89b 	bl	80062ec <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(BIN2_GPIO_Port,BIN2_Pin,1);
 80001b6:	484e      	ldr	r0, [pc, #312]	; (80002f0 <rotary+0x1a4>)
 80001b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001bc:	2201      	movs	r2, #1
 80001be:	f006 f895 	bl	80062ec <HAL_GPIO_WritePin>
 80001c2:	e017      	b.n	80001f4 <rotary+0xa8>
		 }
		 else
		 {

			HAL_GPIO_WritePin(AIN1_GPIO_Port,AIN1_Pin,0);
 80001c4:	4849      	ldr	r0, [pc, #292]	; (80002ec <rotary+0x1a0>)
 80001c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001ca:	2200      	movs	r2, #0
 80001cc:	f006 f88e 	bl	80062ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2_GPIO_Port,AIN2_Pin,1);
 80001d0:	4846      	ldr	r0, [pc, #280]	; (80002ec <rotary+0x1a0>)
 80001d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001d6:	2201      	movs	r2, #1
 80001d8:	f006 f888 	bl	80062ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN1_GPIO_Port,BIN1_Pin,1);
 80001dc:	4844      	ldr	r0, [pc, #272]	; (80002f0 <rotary+0x1a4>)
 80001de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001e2:	2201      	movs	r2, #1
 80001e4:	f006 f882 	bl	80062ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2_GPIO_Port,BIN2_Pin,0);
 80001e8:	4841      	ldr	r0, [pc, #260]	; (80002f0 <rotary+0x1a4>)
 80001ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ee:	2200      	movs	r2, #0
 80001f0:	f006 f87c 	bl	80062ec <HAL_GPIO_WritePin>
		 }

		 if(speed1<0) speed1=speed1*(-1);
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	da02      	bge.n	8000200 <rotary+0xb4>
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	425b      	negs	r3, r3
 80001fe:	60fb      	str	r3, [r7, #12]
		 if(speed1>power) speed1=power;
 8000200:	68fa      	ldr	r2, [r7, #12]
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	429a      	cmp	r2, r3
 8000206:	dd01      	ble.n	800020c <rotary+0xc0>
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	60fb      	str	r3, [r7, #12]

		 TIM1->CCR1=speed1+100;
 800020c:	4b39      	ldr	r3, [pc, #228]	; (80002f4 <rotary+0x1a8>)
 800020e:	68fa      	ldr	r2, [r7, #12]
 8000210:	3264      	adds	r2, #100	; 0x64
 8000212:	635a      	str	r2, [r3, #52]	; 0x34
		 TIM1->CCR2=speed1+100;
 8000214:	4b37      	ldr	r3, [pc, #220]	; (80002f4 <rotary+0x1a8>)
 8000216:	68fa      	ldr	r2, [r7, #12]
 8000218:	3264      	adds	r2, #100	; 0x64
 800021a:	639a      	str	r2, [r3, #56]	; 0x38
	 angle=0;
	 test3[2]=0;

	 Transmit=0;

	 while(test3[2]<20)
 800021c:	4b2f      	ldr	r3, [pc, #188]	; (80002dc <rotary+0x190>)
 800021e:	689b      	ldr	r3, [r3, #8]
 8000220:	2b13      	cmp	r3, #19
 8000222:	dda8      	ble.n	8000176 <rotary+0x2a>
		 if(speed1>power) speed1=power;

		 TIM1->CCR1=speed1+100;
		 TIM1->CCR2=speed1+100;
	 }
	 TIM1->CCR1=0;
 8000224:	4b33      	ldr	r3, [pc, #204]	; (80002f4 <rotary+0x1a8>)
 8000226:	2200      	movs	r2, #0
 8000228:	635a      	str	r2, [r3, #52]	; 0x34
	 TIM1->CCR2=0;
 800022a:	4b32      	ldr	r3, [pc, #200]	; (80002f4 <rotary+0x1a8>)
 800022c:	2200      	movs	r2, #0
 800022e:	639a      	str	r2, [r3, #56]	; 0x38

	 if (obrot>45000 && obrot<135000) ori+=3;
 8000230:	683a      	ldr	r2, [r7, #0]
 8000232:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 8000236:	429a      	cmp	r2, r3
 8000238:	dd0b      	ble.n	8000252 <rotary+0x106>
 800023a:	683a      	ldr	r2, [r7, #0]
 800023c:	4b2e      	ldr	r3, [pc, #184]	; (80002f8 <rotary+0x1ac>)
 800023e:	429a      	cmp	r2, r3
 8000240:	dc07      	bgt.n	8000252 <rotary+0x106>
 8000242:	4b2e      	ldr	r3, [pc, #184]	; (80002fc <rotary+0x1b0>)
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	b2db      	uxtb	r3, r3
 8000248:	3303      	adds	r3, #3
 800024a:	b2db      	uxtb	r3, r3
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4b2b      	ldr	r3, [pc, #172]	; (80002fc <rotary+0x1b0>)
 8000250:	701a      	strb	r2, [r3, #0]
	 if (obrot<-45000 && obrot>-135000) ori+=1;
 8000252:	683a      	ldr	r2, [r7, #0]
 8000254:	4b2a      	ldr	r3, [pc, #168]	; (8000300 <rotary+0x1b4>)
 8000256:	429a      	cmp	r2, r3
 8000258:	da0b      	bge.n	8000272 <rotary+0x126>
 800025a:	683a      	ldr	r2, [r7, #0]
 800025c:	4b29      	ldr	r3, [pc, #164]	; (8000304 <rotary+0x1b8>)
 800025e:	429a      	cmp	r2, r3
 8000260:	db07      	blt.n	8000272 <rotary+0x126>
 8000262:	4b26      	ldr	r3, [pc, #152]	; (80002fc <rotary+0x1b0>)
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	b2db      	uxtb	r3, r3
 8000268:	3301      	adds	r3, #1
 800026a:	b2db      	uxtb	r3, r3
 800026c:	b2da      	uxtb	r2, r3
 800026e:	4b23      	ldr	r3, [pc, #140]	; (80002fc <rotary+0x1b0>)
 8000270:	701a      	strb	r2, [r3, #0]
	 if ((obrot<-135000 && obrot>-225000) || (obrot>135000 && obrot<225000))  ori+=2;
 8000272:	683a      	ldr	r2, [r7, #0]
 8000274:	4b24      	ldr	r3, [pc, #144]	; (8000308 <rotary+0x1bc>)
 8000276:	429a      	cmp	r2, r3
 8000278:	da03      	bge.n	8000282 <rotary+0x136>
 800027a:	683a      	ldr	r2, [r7, #0]
 800027c:	4b23      	ldr	r3, [pc, #140]	; (800030c <rotary+0x1c0>)
 800027e:	429a      	cmp	r2, r3
 8000280:	da07      	bge.n	8000292 <rotary+0x146>
 8000282:	683a      	ldr	r2, [r7, #0]
 8000284:	4b22      	ldr	r3, [pc, #136]	; (8000310 <rotary+0x1c4>)
 8000286:	429a      	cmp	r2, r3
 8000288:	dd0b      	ble.n	80002a2 <rotary+0x156>
 800028a:	683a      	ldr	r2, [r7, #0]
 800028c:	4b21      	ldr	r3, [pc, #132]	; (8000314 <rotary+0x1c8>)
 800028e:	429a      	cmp	r2, r3
 8000290:	dc07      	bgt.n	80002a2 <rotary+0x156>
 8000292:	4b1a      	ldr	r3, [pc, #104]	; (80002fc <rotary+0x1b0>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	b2db      	uxtb	r3, r3
 8000298:	3302      	adds	r3, #2
 800029a:	b2db      	uxtb	r3, r3
 800029c:	b2da      	uxtb	r2, r3
 800029e:	4b17      	ldr	r3, [pc, #92]	; (80002fc <rotary+0x1b0>)
 80002a0:	701a      	strb	r2, [r3, #0]

	 if(ori>4) ori-=4;
 80002a2:	4b16      	ldr	r3, [pc, #88]	; (80002fc <rotary+0x1b0>)
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	b25b      	sxtb	r3, r3
 80002a8:	2b04      	cmp	r3, #4
 80002aa:	dd07      	ble.n	80002bc <rotary+0x170>
 80002ac:	4b13      	ldr	r3, [pc, #76]	; (80002fc <rotary+0x1b0>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	3b04      	subs	r3, #4
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	b2da      	uxtb	r2, r3
 80002b8:	4b10      	ldr	r3, [pc, #64]	; (80002fc <rotary+0x1b0>)
 80002ba:	701a      	strb	r2, [r3, #0]
	 angle=0;
 80002bc:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <rotary+0x194>)
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
	 angle1=0;
 80002c2:	4b15      	ldr	r3, [pc, #84]	; (8000318 <rotary+0x1cc>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
	 integral=0;
 80002c8:	4b14      	ldr	r3, [pc, #80]	; (800031c <rotary+0x1d0>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
	 Transmit=1;
 80002ce:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <rotary+0x198>)
 80002d0:	2201      	movs	r2, #1
 80002d2:	701a      	strb	r2, [r3, #0]
//
}
 80002d4:	3710      	adds	r7, #16
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	20000100 	.word	0x20000100
 80002e0:	20000064 	.word	0x20000064
 80002e4:	2000008c 	.word	0x2000008c
 80002e8:	66666667 	.word	0x66666667
 80002ec:	40010800 	.word	0x40010800
 80002f0:	40011000 	.word	0x40011000
 80002f4:	40012c00 	.word	0x40012c00
 80002f8:	00020f57 	.word	0x00020f57
 80002fc:	20000007 	.word	0x20000007
 8000300:	ffff5038 	.word	0xffff5038
 8000304:	fffdf0a9 	.word	0xfffdf0a9
 8000308:	fffdf0a8 	.word	0xfffdf0a8
 800030c:	fffc9119 	.word	0xfffc9119
 8000310:	00020f58 	.word	0x00020f58
 8000314:	00036ee7 	.word	0x00036ee7
 8000318:	2000006c 	.word	0x2000006c
 800031c:	20000114 	.word	0x20000114

08000320 <drive>:

 }

/**************************************************************/
 void drive(int power)
 {
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
	uint8_t wall_left, wall_right;

	HAL_GPIO_WritePin(AIN1_GPIO_Port,AIN1_Pin,0);
 8000328:	4838      	ldr	r0, [pc, #224]	; (800040c <drive+0xec>)
 800032a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800032e:	2200      	movs	r2, #0
 8000330:	f005 ffdc 	bl	80062ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AIN2_GPIO_Port,AIN2_Pin,1);
 8000334:	4835      	ldr	r0, [pc, #212]	; (800040c <drive+0xec>)
 8000336:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800033a:	2201      	movs	r2, #1
 800033c:	f005 ffd6 	bl	80062ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIN1_GPIO_Port,BIN1_Pin,0);
 8000340:	4833      	ldr	r0, [pc, #204]	; (8000410 <drive+0xf0>)
 8000342:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000346:	2200      	movs	r2, #0
 8000348:	f005 ffd0 	bl	80062ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIN2_GPIO_Port,BIN2_Pin,1);
 800034c:	4830      	ldr	r0, [pc, #192]	; (8000410 <drive+0xf0>)
 800034e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000352:	2201      	movs	r2, #1
 8000354:	f005 ffca 	bl	80062ec <HAL_GPIO_WritePin>

	if(SensorTab[2][indexer]-dys0[2]<SL_Tresh && SensorTab[0][indexer]-dys0[0]<SL_Tresh) wall_left=0;
 8000358:	4b2e      	ldr	r3, [pc, #184]	; (8000414 <drive+0xf4>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	b25a      	sxtb	r2, r3
 800035e:	4b2e      	ldr	r3, [pc, #184]	; (8000418 <drive+0xf8>)
 8000360:	320a      	adds	r2, #10
 8000362:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000366:	4b2d      	ldr	r3, [pc, #180]	; (800041c <drive+0xfc>)
 8000368:	889b      	ldrh	r3, [r3, #4]
 800036a:	b29b      	uxth	r3, r3
 800036c:	1ad3      	subs	r3, r2, r3
 800036e:	f113 0f96 	cmn.w	r3, #150	; 0x96
 8000372:	da0f      	bge.n	8000394 <drive+0x74>
 8000374:	4b27      	ldr	r3, [pc, #156]	; (8000414 <drive+0xf4>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	b25a      	sxtb	r2, r3
 800037a:	4b27      	ldr	r3, [pc, #156]	; (8000418 <drive+0xf8>)
 800037c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000380:	4b26      	ldr	r3, [pc, #152]	; (800041c <drive+0xfc>)
 8000382:	881b      	ldrh	r3, [r3, #0]
 8000384:	b29b      	uxth	r3, r3
 8000386:	1ad3      	subs	r3, r2, r3
 8000388:	f113 0f96 	cmn.w	r3, #150	; 0x96
 800038c:	da02      	bge.n	8000394 <drive+0x74>
 800038e:	2300      	movs	r3, #0
 8000390:	73fb      	strb	r3, [r7, #15]
 8000392:	e001      	b.n	8000398 <drive+0x78>
	else wall_left=1;
 8000394:	2301      	movs	r3, #1
 8000396:	73fb      	strb	r3, [r7, #15]
	if(SensorTab[3][indexer]-dys0[3]<SR_Tresh && SensorTab[1][indexer]-dys0[1]<SR_Tresh) wall_right=0;
 8000398:	4b1e      	ldr	r3, [pc, #120]	; (8000414 <drive+0xf4>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	b25a      	sxtb	r2, r3
 800039e:	4b1e      	ldr	r3, [pc, #120]	; (8000418 <drive+0xf8>)
 80003a0:	320f      	adds	r2, #15
 80003a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003a6:	4b1d      	ldr	r3, [pc, #116]	; (800041c <drive+0xfc>)
 80003a8:	88db      	ldrh	r3, [r3, #6]
 80003aa:	b29b      	uxth	r3, r3
 80003ac:	1ad3      	subs	r3, r2, r3
 80003ae:	f113 0f96 	cmn.w	r3, #150	; 0x96
 80003b2:	da10      	bge.n	80003d6 <drive+0xb6>
 80003b4:	4b17      	ldr	r3, [pc, #92]	; (8000414 <drive+0xf4>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	b25a      	sxtb	r2, r3
 80003ba:	4b17      	ldr	r3, [pc, #92]	; (8000418 <drive+0xf8>)
 80003bc:	3205      	adds	r2, #5
 80003be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003c2:	4b16      	ldr	r3, [pc, #88]	; (800041c <drive+0xfc>)
 80003c4:	885b      	ldrh	r3, [r3, #2]
 80003c6:	b29b      	uxth	r3, r3
 80003c8:	1ad3      	subs	r3, r2, r3
 80003ca:	f113 0f96 	cmn.w	r3, #150	; 0x96
 80003ce:	da02      	bge.n	80003d6 <drive+0xb6>
 80003d0:	2300      	movs	r3, #0
 80003d2:	73bb      	strb	r3, [r7, #14]
 80003d4:	e001      	b.n	80003da <drive+0xba>
	else wall_right=1;
 80003d6:	2301      	movs	r3, #1
 80003d8:	73bb      	strb	r3, [r7, #14]

	change_wall=0;
 80003da:	4b11      	ldr	r3, [pc, #68]	; (8000420 <drive+0x100>)
 80003dc:	2200      	movs	r2, #0
 80003de:	701a      	strb	r2, [r3, #0]
	change_wall_1=0;
 80003e0:	4b10      	ldr	r3, [pc, #64]	; (8000424 <drive+0x104>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	701a      	strb	r2, [r3, #0]
	distance=0;
 80003e6:	4b10      	ldr	r3, [pc, #64]	; (8000428 <drive+0x108>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,0);
 80003ec:	480f      	ldr	r0, [pc, #60]	; (800042c <drive+0x10c>)
 80003ee:	2104      	movs	r1, #4
 80003f0:	2200      	movs	r2, #0
 80003f2:	f005 ff7b 	bl	80062ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,0);
 80003f6:	4806      	ldr	r0, [pc, #24]	; (8000410 <drive+0xf0>)
 80003f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003fc:	2200      	movs	r2, #0
 80003fe:	f005 ff75 	bl	80062ec <HAL_GPIO_WritePin>
//	{
//		angle1=SensorTab[3][indexer]-dys0[3]-(SensorTab[1][indexer]-dys0[1]);
//		angle1=angle1*5;
//	}

	tryb=1;
 8000402:	4b0b      	ldr	r3, [pc, #44]	; (8000430 <drive+0x110>)
 8000404:	2201      	movs	r2, #1
 8000406:	701a      	strb	r2, [r3, #0]
	while(distance<DISTANCE)
 8000408:	e111      	b.n	800062e <drive+0x30e>
 800040a:	bf00      	nop
 800040c:	40010800 	.word	0x40010800
 8000410:	40011000 	.word	0x40011000
 8000414:	20000074 	.word	0x20000074
 8000418:	200004b8 	.word	0x200004b8
 800041c:	20000050 	.word	0x20000050
 8000420:	2000042c 	.word	0x2000042c
 8000424:	20000530 	.word	0x20000530
 8000428:	20000068 	.word	0x20000068
 800042c:	40011400 	.word	0x40011400
 8000430:	20000075 	.word	0x20000075
	{
		lef_fr=SensorTab[2][indexer]-dys0[2];
 8000434:	4b99      	ldr	r3, [pc, #612]	; (800069c <drive+0x37c>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	b25a      	sxtb	r2, r3
 800043a:	4b99      	ldr	r3, [pc, #612]	; (80006a0 <drive+0x380>)
 800043c:	320a      	adds	r2, #10
 800043e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000442:	4b98      	ldr	r3, [pc, #608]	; (80006a4 <drive+0x384>)
 8000444:	889b      	ldrh	r3, [r3, #4]
 8000446:	b29b      	uxth	r3, r3
 8000448:	1ad2      	subs	r2, r2, r3
 800044a:	4b97      	ldr	r3, [pc, #604]	; (80006a8 <drive+0x388>)
 800044c:	601a      	str	r2, [r3, #0]
		lef_back=SensorTab[0][indexer]-dys0[0];
 800044e:	4b93      	ldr	r3, [pc, #588]	; (800069c <drive+0x37c>)
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	b25a      	sxtb	r2, r3
 8000454:	4b92      	ldr	r3, [pc, #584]	; (80006a0 <drive+0x380>)
 8000456:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800045a:	4b92      	ldr	r3, [pc, #584]	; (80006a4 <drive+0x384>)
 800045c:	881b      	ldrh	r3, [r3, #0]
 800045e:	b29b      	uxth	r3, r3
 8000460:	1ad2      	subs	r2, r2, r3
 8000462:	4b92      	ldr	r3, [pc, #584]	; (80006ac <drive+0x38c>)
 8000464:	601a      	str	r2, [r3, #0]
		rig_fr=SensorTab[3][indexer]-dys0[3];
 8000466:	4b8d      	ldr	r3, [pc, #564]	; (800069c <drive+0x37c>)
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	b25a      	sxtb	r2, r3
 800046c:	4b8c      	ldr	r3, [pc, #560]	; (80006a0 <drive+0x380>)
 800046e:	320f      	adds	r2, #15
 8000470:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000474:	4b8b      	ldr	r3, [pc, #556]	; (80006a4 <drive+0x384>)
 8000476:	88db      	ldrh	r3, [r3, #6]
 8000478:	b29b      	uxth	r3, r3
 800047a:	1ad2      	subs	r2, r2, r3
 800047c:	4b8c      	ldr	r3, [pc, #560]	; (80006b0 <drive+0x390>)
 800047e:	601a      	str	r2, [r3, #0]
		rig_back=SensorTab[1][indexer]-dys0[1];
 8000480:	4b86      	ldr	r3, [pc, #536]	; (800069c <drive+0x37c>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	b25a      	sxtb	r2, r3
 8000486:	4b86      	ldr	r3, [pc, #536]	; (80006a0 <drive+0x380>)
 8000488:	3205      	adds	r2, #5
 800048a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800048e:	4b85      	ldr	r3, [pc, #532]	; (80006a4 <drive+0x384>)
 8000490:	885b      	ldrh	r3, [r3, #2]
 8000492:	b29b      	uxth	r3, r3
 8000494:	1ad2      	subs	r2, r2, r3
 8000496:	4b87      	ldr	r3, [pc, #540]	; (80006b4 <drive+0x394>)
 8000498:	601a      	str	r2, [r3, #0]
		if(change_wall==0)
 800049a:	4b87      	ldr	r3, [pc, #540]	; (80006b8 <drive+0x398>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	f040 808f 	bne.w	80005c2 <drive+0x2a2>
		{
			if(SensorTab[2][indexer]-dys0[2]<SL_Tresh && wall_left==1 && SensorTab[0][indexer]-dys0[0]>SL_Tresh) change_wall=1;
 80004a4:	4b7d      	ldr	r3, [pc, #500]	; (800069c <drive+0x37c>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	b25a      	sxtb	r2, r3
 80004aa:	4b7d      	ldr	r3, [pc, #500]	; (80006a0 <drive+0x380>)
 80004ac:	320a      	adds	r2, #10
 80004ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004b2:	4b7c      	ldr	r3, [pc, #496]	; (80006a4 <drive+0x384>)
 80004b4:	889b      	ldrh	r3, [r3, #4]
 80004b6:	b29b      	uxth	r3, r3
 80004b8:	1ad3      	subs	r3, r2, r3
 80004ba:	f113 0f96 	cmn.w	r3, #150	; 0x96
 80004be:	da12      	bge.n	80004e6 <drive+0x1c6>
 80004c0:	7bfb      	ldrb	r3, [r7, #15]
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d10f      	bne.n	80004e6 <drive+0x1c6>
 80004c6:	4b75      	ldr	r3, [pc, #468]	; (800069c <drive+0x37c>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	b25a      	sxtb	r2, r3
 80004cc:	4b74      	ldr	r3, [pc, #464]	; (80006a0 <drive+0x380>)
 80004ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004d2:	4b74      	ldr	r3, [pc, #464]	; (80006a4 <drive+0x384>)
 80004d4:	881b      	ldrh	r3, [r3, #0]
 80004d6:	b29b      	uxth	r3, r3
 80004d8:	1ad3      	subs	r3, r2, r3
 80004da:	f113 0f95 	cmn.w	r3, #149	; 0x95
 80004de:	db02      	blt.n	80004e6 <drive+0x1c6>
 80004e0:	4b75      	ldr	r3, [pc, #468]	; (80006b8 <drive+0x398>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	701a      	strb	r2, [r3, #0]
			if(SensorTab[2][indexer]-dys0[2]>SL_Tresh && wall_left==0) change_wall=0;
 80004e6:	4b6d      	ldr	r3, [pc, #436]	; (800069c <drive+0x37c>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	b25a      	sxtb	r2, r3
 80004ec:	4b6c      	ldr	r3, [pc, #432]	; (80006a0 <drive+0x380>)
 80004ee:	320a      	adds	r2, #10
 80004f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004f4:	4b6b      	ldr	r3, [pc, #428]	; (80006a4 <drive+0x384>)
 80004f6:	889b      	ldrh	r3, [r3, #4]
 80004f8:	b29b      	uxth	r3, r3
 80004fa:	1ad3      	subs	r3, r2, r3
 80004fc:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8000500:	db05      	blt.n	800050e <drive+0x1ee>
 8000502:	7bfb      	ldrb	r3, [r7, #15]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d102      	bne.n	800050e <drive+0x1ee>
 8000508:	4b6b      	ldr	r3, [pc, #428]	; (80006b8 <drive+0x398>)
 800050a:	2200      	movs	r2, #0
 800050c:	701a      	strb	r2, [r3, #0]
			if(SensorTab[3][indexer]-dys0[3]<SR_Tresh && wall_right==1 && SensorTab[1][indexer]-dys0[1]>SR_Tresh) change_wall=2;
 800050e:	4b63      	ldr	r3, [pc, #396]	; (800069c <drive+0x37c>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	b25a      	sxtb	r2, r3
 8000514:	4b62      	ldr	r3, [pc, #392]	; (80006a0 <drive+0x380>)
 8000516:	320f      	adds	r2, #15
 8000518:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800051c:	4b61      	ldr	r3, [pc, #388]	; (80006a4 <drive+0x384>)
 800051e:	88db      	ldrh	r3, [r3, #6]
 8000520:	b29b      	uxth	r3, r3
 8000522:	1ad3      	subs	r3, r2, r3
 8000524:	f113 0f96 	cmn.w	r3, #150	; 0x96
 8000528:	da13      	bge.n	8000552 <drive+0x232>
 800052a:	7bbb      	ldrb	r3, [r7, #14]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d110      	bne.n	8000552 <drive+0x232>
 8000530:	4b5a      	ldr	r3, [pc, #360]	; (800069c <drive+0x37c>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	b25a      	sxtb	r2, r3
 8000536:	4b5a      	ldr	r3, [pc, #360]	; (80006a0 <drive+0x380>)
 8000538:	3205      	adds	r2, #5
 800053a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800053e:	4b59      	ldr	r3, [pc, #356]	; (80006a4 <drive+0x384>)
 8000540:	885b      	ldrh	r3, [r3, #2]
 8000542:	b29b      	uxth	r3, r3
 8000544:	1ad3      	subs	r3, r2, r3
 8000546:	f113 0f95 	cmn.w	r3, #149	; 0x95
 800054a:	db02      	blt.n	8000552 <drive+0x232>
 800054c:	4b5a      	ldr	r3, [pc, #360]	; (80006b8 <drive+0x398>)
 800054e:	2202      	movs	r2, #2
 8000550:	701a      	strb	r2, [r3, #0]
			if(SensorTab[3][indexer]-dys0[3]>SR_Tresh && wall_right==0) change_wall=0;
 8000552:	4b52      	ldr	r3, [pc, #328]	; (800069c <drive+0x37c>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	b25a      	sxtb	r2, r3
 8000558:	4b51      	ldr	r3, [pc, #324]	; (80006a0 <drive+0x380>)
 800055a:	320f      	adds	r2, #15
 800055c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000560:	4b50      	ldr	r3, [pc, #320]	; (80006a4 <drive+0x384>)
 8000562:	88db      	ldrh	r3, [r3, #6]
 8000564:	b29b      	uxth	r3, r3
 8000566:	1ad3      	subs	r3, r2, r3
 8000568:	f113 0f95 	cmn.w	r3, #149	; 0x95
 800056c:	db05      	blt.n	800057a <drive+0x25a>
 800056e:	7bbb      	ldrb	r3, [r7, #14]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d102      	bne.n	800057a <drive+0x25a>
 8000574:	4b50      	ldr	r3, [pc, #320]	; (80006b8 <drive+0x398>)
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]

			if (change_wall==1)
 800057a:	4b4f      	ldr	r3, [pc, #316]	; (80006b8 <drive+0x398>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d10d      	bne.n	800059e <drive+0x27e>
			{
				HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,1);
 8000582:	484e      	ldr	r0, [pc, #312]	; (80006bc <drive+0x39c>)
 8000584:	2104      	movs	r1, #4
 8000586:	2201      	movs	r2, #1
 8000588:	f005 feb0 	bl	80062ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,0);
 800058c:	484c      	ldr	r0, [pc, #304]	; (80006c0 <drive+0x3a0>)
 800058e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000592:	2200      	movs	r2, #0
 8000594:	f005 feaa 	bl	80062ec <HAL_GPIO_WritePin>
				distance=80000;
 8000598:	4b4a      	ldr	r3, [pc, #296]	; (80006c4 <drive+0x3a4>)
 800059a:	4a4b      	ldr	r2, [pc, #300]	; (80006c8 <drive+0x3a8>)
 800059c:	601a      	str	r2, [r3, #0]
			}
			if (change_wall==2)
 800059e:	4b46      	ldr	r3, [pc, #280]	; (80006b8 <drive+0x398>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	2b02      	cmp	r3, #2
 80005a4:	d10d      	bne.n	80005c2 <drive+0x2a2>
			{
				HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,0);
 80005a6:	4845      	ldr	r0, [pc, #276]	; (80006bc <drive+0x39c>)
 80005a8:	2104      	movs	r1, #4
 80005aa:	2200      	movs	r2, #0
 80005ac:	f005 fe9e 	bl	80062ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,1);
 80005b0:	4843      	ldr	r0, [pc, #268]	; (80006c0 <drive+0x3a0>)
 80005b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b6:	2201      	movs	r2, #1
 80005b8:	f005 fe98 	bl	80062ec <HAL_GPIO_WritePin>
				distance=80000;
 80005bc:	4b41      	ldr	r3, [pc, #260]	; (80006c4 <drive+0x3a4>)
 80005be:	4a42      	ldr	r2, [pc, #264]	; (80006c8 <drive+0x3a8>)
 80005c0:	601a      	str	r2, [r3, #0]
			}
		}
		if(change_wall_1==0)
 80005c2:	4b42      	ldr	r3, [pc, #264]	; (80006cc <drive+0x3ac>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d131      	bne.n	800062e <drive+0x30e>
		{
			if(lef_fr>SL_Tresh && wall_left==0 && lef_back>SL_Tresh) change_wall_1=1;
 80005ca:	4b37      	ldr	r3, [pc, #220]	; (80006a8 <drive+0x388>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f113 0f95 	cmn.w	r3, #149	; 0x95
 80005d2:	db0a      	blt.n	80005ea <drive+0x2ca>
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d107      	bne.n	80005ea <drive+0x2ca>
 80005da:	4b34      	ldr	r3, [pc, #208]	; (80006ac <drive+0x38c>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f113 0f95 	cmn.w	r3, #149	; 0x95
 80005e2:	db02      	blt.n	80005ea <drive+0x2ca>
 80005e4:	4b39      	ldr	r3, [pc, #228]	; (80006cc <drive+0x3ac>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	701a      	strb	r2, [r3, #0]
			if(rig_fr>SR_Tresh && wall_right==0 && rig_back>SR_Tresh) change_wall_1=2;
 80005ea:	4b31      	ldr	r3, [pc, #196]	; (80006b0 <drive+0x390>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f113 0f95 	cmn.w	r3, #149	; 0x95
 80005f2:	db0a      	blt.n	800060a <drive+0x2ea>
 80005f4:	7bbb      	ldrb	r3, [r7, #14]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d107      	bne.n	800060a <drive+0x2ea>
 80005fa:	4b2e      	ldr	r3, [pc, #184]	; (80006b4 <drive+0x394>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8000602:	db02      	blt.n	800060a <drive+0x2ea>
 8000604:	4b31      	ldr	r3, [pc, #196]	; (80006cc <drive+0x3ac>)
 8000606:	2202      	movs	r2, #2
 8000608:	701a      	strb	r2, [r3, #0]

			if (change_wall_1==1)
 800060a:	4b30      	ldr	r3, [pc, #192]	; (80006cc <drive+0x3ac>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d10d      	bne.n	800062e <drive+0x30e>
			{
				HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,1);
 8000612:	482a      	ldr	r0, [pc, #168]	; (80006bc <drive+0x39c>)
 8000614:	2104      	movs	r1, #4
 8000616:	2201      	movs	r2, #1
 8000618:	f005 fe68 	bl	80062ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,1);
 800061c:	4828      	ldr	r0, [pc, #160]	; (80006c0 <drive+0x3a0>)
 800061e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000622:	2201      	movs	r2, #1
 8000624:	f005 fe62 	bl	80062ec <HAL_GPIO_WritePin>
				distance=100000;
 8000628:	4b26      	ldr	r3, [pc, #152]	; (80006c4 <drive+0x3a4>)
 800062a:	4a29      	ldr	r2, [pc, #164]	; (80006d0 <drive+0x3b0>)
 800062c:	601a      	str	r2, [r3, #0]
//		angle1=SensorTab[3][indexer]-dys0[3]-(SensorTab[1][indexer]-dys0[1]);
//		angle1=angle1*5;
//	}

	tryb=1;
	while(distance<DISTANCE)
 800062e:	4b25      	ldr	r3, [pc, #148]	; (80006c4 <drive+0x3a4>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <drive+0x3b4>)
 8000634:	429a      	cmp	r2, r3
 8000636:	f77f aefd 	ble.w	8000434 <drive+0x114>
			}
		}

	}

   	tryb=0;
 800063a:	4b27      	ldr	r3, [pc, #156]	; (80006d8 <drive+0x3b8>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]

	TIM1->CCR1=0;
 8000640:	4b26      	ldr	r3, [pc, #152]	; (80006dc <drive+0x3bc>)
 8000642:	2200      	movs	r2, #0
 8000644:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=0;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <drive+0x3bc>)
 8000648:	2200      	movs	r2, #0
 800064a:	639a      	str	r2, [r3, #56]	; 0x38

	if (ori==1) y++;
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <drive+0x3c0>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	b25b      	sxtb	r3, r3
 8000652:	2b01      	cmp	r3, #1
 8000654:	d107      	bne.n	8000666 <drive+0x346>
 8000656:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <drive+0x3c4>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	b2db      	uxtb	r3, r3
 800065c:	3301      	adds	r3, #1
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <drive+0x3c4>)
 8000662:	701a      	strb	r2, [r3, #0]
 8000664:	e04e      	b.n	8000704 <drive+0x3e4>
	else if(ori==2) x++;
 8000666:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <drive+0x3c0>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	b25b      	sxtb	r3, r3
 800066c:	2b02      	cmp	r3, #2
 800066e:	d107      	bne.n	8000680 <drive+0x360>
 8000670:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <drive+0x3c8>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	3301      	adds	r3, #1
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <drive+0x3c8>)
 800067c:	701a      	strb	r2, [r3, #0]
 800067e:	e041      	b.n	8000704 <drive+0x3e4>
	else if(ori==3) y--;
 8000680:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <drive+0x3c0>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	b25b      	sxtb	r3, r3
 8000686:	2b03      	cmp	r3, #3
 8000688:	d130      	bne.n	80006ec <drive+0x3cc>
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <drive+0x3c4>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	b2db      	uxtb	r3, r3
 8000690:	3b01      	subs	r3, #1
 8000692:	b2da      	uxtb	r2, r3
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <drive+0x3c4>)
 8000696:	701a      	strb	r2, [r3, #0]
 8000698:	e034      	b.n	8000704 <drive+0x3e4>
 800069a:	bf00      	nop
 800069c:	20000074 	.word	0x20000074
 80006a0:	200004b8 	.word	0x200004b8
 80006a4:	20000050 	.word	0x20000050
 80006a8:	200000f8 	.word	0x200000f8
 80006ac:	20000094 	.word	0x20000094
 80006b0:	200000b4 	.word	0x200000b4
 80006b4:	2000007c 	.word	0x2000007c
 80006b8:	2000042c 	.word	0x2000042c
 80006bc:	40011400 	.word	0x40011400
 80006c0:	40011000 	.word	0x40011000
 80006c4:	20000068 	.word	0x20000068
 80006c8:	00013880 	.word	0x00013880
 80006cc:	20000530 	.word	0x20000530
 80006d0:	000186a0 	.word	0x000186a0
 80006d4:	00026f0b 	.word	0x00026f0b
 80006d8:	20000075 	.word	0x20000075
 80006dc:	40012c00 	.word	0x40012c00
 80006e0:	20000007 	.word	0x20000007
 80006e4:	20000006 	.word	0x20000006
 80006e8:	20000005 	.word	0x20000005
	else if(ori==4) x--;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <drive+0x3ec>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	b25b      	sxtb	r3, r3
 80006f2:	2b04      	cmp	r3, #4
 80006f4:	d106      	bne.n	8000704 <drive+0x3e4>
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <drive+0x3f0>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	3b01      	subs	r3, #1
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b03      	ldr	r3, [pc, #12]	; (8000710 <drive+0x3f0>)
 8000702:	701a      	strb	r2, [r3, #0]

 }
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000007 	.word	0x20000007
 8000710:	20000005 	.word	0x20000005

08000714 <istarget>:
/****************************************************/
int istarget(int i1, int j1)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]

	if (target[0]==target[1])
 800071e:	4b2b      	ldr	r3, [pc, #172]	; (80007cc <istarget+0xb8>)
 8000720:	781a      	ldrb	r2, [r3, #0]
 8000722:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <istarget+0xb8>)
 8000724:	785b      	ldrb	r3, [r3, #1]
 8000726:	b252      	sxtb	r2, r2
 8000728:	b25b      	sxtb	r3, r3
 800072a:	429a      	cmp	r2, r3
 800072c:	d10f      	bne.n	800074e <istarget+0x3a>
	{
		if(target[0]==i1&&target[0]==j1)return 1;
 800072e:	4b27      	ldr	r3, [pc, #156]	; (80007cc <istarget+0xb8>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	b25a      	sxtb	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	429a      	cmp	r2, r3
 8000738:	d107      	bne.n	800074a <istarget+0x36>
 800073a:	4b24      	ldr	r3, [pc, #144]	; (80007cc <istarget+0xb8>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	b25a      	sxtb	r2, r3
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	429a      	cmp	r2, r3
 8000744:	d101      	bne.n	800074a <istarget+0x36>
 8000746:	2301      	movs	r3, #1
 8000748:	e03a      	b.n	80007c0 <istarget+0xac>
		else return 0;
 800074a:	2300      	movs	r3, #0
 800074c:	e038      	b.n	80007c0 <istarget+0xac>
	}
	else
	{
		if(target[0]==i1&&target[0]==j1)return 1;
 800074e:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <istarget+0xb8>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	b25a      	sxtb	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	429a      	cmp	r2, r3
 8000758:	d107      	bne.n	800076a <istarget+0x56>
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <istarget+0xb8>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	b25a      	sxtb	r2, r3
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	429a      	cmp	r2, r3
 8000764:	d101      	bne.n	800076a <istarget+0x56>
 8000766:	2301      	movs	r3, #1
 8000768:	e02a      	b.n	80007c0 <istarget+0xac>
		else if(target[1]==i1&&target[0]==j1)return 1;
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <istarget+0xb8>)
 800076c:	785b      	ldrb	r3, [r3, #1]
 800076e:	b25a      	sxtb	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	429a      	cmp	r2, r3
 8000774:	d107      	bne.n	8000786 <istarget+0x72>
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <istarget+0xb8>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	b25a      	sxtb	r2, r3
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	429a      	cmp	r2, r3
 8000780:	d101      	bne.n	8000786 <istarget+0x72>
 8000782:	2301      	movs	r3, #1
 8000784:	e01c      	b.n	80007c0 <istarget+0xac>
		else if(target[0]==i1&&target[1]==j1)return 1;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <istarget+0xb8>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	b25a      	sxtb	r2, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	429a      	cmp	r2, r3
 8000790:	d107      	bne.n	80007a2 <istarget+0x8e>
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <istarget+0xb8>)
 8000794:	785b      	ldrb	r3, [r3, #1]
 8000796:	b25a      	sxtb	r2, r3
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	429a      	cmp	r2, r3
 800079c:	d101      	bne.n	80007a2 <istarget+0x8e>
 800079e:	2301      	movs	r3, #1
 80007a0:	e00e      	b.n	80007c0 <istarget+0xac>
		else if(target[1]==i1&&target[1]==j1)return 1;
 80007a2:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <istarget+0xb8>)
 80007a4:	785b      	ldrb	r3, [r3, #1]
 80007a6:	b25a      	sxtb	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d107      	bne.n	80007be <istarget+0xaa>
 80007ae:	4b07      	ldr	r3, [pc, #28]	; (80007cc <istarget+0xb8>)
 80007b0:	785b      	ldrb	r3, [r3, #1]
 80007b2:	b25a      	sxtb	r2, r3
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d101      	bne.n	80007be <istarget+0xaa>
 80007ba:	2301      	movs	r3, #1
 80007bc:	e000      	b.n	80007c0 <istarget+0xac>
		else return 0;
 80007be:	2300      	movs	r3, #0
	}
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	20000008 	.word	0x20000008

080007d0 <findPath>:
/****************************************************/
void findPath()
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
	int curx=x;
 80007d6:	4b2e      	ldr	r3, [pc, #184]	; (8000890 <findPath+0xc0>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	b25b      	sxtb	r3, r3
 80007dc:	60fb      	str	r3, [r7, #12]
	int cury=y;
 80007de:	4b2d      	ldr	r3, [pc, #180]	; (8000894 <findPath+0xc4>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	b25b      	sxtb	r3, r3
 80007e4:	60bb      	str	r3, [r7, #8]
	int iter=0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
	int v;
	for (v=0; v<256; v++) path[v]=-1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	e007      	b.n	8000800 <findPath+0x30>
 80007f0:	4a29      	ldr	r2, [pc, #164]	; (8000898 <findPath+0xc8>)
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	4413      	add	r3, r2
 80007f6:	22ff      	movs	r2, #255	; 0xff
 80007f8:	701a      	strb	r2, [r3, #0]
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	3301      	adds	r3, #1
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	2bff      	cmp	r3, #255	; 0xff
 8000804:	ddf4      	ble.n	80007f0 <findPath+0x20>
	while(1)
	{
		path[iter]=lowestNeighbourCell(curx, cury);
 8000806:	68f8      	ldr	r0, [r7, #12]
 8000808:	68b9      	ldr	r1, [r7, #8]
 800080a:	f000 fc63 	bl	80010d4 <lowestNeighbourCell>
 800080e:	4603      	mov	r3, r0
 8000810:	461a      	mov	r2, r3
 8000812:	4921      	ldr	r1, [pc, #132]	; (8000898 <findPath+0xc8>)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	440b      	add	r3, r1
 8000818:	701a      	strb	r2, [r3, #0]
                if( path[iter]==1) cury++;
 800081a:	4a1f      	ldr	r2, [pc, #124]	; (8000898 <findPath+0xc8>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4413      	add	r3, r2
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	b25b      	sxtb	r3, r3
 8000824:	2b01      	cmp	r3, #1
 8000826:	d103      	bne.n	8000830 <findPath+0x60>
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	3301      	adds	r3, #1
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	e01f      	b.n	8000870 <findPath+0xa0>
                else if (path[iter]==2) curx++;
 8000830:	4a19      	ldr	r2, [pc, #100]	; (8000898 <findPath+0xc8>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4413      	add	r3, r2
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	b25b      	sxtb	r3, r3
 800083a:	2b02      	cmp	r3, #2
 800083c:	d103      	bne.n	8000846 <findPath+0x76>
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	3301      	adds	r3, #1
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	e014      	b.n	8000870 <findPath+0xa0>
                else if (path[iter]==3) cury--;
 8000846:	4a14      	ldr	r2, [pc, #80]	; (8000898 <findPath+0xc8>)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4413      	add	r3, r2
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	b25b      	sxtb	r3, r3
 8000850:	2b03      	cmp	r3, #3
 8000852:	d103      	bne.n	800085c <findPath+0x8c>
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	3b01      	subs	r3, #1
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	e009      	b.n	8000870 <findPath+0xa0>
                else if (path[iter]==4) curx--;
 800085c:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <findPath+0xc8>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4413      	add	r3, r2
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b25b      	sxtb	r3, r3
 8000866:	2b04      	cmp	r3, #4
 8000868:	d102      	bne.n	8000870 <findPath+0xa0>
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	3b01      	subs	r3, #1
 800086e:	60fb      	str	r3, [r7, #12]
		if(istarget(curx,cury)==1) break;
 8000870:	68f8      	ldr	r0, [r7, #12]
 8000872:	68b9      	ldr	r1, [r7, #8]
 8000874:	f7ff ff4e 	bl	8000714 <istarget>
 8000878:	4603      	mov	r3, r0
 800087a:	2b01      	cmp	r3, #1
 800087c:	d100      	bne.n	8000880 <findPath+0xb0>
 800087e:	e003      	b.n	8000888 <findPath+0xb8>
		iter++;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3301      	adds	r3, #1
 8000884:	607b      	str	r3, [r7, #4]
	}
 8000886:	e7be      	b.n	8000806 <findPath+0x36>
//	start=0;
}
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000005 	.word	0x20000005
 8000894:	20000006 	.word	0x20000006
 8000898:	20000138 	.word	0x20000138

0800089c <readPath>:
/****************************************************/
void readPath()
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
	int iter=0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
	while(1)
	{
		if (path[iter]>0)
 80008a6:	4a11      	ldr	r2, [pc, #68]	; (80008ec <readPath+0x50>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4413      	add	r3, r2
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	b25b      	sxtb	r3, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	dd0b      	ble.n	80008cc <readPath+0x30>
		{
			state=path[iter];
 80008b4:	4a0d      	ldr	r2, [pc, #52]	; (80008ec <readPath+0x50>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4413      	add	r3, r2
 80008ba:	781a      	ldrb	r2, [r3, #0]
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <readPath+0x54>)
 80008be:	701a      	strb	r2, [r3, #0]
			path[iter]=-1;
 80008c0:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <readPath+0x50>)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	22ff      	movs	r2, #255	; 0xff
 80008c8:	701a      	strb	r2, [r3, #0]
			break;
 80008ca:	e00a      	b.n	80008e2 <readPath+0x46>
		}
		iter++;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3301      	adds	r3, #1
 80008d0:	607b      	str	r3, [r7, #4]
		if (iter>255)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2bff      	cmp	r3, #255	; 0xff
 80008d6:	dd03      	ble.n	80008e0 <readPath+0x44>
		{
			state=-1;
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <readPath+0x54>)
 80008da:	22ff      	movs	r2, #255	; 0xff
 80008dc:	701a      	strb	r2, [r3, #0]
			break;
 80008de:	e000      	b.n	80008e2 <readPath+0x46>
		}
	}
 80008e0:	e7e1      	b.n	80008a6 <readPath+0xa>
}
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	20000138 	.word	0x20000138
 80008f0:	20000076 	.word	0x20000076

080008f4 <set>:
/****************************************************/
void set()
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	if (state-ori==1 || state-ori==-3) rotary(VELR,90000/*+angle/2*/);
 80008f8:	4b25      	ldr	r3, [pc, #148]	; (8000990 <set+0x9c>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b25a      	sxtb	r2, r3
 80008fe:	4b25      	ldr	r3, [pc, #148]	; (8000994 <set+0xa0>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	b25b      	sxtb	r3, r3
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	2b01      	cmp	r3, #1
 8000908:	d009      	beq.n	800091e <set+0x2a>
 800090a:	4b21      	ldr	r3, [pc, #132]	; (8000990 <set+0x9c>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b25a      	sxtb	r2, r3
 8000910:	4b20      	ldr	r3, [pc, #128]	; (8000994 <set+0xa0>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	b25b      	sxtb	r3, r3
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	f113 0f03 	cmn.w	r3, #3
 800091c:	d105      	bne.n	800092a <set+0x36>
 800091e:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000922:	491d      	ldr	r1, [pc, #116]	; (8000998 <set+0xa4>)
 8000924:	f7ff fc12 	bl	800014c <rotary>
 8000928:	e030      	b.n	800098c <set+0x98>
	else if (state-ori==2 || state-ori==-2) rotary(VELR,180000/*+angle/2*/);
 800092a:	4b19      	ldr	r3, [pc, #100]	; (8000990 <set+0x9c>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	b25a      	sxtb	r2, r3
 8000930:	4b18      	ldr	r3, [pc, #96]	; (8000994 <set+0xa0>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	b25b      	sxtb	r3, r3
 8000936:	1ad3      	subs	r3, r2, r3
 8000938:	2b02      	cmp	r3, #2
 800093a:	d009      	beq.n	8000950 <set+0x5c>
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <set+0x9c>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	b25a      	sxtb	r2, r3
 8000942:	4b14      	ldr	r3, [pc, #80]	; (8000994 <set+0xa0>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	b25b      	sxtb	r3, r3
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	f113 0f02 	cmn.w	r3, #2
 800094e:	d105      	bne.n	800095c <set+0x68>
 8000950:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000954:	4911      	ldr	r1, [pc, #68]	; (800099c <set+0xa8>)
 8000956:	f7ff fbf9 	bl	800014c <rotary>
 800095a:	e017      	b.n	800098c <set+0x98>
	else if (state-ori==3 || state-ori==-1) rotary(VELR,-95000/*+angle/2*/);
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <set+0x9c>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	b25a      	sxtb	r2, r3
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <set+0xa0>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	b25b      	sxtb	r3, r3
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	2b03      	cmp	r3, #3
 800096c:	d009      	beq.n	8000982 <set+0x8e>
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <set+0x9c>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	b25a      	sxtb	r2, r3
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <set+0xa0>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b25b      	sxtb	r3, r3
 800097a:	1ad3      	subs	r3, r2, r3
 800097c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000980:	d104      	bne.n	800098c <set+0x98>
 8000982:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000986:	4906      	ldr	r1, [pc, #24]	; (80009a0 <set+0xac>)
 8000988:	f7ff fbe0 	bl	800014c <rotary>
}
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000076 	.word	0x20000076
 8000994:	20000007 	.word	0x20000007
 8000998:	00015f90 	.word	0x00015f90
 800099c:	0002bf20 	.word	0x0002bf20
 80009a0:	fffe8ce8 	.word	0xfffe8ce8

080009a4 <rstdrive>:
/****************************************************/
void rstdrive()
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
//	int8_t i1;
//    static int licznik=0;
    mapCell();
 80009a8:	f000 f822 	bl	80009f0 <mapCell>

	x=1;
 80009ac:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <rstdrive+0x38>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	701a      	strb	r2, [r3, #0]
	y=1;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <rstdrive+0x3c>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	701a      	strb	r2, [r3, #0]
	ori=ORI_START;
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <rstdrive+0x40>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	701a      	strb	r2, [r3, #0]
        flood();
 80009be:	f000 fce9 	bl	8001394 <flood>
	findPath();
 80009c2:	f7ff ff05 	bl	80007d0 <findPath>
	Status=STOP_STATUS;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <rstdrive+0x44>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
//	while (Status==STOP_STATUS) HAL_Delay(50);

//	for(i1=0;i1<4;i1++) dys0[i1]=SensorTab[i1];
	HAL_Delay(1000);
 80009cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009d0:	f006 fe72 	bl	80076b8 <HAL_Delay>
	angle=0;
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <rstdrive+0x48>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]

}
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000005 	.word	0x20000005
 80009e0:	20000006 	.word	0x20000006
 80009e4:	20000007 	.word	0x20000007
 80009e8:	20000060 	.word	0x20000060
 80009ec:	20000064 	.word	0x20000064

080009f0 <mapCell>:
/****************************************************/
void mapCell()
{
 80009f0:	b4b0      	push	{r4, r5, r7}
 80009f2:	b089      	sub	sp, #36	; 0x24
 80009f4:	af00      	add	r7, sp, #0
	int8_t i;
	int32_t czujnik[6];

	for (i=0;i<6;i++) czujnik[i]=SensorTab[i][indexer]-dys0[i];
 80009f6:	2300      	movs	r3, #0
 80009f8:	77fb      	strb	r3, [r7, #31]
 80009fa:	e01d      	b.n	8000a38 <mapCell+0x48>
 80009fc:	f997 101f 	ldrsb.w	r1, [r7, #31]
 8000a00:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8000a04:	4b99      	ldr	r3, [pc, #612]	; (8000c6c <mapCell+0x27c>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b25c      	sxtb	r4, r3
 8000a0a:	4899      	ldr	r0, [pc, #612]	; (8000c70 <mapCell+0x280>)
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	4413      	add	r3, r2
 8000a12:	4423      	add	r3, r4
 8000a14:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8000a18:	f997 001f 	ldrsb.w	r0, [r7, #31]
 8000a1c:	4b95      	ldr	r3, [pc, #596]	; (8000c74 <mapCell+0x284>)
 8000a1e:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	1ad2      	subs	r2, r2, r3
 8000a26:	008b      	lsls	r3, r1, #2
 8000a28:	f107 0120 	add.w	r1, r7, #32
 8000a2c:	440b      	add	r3, r1
 8000a2e:	f843 2c1c 	str.w	r2, [r3, #-28]
 8000a32:	7ffb      	ldrb	r3, [r7, #31]
 8000a34:	3301      	adds	r3, #1
 8000a36:	77fb      	strb	r3, [r7, #31]
 8000a38:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000a3c:	2b05      	cmp	r3, #5
 8000a3e:	dddd      	ble.n	80009fc <mapCell+0xc>
	walls[x][y]=0;
 8000a40:	4b8d      	ldr	r3, [pc, #564]	; (8000c78 <mapCell+0x288>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	b25a      	sxtb	r2, r3
 8000a46:	4b8d      	ldr	r3, [pc, #564]	; (8000c7c <mapCell+0x28c>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	b258      	sxtb	r0, r3
 8000a4c:	498c      	ldr	r1, [pc, #560]	; (8000c80 <mapCell+0x290>)
 8000a4e:	4613      	mov	r3, r2
 8000a50:	00db      	lsls	r3, r3, #3
 8000a52:	4413      	add	r3, r2
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	4403      	add	r3, r0
 8000a58:	440b      	add	r3, r1
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	701a      	strb	r2, [r3, #0]
	if(ori==1)
 8000a5e:	4b89      	ldr	r3, [pc, #548]	; (8000c84 <mapCell+0x294>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	b25b      	sxtb	r3, r3
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d17d      	bne.n	8000b64 <mapCell+0x174>
	{
		if (czujnik[2] > SL_Tresh && czujnik[0] > SL_Tresh) walls[x][y]+=8;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8000a6e:	db24      	blt.n	8000aba <mapCell+0xca>
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8000a76:	db20      	blt.n	8000aba <mapCell+0xca>
 8000a78:	4b7f      	ldr	r3, [pc, #508]	; (8000c78 <mapCell+0x288>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	b25a      	sxtb	r2, r3
 8000a7e:	4b7f      	ldr	r3, [pc, #508]	; (8000c7c <mapCell+0x28c>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	b25c      	sxtb	r4, r3
 8000a84:	4b7c      	ldr	r3, [pc, #496]	; (8000c78 <mapCell+0x288>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	b259      	sxtb	r1, r3
 8000a8a:	4b7c      	ldr	r3, [pc, #496]	; (8000c7c <mapCell+0x28c>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	b25d      	sxtb	r5, r3
 8000a90:	487b      	ldr	r0, [pc, #492]	; (8000c80 <mapCell+0x290>)
 8000a92:	460b      	mov	r3, r1
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	440b      	add	r3, r1
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	442b      	add	r3, r5
 8000a9c:	4403      	add	r3, r0
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	3308      	adds	r3, #8
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	b2d9      	uxtb	r1, r3
 8000aa8:	4875      	ldr	r0, [pc, #468]	; (8000c80 <mapCell+0x290>)
 8000aaa:	4613      	mov	r3, r2
 8000aac:	00db      	lsls	r3, r3, #3
 8000aae:	4413      	add	r3, r2
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	4423      	add	r3, r4
 8000ab4:	4403      	add	r3, r0
 8000ab6:	460a      	mov	r2, r1
 8000ab8:	701a      	strb	r2, [r3, #0]
		if (czujnik[4] > SF_Tresh && czujnik[5] > SF_Tresh) walls[x][y]+=1;
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	f113 0fdb 	cmn.w	r3, #219	; 0xdb
 8000ac0:	db24      	blt.n	8000b0c <mapCell+0x11c>
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	f113 0fdb 	cmn.w	r3, #219	; 0xdb
 8000ac8:	db20      	blt.n	8000b0c <mapCell+0x11c>
 8000aca:	4b6b      	ldr	r3, [pc, #428]	; (8000c78 <mapCell+0x288>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	b25a      	sxtb	r2, r3
 8000ad0:	4b6a      	ldr	r3, [pc, #424]	; (8000c7c <mapCell+0x28c>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	b25c      	sxtb	r4, r3
 8000ad6:	4b68      	ldr	r3, [pc, #416]	; (8000c78 <mapCell+0x288>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	b259      	sxtb	r1, r3
 8000adc:	4b67      	ldr	r3, [pc, #412]	; (8000c7c <mapCell+0x28c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	b25d      	sxtb	r5, r3
 8000ae2:	4867      	ldr	r0, [pc, #412]	; (8000c80 <mapCell+0x290>)
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	00db      	lsls	r3, r3, #3
 8000ae8:	440b      	add	r3, r1
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	442b      	add	r3, r5
 8000aee:	4403      	add	r3, r0
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	3301      	adds	r3, #1
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	b2d9      	uxtb	r1, r3
 8000afa:	4861      	ldr	r0, [pc, #388]	; (8000c80 <mapCell+0x290>)
 8000afc:	4613      	mov	r3, r2
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	4413      	add	r3, r2
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	4423      	add	r3, r4
 8000b06:	4403      	add	r3, r0
 8000b08:	460a      	mov	r2, r1
 8000b0a:	701a      	strb	r2, [r3, #0]
		if (czujnik[3] > SR_Tresh && czujnik[1] > SR_Tresh) walls[x][y]+=2;
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8000b12:	f2c0 81bc 	blt.w	8000e8e <mapCell+0x49e>
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8000b1c:	f2c0 81b7 	blt.w	8000e8e <mapCell+0x49e>
 8000b20:	4b55      	ldr	r3, [pc, #340]	; (8000c78 <mapCell+0x288>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	b25a      	sxtb	r2, r3
 8000b26:	4b55      	ldr	r3, [pc, #340]	; (8000c7c <mapCell+0x28c>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	b25c      	sxtb	r4, r3
 8000b2c:	4b52      	ldr	r3, [pc, #328]	; (8000c78 <mapCell+0x288>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	b259      	sxtb	r1, r3
 8000b32:	4b52      	ldr	r3, [pc, #328]	; (8000c7c <mapCell+0x28c>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	b25d      	sxtb	r5, r3
 8000b38:	4851      	ldr	r0, [pc, #324]	; (8000c80 <mapCell+0x290>)
 8000b3a:	460b      	mov	r3, r1
 8000b3c:	00db      	lsls	r3, r3, #3
 8000b3e:	440b      	add	r3, r1
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	442b      	add	r3, r5
 8000b44:	4403      	add	r3, r0
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	3302      	adds	r3, #2
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	b2d9      	uxtb	r1, r3
 8000b50:	484b      	ldr	r0, [pc, #300]	; (8000c80 <mapCell+0x290>)
 8000b52:	4613      	mov	r3, r2
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	4413      	add	r3, r2
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	4423      	add	r3, r4
 8000b5c:	4403      	add	r3, r0
 8000b5e:	460a      	mov	r2, r1
 8000b60:	701a      	strb	r2, [r3, #0]
 8000b62:	e194      	b.n	8000e8e <mapCell+0x49e>
	}
	else if(ori==2)
 8000b64:	4b47      	ldr	r3, [pc, #284]	; (8000c84 <mapCell+0x294>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	b25b      	sxtb	r3, r3
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	f040 808c 	bne.w	8000c88 <mapCell+0x298>
	{
		if (czujnik[2] > SL_Tresh && czujnik[0] > SL_Tresh) walls[x][y]+=1;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8000b76:	db24      	blt.n	8000bc2 <mapCell+0x1d2>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8000b7e:	db20      	blt.n	8000bc2 <mapCell+0x1d2>
 8000b80:	4b3d      	ldr	r3, [pc, #244]	; (8000c78 <mapCell+0x288>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	b25a      	sxtb	r2, r3
 8000b86:	4b3d      	ldr	r3, [pc, #244]	; (8000c7c <mapCell+0x28c>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	b25c      	sxtb	r4, r3
 8000b8c:	4b3a      	ldr	r3, [pc, #232]	; (8000c78 <mapCell+0x288>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	b259      	sxtb	r1, r3
 8000b92:	4b3a      	ldr	r3, [pc, #232]	; (8000c7c <mapCell+0x28c>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	b25d      	sxtb	r5, r3
 8000b98:	4839      	ldr	r0, [pc, #228]	; (8000c80 <mapCell+0x290>)
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	440b      	add	r3, r1
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	442b      	add	r3, r5
 8000ba4:	4403      	add	r3, r0
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	3301      	adds	r3, #1
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	b2d9      	uxtb	r1, r3
 8000bb0:	4833      	ldr	r0, [pc, #204]	; (8000c80 <mapCell+0x290>)
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	00db      	lsls	r3, r3, #3
 8000bb6:	4413      	add	r3, r2
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	4423      	add	r3, r4
 8000bbc:	4403      	add	r3, r0
 8000bbe:	460a      	mov	r2, r1
 8000bc0:	701a      	strb	r2, [r3, #0]
		if (czujnik[4] > SF_Tresh && czujnik[5] > SF_Tresh) walls[x][y]+=2;
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	f113 0fdb 	cmn.w	r3, #219	; 0xdb
 8000bc8:	db24      	blt.n	8000c14 <mapCell+0x224>
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	f113 0fdb 	cmn.w	r3, #219	; 0xdb
 8000bd0:	db20      	blt.n	8000c14 <mapCell+0x224>
 8000bd2:	4b29      	ldr	r3, [pc, #164]	; (8000c78 <mapCell+0x288>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	b25a      	sxtb	r2, r3
 8000bd8:	4b28      	ldr	r3, [pc, #160]	; (8000c7c <mapCell+0x28c>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b25c      	sxtb	r4, r3
 8000bde:	4b26      	ldr	r3, [pc, #152]	; (8000c78 <mapCell+0x288>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	b259      	sxtb	r1, r3
 8000be4:	4b25      	ldr	r3, [pc, #148]	; (8000c7c <mapCell+0x28c>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	b25d      	sxtb	r5, r3
 8000bea:	4825      	ldr	r0, [pc, #148]	; (8000c80 <mapCell+0x290>)
 8000bec:	460b      	mov	r3, r1
 8000bee:	00db      	lsls	r3, r3, #3
 8000bf0:	440b      	add	r3, r1
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	442b      	add	r3, r5
 8000bf6:	4403      	add	r3, r0
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	3302      	adds	r3, #2
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	b2d9      	uxtb	r1, r3
 8000c02:	481f      	ldr	r0, [pc, #124]	; (8000c80 <mapCell+0x290>)
 8000c04:	4613      	mov	r3, r2
 8000c06:	00db      	lsls	r3, r3, #3
 8000c08:	4413      	add	r3, r2
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	4423      	add	r3, r4
 8000c0e:	4403      	add	r3, r0
 8000c10:	460a      	mov	r2, r1
 8000c12:	701a      	strb	r2, [r3, #0]
		if (czujnik[3] > SR_Tresh && czujnik[1] > SR_Tresh) walls[x][y]+=4;
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8000c1a:	f2c0 8138 	blt.w	8000e8e <mapCell+0x49e>
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8000c24:	f2c0 8133 	blt.w	8000e8e <mapCell+0x49e>
 8000c28:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <mapCell+0x288>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	b25a      	sxtb	r2, r3
 8000c2e:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <mapCell+0x28c>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	b25c      	sxtb	r4, r3
 8000c34:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <mapCell+0x288>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	b259      	sxtb	r1, r3
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <mapCell+0x28c>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	b25d      	sxtb	r5, r3
 8000c40:	480f      	ldr	r0, [pc, #60]	; (8000c80 <mapCell+0x290>)
 8000c42:	460b      	mov	r3, r1
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	440b      	add	r3, r1
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	442b      	add	r3, r5
 8000c4c:	4403      	add	r3, r0
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	3304      	adds	r3, #4
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	b2d9      	uxtb	r1, r3
 8000c58:	4809      	ldr	r0, [pc, #36]	; (8000c80 <mapCell+0x290>)
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	4413      	add	r3, r2
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	4423      	add	r3, r4
 8000c64:	4403      	add	r3, r0
 8000c66:	460a      	mov	r2, r1
 8000c68:	701a      	strb	r2, [r3, #0]
 8000c6a:	e110      	b.n	8000e8e <mapCell+0x49e>
 8000c6c:	20000074 	.word	0x20000074
 8000c70:	200004b8 	.word	0x200004b8
 8000c74:	20000050 	.word	0x20000050
 8000c78:	20000005 	.word	0x20000005
 8000c7c:	20000006 	.word	0x20000006
 8000c80:	200006bc 	.word	0x200006bc
 8000c84:	20000007 	.word	0x20000007
	}
	else if(ori==3)
 8000c88:	4b83      	ldr	r3, [pc, #524]	; (8000e98 <mapCell+0x4a8>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	b25b      	sxtb	r3, r3
 8000c8e:	2b03      	cmp	r3, #3
 8000c90:	d17d      	bne.n	8000d8e <mapCell+0x39e>
	{
		if (czujnik[2] > SL_Tresh && czujnik[0] > SL_Tresh) walls[x][y]+=2;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8000c98:	db24      	blt.n	8000ce4 <mapCell+0x2f4>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8000ca0:	db20      	blt.n	8000ce4 <mapCell+0x2f4>
 8000ca2:	4b7e      	ldr	r3, [pc, #504]	; (8000e9c <mapCell+0x4ac>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	b25a      	sxtb	r2, r3
 8000ca8:	4b7d      	ldr	r3, [pc, #500]	; (8000ea0 <mapCell+0x4b0>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	b25c      	sxtb	r4, r3
 8000cae:	4b7b      	ldr	r3, [pc, #492]	; (8000e9c <mapCell+0x4ac>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	b259      	sxtb	r1, r3
 8000cb4:	4b7a      	ldr	r3, [pc, #488]	; (8000ea0 <mapCell+0x4b0>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	b25d      	sxtb	r5, r3
 8000cba:	487a      	ldr	r0, [pc, #488]	; (8000ea4 <mapCell+0x4b4>)
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	00db      	lsls	r3, r3, #3
 8000cc0:	440b      	add	r3, r1
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	442b      	add	r3, r5
 8000cc6:	4403      	add	r3, r0
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	3302      	adds	r3, #2
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	b2d9      	uxtb	r1, r3
 8000cd2:	4874      	ldr	r0, [pc, #464]	; (8000ea4 <mapCell+0x4b4>)
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	4413      	add	r3, r2
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	4423      	add	r3, r4
 8000cde:	4403      	add	r3, r0
 8000ce0:	460a      	mov	r2, r1
 8000ce2:	701a      	strb	r2, [r3, #0]
		if (czujnik[4] > SF_Tresh && czujnik[5] > SF_Tresh) walls[x][y]+=4;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	f113 0fdb 	cmn.w	r3, #219	; 0xdb
 8000cea:	db24      	blt.n	8000d36 <mapCell+0x346>
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	f113 0fdb 	cmn.w	r3, #219	; 0xdb
 8000cf2:	db20      	blt.n	8000d36 <mapCell+0x346>
 8000cf4:	4b69      	ldr	r3, [pc, #420]	; (8000e9c <mapCell+0x4ac>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	b25a      	sxtb	r2, r3
 8000cfa:	4b69      	ldr	r3, [pc, #420]	; (8000ea0 <mapCell+0x4b0>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	b25c      	sxtb	r4, r3
 8000d00:	4b66      	ldr	r3, [pc, #408]	; (8000e9c <mapCell+0x4ac>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	b259      	sxtb	r1, r3
 8000d06:	4b66      	ldr	r3, [pc, #408]	; (8000ea0 <mapCell+0x4b0>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	b25d      	sxtb	r5, r3
 8000d0c:	4865      	ldr	r0, [pc, #404]	; (8000ea4 <mapCell+0x4b4>)
 8000d0e:	460b      	mov	r3, r1
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	440b      	add	r3, r1
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	442b      	add	r3, r5
 8000d18:	4403      	add	r3, r0
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	3304      	adds	r3, #4
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	b2d9      	uxtb	r1, r3
 8000d24:	485f      	ldr	r0, [pc, #380]	; (8000ea4 <mapCell+0x4b4>)
 8000d26:	4613      	mov	r3, r2
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	4413      	add	r3, r2
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	4423      	add	r3, r4
 8000d30:	4403      	add	r3, r0
 8000d32:	460a      	mov	r2, r1
 8000d34:	701a      	strb	r2, [r3, #0]
		if (czujnik[3] > SR_Tresh && czujnik[1] > SR_Tresh) walls[x][y]+=8;
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8000d3c:	f2c0 80a7 	blt.w	8000e8e <mapCell+0x49e>
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8000d46:	f2c0 80a2 	blt.w	8000e8e <mapCell+0x49e>
 8000d4a:	4b54      	ldr	r3, [pc, #336]	; (8000e9c <mapCell+0x4ac>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	b25a      	sxtb	r2, r3
 8000d50:	4b53      	ldr	r3, [pc, #332]	; (8000ea0 <mapCell+0x4b0>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b25c      	sxtb	r4, r3
 8000d56:	4b51      	ldr	r3, [pc, #324]	; (8000e9c <mapCell+0x4ac>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	b259      	sxtb	r1, r3
 8000d5c:	4b50      	ldr	r3, [pc, #320]	; (8000ea0 <mapCell+0x4b0>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	b25d      	sxtb	r5, r3
 8000d62:	4850      	ldr	r0, [pc, #320]	; (8000ea4 <mapCell+0x4b4>)
 8000d64:	460b      	mov	r3, r1
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	440b      	add	r3, r1
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	442b      	add	r3, r5
 8000d6e:	4403      	add	r3, r0
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	3308      	adds	r3, #8
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	b2d9      	uxtb	r1, r3
 8000d7a:	484a      	ldr	r0, [pc, #296]	; (8000ea4 <mapCell+0x4b4>)
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	4413      	add	r3, r2
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	4423      	add	r3, r4
 8000d86:	4403      	add	r3, r0
 8000d88:	460a      	mov	r2, r1
 8000d8a:	701a      	strb	r2, [r3, #0]
 8000d8c:	e07f      	b.n	8000e8e <mapCell+0x49e>
	}
	else if(ori==4)
 8000d8e:	4b42      	ldr	r3, [pc, #264]	; (8000e98 <mapCell+0x4a8>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	b25b      	sxtb	r3, r3
 8000d94:	2b04      	cmp	r3, #4
 8000d96:	d17a      	bne.n	8000e8e <mapCell+0x49e>
	{
		if (czujnik[2] > SL_Tresh && czujnik[0] > SL_Tresh) walls[x][y]+=4;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8000d9e:	db24      	blt.n	8000dea <mapCell+0x3fa>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8000da6:	db20      	blt.n	8000dea <mapCell+0x3fa>
 8000da8:	4b3c      	ldr	r3, [pc, #240]	; (8000e9c <mapCell+0x4ac>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	b25a      	sxtb	r2, r3
 8000dae:	4b3c      	ldr	r3, [pc, #240]	; (8000ea0 <mapCell+0x4b0>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b25c      	sxtb	r4, r3
 8000db4:	4b39      	ldr	r3, [pc, #228]	; (8000e9c <mapCell+0x4ac>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	b259      	sxtb	r1, r3
 8000dba:	4b39      	ldr	r3, [pc, #228]	; (8000ea0 <mapCell+0x4b0>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	b25d      	sxtb	r5, r3
 8000dc0:	4838      	ldr	r0, [pc, #224]	; (8000ea4 <mapCell+0x4b4>)
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	440b      	add	r3, r1
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	442b      	add	r3, r5
 8000dcc:	4403      	add	r3, r0
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	3304      	adds	r3, #4
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	b2d9      	uxtb	r1, r3
 8000dd8:	4832      	ldr	r0, [pc, #200]	; (8000ea4 <mapCell+0x4b4>)
 8000dda:	4613      	mov	r3, r2
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	4413      	add	r3, r2
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	4423      	add	r3, r4
 8000de4:	4403      	add	r3, r0
 8000de6:	460a      	mov	r2, r1
 8000de8:	701a      	strb	r2, [r3, #0]
		if (czujnik[4] > SF_Tresh && czujnik[5] > SF_Tresh) walls[x][y]+=8;
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	f113 0fdb 	cmn.w	r3, #219	; 0xdb
 8000df0:	db24      	blt.n	8000e3c <mapCell+0x44c>
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	f113 0fdb 	cmn.w	r3, #219	; 0xdb
 8000df8:	db20      	blt.n	8000e3c <mapCell+0x44c>
 8000dfa:	4b28      	ldr	r3, [pc, #160]	; (8000e9c <mapCell+0x4ac>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	b25a      	sxtb	r2, r3
 8000e00:	4b27      	ldr	r3, [pc, #156]	; (8000ea0 <mapCell+0x4b0>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	b25c      	sxtb	r4, r3
 8000e06:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <mapCell+0x4ac>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	b259      	sxtb	r1, r3
 8000e0c:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <mapCell+0x4b0>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b25d      	sxtb	r5, r3
 8000e12:	4824      	ldr	r0, [pc, #144]	; (8000ea4 <mapCell+0x4b4>)
 8000e14:	460b      	mov	r3, r1
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	440b      	add	r3, r1
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	442b      	add	r3, r5
 8000e1e:	4403      	add	r3, r0
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	3308      	adds	r3, #8
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	b2d9      	uxtb	r1, r3
 8000e2a:	481e      	ldr	r0, [pc, #120]	; (8000ea4 <mapCell+0x4b4>)
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	00db      	lsls	r3, r3, #3
 8000e30:	4413      	add	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	4423      	add	r3, r4
 8000e36:	4403      	add	r3, r0
 8000e38:	460a      	mov	r2, r1
 8000e3a:	701a      	strb	r2, [r3, #0]
		if (czujnik[3] > SR_Tresh && czujnik[1] > SR_Tresh) walls[x][y]+=1;
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8000e42:	db24      	blt.n	8000e8e <mapCell+0x49e>
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8000e4a:	db20      	blt.n	8000e8e <mapCell+0x49e>
 8000e4c:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <mapCell+0x4ac>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	b25a      	sxtb	r2, r3
 8000e52:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <mapCell+0x4b0>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	b25c      	sxtb	r4, r3
 8000e58:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <mapCell+0x4ac>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	b259      	sxtb	r1, r3
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <mapCell+0x4b0>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	b25d      	sxtb	r5, r3
 8000e64:	480f      	ldr	r0, [pc, #60]	; (8000ea4 <mapCell+0x4b4>)
 8000e66:	460b      	mov	r3, r1
 8000e68:	00db      	lsls	r3, r3, #3
 8000e6a:	440b      	add	r3, r1
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	442b      	add	r3, r5
 8000e70:	4403      	add	r3, r0
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	3301      	adds	r3, #1
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	b2d9      	uxtb	r1, r3
 8000e7c:	4809      	ldr	r0, [pc, #36]	; (8000ea4 <mapCell+0x4b4>)
 8000e7e:	4613      	mov	r3, r2
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	4413      	add	r3, r2
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	4423      	add	r3, r4
 8000e88:	4403      	add	r3, r0
 8000e8a:	460a      	mov	r2, r1
 8000e8c:	701a      	strb	r2, [r3, #0]
	}
}
 8000e8e:	3724      	adds	r7, #36	; 0x24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bcb0      	pop	{r4, r5, r7}
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000007 	.word	0x20000007
 8000e9c:	20000005 	.word	0x20000005
 8000ea0:	20000006 	.word	0x20000006
 8000ea4:	200006bc 	.word	0x200006bc

08000ea8 <highestNeighbourCell>:
/****************************************************/
int8_t highestNeighbourCell(int i1, int j1)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
   int a=-1;
 8000eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb6:	60fb      	str	r3, [r7, #12]
	if(walls[i1][j1]<8   || walls[i1][j1]==-1) if(cell[i1-1][j1] > a) a=cell[i1-1][j1];
 8000eb8:	4981      	ldr	r1, [pc, #516]	; (80010c0 <highestNeighbourCell+0x218>)
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	4413      	add	r3, r2
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	683a      	ldr	r2, [r7, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	440b      	add	r3, r1
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	b25b      	sxtb	r3, r3
 8000ece:	2b07      	cmp	r3, #7
 8000ed0:	dd0d      	ble.n	8000eee <highestNeighbourCell+0x46>
 8000ed2:	497b      	ldr	r1, [pc, #492]	; (80010c0 <highestNeighbourCell+0x218>)
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	4413      	add	r3, r2
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	b25b      	sxtb	r3, r3
 8000ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eec:	d11b      	bne.n	8000f26 <highestNeighbourCell+0x7e>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	1e5a      	subs	r2, r3, #1
 8000ef2:	4974      	ldr	r1, [pc, #464]	; (80010c4 <highestNeighbourCell+0x21c>)
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	4413      	add	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	683a      	ldr	r2, [r7, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	440b      	add	r3, r1
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	b25a      	sxtb	r2, r3
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	dd0c      	ble.n	8000f26 <highestNeighbourCell+0x7e>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	1e5a      	subs	r2, r3, #1
 8000f10:	496c      	ldr	r1, [pc, #432]	; (80010c4 <highestNeighbourCell+0x21c>)
 8000f12:	4613      	mov	r3, r2
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	4413      	add	r3, r2
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	683a      	ldr	r2, [r7, #0]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	440b      	add	r3, r1
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	b25b      	sxtb	r3, r3
 8000f24:	60fb      	str	r3, [r7, #12]
	if(walls[i1][j1]%2<1 || walls[i1][j1]==-1) if(cell[i1][j1+1] > a) a=cell[i1][j1+1];
 8000f26:	4966      	ldr	r1, [pc, #408]	; (80010c0 <highestNeighbourCell+0x218>)
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	4413      	add	r3, r2
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	683a      	ldr	r2, [r7, #0]
 8000f34:	4413      	add	r3, r2
 8000f36:	440b      	add	r3, r1
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	b25a      	sxtb	r2, r3
 8000f3c:	4b62      	ldr	r3, [pc, #392]	; (80010c8 <highestNeighbourCell+0x220>)
 8000f3e:	4013      	ands	r3, r2
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	da03      	bge.n	8000f4c <highestNeighbourCell+0xa4>
 8000f44:	3b01      	subs	r3, #1
 8000f46:	f063 0301 	orn	r3, r3, #1
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	b25b      	sxtb	r3, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	dd0d      	ble.n	8000f70 <highestNeighbourCell+0xc8>
 8000f54:	495a      	ldr	r1, [pc, #360]	; (80010c0 <highestNeighbourCell+0x218>)
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	00db      	lsls	r3, r3, #3
 8000f5c:	4413      	add	r3, r2
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	4413      	add	r3, r2
 8000f64:	440b      	add	r3, r1
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b25b      	sxtb	r3, r3
 8000f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f6e:	d11b      	bne.n	8000fa8 <highestNeighbourCell+0x100>
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	1c58      	adds	r0, r3, #1
 8000f74:	4953      	ldr	r1, [pc, #332]	; (80010c4 <highestNeighbourCell+0x21c>)
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	4413      	add	r3, r2
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	4403      	add	r3, r0
 8000f82:	440b      	add	r3, r1
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	b25a      	sxtb	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	dd0c      	ble.n	8000fa8 <highestNeighbourCell+0x100>
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	1c58      	adds	r0, r3, #1
 8000f92:	494c      	ldr	r1, [pc, #304]	; (80010c4 <highestNeighbourCell+0x21c>)
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	4613      	mov	r3, r2
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	4413      	add	r3, r2
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	4403      	add	r3, r0
 8000fa0:	440b      	add	r3, r1
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	b25b      	sxtb	r3, r3
 8000fa6:	60fb      	str	r3, [r7, #12]
	if(walls[i1][j1]%4<2 || walls[i1][j1]==-1) if(cell[i1+1][j1] > a) a=cell[i1+1][j1];
 8000fa8:	4945      	ldr	r1, [pc, #276]	; (80010c0 <highestNeighbourCell+0x218>)
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	4613      	mov	r3, r2
 8000fae:	00db      	lsls	r3, r3, #3
 8000fb0:	4413      	add	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	683a      	ldr	r2, [r7, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	440b      	add	r3, r1
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	b25a      	sxtb	r2, r3
 8000fbe:	4b43      	ldr	r3, [pc, #268]	; (80010cc <highestNeighbourCell+0x224>)
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	da03      	bge.n	8000fce <highestNeighbourCell+0x126>
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	f063 0303 	orn	r3, r3, #3
 8000fcc:	3301      	adds	r3, #1
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	b25b      	sxtb	r3, r3
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	dd0d      	ble.n	8000ff2 <highestNeighbourCell+0x14a>
 8000fd6:	493a      	ldr	r1, [pc, #232]	; (80010c0 <highestNeighbourCell+0x218>)
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	4413      	add	r3, r2
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b25b      	sxtb	r3, r3
 8000fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff0:	d11b      	bne.n	800102a <highestNeighbourCell+0x182>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	1c5a      	adds	r2, r3, #1
 8000ff6:	4933      	ldr	r1, [pc, #204]	; (80010c4 <highestNeighbourCell+0x21c>)
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	4413      	add	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	4413      	add	r3, r2
 8001004:	440b      	add	r3, r1
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b25a      	sxtb	r2, r3
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	429a      	cmp	r2, r3
 800100e:	dd0c      	ble.n	800102a <highestNeighbourCell+0x182>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	1c5a      	adds	r2, r3, #1
 8001014:	492b      	ldr	r1, [pc, #172]	; (80010c4 <highestNeighbourCell+0x21c>)
 8001016:	4613      	mov	r3, r2
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	4413      	add	r3, r2
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	683a      	ldr	r2, [r7, #0]
 8001020:	4413      	add	r3, r2
 8001022:	440b      	add	r3, r1
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	b25b      	sxtb	r3, r3
 8001028:	60fb      	str	r3, [r7, #12]
	if(walls[i1][j1]%8<4 || walls[i1][j1]==-1) if(cell[i1][j1-1] > a) a=cell[i1][j1-1];
 800102a:	4925      	ldr	r1, [pc, #148]	; (80010c0 <highestNeighbourCell+0x218>)
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	4613      	mov	r3, r2
 8001030:	00db      	lsls	r3, r3, #3
 8001032:	4413      	add	r3, r2
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	4413      	add	r3, r2
 800103a:	440b      	add	r3, r1
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b25a      	sxtb	r2, r3
 8001040:	4b23      	ldr	r3, [pc, #140]	; (80010d0 <highestNeighbourCell+0x228>)
 8001042:	4013      	ands	r3, r2
 8001044:	2b00      	cmp	r3, #0
 8001046:	da03      	bge.n	8001050 <highestNeighbourCell+0x1a8>
 8001048:	3b01      	subs	r3, #1
 800104a:	f063 0307 	orn	r3, r3, #7
 800104e:	3301      	adds	r3, #1
 8001050:	b2db      	uxtb	r3, r3
 8001052:	b25b      	sxtb	r3, r3
 8001054:	2b03      	cmp	r3, #3
 8001056:	dd0d      	ble.n	8001074 <highestNeighbourCell+0x1cc>
 8001058:	4919      	ldr	r1, [pc, #100]	; (80010c0 <highestNeighbourCell+0x218>)
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	4613      	mov	r3, r2
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	4413      	add	r3, r2
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	4413      	add	r3, r2
 8001068:	440b      	add	r3, r1
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	b25b      	sxtb	r3, r3
 800106e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001072:	d11b      	bne.n	80010ac <highestNeighbourCell+0x204>
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	1e58      	subs	r0, r3, #1
 8001078:	4912      	ldr	r1, [pc, #72]	; (80010c4 <highestNeighbourCell+0x21c>)
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	4413      	add	r3, r2
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	4403      	add	r3, r0
 8001086:	440b      	add	r3, r1
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	b25a      	sxtb	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	429a      	cmp	r2, r3
 8001090:	dd0c      	ble.n	80010ac <highestNeighbourCell+0x204>
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	1e58      	subs	r0, r3, #1
 8001096:	490b      	ldr	r1, [pc, #44]	; (80010c4 <highestNeighbourCell+0x21c>)
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	4613      	mov	r3, r2
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	4413      	add	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4403      	add	r3, r0
 80010a4:	440b      	add	r3, r1
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	60fb      	str	r3, [r7, #12]

	return a;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	b25b      	sxtb	r3, r3
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	200006bc 	.word	0x200006bc
 80010c4:	20000534 	.word	0x20000534
 80010c8:	80000001 	.word	0x80000001
 80010cc:	80000003 	.word	0x80000003
 80010d0:	80000007 	.word	0x80000007

080010d4 <lowestNeighbourCell>:
/****************************************************/
int8_t lowestNeighbourCell(int i1, int j1)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
    int opt_direction=0;
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
	int a=cell[i1][j1];
 80010e2:	49a7      	ldr	r1, [pc, #668]	; (8001380 <lowestNeighbourCell+0x2ac>)
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	4613      	mov	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	4413      	add	r3, r2
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	683a      	ldr	r2, [r7, #0]
 80010f0:	4413      	add	r3, r2
 80010f2:	440b      	add	r3, r1
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	60bb      	str	r3, [r7, #8]
	if(walls[i1][j1]<8 || walls[i1][j1]==-1) if(cell[i1-1][j1] < a && cell[i1-1][j1]  > -1)
 80010fa:	49a2      	ldr	r1, [pc, #648]	; (8001384 <lowestNeighbourCell+0x2b0>)
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	4613      	mov	r3, r2
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	4413      	add	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	683a      	ldr	r2, [r7, #0]
 8001108:	4413      	add	r3, r2
 800110a:	440b      	add	r3, r1
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	b25b      	sxtb	r3, r3
 8001110:	2b07      	cmp	r3, #7
 8001112:	dd0d      	ble.n	8001130 <lowestNeighbourCell+0x5c>
 8001114:	499b      	ldr	r1, [pc, #620]	; (8001384 <lowestNeighbourCell+0x2b0>)
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	4613      	mov	r3, r2
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	4413      	add	r3, r2
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	683a      	ldr	r2, [r7, #0]
 8001122:	4413      	add	r3, r2
 8001124:	440b      	add	r3, r1
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	b25b      	sxtb	r3, r3
 800112a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800112e:	d12b      	bne.n	8001188 <lowestNeighbourCell+0xb4>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	1e5a      	subs	r2, r3, #1
 8001134:	4992      	ldr	r1, [pc, #584]	; (8001380 <lowestNeighbourCell+0x2ac>)
 8001136:	4613      	mov	r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	4413      	add	r3, r2
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	4413      	add	r3, r2
 8001142:	440b      	add	r3, r1
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	b25a      	sxtb	r2, r3
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	429a      	cmp	r2, r3
 800114c:	da1c      	bge.n	8001188 <lowestNeighbourCell+0xb4>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	1e5a      	subs	r2, r3, #1
 8001152:	498b      	ldr	r1, [pc, #556]	; (8001380 <lowestNeighbourCell+0x2ac>)
 8001154:	4613      	mov	r3, r2
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	4413      	add	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	4413      	add	r3, r2
 8001160:	440b      	add	r3, r1
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	b25b      	sxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	db0e      	blt.n	8001188 <lowestNeighbourCell+0xb4>
                                                {
                                                  opt_direction=4;
 800116a:	2304      	movs	r3, #4
 800116c:	60fb      	str	r3, [r7, #12]
                                                  a=cell[i1-1][j1];
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	1e5a      	subs	r2, r3, #1
 8001172:	4983      	ldr	r1, [pc, #524]	; (8001380 <lowestNeighbourCell+0x2ac>)
 8001174:	4613      	mov	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	4413      	add	r3, r2
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	4413      	add	r3, r2
 8001180:	440b      	add	r3, r1
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	b25b      	sxtb	r3, r3
 8001186:	60bb      	str	r3, [r7, #8]
                                                }
	if(walls[i1][j1]%2<1 || walls[i1][j1]==-1) if(cell[i1][j1+1] < a && cell[i1][j1+1]  > -1)
 8001188:	497e      	ldr	r1, [pc, #504]	; (8001384 <lowestNeighbourCell+0x2b0>)
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	4613      	mov	r3, r2
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	4413      	add	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	4413      	add	r3, r2
 8001198:	440b      	add	r3, r1
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b25a      	sxtb	r2, r3
 800119e:	4b7a      	ldr	r3, [pc, #488]	; (8001388 <lowestNeighbourCell+0x2b4>)
 80011a0:	4013      	ands	r3, r2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	da03      	bge.n	80011ae <lowestNeighbourCell+0xda>
 80011a6:	3b01      	subs	r3, #1
 80011a8:	f063 0301 	orn	r3, r3, #1
 80011ac:	3301      	adds	r3, #1
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	b25b      	sxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	dd0d      	ble.n	80011d2 <lowestNeighbourCell+0xfe>
 80011b6:	4973      	ldr	r1, [pc, #460]	; (8001384 <lowestNeighbourCell+0x2b0>)
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	4613      	mov	r3, r2
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	4413      	add	r3, r2
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	4413      	add	r3, r2
 80011c6:	440b      	add	r3, r1
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	b25b      	sxtb	r3, r3
 80011cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d0:	d12b      	bne.n	800122a <lowestNeighbourCell+0x156>
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	1c58      	adds	r0, r3, #1
 80011d6:	496a      	ldr	r1, [pc, #424]	; (8001380 <lowestNeighbourCell+0x2ac>)
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	4613      	mov	r3, r2
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	4413      	add	r3, r2
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	4403      	add	r3, r0
 80011e4:	440b      	add	r3, r1
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	b25a      	sxtb	r2, r3
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	da1c      	bge.n	800122a <lowestNeighbourCell+0x156>
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	1c58      	adds	r0, r3, #1
 80011f4:	4962      	ldr	r1, [pc, #392]	; (8001380 <lowestNeighbourCell+0x2ac>)
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	4613      	mov	r3, r2
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	4413      	add	r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	4403      	add	r3, r0
 8001202:	440b      	add	r3, r1
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	b25b      	sxtb	r3, r3
 8001208:	2b00      	cmp	r3, #0
 800120a:	db0e      	blt.n	800122a <lowestNeighbourCell+0x156>
                                                {
                                                  opt_direction=1;
 800120c:	2301      	movs	r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
                                                  a=cell[i1][j1+1];
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	1c58      	adds	r0, r3, #1
 8001214:	495a      	ldr	r1, [pc, #360]	; (8001380 <lowestNeighbourCell+0x2ac>)
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	4613      	mov	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	4413      	add	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4403      	add	r3, r0
 8001222:	440b      	add	r3, r1
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b25b      	sxtb	r3, r3
 8001228:	60bb      	str	r3, [r7, #8]
                                                }
	if(walls[i1][j1]%4<2 || walls[i1][j1]==-1) if(cell[i1+1][j1] < a && cell[i1+1][j1]  > -1)
 800122a:	4956      	ldr	r1, [pc, #344]	; (8001384 <lowestNeighbourCell+0x2b0>)
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	4613      	mov	r3, r2
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	4413      	add	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	4413      	add	r3, r2
 800123a:	440b      	add	r3, r1
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	b25a      	sxtb	r2, r3
 8001240:	4b52      	ldr	r3, [pc, #328]	; (800138c <lowestNeighbourCell+0x2b8>)
 8001242:	4013      	ands	r3, r2
 8001244:	2b00      	cmp	r3, #0
 8001246:	da03      	bge.n	8001250 <lowestNeighbourCell+0x17c>
 8001248:	3b01      	subs	r3, #1
 800124a:	f063 0303 	orn	r3, r3, #3
 800124e:	3301      	adds	r3, #1
 8001250:	b2db      	uxtb	r3, r3
 8001252:	b25b      	sxtb	r3, r3
 8001254:	2b01      	cmp	r3, #1
 8001256:	dd0d      	ble.n	8001274 <lowestNeighbourCell+0x1a0>
 8001258:	494a      	ldr	r1, [pc, #296]	; (8001384 <lowestNeighbourCell+0x2b0>)
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	4613      	mov	r3, r2
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	4413      	add	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	4413      	add	r3, r2
 8001268:	440b      	add	r3, r1
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b25b      	sxtb	r3, r3
 800126e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001272:	d12b      	bne.n	80012cc <lowestNeighbourCell+0x1f8>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	1c5a      	adds	r2, r3, #1
 8001278:	4941      	ldr	r1, [pc, #260]	; (8001380 <lowestNeighbourCell+0x2ac>)
 800127a:	4613      	mov	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	4413      	add	r3, r2
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	4413      	add	r3, r2
 8001286:	440b      	add	r3, r1
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	b25a      	sxtb	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	429a      	cmp	r2, r3
 8001290:	da1c      	bge.n	80012cc <lowestNeighbourCell+0x1f8>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	1c5a      	adds	r2, r3, #1
 8001296:	493a      	ldr	r1, [pc, #232]	; (8001380 <lowestNeighbourCell+0x2ac>)
 8001298:	4613      	mov	r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	4413      	add	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	440b      	add	r3, r1
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b25b      	sxtb	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	db0e      	blt.n	80012cc <lowestNeighbourCell+0x1f8>
                                                {
                                                  opt_direction=2;
 80012ae:	2302      	movs	r3, #2
 80012b0:	60fb      	str	r3, [r7, #12]
                                                  a=cell[i1+1][j1];
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	1c5a      	adds	r2, r3, #1
 80012b6:	4932      	ldr	r1, [pc, #200]	; (8001380 <lowestNeighbourCell+0x2ac>)
 80012b8:	4613      	mov	r3, r2
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	4413      	add	r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	4413      	add	r3, r2
 80012c4:	440b      	add	r3, r1
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	b25b      	sxtb	r3, r3
 80012ca:	60bb      	str	r3, [r7, #8]
                                                }
	if(walls[i1][j1]%8<4 || walls[i1][j1]==-1) if(cell[i1][j1-1] < a && cell[i1][j1-1]  > -1)
 80012cc:	492d      	ldr	r1, [pc, #180]	; (8001384 <lowestNeighbourCell+0x2b0>)
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	4613      	mov	r3, r2
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	4413      	add	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	440b      	add	r3, r1
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	b25a      	sxtb	r2, r3
 80012e2:	4b2b      	ldr	r3, [pc, #172]	; (8001390 <lowestNeighbourCell+0x2bc>)
 80012e4:	4013      	ands	r3, r2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	da03      	bge.n	80012f2 <lowestNeighbourCell+0x21e>
 80012ea:	3b01      	subs	r3, #1
 80012ec:	f063 0307 	orn	r3, r3, #7
 80012f0:	3301      	adds	r3, #1
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	dd0d      	ble.n	8001316 <lowestNeighbourCell+0x242>
 80012fa:	4922      	ldr	r1, [pc, #136]	; (8001384 <lowestNeighbourCell+0x2b0>)
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	4613      	mov	r3, r2
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	4413      	add	r3, r2
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	4413      	add	r3, r2
 800130a:	440b      	add	r3, r1
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	b25b      	sxtb	r3, r3
 8001310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001314:	d12b      	bne.n	800136e <lowestNeighbourCell+0x29a>
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	1e58      	subs	r0, r3, #1
 800131a:	4919      	ldr	r1, [pc, #100]	; (8001380 <lowestNeighbourCell+0x2ac>)
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	4613      	mov	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	4413      	add	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	4403      	add	r3, r0
 8001328:	440b      	add	r3, r1
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b25a      	sxtb	r2, r3
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	429a      	cmp	r2, r3
 8001332:	da1c      	bge.n	800136e <lowestNeighbourCell+0x29a>
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	1e58      	subs	r0, r3, #1
 8001338:	4911      	ldr	r1, [pc, #68]	; (8001380 <lowestNeighbourCell+0x2ac>)
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	4613      	mov	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	4413      	add	r3, r2
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4403      	add	r3, r0
 8001346:	440b      	add	r3, r1
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b25b      	sxtb	r3, r3
 800134c:	2b00      	cmp	r3, #0
 800134e:	db0e      	blt.n	800136e <lowestNeighbourCell+0x29a>
                                                {
                                                  opt_direction=3;
 8001350:	2303      	movs	r3, #3
 8001352:	60fb      	str	r3, [r7, #12]
                                                  a=cell[i1][j1-1];
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	1e58      	subs	r0, r3, #1
 8001358:	4909      	ldr	r1, [pc, #36]	; (8001380 <lowestNeighbourCell+0x2ac>)
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	4613      	mov	r3, r2
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	4413      	add	r3, r2
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	4403      	add	r3, r0
 8001366:	440b      	add	r3, r1
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	b25b      	sxtb	r3, r3
 800136c:	60bb      	str	r3, [r7, #8]
                                                }
	return opt_direction;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	b25b      	sxtb	r3, r3
}
 8001374:	4618      	mov	r0, r3
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	20000534 	.word	0x20000534
 8001384:	200006bc 	.word	0x200006bc
 8001388:	80000001 	.word	0x80000001
 800138c:	80000003 	.word	0x80000003
 8001390:	80000007 	.word	0x80000007

08001394 <flood>:
/****************************************************/
void flood()
{
 8001394:	b5b0      	push	{r4, r5, r7, lr}
 8001396:	b0d2      	sub	sp, #328	; 0x148
 8001398:	af00      	add	r7, sp, #0
	int8_t cell_temp[XMAZE][YMAZE];
	int8_t PathDist = 1; // This is how far the 'water' has flowed
 800139a:	2301      	movs	r3, #1
 800139c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	int8_t i2,j2;
	for(i2 = 0; i2 < XMAZE; i2++)  //Creating a loop which scans the whole maze
 80013a0:	2300      	movs	r3, #0
 80013a2:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
 80013a6:	e02b      	b.n	8001400 <flood+0x6c>
		for(j2 = 0; j2 < YMAZE; j2++)
 80013a8:	2300      	movs	r3, #0
 80013aa:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 80013ae:	e01e      	b.n	80013ee <flood+0x5a>
                {
                  cell[i2][j2] = -1;
 80013b0:	f997 2146 	ldrsb.w	r2, [r7, #326]	; 0x146
 80013b4:	f997 0145 	ldrsb.w	r0, [r7, #325]	; 0x145
 80013b8:	497e      	ldr	r1, [pc, #504]	; (80015b4 <flood+0x220>)
 80013ba:	4613      	mov	r3, r2
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	4413      	add	r3, r2
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	4403      	add	r3, r0
 80013c4:	440b      	add	r3, r1
 80013c6:	22ff      	movs	r2, #255	; 0xff
 80013c8:	701a      	strb	r2, [r3, #0]
                  cell_temp[i2][j2]=-1;
 80013ca:	f997 2146 	ldrsb.w	r2, [r7, #326]	; 0x146
 80013ce:	f997 0145 	ldrsb.w	r0, [r7, #325]	; 0x145
 80013d2:	4639      	mov	r1, r7
 80013d4:	4613      	mov	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	4413      	add	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4403      	add	r3, r0
 80013de:	440b      	add	r3, r1
 80013e0:	22ff      	movs	r2, #255	; 0xff
 80013e2:	701a      	strb	r2, [r3, #0]
{
	int8_t cell_temp[XMAZE][YMAZE];
	int8_t PathDist = 1; // This is how far the 'water' has flowed
	int8_t i2,j2;
	for(i2 = 0; i2 < XMAZE; i2++)  //Creating a loop which scans the whole maze
		for(j2 = 0; j2 < YMAZE; j2++)
 80013e4:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 80013e8:	3301      	adds	r3, #1
 80013ea:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 80013ee:	f997 3145 	ldrsb.w	r3, [r7, #325]	; 0x145
 80013f2:	2b11      	cmp	r3, #17
 80013f4:	dddc      	ble.n	80013b0 <flood+0x1c>
void flood()
{
	int8_t cell_temp[XMAZE][YMAZE];
	int8_t PathDist = 1; // This is how far the 'water' has flowed
	int8_t i2,j2;
	for(i2 = 0; i2 < XMAZE; i2++)  //Creating a loop which scans the whole maze
 80013f6:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 80013fa:	3301      	adds	r3, #1
 80013fc:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
 8001400:	f997 3146 	ldrsb.w	r3, [r7, #326]	; 0x146
 8001404:	2b11      	cmp	r3, #17
 8001406:	ddcf      	ble.n	80013a8 <flood+0x14>
		for(j2 = 0; j2 < YMAZE; j2++)
                {
                  cell[i2][j2] = -1;
                  cell_temp[i2][j2]=-1;
                }
	for(i2 = target[0]; i2<=target[1]; i2++)
 8001408:	4b6b      	ldr	r3, [pc, #428]	; (80015b8 <flood+0x224>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
 8001410:	e02f      	b.n	8001472 <flood+0xde>
		for(j2 = target[0]; j2<=target[1]; j2++)
 8001412:	4b69      	ldr	r3, [pc, #420]	; (80015b8 <flood+0x224>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800141a:	e01e      	b.n	800145a <flood+0xc6>
                  {
                    cell[i2][j2] = 1;
 800141c:	f997 2146 	ldrsb.w	r2, [r7, #326]	; 0x146
 8001420:	f997 0145 	ldrsb.w	r0, [r7, #325]	; 0x145
 8001424:	4963      	ldr	r1, [pc, #396]	; (80015b4 <flood+0x220>)
 8001426:	4613      	mov	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4413      	add	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4403      	add	r3, r0
 8001430:	440b      	add	r3, r1
 8001432:	2201      	movs	r2, #1
 8001434:	701a      	strb	r2, [r3, #0]
                    cell_temp[i2][j2]=1;
 8001436:	f997 2146 	ldrsb.w	r2, [r7, #326]	; 0x146
 800143a:	f997 0145 	ldrsb.w	r0, [r7, #325]	; 0x145
 800143e:	4639      	mov	r1, r7
 8001440:	4613      	mov	r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	4413      	add	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4403      	add	r3, r0
 800144a:	440b      	add	r3, r1
 800144c:	2201      	movs	r2, #1
 800144e:	701a      	strb	r2, [r3, #0]
                {
                  cell[i2][j2] = -1;
                  cell_temp[i2][j2]=-1;
                }
	for(i2 = target[0]; i2<=target[1]; i2++)
		for(j2 = target[0]; j2<=target[1]; j2++)
 8001450:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 8001454:	3301      	adds	r3, #1
 8001456:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800145a:	4b57      	ldr	r3, [pc, #348]	; (80015b8 <flood+0x224>)
 800145c:	785b      	ldrb	r3, [r3, #1]
 800145e:	f997 2145 	ldrsb.w	r2, [r7, #325]	; 0x145
 8001462:	b25b      	sxtb	r3, r3
 8001464:	429a      	cmp	r2, r3
 8001466:	ddd9      	ble.n	800141c <flood+0x88>
		for(j2 = 0; j2 < YMAZE; j2++)
                {
                  cell[i2][j2] = -1;
                  cell_temp[i2][j2]=-1;
                }
	for(i2 = target[0]; i2<=target[1]; i2++)
 8001468:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 800146c:	3301      	adds	r3, #1
 800146e:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
 8001472:	4b51      	ldr	r3, [pc, #324]	; (80015b8 <flood+0x224>)
 8001474:	785b      	ldrb	r3, [r3, #1]
 8001476:	f997 2146 	ldrsb.w	r2, [r7, #326]	; 0x146
 800147a:	b25b      	sxtb	r3, r3
 800147c:	429a      	cmp	r2, r3
 800147e:	ddc8      	ble.n	8001412 <flood+0x7e>
                  {
                    cell[i2][j2] = 1;
                    cell_temp[i2][j2]=1;
                  }

	while(PathDist>0)
 8001480:	e08f      	b.n	80015a2 <flood+0x20e>
	{
		PathDist++;  //Increment the distance because we are scanning again.
 8001482:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8001486:	3301      	adds	r3, #1
 8001488:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
		for(i2 = 1; i2 < XMAZE-1; i2++) { //Creating a loop which scans the whole maze
 800148c:	2301      	movs	r3, #1
 800148e:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
 8001492:	e03c      	b.n	800150e <flood+0x17a>
			for(j2 = 1; j2 < YMAZE-1; j2++) {
 8001494:	2301      	movs	r3, #1
 8001496:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800149a:	e02f      	b.n	80014fc <flood+0x168>
				if(cell[i2][j2] != -1) //If the cell has already been reached, then continue to the next cell
 800149c:	f997 2146 	ldrsb.w	r2, [r7, #326]	; 0x146
 80014a0:	f997 0145 	ldrsb.w	r0, [r7, #325]	; 0x145
 80014a4:	4943      	ldr	r1, [pc, #268]	; (80015b4 <flood+0x220>)
 80014a6:	4613      	mov	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	4413      	add	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	4403      	add	r3, r0
 80014b0:	440b      	add	r3, r1
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	b25b      	sxtb	r3, r3
 80014b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ba:	d000      	beq.n	80014be <flood+0x12a>
					continue;
 80014bc:	e019      	b.n	80014f2 <flood+0x15e>
				if(highestNeighbourCell(i2,j2) != -1) //If there is a neighbouring cell which has been
 80014be:	f997 2146 	ldrsb.w	r2, [r7, #326]	; 0x146
 80014c2:	f997 3145 	ldrsb.w	r3, [r7, #325]	; 0x145
 80014c6:	4610      	mov	r0, r2
 80014c8:	4619      	mov	r1, r3
 80014ca:	f7ff fced 	bl	8000ea8 <highestNeighbourCell>
 80014ce:	4603      	mov	r3, r0
 80014d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d4:	d00d      	beq.n	80014f2 <flood+0x15e>
					cell_temp[i2][j2] = PathDist;   //reached, then you have reached the current cell
 80014d6:	f997 2146 	ldrsb.w	r2, [r7, #326]	; 0x146
 80014da:	f997 0145 	ldrsb.w	r0, [r7, #325]	; 0x145
 80014de:	4639      	mov	r1, r7
 80014e0:	4613      	mov	r3, r2
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	4413      	add	r3, r2
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	4403      	add	r3, r0
 80014ea:	440b      	add	r3, r1
 80014ec:	f897 2147 	ldrb.w	r2, [r7, #327]	; 0x147
 80014f0:	701a      	strb	r2, [r3, #0]

	while(PathDist>0)
	{
		PathDist++;  //Increment the distance because we are scanning again.
		for(i2 = 1; i2 < XMAZE-1; i2++) { //Creating a loop which scans the whole maze
			for(j2 = 1; j2 < YMAZE-1; j2++) {
 80014f2:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 80014f6:	3301      	adds	r3, #1
 80014f8:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 80014fc:	f997 3145 	ldrsb.w	r3, [r7, #325]	; 0x145
 8001500:	2b10      	cmp	r3, #16
 8001502:	ddcb      	ble.n	800149c <flood+0x108>
                  }

	while(PathDist>0)
	{
		PathDist++;  //Increment the distance because we are scanning again.
		for(i2 = 1; i2 < XMAZE-1; i2++) { //Creating a loop which scans the whole maze
 8001504:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8001508:	3301      	adds	r3, #1
 800150a:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
 800150e:	f997 3146 	ldrsb.w	r3, [r7, #326]	; 0x146
 8001512:	2b10      	cmp	r3, #16
 8001514:	ddbe      	ble.n	8001494 <flood+0x100>
					cell_temp[i2][j2] = PathDist;   //reached, then you have reached the current cell
											        //so give it a value
			}
		}

              for(i2 = 0; i2 < XMAZE; i2++)  //Creating a loop which scans the whole maze
 8001516:	2300      	movs	r3, #0
 8001518:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
 800151c:	e02a      	b.n	8001574 <flood+0x1e0>
		  for(j2 = 0; j2 < YMAZE; j2++)
 800151e:	2300      	movs	r3, #0
 8001520:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 8001524:	e01d      	b.n	8001562 <flood+0x1ce>
                    cell[i2][j2] =cell_temp[i2][j2];
 8001526:	f997 2146 	ldrsb.w	r2, [r7, #326]	; 0x146
 800152a:	f997 4145 	ldrsb.w	r4, [r7, #325]	; 0x145
 800152e:	f997 1146 	ldrsb.w	r1, [r7, #326]	; 0x146
 8001532:	f997 5145 	ldrsb.w	r5, [r7, #325]	; 0x145
 8001536:	4638      	mov	r0, r7
 8001538:	460b      	mov	r3, r1
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	440b      	add	r3, r1
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	442b      	add	r3, r5
 8001542:	4403      	add	r3, r0
 8001544:	7819      	ldrb	r1, [r3, #0]
 8001546:	481b      	ldr	r0, [pc, #108]	; (80015b4 <flood+0x220>)
 8001548:	4613      	mov	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4413      	add	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	4423      	add	r3, r4
 8001552:	4403      	add	r3, r0
 8001554:	460a      	mov	r2, r1
 8001556:	701a      	strb	r2, [r3, #0]
											        //so give it a value
			}
		}

              for(i2 = 0; i2 < XMAZE; i2++)  //Creating a loop which scans the whole maze
		  for(j2 = 0; j2 < YMAZE; j2++)
 8001558:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800155c:	3301      	adds	r3, #1
 800155e:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 8001562:	f997 3145 	ldrsb.w	r3, [r7, #325]	; 0x145
 8001566:	2b11      	cmp	r3, #17
 8001568:	dddd      	ble.n	8001526 <flood+0x192>
					cell_temp[i2][j2] = PathDist;   //reached, then you have reached the current cell
											        //so give it a value
			}
		}

              for(i2 = 0; i2 < XMAZE; i2++)  //Creating a loop which scans the whole maze
 800156a:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 800156e:	3301      	adds	r3, #1
 8001570:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
 8001574:	f997 3146 	ldrsb.w	r3, [r7, #326]	; 0x146
 8001578:	2b11      	cmp	r3, #17
 800157a:	ddd0      	ble.n	800151e <flood+0x18a>
		  for(j2 = 0; j2 < YMAZE; j2++)
                    cell[i2][j2] =cell_temp[i2][j2];

		if(cell[x][y] != -1) break;
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <flood+0x228>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	b25a      	sxtb	r2, r3
 8001582:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <flood+0x22c>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	b258      	sxtb	r0, r3
 8001588:	490a      	ldr	r1, [pc, #40]	; (80015b4 <flood+0x220>)
 800158a:	4613      	mov	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	4413      	add	r3, r2
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4403      	add	r3, r0
 8001594:	440b      	add	r3, r1
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b25b      	sxtb	r3, r3
 800159a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800159e:	d000      	beq.n	80015a2 <flood+0x20e>
 80015a0:	e004      	b.n	80015ac <flood+0x218>
                  {
                    cell[i2][j2] = 1;
                    cell_temp[i2][j2]=1;
                  }

	while(PathDist>0)
 80015a2:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f73f af6b 	bgt.w	8001482 <flood+0xee>
		  for(j2 = 0; j2 < YMAZE; j2++)
                    cell[i2][j2] =cell_temp[i2][j2];

		if(cell[x][y] != -1) break;
	}
}
 80015ac:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bdb0      	pop	{r4, r5, r7, pc}
 80015b4:	20000534 	.word	0x20000534
 80015b8:	20000008 	.word	0x20000008
 80015bc:	20000005 	.word	0x20000005
 80015c0:	20000006 	.word	0x20000006

080015c4 <Send_Gyro>:
/****************************************************/
void Send_Gyro(uint8_t Register, uint8_t Value)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af02      	add	r7, sp, #8
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	71fa      	strb	r2, [r7, #7]
 80015d0:	71bb      	strb	r3, [r7, #6]
	uint8_t ToSend[2]={Register,Value};
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	733b      	strb	r3, [r7, #12]
 80015d6:	79bb      	ldrb	r3, [r7, #6]
 80015d8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,0x6B<<1,ToSend,2,10);
 80015da:	f107 030c 	add.w	r3, r7, #12
 80015de:	220a      	movs	r2, #10
 80015e0:	9200      	str	r2, [sp, #0]
 80015e2:	4804      	ldr	r0, [pc, #16]	; (80015f4 <Send_Gyro+0x30>)
 80015e4:	21d6      	movs	r1, #214	; 0xd6
 80015e6:	461a      	mov	r2, r3
 80015e8:	2302      	movs	r3, #2
 80015ea:	f004 f895 	bl	8005718 <HAL_I2C_Master_Transmit>
}
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000348 	.word	0x20000348

080015f8 <Read_Gyro>:
/****************************************************/
int8_t Read_Gyro(uint8_t Register)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
	uint8_t Read=0;
 8001602:	2300      	movs	r3, #0
 8001604:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1,0x6B<<1,&Register,1,10);
 8001606:	1dfb      	adds	r3, r7, #7
 8001608:	220a      	movs	r2, #10
 800160a:	9200      	str	r2, [sp, #0]
 800160c:	480b      	ldr	r0, [pc, #44]	; (800163c <Read_Gyro+0x44>)
 800160e:	21d6      	movs	r1, #214	; 0xd6
 8001610:	461a      	mov	r2, r3
 8001612:	2301      	movs	r3, #1
 8001614:	f004 f880 	bl	8005718 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,0x6B<<1,&Read,1,10);
 8001618:	f107 030f 	add.w	r3, r7, #15
 800161c:	220a      	movs	r2, #10
 800161e:	9200      	str	r2, [sp, #0]
 8001620:	4806      	ldr	r0, [pc, #24]	; (800163c <Read_Gyro+0x44>)
 8001622:	21d6      	movs	r1, #214	; 0xd6
 8001624:	461a      	mov	r2, r3
 8001626:	2301      	movs	r3, #1
 8001628:	f004 f92a 	bl	8005880 <HAL_I2C_Master_Receive>

	return Read;
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	b2db      	uxtb	r3, r3
 8001630:	b25b      	sxtb	r3, r3
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000348 	.word	0x20000348

08001640 <Read_AXIS>:
/****************************************************/
int16_t Read_AXIS(uint8_t Register)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
	int16_t Measurement=0;
 800164a:	2300      	movs	r3, #0
 800164c:	81fb      	strh	r3, [r7, #14]
	int8_t LSB=0;
 800164e:	2300      	movs	r3, #0
 8001650:	737b      	strb	r3, [r7, #13]
	int8_t MSB=0;
 8001652:	2300      	movs	r3, #0
 8001654:	733b      	strb	r3, [r7, #12]

	LSB=Read_Gyro(Register);
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ffcd 	bl	80015f8 <Read_Gyro>
 800165e:	4603      	mov	r3, r0
 8001660:	737b      	strb	r3, [r7, #13]
	MSB=Read_Gyro(Register+1);
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	3301      	adds	r3, #1
 8001666:	b2db      	uxtb	r3, r3
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ffc5 	bl	80015f8 <Read_Gyro>
 800166e:	4603      	mov	r3, r0
 8001670:	733b      	strb	r3, [r7, #12]

	Measurement=(MSB<<8)+LSB;
 8001672:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001676:	b29b      	uxth	r3, r3
 8001678:	021b      	lsls	r3, r3, #8
 800167a:	b29a      	uxth	r2, r3
 800167c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001680:	b29b      	uxth	r3, r3
 8001682:	4413      	add	r3, r2
 8001684:	b29b      	uxth	r3, r3
 8001686:	81fb      	strh	r3, [r7, #14]
	return Measurement;
 8001688:	89fb      	ldrh	r3, [r7, #14]
 800168a:	b21b      	sxth	r3, r3
}
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <calibration>:
/****************************************************/
void calibration()
{
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
	int16_t pomoc=0;
 800169a:	2300      	movs	r3, #0
 800169c:	80fb      	strh	r3, [r7, #6]
	uint8_t i1;

	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,0);
 800169e:	488d      	ldr	r0, [pc, #564]	; (80018d4 <calibration+0x240>)
 80016a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016a4:	2200      	movs	r2, #0
 80016a6:	f004 fe21 	bl	80062ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,1);
 80016aa:	488b      	ldr	r0, [pc, #556]	; (80018d8 <calibration+0x244>)
 80016ac:	2104      	movs	r1, #4
 80016ae:	2201      	movs	r2, #1
 80016b0:	f004 fe1c 	bl	80062ec <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80016b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016b8:	f005 fffe 	bl	80076b8 <HAL_Delay>

	Send_Gyro(0x20,0xDF);//4F
 80016bc:	2020      	movs	r0, #32
 80016be:	21df      	movs	r1, #223	; 0xdf
 80016c0:	f7ff ff80 	bl	80015c4 <Send_Gyro>
	Send_Gyro(0x21,0x00);
 80016c4:	2021      	movs	r0, #33	; 0x21
 80016c6:	2100      	movs	r1, #0
 80016c8:	f7ff ff7c 	bl	80015c4 <Send_Gyro>
	Send_Gyro(0x22,0x00);
 80016cc:	2022      	movs	r0, #34	; 0x22
 80016ce:	2100      	movs	r1, #0
 80016d0:	f7ff ff78 	bl	80015c4 <Send_Gyro>
	Send_Gyro(0x23,0x20);// 0x00 - 250dps(8.75 mdps/digit); 0x10 - 500 dps(17.5 mdps/digit); 0x20 - 2000 dps(70 mdps/digit)
 80016d4:	2023      	movs	r0, #35	; 0x23
 80016d6:	2120      	movs	r1, #32
 80016d8:	f7ff ff74 	bl	80015c4 <Send_Gyro>
	Send_Gyro(0x24,0x00);
 80016dc:	2024      	movs	r0, #36	; 0x24
 80016de:	2100      	movs	r1, #0
 80016e0:	f7ff ff70 	bl	80015c4 <Send_Gyro>

	for(i1=0;i1<100;i1++) pomoc+=((Read_AXIS(0x2C)-dryf)*700)/10000;
 80016e4:	2300      	movs	r3, #0
 80016e6:	717b      	strb	r3, [r7, #5]
 80016e8:	e019      	b.n	800171e <calibration+0x8a>
 80016ea:	202c      	movs	r0, #44	; 0x2c
 80016ec:	f7ff ffa8 	bl	8001640 <Read_AXIS>
 80016f0:	4603      	mov	r3, r0
 80016f2:	461a      	mov	r2, r3
 80016f4:	4b79      	ldr	r3, [pc, #484]	; (80018dc <calibration+0x248>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80016fe:	fb02 f303 	mul.w	r3, r2, r3
 8001702:	4a77      	ldr	r2, [pc, #476]	; (80018e0 <calibration+0x24c>)
 8001704:	fb82 1203 	smull	r1, r2, r2, r3
 8001708:	1312      	asrs	r2, r2, #12
 800170a:	17db      	asrs	r3, r3, #31
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	b29a      	uxth	r2, r3
 8001710:	88fb      	ldrh	r3, [r7, #6]
 8001712:	4413      	add	r3, r2
 8001714:	b29b      	uxth	r3, r3
 8001716:	80fb      	strh	r3, [r7, #6]
 8001718:	797b      	ldrb	r3, [r7, #5]
 800171a:	3301      	adds	r3, #1
 800171c:	717b      	strb	r3, [r7, #5]
 800171e:	797b      	ldrb	r3, [r7, #5]
 8001720:	2b63      	cmp	r3, #99	; 0x63
 8001722:	d9e2      	bls.n	80016ea <calibration+0x56>
	pomoc/=100;
 8001724:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001728:	4a6e      	ldr	r2, [pc, #440]	; (80018e4 <calibration+0x250>)
 800172a:	fb82 1203 	smull	r1, r2, r2, r3
 800172e:	1152      	asrs	r2, r2, #5
 8001730:	17db      	asrs	r3, r3, #31
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(1000);
 8001736:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800173a:	f005 ffbd 	bl	80076b8 <HAL_Delay>
  	while(pomoc>2 || pomoc<-2)
 800173e:	e047      	b.n	80017d0 <calibration+0x13c>
  	{
		 for(i1=0;i1<100;i1++)
 8001740:	2300      	movs	r3, #0
 8001742:	717b      	strb	r3, [r7, #5]
 8001744:	e00c      	b.n	8001760 <calibration+0xcc>
		 {
			dryf += Read_AXIS(0x2C);
 8001746:	202c      	movs	r0, #44	; 0x2c
 8001748:	f7ff ff7a 	bl	8001640 <Read_AXIS>
 800174c:	4603      	mov	r3, r0
 800174e:	461a      	mov	r2, r3
 8001750:	4b62      	ldr	r3, [pc, #392]	; (80018dc <calibration+0x248>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	441a      	add	r2, r3
 8001756:	4b61      	ldr	r3, [pc, #388]	; (80018dc <calibration+0x248>)
 8001758:	601a      	str	r2, [r3, #0]
	for(i1=0;i1<100;i1++) pomoc+=((Read_AXIS(0x2C)-dryf)*700)/10000;
	pomoc/=100;
	HAL_Delay(1000);
  	while(pomoc>2 || pomoc<-2)
  	{
		 for(i1=0;i1<100;i1++)
 800175a:	797b      	ldrb	r3, [r7, #5]
 800175c:	3301      	adds	r3, #1
 800175e:	717b      	strb	r3, [r7, #5]
 8001760:	797b      	ldrb	r3, [r7, #5]
 8001762:	2b63      	cmp	r3, #99	; 0x63
 8001764:	d9ef      	bls.n	8001746 <calibration+0xb2>
		 {
			dryf += Read_AXIS(0x2C);
		 }
		 dryf/=100;
 8001766:	4b5d      	ldr	r3, [pc, #372]	; (80018dc <calibration+0x248>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a5e      	ldr	r2, [pc, #376]	; (80018e4 <calibration+0x250>)
 800176c:	fb82 1203 	smull	r1, r2, r2, r3
 8001770:	1152      	asrs	r2, r2, #5
 8001772:	17db      	asrs	r3, r3, #31
 8001774:	1ad2      	subs	r2, r2, r3
 8001776:	4b59      	ldr	r3, [pc, #356]	; (80018dc <calibration+0x248>)
 8001778:	601a      	str	r2, [r3, #0]

		 pomoc=0;
 800177a:	2300      	movs	r3, #0
 800177c:	80fb      	strh	r3, [r7, #6]
		 for(i1=0;i1<100;i1++) pomoc+=((Read_AXIS(0x2C)-dryf)*700)/10000;
 800177e:	2300      	movs	r3, #0
 8001780:	717b      	strb	r3, [r7, #5]
 8001782:	e019      	b.n	80017b8 <calibration+0x124>
 8001784:	202c      	movs	r0, #44	; 0x2c
 8001786:	f7ff ff5b 	bl	8001640 <Read_AXIS>
 800178a:	4603      	mov	r3, r0
 800178c:	461a      	mov	r2, r3
 800178e:	4b53      	ldr	r3, [pc, #332]	; (80018dc <calibration+0x248>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001798:	fb02 f303 	mul.w	r3, r2, r3
 800179c:	4a50      	ldr	r2, [pc, #320]	; (80018e0 <calibration+0x24c>)
 800179e:	fb82 1203 	smull	r1, r2, r2, r3
 80017a2:	1312      	asrs	r2, r2, #12
 80017a4:	17db      	asrs	r3, r3, #31
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	4413      	add	r3, r2
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	80fb      	strh	r3, [r7, #6]
 80017b2:	797b      	ldrb	r3, [r7, #5]
 80017b4:	3301      	adds	r3, #1
 80017b6:	717b      	strb	r3, [r7, #5]
 80017b8:	797b      	ldrb	r3, [r7, #5]
 80017ba:	2b63      	cmp	r3, #99	; 0x63
 80017bc:	d9e2      	bls.n	8001784 <calibration+0xf0>
		 pomoc/=100;
 80017be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017c2:	4a48      	ldr	r2, [pc, #288]	; (80018e4 <calibration+0x250>)
 80017c4:	fb82 1203 	smull	r1, r2, r2, r3
 80017c8:	1152      	asrs	r2, r2, #5
 80017ca:	17db      	asrs	r3, r3, #31
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	80fb      	strh	r3, [r7, #6]
	Send_Gyro(0x24,0x00);

	for(i1=0;i1<100;i1++) pomoc+=((Read_AXIS(0x2C)-dryf)*700)/10000;
	pomoc/=100;
	HAL_Delay(1000);
  	while(pomoc>2 || pomoc<-2)
 80017d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	dcb3      	bgt.n	8001740 <calibration+0xac>
 80017d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017dc:	f113 0f02 	cmn.w	r3, #2
 80017e0:	dbae      	blt.n	8001740 <calibration+0xac>
		 pomoc=0;
		 for(i1=0;i1<100;i1++) pomoc+=((Read_AXIS(0x2C)-dryf)*700)/10000;
		 pomoc/=100;
  	}

	 TIM3->CNT=16384;
 80017e2:	4b41      	ldr	r3, [pc, #260]	; (80018e8 <calibration+0x254>)
 80017e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24
	 TIM2->CNT=16384;
 80017ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017f2:	625a      	str	r2, [r3, #36]	; 0x24

	 HAL_TIM_Base_Start_IT(&htim4);
 80017f4:	483d      	ldr	r0, [pc, #244]	; (80018ec <calibration+0x258>)
 80017f6:	f000 fe25 	bl	8002444 <HAL_TIM_Base_Start_IT>
	 HAL_Delay(100);
 80017fa:	2064      	movs	r0, #100	; 0x64
 80017fc:	f005 ff5c 	bl	80076b8 <HAL_Delay>

	 rotary(VELR,-95000);
 8001800:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001804:	493a      	ldr	r1, [pc, #232]	; (80018f0 <calibration+0x25c>)
 8001806:	f7fe fca1 	bl	800014c <rotary>
	 HAL_Delay(2000);
 800180a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800180e:	f005 ff53 	bl	80076b8 <HAL_Delay>
	 dys0[4]=SensorTab[4][indexer];
 8001812:	4b38      	ldr	r3, [pc, #224]	; (80018f4 <calibration+0x260>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	b25a      	sxtb	r2, r3
 8001818:	4b37      	ldr	r3, [pc, #220]	; (80018f8 <calibration+0x264>)
 800181a:	3214      	adds	r2, #20
 800181c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001820:	b29a      	uxth	r2, r3
 8001822:	4b36      	ldr	r3, [pc, #216]	; (80018fc <calibration+0x268>)
 8001824:	811a      	strh	r2, [r3, #8]
	 dys0[5]=SensorTab[5][indexer];
 8001826:	4b33      	ldr	r3, [pc, #204]	; (80018f4 <calibration+0x260>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	b25a      	sxtb	r2, r3
 800182c:	4b32      	ldr	r3, [pc, #200]	; (80018f8 <calibration+0x264>)
 800182e:	3219      	adds	r2, #25
 8001830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001834:	b29a      	uxth	r2, r3
 8001836:	4b31      	ldr	r3, [pc, #196]	; (80018fc <calibration+0x268>)
 8001838:	815a      	strh	r2, [r3, #10]

	 rotary(VELR,90000);
 800183a:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800183e:	4930      	ldr	r1, [pc, #192]	; (8001900 <calibration+0x26c>)
 8001840:	f7fe fc84 	bl	800014c <rotary>
	 HAL_Delay(100);
 8001844:	2064      	movs	r0, #100	; 0x64
 8001846:	f005 ff37 	bl	80076b8 <HAL_Delay>
	 if (SensorTab[4][indexer]-dys0[4] > SF_Tresh && SensorTab[5][indexer]-dys0[5] > SF_Tresh)
 800184a:	4b2a      	ldr	r3, [pc, #168]	; (80018f4 <calibration+0x260>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	b25a      	sxtb	r2, r3
 8001850:	4b29      	ldr	r3, [pc, #164]	; (80018f8 <calibration+0x264>)
 8001852:	3214      	adds	r2, #20
 8001854:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001858:	4b28      	ldr	r3, [pc, #160]	; (80018fc <calibration+0x268>)
 800185a:	891b      	ldrh	r3, [r3, #8]
 800185c:	b29b      	uxth	r3, r3
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	f113 0fdb 	cmn.w	r3, #219	; 0xdb
 8001864:	db15      	blt.n	8001892 <calibration+0x1fe>
 8001866:	4b23      	ldr	r3, [pc, #140]	; (80018f4 <calibration+0x260>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	b25a      	sxtb	r2, r3
 800186c:	4b22      	ldr	r3, [pc, #136]	; (80018f8 <calibration+0x264>)
 800186e:	3219      	adds	r2, #25
 8001870:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001874:	4b21      	ldr	r3, [pc, #132]	; (80018fc <calibration+0x268>)
 8001876:	895b      	ldrh	r3, [r3, #10]
 8001878:	b29b      	uxth	r3, r3
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	f113 0fdb 	cmn.w	r3, #219	; 0xdb
 8001880:	db07      	blt.n	8001892 <calibration+0x1fe>
	 {
		 rotary(VELR,90000);
 8001882:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001886:	491e      	ldr	r1, [pc, #120]	; (8001900 <calibration+0x26c>)
 8001888:	f7fe fc60 	bl	800014c <rotary>
		 HAL_Delay(100);
 800188c:	2064      	movs	r0, #100	; 0x64
 800188e:	f005 ff13 	bl	80076b8 <HAL_Delay>
	 }

  	 for(i1=0;i1<4;i1++) dys0[i1]=SensorTab[i1][indexer];
 8001892:	2300      	movs	r3, #0
 8001894:	717b      	strb	r3, [r7, #5]
 8001896:	e012      	b.n	80018be <calibration+0x22a>
 8001898:	7979      	ldrb	r1, [r7, #5]
 800189a:	797a      	ldrb	r2, [r7, #5]
 800189c:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <calibration+0x260>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	b25c      	sxtb	r4, r3
 80018a2:	4815      	ldr	r0, [pc, #84]	; (80018f8 <calibration+0x264>)
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	4423      	add	r3, r4
 80018ac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	4b12      	ldr	r3, [pc, #72]	; (80018fc <calibration+0x268>)
 80018b4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 80018b8:	797b      	ldrb	r3, [r7, #5]
 80018ba:	3301      	adds	r3, #1
 80018bc:	717b      	strb	r3, [r7, #5]
 80018be:	797b      	ldrb	r3, [r7, #5]
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	d9e9      	bls.n	8001898 <calibration+0x204>


//  	rotary_new(VELR,90000);
//  	start=0;
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,0);
 80018c4:	4804      	ldr	r0, [pc, #16]	; (80018d8 <calibration+0x244>)
 80018c6:	2104      	movs	r1, #4
 80018c8:	2200      	movs	r2, #0
 80018ca:	f004 fd0f 	bl	80062ec <HAL_GPIO_WritePin>
}
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd90      	pop	{r4, r7, pc}
 80018d4:	40011000 	.word	0x40011000
 80018d8:	40011400 	.word	0x40011400
 80018dc:	20000070 	.word	0x20000070
 80018e0:	68db8bad 	.word	0x68db8bad
 80018e4:	51eb851f 	.word	0x51eb851f
 80018e8:	40000400 	.word	0x40000400
 80018ec:	20000294 	.word	0x20000294
 80018f0:	fffe8ce8 	.word	0xfffe8ce8
 80018f4:	20000074 	.word	0x20000074
 80018f8:	200004b8 	.word	0x200004b8
 80018fc:	20000050 	.word	0x20000050
 8001900:	00015f90 	.word	0x00015f90

08001904 <HAL_UART_Init>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e03b      	b.n	800198e <HAL_UART_Init+0x8a>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->State == HAL_UART_STATE_RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d106      	bne.n	8001930 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f006 fe70 	bl	8008610 <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2202      	movs	r2, #2
 8001934:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6812      	ldr	r2, [r2, #0]
 8001940:	68d2      	ldr	r2, [r2, #12]
 8001942:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001946:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 fbdf 	bl	800210c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6812      	ldr	r2, [r2, #0]
 8001956:	6912      	ldr	r2, [r2, #16]
 8001958:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800195c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6812      	ldr	r2, [r2, #0]
 8001966:	6952      	ldr	r2, [r2, #20]
 8001968:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800196c:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6812      	ldr	r2, [r2, #0]
 8001976:	68d2      	ldr	r2, [r2, #12]
 8001978:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800197c:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop

08001998 <HAL_UART_Transmit_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	4613      	mov	r3, r2
 80019a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  uint32_t tmp_state = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]

  tmp_state = huart->State;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	617b      	str	r3, [r7, #20]
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d002      	beq.n	80019c0 <HAL_UART_Transmit_DMA+0x28>
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	2b22      	cmp	r3, #34	; 0x22
 80019be:	d15a      	bne.n	8001a76 <HAL_UART_Transmit_DMA+0xde>
  {
    if((pData == NULL ) || (Size == 0)) 
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d002      	beq.n	80019cc <HAL_UART_Transmit_DMA+0x34>
 80019c6:	88fb      	ldrh	r3, [r7, #6]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_UART_Transmit_DMA+0x38>
    {
      return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e053      	b.n	8001a78 <HAL_UART_Transmit_DMA+0xe0>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d101      	bne.n	80019de <HAL_UART_Transmit_DMA+0x46>
 80019da:	2302      	movs	r3, #2
 80019dc:	e04c      	b.n	8001a78 <HAL_UART_Transmit_DMA+0xe0>
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	88fa      	ldrh	r2, [r7, #6]
 80019f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	88fa      	ldrh	r2, [r7, #6]
 80019f6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b22      	cmp	r3, #34	; 0x22
 8001a08:	d104      	bne.n	8001a14 <HAL_UART_Transmit_DMA+0x7c>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2232      	movs	r2, #50	; 0x32
 8001a0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001a12:	e003      	b.n	8001a1c <HAL_UART_Transmit_DMA+0x84>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2212      	movs	r2, #18
 8001a18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	4a17      	ldr	r2, [pc, #92]	; (8001a80 <HAL_UART_Transmit_DMA+0xe8>)
 8001a22:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a28:	4a16      	ldr	r2, [pc, #88]	; (8001a84 <HAL_UART_Transmit_DMA+0xec>)
 8001a2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a30:	4a15      	ldr	r2, [pc, #84]	; (8001a88 <HAL_UART_Transmit_DMA+0xf0>)
 8001a32:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t*)&pData;
 8001a34:	f107 0308 	add.w	r3, r7, #8
 8001a38:	613b      	str	r3, [r7, #16]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	6819      	ldr	r1, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	3304      	adds	r3, #4
 8001a48:	461a      	mov	r2, r3
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	f004 fcd4 	bl	80063f8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a58:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	6812      	ldr	r2, [r2, #0]
 8001a62:	6952      	ldr	r2, [r2, #20]
 8001a64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a68:	615a      	str	r2, [r3, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	e000      	b.n	8001a78 <HAL_UART_Transmit_DMA+0xe0>
  }
  else
  {
    return HAL_BUSY;
 8001a76:	2302      	movs	r3, #2
  }
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	08001db5 	.word	0x08001db5
 8001a84:	08001e05 	.word	0x08001e05
 8001a88:	08001e99 	.word	0x08001e99

08001a8c <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain 
  *         the parity bit (MSB position)     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	4613      	mov	r3, r2
 8001a98:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  uint32_t tmp_state = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]

  tmp_state = huart->State;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	617b      	str	r3, [r7, #20]
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d002      	beq.n	8001ab4 <HAL_UART_Receive_DMA+0x28>
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	2b12      	cmp	r3, #18
 8001ab2:	d152      	bne.n	8001b5a <HAL_UART_Receive_DMA+0xce>
  {
    if((pData == NULL ) || (Size == 0))
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <HAL_UART_Receive_DMA+0x34>
 8001aba:	88fb      	ldrh	r3, [r7, #6]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_UART_Receive_DMA+0x38>
    {
      return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e04b      	b.n	8001b5c <HAL_UART_Receive_DMA+0xd0>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d101      	bne.n	8001ad2 <HAL_UART_Receive_DMA+0x46>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e044      	b.n	8001b5c <HAL_UART_Receive_DMA+0xd0>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	88fa      	ldrh	r2, [r7, #6]
 8001ae4:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b12      	cmp	r3, #18
 8001af6:	d104      	bne.n	8001b02 <HAL_UART_Receive_DMA+0x76>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2232      	movs	r2, #50	; 0x32
 8001afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001b00:	e003      	b.n	8001b0a <HAL_UART_Receive_DMA+0x7e>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2222      	movs	r2, #34	; 0x22
 8001b06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b0e:	4a15      	ldr	r2, [pc, #84]	; (8001b64 <HAL_UART_Receive_DMA+0xd8>)
 8001b10:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b16:	4a14      	ldr	r2, [pc, #80]	; (8001b68 <HAL_UART_Receive_DMA+0xdc>)
 8001b18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b1e:	4a13      	ldr	r2, [pc, #76]	; (8001b6c <HAL_UART_Receive_DMA+0xe0>)
 8001b20:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
 8001b22:	f107 0308 	add.w	r3, r7, #8
 8001b26:	613b      	str	r3, [r7, #16]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	3304      	adds	r3, #4
 8001b32:	4619      	mov	r1, r3
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	f004 fc5d 	bl	80063f8 <HAL_DMA_Start_IT>

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	6952      	ldr	r2, [r2, #20]
 8001b48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b4c:	615a      	str	r2, [r3, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001b56:	2300      	movs	r3, #0
 8001b58:	e000      	b.n	8001b5c <HAL_UART_Receive_DMA+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8001b5a:	2302      	movs	r3, #2
  }
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	08001e21 	.word	0x08001e21
 8001b68:	08001e7d 	.word	0x08001e7d
 8001b6c:	08001e99 	.word	0x08001e99

08001b70 <HAL_UART_IRQHandler>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tmp_flag = 0, tmp_it_source = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61fb      	str	r3, [r7, #28]
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61bb      	str	r3, [r7, #24]

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	bf0c      	ite	eq
 8001b8e:	2300      	moveq	r3, #0
 8001b90:	2301      	movne	r3, #1
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	61fb      	str	r3, [r7, #28]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba0:	61bb      	str	r3, [r7, #24]
  /* UART parity error interrupt occurred ------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d011      	beq.n	8001bcc <HAL_UART_IRQHandler+0x5c>
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00e      	beq.n	8001bcc <HAL_UART_IRQHandler+0x5c>
  { 
    __HAL_UART_CLEAR_PEFLAG(huart);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	697b      	ldr	r3, [r7, #20]
    
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc4:	f043 0201 	orr.w	r2, r3, #1
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	bf0c      	ite	eq
 8001bda:	2300      	moveq	r3, #0
 8001bdc:	2301      	movne	r3, #1
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	61fb      	str	r3, [r7, #28]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	61bb      	str	r3, [r7, #24]
  /* UART frame error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d011      	beq.n	8001c18 <HAL_UART_IRQHandler+0xa8>
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00e      	beq.n	8001c18 <HAL_UART_IRQHandler+0xa8>
  { 
    __HAL_UART_CLEAR_FEFLAG(huart);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	613b      	str	r3, [r7, #16]
 8001c0a:	693b      	ldr	r3, [r7, #16]
    
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c10:	f043 0204 	orr.w	r2, r3, #4
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	bf0c      	ite	eq
 8001c26:	2300      	moveq	r3, #0
 8001c28:	2301      	movne	r3, #1
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	61fb      	str	r3, [r7, #28]
  /* UART noise error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d011      	beq.n	8001c58 <HAL_UART_IRQHandler+0xe8>
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00e      	beq.n	8001c58 <HAL_UART_IRQHandler+0xe8>
  { 
    __HAL_UART_CLEAR_NEFLAG(huart);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
    
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c50:	f043 0202 	orr.w	r2, r3, #2
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	bf0c      	ite	eq
 8001c66:	2300      	moveq	r3, #0
 8001c68:	2301      	movne	r3, #1
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	61fb      	str	r3, [r7, #28]
  /* UART Over-Run interrupt occurred ----------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d011      	beq.n	8001c98 <HAL_UART_IRQHandler+0x128>
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00e      	beq.n	8001c98 <HAL_UART_IRQHandler+0x128>
  { 
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
    
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c90:	f043 0208 	orr.w	r2, r3, #8
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0320 	and.w	r3, r3, #32
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	bf0c      	ite	eq
 8001ca6:	2300      	moveq	r3, #0
 8001ca8:	2301      	movne	r3, #1
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	61fb      	str	r3, [r7, #28]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	f003 0320 	and.w	r3, r3, #32
 8001cb8:	61bb      	str	r3, [r7, #24]
  /* UART in mode Receiver ---------------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d005      	beq.n	8001ccc <HAL_UART_IRQHandler+0x15c>
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <HAL_UART_IRQHandler+0x15c>
  { 
    UART_Receive_IT(huart);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f98c 	bl	8001fe4 <UART_Receive_IT>
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	bf0c      	ite	eq
 8001cda:	2300      	moveq	r3, #0
 8001cdc:	2301      	movne	r3, #1
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	61fb      	str	r3, [r7, #28]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cec:	61bb      	str	r3, [r7, #24]
  /* UART in mode Transmitter ------------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d005      	beq.n	8001d00 <HAL_UART_IRQHandler+0x190>
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <HAL_UART_IRQHandler+0x190>
  {
    UART_Transmit_IT(huart);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f8ea 	bl	8001ed4 <UART_Transmit_IT>
  }

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	bf0c      	ite	eq
 8001d0e:	2300      	moveq	r3, #0
 8001d10:	2301      	movne	r3, #1
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	61fb      	str	r3, [r7, #28]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d20:	61bb      	str	r3, [r7, #24]
  /* UART in mode Transmitter end --------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d005      	beq.n	8001d34 <HAL_UART_IRQHandler+0x1c4>
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d002      	beq.n	8001d34 <HAL_UART_IRQHandler+0x1c4>
  {
    UART_EndTransmit_IT(huart);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f92c 	bl	8001f8c <UART_EndTransmit_IT>
  }  

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d006      	beq.n	8001d4a <HAL_UART_IRQHandler+0x1da>
  {
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    HAL_UART_ErrorCallback(huart);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f82b 	bl	8001da0 <HAL_UART_ErrorCallback>
  }  
}
 8001d4a:	3720      	adds	r7, #32
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_UART_TxCpltCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback can be implemented in the user file
   */ 
}
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop

08001d64 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file
   */ 
}
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop

08001d78 <HAL_UART_RxCpltCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback can be implemented in the user file
   */
}
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop

08001d8c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file
   */
}
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop

08001da0 <HAL_UART_ErrorCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback can be implemented in the user file
   */ 
}
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop

08001db4 <UART_DMATransmitCplt>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0320 	and.w	r3, r3, #32
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d113      	bne.n	8001df8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	6952      	ldr	r2, [r2, #20]
 8001de0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001de4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */    
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	6812      	ldr	r2, [r2, #0]
 8001dee:	68d2      	ldr	r2, [r2, #12]
 8001df0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	e002      	b.n	8001dfe <UART_DMATransmitCplt+0x4a>
  }
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f7ff ffa9 	bl	8001d50 <HAL_UART_TxCpltCallback>
  }
}
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <UART_DMATxHalfCplt>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f7ff ffa6 	bl	8001d64 <HAL_UART_TxHalfCpltCallback>
}
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop

08001e20 <UART_DMAReceiveCplt>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0320 	and.w	r3, r3, #32
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d119      	bne.n	8001e70 <UART_DMAReceiveCplt+0x50>
  {
    huart->RxXferCount = 0;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	85da      	strh	r2, [r3, #46]	; 0x2e
  
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	6812      	ldr	r2, [r2, #0]
 8001e4a:	6952      	ldr	r2, [r2, #20]
 8001e4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e50:	615a      	str	r2, [r3, #20]

    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b32      	cmp	r3, #50	; 0x32
 8001e5c:	d104      	bne.n	8001e68 <UART_DMAReceiveCplt+0x48>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2212      	movs	r2, #18
 8001e62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001e66:	e003      	b.n	8001e70 <UART_DMAReceiveCplt+0x50>
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }
  HAL_UART_RxCpltCallback(huart);
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f7ff ff81 	bl	8001d78 <HAL_UART_RxCpltCallback>
}
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <UART_DMARxHalfCplt>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	60fb      	str	r3, [r7, #12]

  HAL_UART_RxHalfCpltCallback(huart); 
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f7ff ff7e 	bl	8001d8c <HAL_UART_RxHalfCpltCallback>
}
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop

08001e98 <UART_DMAError>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->State= HAL_UART_STATE_READY;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ebe:	f043 0210 	orr.w	r2, r3, #16
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f7ff ff6a 	bl	8001da0 <HAL_UART_ErrorCallback>
}
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop

08001ed4 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint32_t tmp_state = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
  
  tmp_state = huart->State;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	60fb      	str	r3, [r7, #12]
  if((tmp_state == HAL_UART_STATE_BUSY_TX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2b12      	cmp	r3, #18
 8001eee:	d002      	beq.n	8001ef6 <UART_Transmit_IT+0x22>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2b32      	cmp	r3, #50	; 0x32
 8001ef4:	d143      	bne.n	8001f7e <UART_Transmit_IT+0xaa>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001efe:	d119      	bne.n	8001f34 <UART_Transmit_IT+0x60>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	60bb      	str	r3, [r7, #8]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	8812      	ldrh	r2, [r2, #0]
 8001f0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f12:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d105      	bne.n	8001f28 <UART_Transmit_IT+0x54>
      {
        huart->pTxBuffPtr += 2;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	1c9a      	adds	r2, r3, #2
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	621a      	str	r2, [r3, #32]
 8001f26:	e00e      	b.n	8001f46 <UART_Transmit_IT+0x72>
      }
      else
      {
        huart->pTxBuffPtr += 1;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	1c5a      	adds	r2, r3, #1
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	621a      	str	r2, [r3, #32]
 8001f32:	e008      	b.n	8001f46 <UART_Transmit_IT+0x72>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	1c58      	adds	r0, r3, #1
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	6208      	str	r0, [r1, #32]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	84da      	strh	r2, [r3, #38]	; 0x26
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10f      	bne.n	8001f7a <UART_Transmit_IT+0xa6>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6812      	ldr	r2, [r2, #0]
 8001f62:	68d2      	ldr	r2, [r2, #12]
 8001f64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f68:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6812      	ldr	r2, [r2, #0]
 8001f72:	68d2      	ldr	r2, [r2, #12]
 8001f74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f78:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	e000      	b.n	8001f80 <UART_Transmit_IT+0xac>
  }
  else
  {
    return HAL_BUSY;
 8001f7e:	2302      	movs	r3, #2
  }
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6812      	ldr	r2, [r2, #0]
 8001f9c:	68d2      	ldr	r2, [r2, #12]
 8001f9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fa2:	60da      	str	r2, [r3, #12]
  
  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b32      	cmp	r3, #50	; 0x32
 8001fae:	d104      	bne.n	8001fba <UART_EndTransmit_IT+0x2e>
  {
    huart->State = HAL_UART_STATE_BUSY_RX;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2222      	movs	r2, #34	; 0x22
 8001fb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001fb8:	e00b      	b.n	8001fd2 <UART_EndTransmit_IT+0x46>
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6812      	ldr	r2, [r2, #0]
 8001fc2:	6952      	ldr	r2, [r2, #20]
 8001fc4:	f022 0201 	bic.w	r2, r2, #1
 8001fc8:	615a      	str	r2, [r3, #20]

    huart->State = HAL_UART_STATE_READY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }
  
  HAL_UART_TxCpltCallback(huart);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff febc 	bl	8001d50 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop

08001fe4 <UART_Receive_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint32_t tmp_state = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]
  
  tmp_state = huart->State; 
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	60fb      	str	r3, [r7, #12]
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2b22      	cmp	r3, #34	; 0x22
 8001ffe:	d002      	beq.n	8002006 <UART_Receive_IT+0x22>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2b32      	cmp	r3, #50	; 0x32
 8002004:	d17c      	bne.n	8002100 <UART_Receive_IT+0x11c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800200e:	d123      	bne.n	8002058 <UART_Receive_IT+0x74>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002014:	60bb      	str	r3, [r7, #8]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10e      	bne.n	800203c <UART_Receive_IT+0x58>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	b29b      	uxth	r3, r3
 8002026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800202a:	b29a      	uxth	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002034:	1c9a      	adds	r2, r3, #2
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	629a      	str	r2, [r3, #40]	; 0x28
 800203a:	e029      	b.n	8002090 <UART_Receive_IT+0xac>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	b29b      	uxth	r3, r3
 8002044:	b2db      	uxtb	r3, r3
 8002046:	b29a      	uxth	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	629a      	str	r2, [r3, #40]	; 0x28
 8002056:	e01b      	b.n	8002090 <UART_Receive_IT+0xac>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10a      	bne.n	8002076 <UART_Receive_IT+0x92>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002064:	1c59      	adds	r1, r3, #1
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6291      	str	r1, [r2, #40]	; 0x28
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	6852      	ldr	r2, [r2, #4]
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	701a      	strb	r2, [r3, #0]
 8002074:	e00c      	b.n	8002090 <UART_Receive_IT+0xac>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207a:	1c59      	adds	r1, r3, #1
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6291      	str	r1, [r2, #40]	; 0x28
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	6852      	ldr	r2, [r2, #4]
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002094:	3b01      	subs	r3, #1
 8002096:	b29a      	uxth	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	85da      	strh	r2, [r3, #46]	; 0x2e
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d12b      	bne.n	80020fc <UART_Receive_IT+0x118>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	68d2      	ldr	r2, [r2, #12]
 80020ae:	f022 0220 	bic.w	r2, r2, #32
 80020b2:	60da      	str	r2, [r3, #12]

      /* Check if a transmit process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b32      	cmp	r3, #50	; 0x32
 80020be:	d104      	bne.n	80020ca <UART_Receive_IT+0xe6>
      {
        huart->State = HAL_UART_STATE_BUSY_TX;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2212      	movs	r2, #18
 80020c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80020c8:	e013      	b.n	80020f2 <UART_Receive_IT+0x10e>
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6812      	ldr	r2, [r2, #0]
 80020d2:	68d2      	ldr	r2, [r2, #12]
 80020d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020d8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	6952      	ldr	r2, [r2, #20]
 80020e4:	f022 0201 	bic.w	r2, r2, #1
 80020e8:	615a      	str	r2, [r3, #20]

        huart->State = HAL_UART_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      }
      HAL_UART_RxCpltCallback(huart);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff fe40 	bl	8001d78 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	e002      	b.n	8002102 <UART_Receive_IT+0x11e>
    }
    return HAL_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	e000      	b.n	8002102 <UART_Receive_IT+0x11e>
  }
  else
  {
    return HAL_BUSY; 
 8002100:	2302      	movs	r3, #2
  }
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop

0800210c <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800210c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00;
 8002114:	2300      	movs	r3, #0
 8002116:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	6912      	ldr	r2, [r2, #16]
 8002122:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	68d2      	ldr	r2, [r2, #12]
 800212a:	430a      	orrs	r2, r1
 800212c:	611a      	str	r2, [r3, #16]
  /*------- UART-associated USART registers setting : CR1 Configuration ------*/
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	4313      	orrs	r3, r2
 800213e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800214e:	f023 030c 	bic.w	r3, r3, #12
 8002152:	68f9      	ldr	r1, [r7, #12]
 8002154:	430b      	orrs	r3, r1
 8002156:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	6952      	ldr	r2, [r2, #20]
 8002162:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6992      	ldr	r2, [r2, #24]
 800216a:	430a      	orrs	r2, r1
 800216c:	615a      	str	r2, [r3, #20]
  
  /*------- UART-associated USART registers setting : BRR Configuration ------*/
  if((huart->Instance == USART1))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	4b44      	ldr	r3, [pc, #272]	; (8002284 <UART_SetConfig+0x178>)
 8002174:	429a      	cmp	r2, r3
 8002176:	d141      	bne.n	80021fc <UART_SetConfig+0xf0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681c      	ldr	r4, [r3, #0]
 800217c:	f003 fa0e 	bl	800559c <HAL_RCC_GetPCLK2Freq>
 8002180:	4602      	mov	r2, r0
 8002182:	4613      	mov	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	009a      	lsls	r2, r3, #2
 800218a:	441a      	add	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	fbb2 f2f3 	udiv	r2, r2, r3
 8002196:	4b3c      	ldr	r3, [pc, #240]	; (8002288 <UART_SetConfig+0x17c>)
 8002198:	fba3 1302 	umull	r1, r3, r3, r2
 800219c:	095b      	lsrs	r3, r3, #5
 800219e:	011d      	lsls	r5, r3, #4
 80021a0:	f003 f9fc 	bl	800559c <HAL_RCC_GetPCLK2Freq>
 80021a4:	4602      	mov	r2, r0
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	009a      	lsls	r2, r3, #2
 80021ae:	441a      	add	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	fbb2 f6f3 	udiv	r6, r2, r3
 80021ba:	f003 f9ef 	bl	800559c <HAL_RCC_GetPCLK2Freq>
 80021be:	4602      	mov	r2, r0
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	009a      	lsls	r2, r3, #2
 80021c8:	441a      	add	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80021d4:	4b2c      	ldr	r3, [pc, #176]	; (8002288 <UART_SetConfig+0x17c>)
 80021d6:	fba3 1302 	umull	r1, r3, r3, r2
 80021da:	095b      	lsrs	r3, r3, #5
 80021dc:	2264      	movs	r2, #100	; 0x64
 80021de:	fb02 f303 	mul.w	r3, r2, r3
 80021e2:	1af3      	subs	r3, r6, r3
 80021e4:	011b      	lsls	r3, r3, #4
 80021e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80021ea:	4b27      	ldr	r3, [pc, #156]	; (8002288 <UART_SetConfig+0x17c>)
 80021ec:	fba3 1302 	umull	r1, r3, r3, r2
 80021f0:	095b      	lsrs	r3, r3, #5
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	432b      	orrs	r3, r5
 80021f8:	60a3      	str	r3, [r4, #8]
 80021fa:	e040      	b.n	800227e <UART_SetConfig+0x172>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681c      	ldr	r4, [r3, #0]
 8002200:	f003 f9aa 	bl	8005558 <HAL_RCC_GetPCLK1Freq>
 8002204:	4602      	mov	r2, r0
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	009a      	lsls	r2, r3, #2
 800220e:	441a      	add	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	fbb2 f2f3 	udiv	r2, r2, r3
 800221a:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <UART_SetConfig+0x17c>)
 800221c:	fba3 1302 	umull	r1, r3, r3, r2
 8002220:	095b      	lsrs	r3, r3, #5
 8002222:	011d      	lsls	r5, r3, #4
 8002224:	f003 f998 	bl	8005558 <HAL_RCC_GetPCLK1Freq>
 8002228:	4602      	mov	r2, r0
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	009a      	lsls	r2, r3, #2
 8002232:	441a      	add	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	fbb2 f6f3 	udiv	r6, r2, r3
 800223e:	f003 f98b 	bl	8005558 <HAL_RCC_GetPCLK1Freq>
 8002242:	4602      	mov	r2, r0
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	009a      	lsls	r2, r3, #2
 800224c:	441a      	add	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	fbb2 f2f3 	udiv	r2, r2, r3
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <UART_SetConfig+0x17c>)
 800225a:	fba3 1302 	umull	r1, r3, r3, r2
 800225e:	095b      	lsrs	r3, r3, #5
 8002260:	2264      	movs	r2, #100	; 0x64
 8002262:	fb02 f303 	mul.w	r3, r2, r3
 8002266:	1af3      	subs	r3, r6, r3
 8002268:	011b      	lsls	r3, r3, #4
 800226a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800226e:	4b06      	ldr	r3, [pc, #24]	; (8002288 <UART_SetConfig+0x17c>)
 8002270:	fba3 1302 	umull	r1, r3, r3, r2
 8002274:	095b      	lsrs	r3, r3, #5
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	432b      	orrs	r3, r5
 800227c:	60a3      	str	r3, [r4, #8]
  }
}
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002284:	40013800 	.word	0x40013800
 8002288:	51eb851f 	.word	0x51eb851f

0800228c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800229c:	2b01      	cmp	r3, #1
 800229e:	d101      	bne.n	80022a4 <HAL_TIMEx_ConfigBreakDeadTime+0x18>
 80022a0:	2302      	movs	r3, #2
 80022a2:	e027      	b.n	80022f4 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	6811      	ldr	r1, [r2, #0]
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	6852      	ldr	r2, [r2, #4]

  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
 80022c0:	4311      	orrs	r1, r2
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
                                   sBreakDeadTimeConfig->LockLevel        |
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	6892      	ldr	r2, [r2, #8]
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
 80022c6:	4311      	orrs	r1, r2
                                   sBreakDeadTimeConfig->LockLevel        |
                                   sBreakDeadTimeConfig->DeadTime         |
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	68d2      	ldr	r2, [r2, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
                                   sBreakDeadTimeConfig->LockLevel        |
 80022cc:	4311      	orrs	r1, r2
                                   sBreakDeadTimeConfig->DeadTime         |
                                   sBreakDeadTimeConfig->BreakState       |
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	6912      	ldr	r2, [r2, #16]
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
                                   sBreakDeadTimeConfig->LockLevel        |
                                   sBreakDeadTimeConfig->DeadTime         |
 80022d2:	4311      	orrs	r1, r2
                                   sBreakDeadTimeConfig->BreakState       |
                                   sBreakDeadTimeConfig->BreakPolarity    |
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	6952      	ldr	r2, [r2, #20]
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
                                   sBreakDeadTimeConfig->LockLevel        |
                                   sBreakDeadTimeConfig->DeadTime         |
                                   sBreakDeadTimeConfig->BreakState       |
 80022d8:	4311      	orrs	r1, r2
                                   sBreakDeadTimeConfig->BreakPolarity    |
                                   sBreakDeadTimeConfig->AutomaticOutput;
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	6992      	ldr	r2, [r2, #24]
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
                                   sBreakDeadTimeConfig->LockLevel        |
                                   sBreakDeadTimeConfig->DeadTime         |
                                   sBreakDeadTimeConfig->BreakState       |
                                   sBreakDeadTimeConfig->BreakPolarity    |
 80022de:	430a      	orrs	r2, r1

  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
 80022e0:	645a      	str	r2, [r3, #68]	; 0x44
                                   sBreakDeadTimeConfig->BreakState       |
                                   sBreakDeadTimeConfig->BreakPolarity    |
                                   sBreakDeadTimeConfig->AutomaticOutput;


  htim->State = HAL_TIM_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002314:	2302      	movs	r3, #2
 8002316:	e032      	b.n	800237e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2202      	movs	r2, #2
 8002324:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	6852      	ldr	r2, [r2, #4]
 8002332:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002336:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6812      	ldr	r2, [r2, #0]
 8002340:	6851      	ldr	r1, [r2, #4]
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	6812      	ldr	r2, [r2, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6812      	ldr	r2, [r2, #0]
 8002352:	6892      	ldr	r2, [r2, #8]
 8002354:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002358:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6812      	ldr	r2, [r2, #0]
 8002362:	6891      	ldr	r1, [r2, #8]
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	6852      	ldr	r2, [r2, #4]
 8002368:	430a      	orrs	r2, r1
 800236a:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop

0800238c <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop

080023a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop

080023b4 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e01d      	b.n	8002402 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d106      	bne.n	80023e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f006 f87e 	bl	80084dc <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2202      	movs	r2, #2
 80023e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3304      	adds	r3, #4
 80023f0:	4610      	mov	r0, r2
 80023f2:	4619      	mov	r1, r3
 80023f4:	f000 fc7c 	bl	8002cf0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop

0800240c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	f042 0201 	orr.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop

08002444 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6812      	ldr	r2, [r2, #0]
 8002454:	68d2      	ldr	r2, [r2, #12]
 8002456:	f042 0201 	orr.w	r2, r2, #1
 800245a:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6812      	ldr	r2, [r2, #0]
 8002464:	6812      	ldr	r2, [r2, #0]
 8002466:	f042 0201 	orr.w	r2, r2, #1
 800246a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop

0800247c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	68d2      	ldr	r2, [r2, #12]
 800248e:	f022 0201 	bic.w	r2, r2, #1
 8002492:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6a1a      	ldr	r2, [r3, #32]
 800249a:	f241 1311 	movw	r3, #4369	; 0x1111
 800249e:	4013      	ands	r3, r2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10f      	bne.n	80024c4 <HAL_TIM_Base_Stop_IT+0x48>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6a1a      	ldr	r2, [r3, #32]
 80024aa:	f240 4344 	movw	r3, #1092	; 0x444
 80024ae:	4013      	ands	r3, r2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d107      	bne.n	80024c4 <HAL_TIM_Base_Stop_IT+0x48>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	6812      	ldr	r2, [r2, #0]
 80024be:	f022 0201 	bic.w	r2, r2, #1
 80024c2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop

080024d4 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e01d      	b.n	8002522 <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d106      	bne.n	8002500 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f816 	bl	800252c <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3304      	adds	r3, #4
 8002510:	4610      	mov	r0, r2
 8002512:	4619      	mov	r1, r3
 8002514:	f000 fbec 	bl	8002cf0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop

0800252c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop

08002540 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	6839      	ldr	r1, [r7, #0]
 8002552:	2201      	movs	r2, #1
 8002554:	f000 fe70 	bl	8003238 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <HAL_TIM_PWM_Start+0x4c>)
 800255e:	429a      	cmp	r2, r3
 8002560:	d107      	bne.n	8002572 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6812      	ldr	r2, [r2, #0]
 800256a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800256c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002570:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6812      	ldr	r2, [r2, #0]
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	f042 0201 	orr.w	r2, r2, #1
 8002580:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40012c00 	.word	0x40012c00

08002590 <HAL_TIM_Encoder_Init>:
  * @param  htim : TIM Encoder Interface handle
  * @param  sConfig : TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0;
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]

  /* Check the TIM handle allocation */
  if(htim == NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_TIM_Encoder_Init+0x20>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e081      	b.n	80026b4 <HAL_TIM_Encoder_Init+0x124>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d106      	bne.n	80025ca <HAL_TIM_Encoder_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f005 ffd1 	bl	800856c <HAL_TIM_Encoder_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2202      	movs	r2, #2
 80025ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	6892      	ldr	r2, [r2, #8]
 80025dc:	f022 0207 	bic.w	r2, r2, #7
 80025e0:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3304      	adds	r3, #4
 80025ea:	4610      	mov	r0, r2
 80025ec:	4619      	mov	r1, r3
 80025ee:	f000 fb7f 	bl	8002cf0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800261a:	f023 0303 	bic.w	r3, r3, #3
 800261e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	021b      	lsls	r3, r3, #8
 800262a:	4313      	orrs	r3, r2
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	4313      	orrs	r3, r2
 8002630:	613b      	str	r3, [r7, #16]

  /* Set the the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002638:	f023 030c 	bic.w	r3, r3, #12
 800263c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002644:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002648:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	021b      	lsls	r3, r3, #8
 8002654:	4313      	orrs	r3, r2
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	011a      	lsls	r2, r3, #4
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	031b      	lsls	r3, r3, #12
 8002668:	4313      	orrs	r3, r2
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002676:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800267e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	4313      	orrs	r3, r2
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	4313      	orrs	r3, r2
 8002690:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <HAL_TIM_Encoder_Start+0x16>
 80026cc:	2b04      	cmp	r3, #4
 80026ce:	d008      	beq.n	80026e2 <HAL_TIM_Encoder_Start+0x26>
 80026d0:	e00f      	b.n	80026f2 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	2100      	movs	r1, #0
 80026da:	2201      	movs	r2, #1
 80026dc:	f000 fdac 	bl	8003238 <TIM_CCxChannelCmd>
      break;
 80026e0:	e016      	b.n	8002710 <HAL_TIM_Encoder_Start+0x54>
  }
    case TIM_CHANNEL_2:
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	2104      	movs	r1, #4
 80026ea:	2201      	movs	r2, #1
 80026ec:	f000 fda4 	bl	8003238 <TIM_CCxChannelCmd>
      break;
 80026f0:	e00e      	b.n	8002710 <HAL_TIM_Encoder_Start+0x54>
  }
    default :
  {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	2100      	movs	r1, #0
 80026fa:	2201      	movs	r2, #1
 80026fc:	f000 fd9c 	bl	8003238 <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	2104      	movs	r1, #4
 8002708:	2201      	movs	r2, #1
 800270a:	f000 fd95 	bl	8003238 <TIM_CCxChannelCmd>
     break;
 800270e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	6812      	ldr	r2, [r2, #0]
 800271a:	f042 0201 	orr.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop

0800272c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d022      	beq.n	8002788 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d01b      	beq.n	8002788 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f06f 0202 	mvn.w	r2, #2
 8002758:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 faa0 	bl	8002cb4 <HAL_TIM_IC_CaptureCallback>
 8002774:	e005      	b.n	8002782 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 fa92 	bl	8002ca0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 faa3 	bl	8002cc8 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f003 0304 	and.w	r3, r3, #4
 8002792:	2b00      	cmp	r3, #0
 8002794:	d022      	beq.n	80027dc <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d01b      	beq.n	80027dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f06f 0204 	mvn.w	r2, #4
 80027ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2202      	movs	r2, #2
 80027b2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 fa76 	bl	8002cb4 <HAL_TIM_IC_CaptureCallback>
 80027c8:	e005      	b.n	80027d6 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 fa68 	bl	8002ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 fa79 	bl	8002cc8 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d022      	beq.n	8002830 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d01b      	beq.n	8002830 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f06f 0208 	mvn.w	r2, #8
 8002800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2204      	movs	r2, #4
 8002806:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 fa4c 	bl	8002cb4 <HAL_TIM_IC_CaptureCallback>
 800281c:	e005      	b.n	800282a <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fa3e 	bl	8002ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 fa4f 	bl	8002cc8 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f003 0310 	and.w	r3, r3, #16
 800283a:	2b00      	cmp	r3, #0
 800283c:	d022      	beq.n	8002884 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f003 0310 	and.w	r3, r3, #16
 8002848:	2b00      	cmp	r3, #0
 800284a:	d01b      	beq.n	8002884 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f06f 0210 	mvn.w	r2, #16
 8002854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2208      	movs	r2, #8
 800285a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 fa22 	bl	8002cb4 <HAL_TIM_IC_CaptureCallback>
 8002870:	e005      	b.n	800287e <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 fa14 	bl	8002ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 fa25 	bl	8002cc8 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00e      	beq.n	80028b0 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	d007      	beq.n	80028b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f06f 0201 	mvn.w	r2, #1
 80028a8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f9ee 	bl	8002c8c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00e      	beq.n	80028dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d007      	beq.n	80028dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028d4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff fd62 	bl	80023a0 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00e      	beq.n	8002908 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d007      	beq.n	8002908 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002900:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f9ea 	bl	8002cdc <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f003 0320 	and.w	r3, r3, #32
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00e      	beq.n	8002934 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f003 0320 	and.w	r3, r3, #32
 8002920:	2b00      	cmp	r3, #0
 8002922:	d007      	beq.n	8002934 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0220 	mvn.w	r2, #32
 800292c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7ff fd2c 	bl	800238c <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop

0800293c <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002952:	2302      	movs	r3, #2
 8002954:	e0b4      	b.n	8002ac0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  assert_param(IS_TIM_OCN_POLARITY(sConfig->OCNPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  assert_param(IS_TIM_OCNIDLE_STATE(sConfig->OCNIdleState));
  assert_param(IS_TIM_OCIDLE_STATE(sConfig->OCIdleState));

  htim->State = HAL_TIM_STATE_BUSY;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2202      	movs	r2, #2
 8002962:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  switch (Channel)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b0c      	cmp	r3, #12
 800296a:	f200 809f 	bhi.w	8002aac <HAL_TIM_PWM_ConfigChannel+0x170>
 800296e:	a201      	add	r2, pc, #4	; (adr r2, 8002974 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002974:	080029a9 	.word	0x080029a9
 8002978:	08002aad 	.word	0x08002aad
 800297c:	08002aad 	.word	0x08002aad
 8002980:	08002aad 	.word	0x08002aad
 8002984:	080029e9 	.word	0x080029e9
 8002988:	08002aad 	.word	0x08002aad
 800298c:	08002aad 	.word	0x08002aad
 8002990:	08002aad 	.word	0x08002aad
 8002994:	08002a2b 	.word	0x08002a2b
 8002998:	08002aad 	.word	0x08002aad
 800299c:	08002aad 	.word	0x08002aad
 80029a0:	08002aad 	.word	0x08002aad
 80029a4:	08002a6b 	.word	0x08002a6b
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	68b9      	ldr	r1, [r7, #8]
 80029b0:	f000 f9fc 	bl	8002dac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	6992      	ldr	r2, [r2, #24]
 80029be:	f042 0208 	orr.w	r2, r2, #8
 80029c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	6992      	ldr	r2, [r2, #24]
 80029ce:	f022 0204 	bic.w	r2, r2, #4
 80029d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	6991      	ldr	r1, [r2, #24]
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	6912      	ldr	r2, [r2, #16]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	619a      	str	r2, [r3, #24]
    }
    break;
 80029e6:	e062      	b.n	8002aae <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	68b9      	ldr	r1, [r7, #8]
 80029f0:	f000 fa48 	bl	8002e84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	6812      	ldr	r2, [r2, #0]
 80029fc:	6992      	ldr	r2, [r2, #24]
 80029fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	6992      	ldr	r2, [r2, #24]
 8002a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	6991      	ldr	r1, [r2, #24]
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	6912      	ldr	r2, [r2, #16]
 8002a22:	0212      	lsls	r2, r2, #8
 8002a24:	430a      	orrs	r2, r1
 8002a26:	619a      	str	r2, [r3, #24]
    }
    break;
 8002a28:	e041      	b.n	8002aae <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	68b9      	ldr	r1, [r7, #8]
 8002a32:	f000 fa97 	bl	8002f64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	6812      	ldr	r2, [r2, #0]
 8002a3e:	69d2      	ldr	r2, [r2, #28]
 8002a40:	f042 0208 	orr.w	r2, r2, #8
 8002a44:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	6812      	ldr	r2, [r2, #0]
 8002a4e:	69d2      	ldr	r2, [r2, #28]
 8002a50:	f022 0204 	bic.w	r2, r2, #4
 8002a54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	6812      	ldr	r2, [r2, #0]
 8002a5e:	69d1      	ldr	r1, [r2, #28]
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	6912      	ldr	r2, [r2, #16]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	61da      	str	r2, [r3, #28]
    }
    break;
 8002a68:	e021      	b.n	8002aae <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	68b9      	ldr	r1, [r7, #8]
 8002a72:	f000 fae7 	bl	8003044 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	6812      	ldr	r2, [r2, #0]
 8002a7e:	69d2      	ldr	r2, [r2, #28]
 8002a80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a84:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	6812      	ldr	r2, [r2, #0]
 8002a8e:	69d2      	ldr	r2, [r2, #28]
 8002a90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	6812      	ldr	r2, [r2, #0]
 8002a9e:	69d1      	ldr	r1, [r2, #28]
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	6912      	ldr	r2, [r2, #16]
 8002aa4:	0212      	lsls	r2, r2, #8
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	61da      	str	r2, [r3, #28]
    }
    break;
 8002aaa:	e000      	b.n	8002aae <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 8002aac:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d101      	bne.n	8002ae4 <HAL_TIM_ConfigClockSource+0x1c>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	e0cf      	b.n	8002c84 <HAL_TIM_ConfigClockSource+0x1bc>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
  assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
  assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b0a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b40      	cmp	r3, #64	; 0x40
 8002b1a:	d07c      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0x14e>
 8002b1c:	2b40      	cmp	r3, #64	; 0x40
 8002b1e:	d80f      	bhi.n	8002b40 <HAL_TIM_ConfigClockSource+0x78>
 8002b20:	2b10      	cmp	r3, #16
 8002b22:	f000 8091 	beq.w	8002c48 <HAL_TIM_ConfigClockSource+0x180>
 8002b26:	2b10      	cmp	r3, #16
 8002b28:	d803      	bhi.n	8002b32 <HAL_TIM_ConfigClockSource+0x6a>
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 8085 	beq.w	8002c3a <HAL_TIM_ConfigClockSource+0x172>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8002b30:	e09f      	b.n	8002c72 <HAL_TIM_ConfigClockSource+0x1aa>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8002b32:	2b20      	cmp	r3, #32
 8002b34:	f000 808f 	beq.w	8002c56 <HAL_TIM_ConfigClockSource+0x18e>
 8002b38:	2b30      	cmp	r3, #48	; 0x30
 8002b3a:	f000 8093 	beq.w	8002c64 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8002b3e:	e098      	b.n	8002c72 <HAL_TIM_ConfigClockSource+0x1aa>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8002b40:	2b70      	cmp	r3, #112	; 0x70
 8002b42:	d016      	beq.n	8002b72 <HAL_TIM_ConfigClockSource+0xaa>
 8002b44:	2b70      	cmp	r3, #112	; 0x70
 8002b46:	d804      	bhi.n	8002b52 <HAL_TIM_ConfigClockSource+0x8a>
 8002b48:	2b50      	cmp	r3, #80	; 0x50
 8002b4a:	d040      	beq.n	8002bce <HAL_TIM_ConfigClockSource+0x106>
 8002b4c:	2b60      	cmp	r3, #96	; 0x60
 8002b4e:	d050      	beq.n	8002bf2 <HAL_TIM_ConfigClockSource+0x12a>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8002b50:	e08f      	b.n	8002c72 <HAL_TIM_ConfigClockSource+0x1aa>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8002b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b56:	d003      	beq.n	8002b60 <HAL_TIM_ConfigClockSource+0x98>
 8002b58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b5c:	d024      	beq.n	8002ba8 <HAL_TIM_ConfigClockSource+0xe0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8002b5e:	e088      	b.n	8002c72 <HAL_TIM_ConfigClockSource+0x1aa>
  {
  case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6812      	ldr	r2, [r2, #0]
 8002b68:	6892      	ldr	r2, [r2, #8]
 8002b6a:	f022 0207 	bic.w	r2, r2, #7
 8002b6e:	609a      	str	r2, [r3, #8]
    }
    break;
 8002b70:	e07f      	b.n	8002c72 <HAL_TIM_ConfigClockSource+0x1aa>
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6818      	ldr	r0, [r3, #0]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	6899      	ldr	r1, [r3, #8]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f000 fb37 	bl	80031f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	60fb      	str	r3, [r7, #12]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b94:	60fb      	str	r3, [r7, #12]
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b9c:	60fb      	str	r3, [r7, #12]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	609a      	str	r2, [r3, #8]
    }
    break;
 8002ba6:	e064      	b.n	8002c72 <HAL_TIM_ConfigClockSource+0x1aa>
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6818      	ldr	r0, [r3, #0]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	6899      	ldr	r1, [r3, #8]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f000 fb1c 	bl	80031f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	6892      	ldr	r2, [r2, #8]
 8002bc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bca:	609a      	str	r2, [r3, #8]
    }
    break;
 8002bcc:	e051      	b.n	8002c72 <HAL_TIM_ConfigClockSource+0x1aa>
  case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6819      	ldr	r1, [r3, #0]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	4608      	mov	r0, r1
 8002bdc:	4611      	mov	r1, r2
 8002bde:	461a      	mov	r2, r3
 8002be0:	f000 fa84 	bl	80030ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	2150      	movs	r1, #80	; 0x50
 8002bec:	f000 fae4 	bl	80031b8 <TIM_ITRx_SetConfig>
    }
    break;
 8002bf0:	e03f      	b.n	8002c72 <HAL_TIM_ConfigClockSource+0x1aa>
  case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6819      	ldr	r1, [r3, #0]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	4608      	mov	r0, r1
 8002c00:	4611      	mov	r1, r2
 8002c02:	461a      	mov	r2, r3
 8002c04:	f000 faa4 	bl	8003150 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	2160      	movs	r1, #96	; 0x60
 8002c10:	f000 fad2 	bl	80031b8 <TIM_ITRx_SetConfig>
    }
    break;
 8002c14:	e02d      	b.n	8002c72 <HAL_TIM_ConfigClockSource+0x1aa>
  case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6819      	ldr	r1, [r3, #0]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	4608      	mov	r0, r1
 8002c24:	4611      	mov	r1, r2
 8002c26:	461a      	mov	r2, r3
 8002c28:	f000 fa60 	bl	80030ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	2140      	movs	r1, #64	; 0x40
 8002c34:	f000 fac0 	bl	80031b8 <TIM_ITRx_SetConfig>
    }
    break;
 8002c38:	e01b      	b.n	8002c72 <HAL_TIM_ConfigClockSource+0x1aa>
  case TIM_CLOCKSOURCE_ITR0:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	2100      	movs	r1, #0
 8002c42:	f000 fab9 	bl	80031b8 <TIM_ITRx_SetConfig>
    }
    break;
 8002c46:	e014      	b.n	8002c72 <HAL_TIM_ConfigClockSource+0x1aa>
  case TIM_CLOCKSOURCE_ITR1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	2110      	movs	r1, #16
 8002c50:	f000 fab2 	bl	80031b8 <TIM_ITRx_SetConfig>
    }
    break;
 8002c54:	e00d      	b.n	8002c72 <HAL_TIM_ConfigClockSource+0x1aa>
  case TIM_CLOCKSOURCE_ITR2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	2120      	movs	r1, #32
 8002c5e:	f000 faab 	bl	80031b8 <TIM_ITRx_SetConfig>
    }
    break;
 8002c62:	e006      	b.n	8002c72 <HAL_TIM_ConfigClockSource+0x1aa>
  case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	2130      	movs	r1, #48	; 0x30
 8002c6c:	f000 faa4 	bl	80031b8 <TIM_ITRx_SetConfig>
    }
    break;
 8002c70:	bf00      	nop

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop

08002ca0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop

08002cb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop

08002cc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop

08002cdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop

08002cf0 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	4b26      	ldr	r3, [pc, #152]	; (8002da0 <TIM_Base_SetConfig+0xb0>)
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d00b      	beq.n	8002d24 <TIM_Base_SetConfig+0x34>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d12:	d007      	beq.n	8002d24 <TIM_Base_SetConfig+0x34>
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	4b23      	ldr	r3, [pc, #140]	; (8002da4 <TIM_Base_SetConfig+0xb4>)
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d003      	beq.n	8002d24 <TIM_Base_SetConfig+0x34>
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	4b22      	ldr	r3, [pc, #136]	; (8002da8 <TIM_Base_SetConfig+0xb8>)
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d108      	bne.n	8002d36 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	4b19      	ldr	r3, [pc, #100]	; (8002da0 <TIM_Base_SetConfig+0xb0>)
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d00b      	beq.n	8002d56 <TIM_Base_SetConfig+0x66>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d44:	d007      	beq.n	8002d56 <TIM_Base_SetConfig+0x66>
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	4b16      	ldr	r3, [pc, #88]	; (8002da4 <TIM_Base_SetConfig+0xb4>)
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d003      	beq.n	8002d56 <TIM_Base_SetConfig+0x66>
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	4b15      	ldr	r3, [pc, #84]	; (8002da8 <TIM_Base_SetConfig+0xb8>)
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d108      	bne.n	8002d68 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	4b07      	ldr	r3, [pc, #28]	; (8002da0 <TIM_Base_SetConfig+0xb0>)
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d103      	bne.n	8002d8e <TIM_Base_SetConfig+0x9e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	691a      	ldr	r2, [r3, #16]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	615a      	str	r2, [r3, #20]
}
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	40012c00 	.word	0x40012c00
 8002da4:	40000400 	.word	0x40000400
 8002da8:	40000800 	.word	0x40000800

08002dac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b087      	sub	sp, #28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	f023 0201 	bic.w	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f023 0303 	bic.w	r3, r3, #3
 8002dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f023 0302 	bic.w	r3, r3, #2
 8002e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	4b1c      	ldr	r3, [pc, #112]	; (8002e80 <TIM_OC1_SetConfig+0xd4>)
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d10c      	bne.n	8002e2e <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f023 0308 	bic.w	r3, r3, #8
 8002e1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f023 0304 	bic.w	r3, r3, #4
 8002e2c:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <TIM_OC1_SetConfig+0xd4>)
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d111      	bne.n	8002e5a <TIM_OC1_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	621a      	str	r2, [r3, #32]
}
 8002e74:	371c      	adds	r7, #28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40012c00 	.word	0x40012c00

08002e84 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8002e92:	2300      	movs	r3, #0
 8002e94:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;
 8002e96:	2300      	movs	r3, #0
 8002e98:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	f023 0210 	bic.w	r2, r3, #16
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	021b      	lsls	r3, r3, #8
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f023 0320 	bic.w	r3, r3, #32
 8002eda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	4b1d      	ldr	r3, [pc, #116]	; (8002f60 <TIM_OC2_SetConfig+0xdc>)
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d10d      	bne.n	8002f0c <TIM_OC2_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f0a:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	4b14      	ldr	r3, [pc, #80]	; (8002f60 <TIM_OC2_SetConfig+0xdc>)
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d113      	bne.n	8002f3c <TIM_OC2_SetConfig+0xb8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	621a      	str	r2, [r3, #32]
}
 8002f56:	371c      	adds	r7, #28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	40012c00 	.word	0x40012c00

08002f64 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b087      	sub	sp, #28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 0303 	bic.w	r3, r3, #3
 8002fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	021b      	lsls	r3, r3, #8
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	4b1d      	ldr	r3, [pc, #116]	; (8003040 <TIM_OC3_SetConfig+0xdc>)
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d10d      	bne.n	8002fea <TIM_OC3_SetConfig+0x86>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	021b      	lsls	r3, r3, #8
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fe8:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	4b14      	ldr	r3, [pc, #80]	; (8003040 <TIM_OC3_SetConfig+0xdc>)
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d113      	bne.n	800301a <TIM_OC3_SetConfig+0xb6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	4313      	orrs	r3, r2
 8003018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	621a      	str	r2, [r3, #32]
}
 8003034:	371c      	adds	r7, #28
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	40012c00 	.word	0x40012c00

08003044 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 800304e:	2300      	movs	r3, #0
 8003050:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 8003052:	2300      	movs	r3, #0
 8003054:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0;
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800307e:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003086:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	021b      	lsls	r3, r3, #8
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	4313      	orrs	r3, r2
 8003092:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800309a:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	031b      	lsls	r3, r3, #12
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	4b0f      	ldr	r3, [pc, #60]	; (80030e8 <TIM_OC4_SetConfig+0xa4>)
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d109      	bne.n	80030c4 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	019b      	lsls	r3, r3, #6
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	621a      	str	r2, [r3, #32]
}
 80030de:	371c      	adds	r7, #28
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	40012c00 	.word	0x40012c00

080030ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	f023 0201 	bic.w	r2, r3, #1
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800311e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	4313      	orrs	r3, r2
 8003128:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	f023 030a 	bic.w	r3, r3, #10
 8003130:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	4313      	orrs	r3, r2
 8003138:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	621a      	str	r2, [r3, #32]
}
 8003146:	371c      	adds	r7, #28
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003150:	b480      	push	{r7}
 8003152:	b087      	sub	sp, #28
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 8003160:	2300      	movs	r3, #0
 8003162:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	f023 0210 	bic.w	r2, r3, #16
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003182:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	031b      	lsls	r3, r3, #12
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	4313      	orrs	r3, r2
 800318c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003194:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4);
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4313      	orrs	r3, r2
 800319e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	621a      	str	r2, [r3, #32]
}
 80031ac:	371c      	adds	r7, #28
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop

080031b8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0;
 80031c4:	2300      	movs	r3, #0
 80031c6:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d4:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80031d6:	887b      	ldrh	r3, [r7, #2]
 80031d8:	f043 0307 	orr.w	r3, r3, #7
 80031dc:	b29b      	uxth	r3, r3
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	609a      	str	r2, [r3, #8]
}
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0;
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003212:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	021a      	lsls	r2, r3, #8
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	431a      	orrs	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	4313      	orrs	r3, r2
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	4313      	orrs	r3, r2
 8003224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	609a      	str	r2, [r3, #8]
}
 800322c:	371c      	adds	r7, #28
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop

08003238 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003238:	b480      	push	{r7}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2201      	movs	r2, #1
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a1a      	ldr	r2, [r3, #32]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	43db      	mvns	r3, r3
 800325a:	401a      	ands	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6a1a      	ldr	r2, [r3, #32]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	fa01 f303 	lsl.w	r3, r1, r3
 800326c:	431a      	orrs	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	621a      	str	r2, [r3, #32]
}
 8003272:	371c      	adds	r7, #28
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e056      	b.n	800333c <HAL_SPI_Init+0xc0>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));

  if(hspi->State == HAL_SPI_STATE_RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d102      	bne.n	80032a0 <HAL_SPI_Init+0x24>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f005 f8e6 	bl	800846c <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6812      	ldr	r2, [r2, #0]
 80032b0:	6812      	ldr	r2, [r2, #0]
 80032b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6851      	ldr	r1, [r2, #4]
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6892      	ldr	r2, [r2, #8]
 80032c4:	4311      	orrs	r1, r2
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	68d2      	ldr	r2, [r2, #12]
 80032ca:	4311      	orrs	r1, r2
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6912      	ldr	r2, [r2, #16]
 80032d0:	4311      	orrs	r1, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6952      	ldr	r2, [r2, #20]
 80032d6:	4311      	orrs	r1, r2
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6992      	ldr	r2, [r2, #24]
 80032dc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80032e0:	4311      	orrs	r1, r2
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	69d2      	ldr	r2, [r2, #28]
 80032e6:	4311      	orrs	r1, r2
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6a12      	ldr	r2, [r2, #32]
 80032ec:	4311      	orrs	r1, r2
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80032f2:	430a      	orrs	r2, r1
 80032f4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6992      	ldr	r2, [r2, #24]
 80032fe:	0c12      	lsrs	r2, r2, #16
 8003300:	f002 0104 	and.w	r1, r2, #4
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003308:	430a      	orrs	r2, r1
 800330a:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003314:	611a      	str	r2, [r3, #16]

#if defined (STM32F101x6) || defined (STM32F101xB) || defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F102x6) || defined (STM32F102xB) || defined (STM32F103x6) || defined (STM32F103xB) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F105xC) || defined (STM32F107xC)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	69d2      	ldr	r2, [r2, #28]
 8003320:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003324:	61da      	str	r2, [r3, #28]
     Revision ID information is only available in Debug mode, so Workaround could not be implemented
     to distinguish Rev Z devices (issue present) from more recent version (issue fixed).
     So, in case of Revison Z F101 or F103 devices, below variable should be assigned to 1 */
  uCRCErrorWorkaroundCheck = 0;
#else
  uCRCErrorWorkaroundCheck = 0;
 8003326:	4b07      	ldr	r3, [pc, #28]	; (8003344 <HAL_SPI_Init+0xc8>)
 8003328:	2200      	movs	r2, #0
 800332a:	701a      	strb	r2, [r3, #0]
#endif

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	20000028 	.word	0x20000028

08003348 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0;
 8003350:	2300      	movs	r3, #0
 8003352:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if(hrtc == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_RTC_Init+0x16>
  {
     return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e084      	b.n	8003468 <HAL_RTC_Init+0x120>
  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	7c5b      	ldrb	r3, [r3, #17]
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	d105      	bne.n	8003374 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	741a      	strb	r2, [r3, #16]
    
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f005 f84c 	bl	800840c <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2202      	movs	r2, #2
 8003378:	745a      	strb	r2, [r3, #17]
       
  /* Waiting for synchro */
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f9c8 	bl	8003710 <HAL_RTC_WaitForSynchro>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d004      	beq.n	8003390 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2204      	movs	r2, #4
 800338a:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e06b      	b.n	8003468 <HAL_RTC_Init+0x120>
  } 

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 fa87 	bl	80038a4 <RTC_EnterInitMode>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d004      	beq.n	80033a6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2204      	movs	r2, #4
 80033a0:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e060      	b.n	8003468 <HAL_RTC_Init+0x120>
  } 
  else
  { 
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6812      	ldr	r2, [r2, #0]
 80033ae:	6852      	ldr	r2, [r2, #4]
 80033b0:	f022 0207 	bic.w	r2, r2, #7
 80033b4:	605a      	str	r2, [r3, #4]
    
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d005      	beq.n	80033ca <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80033be:	4b2c      	ldr	r3, [pc, #176]	; (8003470 <HAL_RTC_Init+0x128>)
 80033c0:	4a2b      	ldr	r2, [pc, #172]	; (8003470 <HAL_RTC_Init+0x128>)
 80033c2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033c4:	f022 0201 	bic.w	r2, r2, #1
 80033c8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80033ca:	4b29      	ldr	r3, [pc, #164]	; (8003470 <HAL_RTC_Init+0x128>)
 80033cc:	4a28      	ldr	r2, [pc, #160]	; (8003470 <HAL_RTC_Init+0x128>)
 80033ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80033d0:	f422 7160 	bic.w	r1, r2, #896	; 0x380
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6892      	ldr	r2, [r2, #8]
 80033d8:	430a      	orrs	r2, r1
 80033da:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e4:	d003      	beq.n	80033ee <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	e00e      	b.n	800340c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80033ee:	2001      	movs	r0, #1
 80033f0:	f000 fc34 	bl	8003c5c <HAL_RCCEx_GetPeriphCLKFreq>
 80033f4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d104      	bne.n	8003406 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2204      	movs	r2, #4
 8003400:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e030      	b.n	8003468 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	3b01      	subs	r3, #1
 800340a:	60fb      	str	r3, [r7, #12]
      }
    }
    
    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	6812      	ldr	r2, [r2, #0]
 8003414:	6892      	ldr	r2, [r2, #8]
 8003416:	f022 010f 	bic.w	r1, r2, #15
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	0c12      	lsrs	r2, r2, #16
 800341e:	430a      	orrs	r2, r1
 8003420:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	0c1b      	lsrs	r3, r3, #16
 800342e:	041b      	lsls	r3, r3, #16
 8003430:	68f9      	ldr	r1, [r7, #12]
 8003432:	b289      	uxth	r1, r1
 8003434:	430b      	orrs	r3, r1
 8003436:	60d3      	str	r3, [r2, #12]
      
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 fa5b 	bl	80038f4 <RTC_ExitInitMode>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d004      	beq.n	800344e <HAL_RTC_Init+0x106>
    {       
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2204      	movs	r2, #4
 8003448:	745a      	strb	r2, [r3, #17]
      
      return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e00c      	b.n	8003468 <HAL_RTC_Init+0x120>
    }
    
    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	745a      	strb	r2, [r3, #17]
    
    return HAL_OK;
 8003466:	2300      	movs	r3, #0
  }
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40006c00 	.word	0x40006c00

08003474 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003474:	b590      	push	{r4, r7, lr}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0, counter_alarm = 0;
 8003480:	2300      	movs	r3, #0
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	2300      	movs	r3, #0
 8003486:	613b      	str	r3, [r7, #16]
  
  /* Check input parameters */
  if((hrtc == NULL) || (sTime == NULL))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <HAL_RTC_SetTime+0x20>
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_RTC_SetTime+0x24>
  {
     return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e07e      	b.n	8003596 <HAL_RTC_SetTime+0x122>
  
 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	7c1b      	ldrb	r3, [r3, #16]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_RTC_SetTime+0x30>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e078      	b.n	8003596 <HAL_RTC_SetTime+0x122>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2201      	movs	r2, #1
 80034a8:	741a      	strb	r2, [r3, #16]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2202      	movs	r2, #2
 80034ae:	745a      	strb	r2, [r3, #17]
  
  if(Format == RTC_FORMAT_BIN)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d112      	bne.n	80034dc <HAL_RTC_SetTime+0x68>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600) + \
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80034be:	fb02 f103 	mul.w	r1, r2, r3
                        ((uint32_t)sTime->Minutes * 60) + \
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	785b      	ldrb	r3, [r3, #1]
 80034c6:	461a      	mov	r2, r3
 80034c8:	4613      	mov	r3, r2
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	1a9b      	subs	r3, r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600) + \
 80034d0:	18ca      	adds	r2, r1, r3
                        ((uint32_t)sTime->Minutes * 60) + \
                        ((uint32_t)sTime->Seconds));  
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	789b      	ldrb	r3, [r3, #2]
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600) + \
 80034d6:	4413      	add	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	e01d      	b.n	8003518 <HAL_RTC_SetTime+0xa4>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600) + \
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 fa2f 	bl	8003944 <RTC_Bcd2ToByte>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80034ec:	fb02 f403 	mul.w	r4, r2, r3
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60) + \
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	785b      	ldrb	r3, [r3, #1]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 fa25 	bl	8003944 <RTC_Bcd2ToByte>
 80034fa:	4603      	mov	r3, r0
 80034fc:	461a      	mov	r2, r3
 80034fe:	4613      	mov	r3, r2
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	1a9b      	subs	r3, r3, r2
 8003504:	009b      	lsls	r3, r3, #2
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600) + \
 8003506:	441c      	add	r4, r3
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60) + \
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));   
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	789b      	ldrb	r3, [r3, #2]
 800350c:	4618      	mov	r0, r3
 800350e:	f000 fa19 	bl	8003944 <RTC_Bcd2ToByte>
 8003512:	4603      	mov	r3, r0
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600) + \
 8003514:	4423      	add	r3, r4
 8003516:	617b      	str	r3, [r7, #20]
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60) + \
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));   
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	6979      	ldr	r1, [r7, #20]
 800351c:	f000 f958 	bl	80037d0 <RTC_WriteTimeCounter>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d007      	beq.n	8003536 <HAL_RTC_SetTime+0xc2>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2204      	movs	r2, #4
 800352a:	745a      	strb	r2, [r3, #17]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	741a      	strb	r2, [r3, #16]
    
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e02f      	b.n	8003596 <HAL_RTC_SetTime+0x122>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	6812      	ldr	r2, [r2, #0]
 800353e:	6852      	ldr	r2, [r2, #4]
 8003540:	f022 0205 	bic.w	r2, r2, #5
 8003544:	605a      	str	r2, [r3, #4]
    
    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 f96a 	bl	8003820 <RTC_ReadAlarmCounter>
 800354c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003554:	d018      	beq.n	8003588 <HAL_RTC_SetTime+0x114>
    {
      if(counter_alarm < counter_time)
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	429a      	cmp	r2, r3
 800355c:	d214      	bcs.n	8003588 <HAL_RTC_SetTime+0x114>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24 * 3600);
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003564:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003568:	613b      	str	r3, [r7, #16]
        
        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	6939      	ldr	r1, [r7, #16]
 800356e:	f000 f971 	bl	8003854 <RTC_WriteAlarmCounter>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d007      	beq.n	8003588 <HAL_RTC_SetTime+0x114>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2204      	movs	r2, #4
 800357c:	745a      	strb	r2, [r3, #17]
          
          /* Process Unlocked */ 
          __HAL_UNLOCK(hrtc);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	741a      	strb	r2, [r3, #16]
          
          return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e006      	b.n	8003596 <HAL_RTC_SetTime+0x122>
        }
      }
    }
    
    hrtc->State = HAL_RTC_STATE_READY;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2201      	movs	r2, #1
 800358c:	745a      	strb	r2, [r3, #17]
  
   __HAL_UNLOCK(hrtc); 
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	741a      	strb	r2, [r3, #16]
     
   return HAL_OK;
 8003594:	2300      	movs	r3, #0
  }
}
 8003596:	4618      	mov	r0, r3
 8003598:	371c      	adds	r7, #28
 800359a:	46bd      	mov	sp, r7
 800359c:	bd90      	pop	{r4, r7, pc}
 800359e:	bf00      	nop

080035a0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0, counter_alarm = 0, hours = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	61fb      	str	r3, [r7, #28]
 80035b0:	2300      	movs	r3, #0
 80035b2:	61bb      	str	r3, [r7, #24]
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]
  
  /* Check input parameters */
  if((hrtc == NULL) || (sDate == NULL))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_RTC_SetDate+0x24>
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_RTC_SetDate+0x28>
  {
     return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e099      	b.n	80036fc <HAL_RTC_SetDate+0x15c>
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
 /* Process Locked */ 
 __HAL_LOCK(hrtc);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	7c1b      	ldrb	r3, [r3, #16]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_RTC_SetDate+0x34>
 80035d0:	2302      	movs	r3, #2
 80035d2:	e093      	b.n	80036fc <HAL_RTC_SetDate+0x15c>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2201      	movs	r2, #1
 80035d8:	741a      	strb	r2, [r3, #16]
  
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2202      	movs	r2, #2
 80035de:	745a      	strb	r2, [r3, #17]
  
  if(Format == RTC_FORMAT_BIN)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10c      	bne.n	8003600 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date)); 

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	78da      	ldrb	r2, [r3, #3]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	785a      	ldrb	r2, [r3, #1]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	789a      	ldrb	r2, [r3, #2]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	739a      	strb	r2, [r3, #14]
 80035fe:	e01a      	b.n	8003636 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
    
    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	78db      	ldrb	r3, [r3, #3]
 8003604:	4618      	mov	r0, r3
 8003606:	f000 f99d 	bl	8003944 <RTC_Bcd2ToByte>
 800360a:	4603      	mov	r3, r0
 800360c:	461a      	mov	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	785b      	ldrb	r3, [r3, #1]
 8003616:	4618      	mov	r0, r3
 8003618:	f000 f994 	bl	8003944 <RTC_Bcd2ToByte>
 800361c:	4603      	mov	r3, r0
 800361e:	461a      	mov	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	789b      	ldrb	r3, [r3, #2]
 8003628:	4618      	mov	r0, r3
 800362a:	f000 f98b 	bl	8003944 <RTC_Bcd2ToByte>
 800362e:	4603      	mov	r3, r0
 8003630:	461a      	mov	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	7bdb      	ldrb	r3, [r3, #15]
 800363a:	4619      	mov	r1, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	7b5a      	ldrb	r2, [r3, #13]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	7b9b      	ldrb	r3, [r3, #14]
 8003644:	4608      	mov	r0, r1
 8003646:	4611      	mov	r1, r2
 8003648:	461a      	mov	r2, r3
 800364a:	f000 f999 	bl	8003980 <RTC_WeekDayNum>
 800364e:	4603      	mov	r3, r0
 8003650:	461a      	mov	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	7b1a      	ldrb	r2, [r3, #12]
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 f884 	bl	800376c <RTC_ReadTimeCounter>
 8003664:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600;
 8003666:	69fa      	ldr	r2, [r7, #28]
 8003668:	4b26      	ldr	r3, [pc, #152]	; (8003704 <HAL_RTC_SetDate+0x164>)
 800366a:	fba3 1302 	umull	r1, r3, r3, r2
 800366e:	0adb      	lsrs	r3, r3, #11
 8003670:	617b      	str	r3, [r7, #20]
  if (hours > 24)
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2b18      	cmp	r3, #24
 8003676:	d93a      	bls.n	80036ee <HAL_RTC_SetDate+0x14e>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24) * 24 * 3600);
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	4b23      	ldr	r3, [pc, #140]	; (8003708 <HAL_RTC_SetDate+0x168>)
 800367c:	fba3 1302 	umull	r1, r3, r3, r2
 8003680:	091b      	lsrs	r3, r3, #4
 8003682:	4a22      	ldr	r2, [pc, #136]	; (800370c <HAL_RTC_SetDate+0x16c>)
 8003684:	fb02 f303 	mul.w	r3, r2, r3
 8003688:	69fa      	ldr	r2, [r7, #28]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	69f9      	ldr	r1, [r7, #28]
 8003692:	f000 f89d 	bl	80037d0 <RTC_WriteTimeCounter>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d007      	beq.n	80036ac <HAL_RTC_SetDate+0x10c>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2204      	movs	r2, #4
 80036a0:	745a      	strb	r2, [r3, #17]
      
      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	741a      	strb	r2, [r3, #16]
      
      return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e027      	b.n	80036fc <HAL_RTC_SetDate+0x15c>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 f8b7 	bl	8003820 <RTC_ReadAlarmCounter>
 80036b2:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ba:	d018      	beq.n	80036ee <HAL_RTC_SetDate+0x14e>
    {
      if(counter_alarm < counter_time)
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d214      	bcs.n	80036ee <HAL_RTC_SetDate+0x14e>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24 * 3600);
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80036ca:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80036ce:	61bb      	str	r3, [r7, #24]
        
        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	69b9      	ldr	r1, [r7, #24]
 80036d4:	f000 f8be 	bl	8003854 <RTC_WriteAlarmCounter>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d007      	beq.n	80036ee <HAL_RTC_SetDate+0x14e>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2204      	movs	r2, #4
 80036e2:	745a      	strb	r2, [r3, #17]
          
          /* Process Unlocked */ 
          __HAL_UNLOCK(hrtc);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	741a      	strb	r2, [r3, #16]
          
          return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e006      	b.n	80036fc <HAL_RTC_SetDate+0x15c>
    }
    

  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2201      	movs	r2, #1
 80036f2:	745a      	strb	r2, [r3, #17]
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	741a      	strb	r2, [r3, #16]
  
  return HAL_OK;    
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3720      	adds	r7, #32
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	91a2b3c5 	.word	0x91a2b3c5
 8003708:	aaaaaaab 	.word	0xaaaaaaab
 800370c:	00015180 	.word	0x00015180

08003710 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003718:	2300      	movs	r3, #0
 800371a:	60fb      	str	r3, [r7, #12]
  
  /* Check input parameters */
  if(hrtc == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_RTC_WaitForSynchro+0x16>
  {
     return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e01d      	b.n	8003762 <HAL_RTC_WaitForSynchro+0x52>
  }
  
  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6812      	ldr	r2, [r2, #0]
 800372e:	6852      	ldr	r2, [r2, #4]
 8003730:	f022 0208 	bic.w	r2, r2, #8
 8003734:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 8003736:	f003 ffb3 	bl	80076a0 <HAL_GetTick>
 800373a:	60f8      	str	r0, [r7, #12]
  
  /* Wait the registers to be synchronised */
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800373c:	e009      	b.n	8003752 <HAL_RTC_WaitForSynchro+0x42>
  {
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 800373e:	f003 ffaf 	bl	80076a0 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800374c:	d901      	bls.n	8003752 <HAL_RTC_WaitForSynchro+0x42>
    {       
      return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e007      	b.n	8003762 <HAL_RTC_WaitForSynchro+0x52>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
  
  tickstart = HAL_GetTick();
  
  /* Wait the registers to be synchronised */
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0ee      	beq.n	800373e <HAL_RTC_WaitForSynchro+0x2e>
    {       
      return HAL_TIMEOUT;
    } 
  }
  
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop

0800376c <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef* hrtc)
{
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0, high2 = 0, low = 0;
 8003774:	2300      	movs	r3, #0
 8003776:	827b      	strh	r3, [r7, #18]
 8003778:	2300      	movs	r3, #0
 800377a:	823b      	strh	r3, [r7, #16]
 800377c:	2300      	movs	r3, #0
 800377e:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0;
 8003780:	2300      	movs	r3, #0
 8003782:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800379c:	8a7a      	ldrh	r2, [r7, #18]
 800379e:	8a3b      	ldrh	r3, [r7, #16]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d008      	beq.n	80037b6 <RTC_ReadTimeCounter+0x4a>
  { /* In this case the counter roll over during reading of CNTL and CNTH registers, 
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16 ) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80037a4:	8a3b      	ldrh	r3, [r7, #16]
 80037a6:	041a      	lsls	r2, r3, #16
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	4313      	orrs	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	e004      	b.n	80037c0 <RTC_ReadTimeCounter+0x54>
  }
  else
  { /* No counter roll over during reading of CNTL and CNTH registers, counter 
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16 ) | low);
 80037b6:	8a7b      	ldrh	r3, [r7, #18]
 80037b8:	041a      	lsls	r2, r3, #16
 80037ba:	89fb      	ldrh	r3, [r7, #14]
 80037bc:	4313      	orrs	r3, r2
 80037be:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80037c0:	697b      	ldr	r3, [r7, #20]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	371c      	adds	r7, #28
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop

080037d0 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef* hrtc, uint32_t TimeCounter)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	73fb      	strb	r3, [r7, #15]
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f860 	bl	80038a4 <RTC_EnterInitMode>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	73fb      	strb	r3, [r7, #15]
 80037ee:	e011      	b.n	8003814 <RTC_WriteTimeCounter+0x44>
  } 
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	0c12      	lsrs	r2, r2, #16
 80037f8:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	b292      	uxth	r2, r2
 8003802:	61da      	str	r2, [r3, #28]
    
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f875 	bl	80038f4 <RTC_ExitInitMode>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <RTC_WriteTimeCounter+0x44>
    {       
      status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003814:	7bfb      	ldrb	r3, [r7, #15]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop

08003820 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef* hrtc)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0, low = 0;
 8003828:	2300      	movs	r3, #0
 800382a:	81fb      	strh	r3, [r7, #14]
 800382c:	2300      	movs	r3, #0
 800382e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16 ) | low);
 8003840:	89fb      	ldrh	r3, [r7, #14]
 8003842:	041a      	lsls	r2, r3, #16
 8003844:	89bb      	ldrh	r3, [r7, #12]
 8003846:	4313      	orrs	r3, r2
}
 8003848:	4618      	mov	r0, r3
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef* hrtc, uint32_t AlarmCounter)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800385e:	2300      	movs	r3, #0
 8003860:	73fb      	strb	r3, [r7, #15]
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f81e 	bl	80038a4 <RTC_EnterInitMode>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	73fb      	strb	r3, [r7, #15]
 8003872:	e011      	b.n	8003898 <RTC_WriteAlarmCounter+0x44>
  } 
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	0c12      	lsrs	r2, r2, #16
 800387c:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	b292      	uxth	r2, r2
 8003886:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f833 	bl	80038f4 <RTC_ExitInitMode>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <RTC_WriteAlarmCounter+0x44>
    {       
      status = HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003898:	7bfb      	ldrb	r3, [r7, #15]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop

080038a4 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]
  
  tickstart = HAL_GetTick();
 80038b0:	f003 fef6 	bl	80076a0 <HAL_GetTick>
 80038b4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80038b6:	e009      	b.n	80038cc <RTC_EnterInitMode+0x28>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80038b8:	f003 fef2 	bl	80076a0 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038c6:	d901      	bls.n	80038cc <RTC_EnterInitMode+0x28>
    {       
      return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e00f      	b.n	80038ec <RTC_EnterInitMode+0x48>
{
  uint32_t tickstart = 0;
  
  tickstart = HAL_GetTick();
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f003 0320 	and.w	r3, r3, #32
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0ee      	beq.n	80038b8 <RTC_EnterInitMode+0x14>
      return HAL_TIMEOUT;
    } 
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6812      	ldr	r2, [r2, #0]
 80038e2:	6852      	ldr	r2, [r2, #4]
 80038e4:	f042 0210 	orr.w	r2, r2, #16
 80038e8:	605a      	str	r2, [r3, #4]
  
  
  return HAL_OK;  
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef* hrtc)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80038fc:	2300      	movs	r3, #0
 80038fe:	60fb      	str	r3, [r7, #12]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	6852      	ldr	r2, [r2, #4]
 800390a:	f022 0210 	bic.w	r2, r2, #16
 800390e:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 8003910:	f003 fec6 	bl	80076a0 <HAL_GetTick>
 8003914:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003916:	e009      	b.n	800392c <RTC_ExitInitMode+0x38>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003918:	f003 fec2 	bl	80076a0 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003926:	d901      	bls.n	800392c <RTC_ExitInitMode+0x38>
    {       
      return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e007      	b.n	800393c <RTC_ExitInitMode+0x48>
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
  
  tickstart = HAL_GetTick();
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f003 0320 	and.w	r3, r3, #32
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0ee      	beq.n	8003918 <RTC_ExitInitMode+0x24>
    {       
      return HAL_TIMEOUT;
    } 
  }
  
  return HAL_OK;  
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800394e:	2300      	movs	r3, #0
 8003950:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	091b      	lsrs	r3, r3, #4
 8003956:	b2db      	uxtb	r3, r3
 8003958:	461a      	mov	r2, r3
 800395a:	4613      	mov	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003964:	79fb      	ldrb	r3, [r7, #7]
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	b2da      	uxtb	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	b2db      	uxtb	r3, r3
 8003970:	4413      	add	r3, r2
 8003972:	b2db      	uxtb	r3, r3
}
 8003974:	4618      	mov	r0, r3
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	4613      	mov	r3, r2
 800398a:	460a      	mov	r2, r1
 800398c:	70fa      	strb	r2, [r7, #3]
 800398e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0, weekday = 0;
 8003990:	2300      	movs	r3, #0
 8003992:	60bb      	str	r3, [r7, #8]
 8003994:	2300      	movs	r3, #0
 8003996:	60fb      	str	r3, [r7, #12]

  year = 2000 + nYear;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800399e:	60bb      	str	r3, [r7, #8]
  
  if(nMonth < 3)
 80039a0:	78fb      	ldrb	r3, [r7, #3]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d830      	bhi.n	8003a08 <RTC_WeekDayNum+0x88>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23 * nMonth)/9) + nDay + 4 + year + ((year-1)/4) - ((year-1)/100) + ((year-1)/400)) % 7;
 80039a6:	78fa      	ldrb	r2, [r7, #3]
 80039a8:	4613      	mov	r3, r2
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	4413      	add	r3, r2
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	1a9b      	subs	r3, r3, r2
 80039b2:	4a30      	ldr	r2, [pc, #192]	; (8003a74 <RTC_WeekDayNum+0xf4>)
 80039b4:	fb82 0203 	smull	r0, r2, r2, r3
 80039b8:	1052      	asrs	r2, r2, #1
 80039ba:	17db      	asrs	r3, r3, #31
 80039bc:	1ad2      	subs	r2, r2, r3
 80039be:	78bb      	ldrb	r3, [r7, #2]
 80039c0:	4413      	add	r3, r2
 80039c2:	461a      	mov	r2, r3
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	441a      	add	r2, r3
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	089b      	lsrs	r3, r3, #2
 80039ce:	441a      	add	r2, r3
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	1e59      	subs	r1, r3, #1
 80039d4:	4b28      	ldr	r3, [pc, #160]	; (8003a78 <RTC_WeekDayNum+0xf8>)
 80039d6:	fba3 0301 	umull	r0, r3, r3, r1
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	1ad2      	subs	r2, r2, r3
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	1e59      	subs	r1, r3, #1
 80039e2:	4b25      	ldr	r3, [pc, #148]	; (8003a78 <RTC_WeekDayNum+0xf8>)
 80039e4:	fba3 0301 	umull	r0, r3, r3, r1
 80039e8:	09db      	lsrs	r3, r3, #7
 80039ea:	4413      	add	r3, r2
 80039ec:	1d1a      	adds	r2, r3, #4
 80039ee:	4b23      	ldr	r3, [pc, #140]	; (8003a7c <RTC_WeekDayNum+0xfc>)
 80039f0:	fba2 0103 	umull	r0, r1, r2, r3
 80039f4:	1a53      	subs	r3, r2, r1
 80039f6:	085b      	lsrs	r3, r3, #1
 80039f8:	440b      	add	r3, r1
 80039fa:	0899      	lsrs	r1, r3, #2
 80039fc:	460b      	mov	r3, r1
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	1a5b      	subs	r3, r3, r1
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	e02c      	b.n	8003a62 <RTC_WeekDayNum+0xe2>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23 * nMonth)/9) + nDay + 4 + year + (year/4) - (year/100) + (year/400) - 2 ) % 7; 
 8003a08:	78fa      	ldrb	r2, [r7, #3]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	4413      	add	r3, r2
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	1a9b      	subs	r3, r3, r2
 8003a14:	4a17      	ldr	r2, [pc, #92]	; (8003a74 <RTC_WeekDayNum+0xf4>)
 8003a16:	fb82 1203 	smull	r1, r2, r2, r3
 8003a1a:	1052      	asrs	r2, r2, #1
 8003a1c:	17db      	asrs	r3, r3, #31
 8003a1e:	1ad2      	subs	r2, r2, r3
 8003a20:	78bb      	ldrb	r3, [r7, #2]
 8003a22:	4413      	add	r3, r2
 8003a24:	461a      	mov	r2, r3
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	441a      	add	r2, r3
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	089b      	lsrs	r3, r3, #2
 8003a2e:	441a      	add	r2, r3
 8003a30:	68b9      	ldr	r1, [r7, #8]
 8003a32:	4b11      	ldr	r3, [pc, #68]	; (8003a78 <RTC_WeekDayNum+0xf8>)
 8003a34:	fba3 0301 	umull	r0, r3, r3, r1
 8003a38:	095b      	lsrs	r3, r3, #5
 8003a3a:	1ad2      	subs	r2, r2, r3
 8003a3c:	68b9      	ldr	r1, [r7, #8]
 8003a3e:	4b0e      	ldr	r3, [pc, #56]	; (8003a78 <RTC_WeekDayNum+0xf8>)
 8003a40:	fba3 0301 	umull	r0, r3, r3, r1
 8003a44:	09db      	lsrs	r3, r3, #7
 8003a46:	4413      	add	r3, r2
 8003a48:	1c9a      	adds	r2, r3, #2
 8003a4a:	4b0c      	ldr	r3, [pc, #48]	; (8003a7c <RTC_WeekDayNum+0xfc>)
 8003a4c:	fba2 0103 	umull	r0, r1, r2, r3
 8003a50:	1a53      	subs	r3, r2, r1
 8003a52:	085b      	lsrs	r3, r3, #1
 8003a54:	440b      	add	r3, r1
 8003a56:	0899      	lsrs	r1, r3, #2
 8003a58:	460b      	mov	r3, r1
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	1a5b      	subs	r3, r3, r1
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	b2db      	uxtb	r3, r3
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	38e38e39 	.word	0x38e38e39
 8003a78:	51eb851f 	.word	0x51eb851f
 8003a7c:	24924925 	.word	0x24924925

08003a80 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b090      	sub	sp, #64	; 0x40
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0, temp_reg = 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 80b5 	beq.w	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a9e:	4b6c      	ldr	r3, [pc, #432]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa0:	4a6b      	ldr	r2, [pc, #428]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa2:	69d2      	ldr	r2, [r2, #28]
 8003aa4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003aa8:	61da      	str	r2, [r3, #28]
 8003aaa:	4b69      	ldr	r3, [pc, #420]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ab6:	4b67      	ldr	r3, [pc, #412]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ab8:	4a66      	ldr	r2, [pc, #408]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003aba:	6812      	ldr	r2, [r2, #0]
 8003abc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ac0:	601a      	str	r2, [r3, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ac2:	f003 fded 	bl	80076a0 <HAL_GetTick>
 8003ac6:	63f8      	str	r0, [r7, #60]	; 0x3c
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ac8:	e008      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aca:	f003 fde9 	bl	80076a0 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b64      	cmp	r3, #100	; 0x64
 8003ad6:	d901      	bls.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x5c>
      {
        return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e0b4      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    SET_BIT(PWR->CR, PWR_CR_DBP);
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003adc:	4b5d      	ldr	r3, [pc, #372]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0f0      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x4a>
        return HAL_TIMEOUT;
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003ae8:	4b59      	ldr	r3, [pc, #356]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aea:	6a1a      	ldr	r2, [r3, #32]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	4053      	eors	r3, r2
 8003af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 8086 	beq.w	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003afc:	4b54      	ldr	r3, [pc, #336]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b04:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b0a:	637b      	str	r3, [r7, #52]	; 0x34
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b0e:	fa93 f3a3 	rbit	r3, r3
 8003b12:	633b      	str	r3, [r7, #48]	; 0x30
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b16:	fab3 f383 	clz	r3, r3
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4b4e      	ldr	r3, [pc, #312]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b20:	4413      	add	r3, r2
 8003b22:	2201      	movs	r2, #1
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2e:	fa93 f3a3 	rbit	r3, r3
 8003b32:	62bb      	str	r3, [r7, #40]	; 0x28
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b36:	fab3 f383 	clz	r3, r3
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	4b46      	ldr	r3, [pc, #280]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b40:	4413      	add	r3, r2
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b46:	4b42      	ldr	r3, [pc, #264]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b4a:	621a      	str	r2, [r3, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8003b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d04f      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x176>
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b56:	f003 fda3 	bl	80076a0 <HAL_GetTick>
 8003b5a:	63f8      	str	r0, [r7, #60]	; 0x3c
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b5c:	e00a      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b5e:	f003 fd9f 	bl	80076a0 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b66:	1ad2      	subs	r2, r2, r3
 8003b68:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e068      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8003b74:	2302      	movs	r3, #2
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	fa93 f3a3 	rbit	r3, r3
 8003b7e:	623b      	str	r3, [r7, #32]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003b80:	6a3b      	ldr	r3, [r7, #32]
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b82:	fab3 f383 	clz	r3, r3
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	095b      	lsrs	r3, r3, #5
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d102      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8003b98:	4b2d      	ldr	r3, [pc, #180]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	e016      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	61fb      	str	r3, [r7, #28]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	fa93 f3a3 	rbit	r3, r3
 8003ba8:	61bb      	str	r3, [r7, #24]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	fab3 f383 	clz	r3, r3
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d102      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003bc2:	4b23      	ldr	r3, [pc, #140]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	e001      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003bc8:	4b21      	ldr	r3, [pc, #132]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	2202      	movs	r2, #2
 8003bce:	617a      	str	r2, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	fa92 f2a2 	rbit	r2, r2
 8003bd6:	613a      	str	r2, [r7, #16]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	fab2 f282 	clz	r2, r2
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	f002 021f 	and.w	r2, r2, #31
 8003bec:	40d3      	lsrs	r3, r2
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0b3      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xde>
          {
            return HAL_TIMEOUT;
          }      
        }  
      }
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003bf6:	4b16      	ldr	r3, [pc, #88]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf8:	4a15      	ldr	r2, [pc, #84]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bfa:	6a12      	ldr	r2, [r2, #32]
 8003bfc:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6852      	ldr	r2, [r2, #4]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	621a      	str	r2, [r3, #32]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d008      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c14:	4b0e      	ldr	r3, [pc, #56]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c16:	4a0e      	ldr	r2, [pc, #56]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c18:	6852      	ldr	r2, [r2, #4]
 8003c1a:	f422 4140 	bic.w	r1, r2, #49152	; 0xc000
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6892      	ldr	r2, [r2, #8]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	605a      	str	r2, [r3, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0310 	and.w	r3, r3, #16
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d008      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c32:	4b07      	ldr	r3, [pc, #28]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c34:	4a06      	ldr	r2, [pc, #24]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c36:	6852      	ldr	r2, [r2, #4]
 8003c38:	f422 0180 	bic.w	r1, r2, #4194304	; 0x400000
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	68d2      	ldr	r2, [r2, #12]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3740      	adds	r7, #64	; 0x40
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40021000 	.word	0x40021000
 8003c54:	40007000 	.word	0x40007000
 8003c58:	42420400 	.word	0x42420400

08003c5c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S3 I2S3 peripheral clock (STM32F103xE, STM32F103xG, STM32F105xC & STM32F107xC)
  *            @arg RCC_PERIPHCLK_USB USB peripheral clock (STM32F102xx, STM32F103xx, STM32F105xC & STM32F107xC)
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c5c:	b590      	push	{r4, r7, lr}
 8003c5e:	b093      	sub	sp, #76	; 0x4c
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 || defined(STM32F105xC) || defined(STM32F107xC)
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c64:	4b68      	ldr	r3, [pc, #416]	; (8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8003c66:	f107 040c 	add.w	r4, r7, #12
 8003c6a:	6818      	ldr	r0, [r3, #0]
 8003c6c:	6859      	ldr	r1, [r3, #4]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8003c74:	4a65      	ldr	r2, [pc, #404]	; (8003e0c <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>)
 8003c76:	f107 0308 	add.w	r3, r7, #8
 8003c7a:	8812      	ldrh	r2, [r2, #0]
 8003c7c:	801a      	strh	r2, [r3, #0]
#endif
#endif
  uint32_t temp_reg = 0, frequency = 0;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c82:	2300      	movs	r3, #0
 8003c84:	647b      	str	r3, [r7, #68]	; 0x44
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t prediv1 = 0, pllclk = 0, pllmul = 0;
 8003c86:	2300      	movs	r3, #0
 8003c88:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	643b      	str	r3, [r7, #64]	; 0x40
 8003c8e:	2300      	movs	r3, #0
 8003c90:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	f000 8099 	beq.w	8003dcc <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8003c9a:	2b10      	cmp	r3, #16
 8003c9c:	d002      	beq.n	8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x48>
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d05e      	beq.n	8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> POSITION_VAL(RCC_CFGR_ADCPRE_DIV4)) + 1) * 2);
      break;
    }
  default: 
    {
      break;
 8003ca2:	e0ac      	b.n	8003dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8003ca4:	4b5a      	ldr	r3, [pc, #360]	; (8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8003caa:	4b59      	ldr	r3, [pc, #356]	; (8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d053      	beq.n	8003d5e <HAL_RCCEx_GetPeriphCLKFreq+0x102>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8003cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003cbc:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8003cc0:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc4:	fa93 f3a3 	rbit	r3, r3
 8003cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ccc:	fab3 f383 	clz	r3, r3
 8003cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003cd8:	440b      	add	r3, r1
 8003cda:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8003cde:	637b      	str	r3, [r7, #52]	; 0x34
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d023      	beq.n	8003d32 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8003cea:	4b49      	ldr	r3, [pc, #292]	; (8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8003cf2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cf6:	62bb      	str	r3, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfa:	fa93 f3a3 	rbit	r3, r3
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	fab3 f383 	clz	r3, r3
 8003d06:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003d0e:	4413      	add	r3, r2
 8003d10:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8003d14:	63bb      	str	r3, [r7, #56]	; 0x38
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> POSITION_VAL(RCC_CFGR_PLLMULL)])
          {
              pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00d      	beq.n	8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003d20:	4a3c      	ldr	r2, [pc, #240]	; (8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8003d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d2a:	fb02 f303 	mul.w	r3, r2, r3
 8003d2e:	643b      	str	r3, [r7, #64]	; 0x40
 8003d30:	e004      	b.n	8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d34:	4a38      	ldr	r2, [pc, #224]	; (8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8003d36:	fb02 f303 	mul.w	r3, r2, r3
 8003d3a:	643b      	str	r3, [r7, #64]	; 0x40
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003d3c:	4b34      	ldr	r3, [pc, #208]	; (8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8003d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d4a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d4c:	e007      	b.n	8003d5e <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
 8003d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d50:	005a      	lsls	r2, r3, #1
 8003d52:	4b32      	ldr	r3, [pc, #200]	; (8003e1c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8003d54:	fba3 1302 	umull	r1, r3, r3, r2
 8003d58:	085b      	lsrs	r3, r3, #1
 8003d5a:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
      }
      break;
 8003d5c:	e04f      	b.n	8003dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8003d5e:	e04e      	b.n	8003dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
  case RCC_PERIPHCLK_RTC:  
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8003d60:	4b2b      	ldr	r3, [pc, #172]	; (8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	63fb      	str	r3, [r7, #60]	; 0x3c

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d70:	d108      	bne.n	8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8003d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
      {
        frequency = LSE_VALUE;
 8003d7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d80:	647b      	str	r3, [r7, #68]	; 0x44
 8003d82:	e022      	b.n	8003dca <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d8e:	d109      	bne.n	8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8003d90:	4b1f      	ldr	r3, [pc, #124]	; (8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      {
        frequency = LSI_VALUE;
 8003d9c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003da0:	647b      	str	r3, [r7, #68]	; 0x44
 8003da2:	e012      	b.n	8003dca <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003daa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dae:	d109      	bne.n	8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8003db0:	4b17      	ldr	r3, [pc, #92]	; (8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      {
        frequency = HSE_VALUE / 128;
 8003dbc:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003dc0:	647b      	str	r3, [r7, #68]	; 0x44
 8003dc2:	e002      	b.n	8003dca <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
      /* Clock not enabled for RTC*/
      else
      {
        frequency = 0;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	647b      	str	r3, [r7, #68]	; 0x44
      }
      break;
 8003dc8:	e019      	b.n	8003dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8003dca:	e018      	b.n	8003dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> POSITION_VAL(RCC_CFGR_ADCPRE_DIV4)) + 1) * 2);
 8003dcc:	f001 fbe6 	bl	800559c <HAL_RCC_GetPCLK2Freq>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	4b0f      	ldr	r3, [pc, #60]	; (8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 4140 	and.w	r1, r3, #49152	; 0xc000
 8003dda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003dde:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	fa93 f3a3 	rbit	r3, r3
 8003de6:	61fb      	str	r3, [r7, #28]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	fab3 f383 	clz	r3, r3
 8003dee:	fa21 f303 	lsr.w	r3, r1, r3
 8003df2:	3301      	adds	r3, #1
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfa:	647b      	str	r3, [r7, #68]	; 0x44
      break;
 8003dfc:	bf00      	nop
  default: 
    {
      break;
    }
  }
  return(frequency);
 8003dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	374c      	adds	r7, #76	; 0x4c
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd90      	pop	{r4, r7, pc}
 8003e08:	08008fe0 	.word	0x08008fe0
 8003e0c:	08008ff0 	.word	0x08008ff0
 8003e10:	40021000 	.word	0x40021000
 8003e14:	007a1200 	.word	0x007a1200
 8003e18:	003d0900 	.word	0x003d0900
 8003e1c:	aaaaaaab 	.word	0xaaaaaaab

08003e20 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL is not disabled when USB OTG FS clock is enabled (specific to devices with USB FS)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b0f0      	sub	sp, #448	; 0x1c0
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	1d3b      	adds	r3, r7, #4
 8003e28:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e30:	1d3b      	adds	r3, r7, #4
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 81e3 	beq.w	8004206 <HAL_RCC_OscConfig+0x3e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003e40:	4bb0      	ldr	r3, [pc, #704]	; (8004104 <HAL_RCC_OscConfig+0x2e4>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f003 030c 	and.w	r3, r3, #12
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	d00b      	beq.n	8003e64 <HAL_RCC_OscConfig+0x44>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e4c:	4bad      	ldr	r3, [pc, #692]	; (8004104 <HAL_RCC_OscConfig+0x2e4>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f003 030c 	and.w	r3, r3, #12
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d15e      	bne.n	8003f16 <HAL_RCC_OscConfig+0xf6>
 8003e58:	4baa      	ldr	r3, [pc, #680]	; (8004104 <HAL_RCC_OscConfig+0x2e4>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d058      	beq.n	8003f16 <HAL_RCC_OscConfig+0xf6>
 8003e64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e68:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8003e70:	fa93 f3a3 	rbit	r3, r3
 8003e74:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003e78:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e7c:	fab3 f383 	clz	r3, r3
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	f043 0320 	orr.w	r3, r3, #32
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	095b      	lsrs	r3, r3, #5
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d102      	bne.n	8003e98 <HAL_RCC_OscConfig+0x78>
 8003e92:	4b9c      	ldr	r3, [pc, #624]	; (8004104 <HAL_RCC_OscConfig+0x2e4>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	e01b      	b.n	8003ed0 <HAL_RCC_OscConfig+0xb0>
 8003e98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e9c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003ea4:	fa93 f3a3 	rbit	r3, r3
 8003ea8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003eac:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003eb0:	fab3 f383 	clz	r3, r3
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	f043 0320 	orr.w	r3, r3, #32
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	095b      	lsrs	r3, r3, #5
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d102      	bne.n	8003ecc <HAL_RCC_OscConfig+0xac>
 8003ec6:	4b8f      	ldr	r3, [pc, #572]	; (8004104 <HAL_RCC_OscConfig+0x2e4>)
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	e001      	b.n	8003ed0 <HAL_RCC_OscConfig+0xb0>
 8003ecc:	4b8d      	ldr	r3, [pc, #564]	; (8004104 <HAL_RCC_OscConfig+0x2e4>)
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ed4:	f8c7 21a8 	str.w	r2, [r7, #424]	; 0x1a8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed8:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8003edc:	fa92 f2a2 	rbit	r2, r2
 8003ee0:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003ee4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003ee8:	fab2 f282 	clz	r2, r2
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	f042 0220 	orr.w	r2, r2, #32
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	b2d2      	uxtb	r2, r2
 8003ef6:	f002 021f 	and.w	r2, r2, #31
 8003efa:	40d3      	lsrs	r3, r2
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <HAL_RCC_OscConfig+0xf4>
 8003f04:	1d3b      	adds	r3, r7, #4
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d102      	bne.n	8003f14 <HAL_RCC_OscConfig+0xf4>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	f000 bf8b 	b.w	8004e2a <HAL_RCC_OscConfig+0x100a>
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f14:	e177      	b.n	8004206 <HAL_RCC_OscConfig+0x3e6>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8003f16:	4b7b      	ldr	r3, [pc, #492]	; (8004104 <HAL_RCC_OscConfig+0x2e4>)
 8003f18:	4a7a      	ldr	r2, [pc, #488]	; (8004104 <HAL_RCC_OscConfig+0x2e4>)
 8003f1a:	6812      	ldr	r2, [r2, #0]
 8003f1c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	4b78      	ldr	r3, [pc, #480]	; (8004104 <HAL_RCC_OscConfig+0x2e4>)
 8003f24:	4a77      	ldr	r2, [pc, #476]	; (8004104 <HAL_RCC_OscConfig+0x2e4>)
 8003f26:	6812      	ldr	r2, [r2, #0]
 8003f28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f2c:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f2e:	f003 fbb7 	bl	80076a0 <HAL_GetTick>
 8003f32:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f36:	e00c      	b.n	8003f52 <HAL_RCC_OscConfig+0x132>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f38:	f003 fbb2 	bl	80076a0 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8003f42:	1ad2      	subs	r2, r2, r3
 8003f44:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d902      	bls.n	8003f52 <HAL_RCC_OscConfig+0x132>
        {
          return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	f000 bf6c 	b.w	8004e2a <HAL_RCC_OscConfig+0x100a>
 8003f52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f56:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003f5e:	fa93 f3a3 	rbit	r3, r3
 8003f62:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003f66:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f6a:	fab3 f383 	clz	r3, r3
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	f043 0320 	orr.w	r3, r3, #32
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	095b      	lsrs	r3, r3, #5
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d102      	bne.n	8003f86 <HAL_RCC_OscConfig+0x166>
 8003f80:	4b60      	ldr	r3, [pc, #384]	; (8004104 <HAL_RCC_OscConfig+0x2e4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	e01b      	b.n	8003fbe <HAL_RCC_OscConfig+0x19e>
 8003f86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f8a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8003f92:	fa93 f3a3 	rbit	r3, r3
 8003f96:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003f9a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003f9e:	fab3 f383 	clz	r3, r3
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	f043 0320 	orr.w	r3, r3, #32
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	095b      	lsrs	r3, r3, #5
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d102      	bne.n	8003fba <HAL_RCC_OscConfig+0x19a>
 8003fb4:	4b53      	ldr	r3, [pc, #332]	; (8004104 <HAL_RCC_OscConfig+0x2e4>)
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	e001      	b.n	8003fbe <HAL_RCC_OscConfig+0x19e>
 8003fba:	4b52      	ldr	r3, [pc, #328]	; (8004104 <HAL_RCC_OscConfig+0x2e4>)
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003fc2:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc6:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8003fca:	fa92 f2a2 	rbit	r2, r2
 8003fce:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003fd2:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8003fd6:	fab2 f282 	clz	r2, r2
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	f042 0220 	orr.w	r2, r2, #32
 8003fe0:	b2d2      	uxtb	r2, r2
 8003fe2:	b2d2      	uxtb	r2, r2
 8003fe4:	f002 021f 	and.w	r2, r2, #31
 8003fe8:	40d3      	lsrs	r3, r2
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1a2      	bne.n	8003f38 <HAL_RCC_OscConfig+0x118>
          return HAL_TIMEOUT;
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ff2:	1d3b      	adds	r3, r7, #4
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ffc:	d106      	bne.n	800400c <HAL_RCC_OscConfig+0x1ec>
 8003ffe:	4b41      	ldr	r3, [pc, #260]	; (8004104 <HAL_RCC_OscConfig+0x2e4>)
 8004000:	4a40      	ldr	r2, [pc, #256]	; (8004104 <HAL_RCC_OscConfig+0x2e4>)
 8004002:	6812      	ldr	r2, [r2, #0]
 8004004:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	e030      	b.n	800406e <HAL_RCC_OscConfig+0x24e>
 800400c:	1d3b      	adds	r3, r7, #4
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10c      	bne.n	8004030 <HAL_RCC_OscConfig+0x210>
 8004016:	4b3b      	ldr	r3, [pc, #236]	; (8004104 <HAL_RCC_OscConfig+0x2e4>)
 8004018:	4a3a      	ldr	r2, [pc, #232]	; (8004104 <HAL_RCC_OscConfig+0x2e4>)
 800401a:	6812      	ldr	r2, [r2, #0]
 800401c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	4b38      	ldr	r3, [pc, #224]	; (8004104 <HAL_RCC_OscConfig+0x2e4>)
 8004024:	4a37      	ldr	r2, [pc, #220]	; (8004104 <HAL_RCC_OscConfig+0x2e4>)
 8004026:	6812      	ldr	r2, [r2, #0]
 8004028:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	e01e      	b.n	800406e <HAL_RCC_OscConfig+0x24e>
 8004030:	1d3b      	adds	r3, r7, #4
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800403a:	d10c      	bne.n	8004056 <HAL_RCC_OscConfig+0x236>
 800403c:	4b31      	ldr	r3, [pc, #196]	; (8004104 <HAL_RCC_OscConfig+0x2e4>)
 800403e:	4a31      	ldr	r2, [pc, #196]	; (8004104 <HAL_RCC_OscConfig+0x2e4>)
 8004040:	6812      	ldr	r2, [r2, #0]
 8004042:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	4b2e      	ldr	r3, [pc, #184]	; (8004104 <HAL_RCC_OscConfig+0x2e4>)
 800404a:	4a2e      	ldr	r2, [pc, #184]	; (8004104 <HAL_RCC_OscConfig+0x2e4>)
 800404c:	6812      	ldr	r2, [r2, #0]
 800404e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	e00b      	b.n	800406e <HAL_RCC_OscConfig+0x24e>
 8004056:	4b2b      	ldr	r3, [pc, #172]	; (8004104 <HAL_RCC_OscConfig+0x2e4>)
 8004058:	4a2a      	ldr	r2, [pc, #168]	; (8004104 <HAL_RCC_OscConfig+0x2e4>)
 800405a:	6812      	ldr	r2, [r2, #0]
 800405c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	4b28      	ldr	r3, [pc, #160]	; (8004104 <HAL_RCC_OscConfig+0x2e4>)
 8004064:	4a27      	ldr	r2, [pc, #156]	; (8004104 <HAL_RCC_OscConfig+0x2e4>)
 8004066:	6812      	ldr	r2, [r2, #0]
 8004068:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800406c:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800406e:	1d3b      	adds	r3, r7, #4
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d064      	beq.n	8004142 <HAL_RCC_OscConfig+0x322>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004078:	f003 fb12 	bl	80076a0 <HAL_GetTick>
 800407c:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004080:	e00c      	b.n	800409c <HAL_RCC_OscConfig+0x27c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004082:	f003 fb0d 	bl	80076a0 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800408c:	1ad2      	subs	r2, r2, r3
 800408e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004092:	429a      	cmp	r2, r3
 8004094:	d902      	bls.n	800409c <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	f000 bec7 	b.w	8004e2a <HAL_RCC_OscConfig+0x100a>
 800409c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040a0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80040a8:	fa93 f3a3 	rbit	r3, r3
 80040ac:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80040b0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b4:	fab3 f383 	clz	r3, r3
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	f043 0320 	orr.w	r3, r3, #32
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	095b      	lsrs	r3, r3, #5
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d102      	bne.n	80040d0 <HAL_RCC_OscConfig+0x2b0>
 80040ca:	4b0e      	ldr	r3, [pc, #56]	; (8004104 <HAL_RCC_OscConfig+0x2e4>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	e01d      	b.n	800410c <HAL_RCC_OscConfig+0x2ec>
 80040d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040d4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80040dc:	fa93 f3a3 	rbit	r3, r3
 80040e0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80040e4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80040e8:	fab3 f383 	clz	r3, r3
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	f043 0320 	orr.w	r3, r3, #32
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	095b      	lsrs	r3, r3, #5
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d104      	bne.n	8004108 <HAL_RCC_OscConfig+0x2e8>
 80040fe:	4b01      	ldr	r3, [pc, #4]	; (8004104 <HAL_RCC_OscConfig+0x2e4>)
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	e003      	b.n	800410c <HAL_RCC_OscConfig+0x2ec>
 8004104:	40021000 	.word	0x40021000
 8004108:	4bb1      	ldr	r3, [pc, #708]	; (80043d0 <HAL_RCC_OscConfig+0x5b0>)
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004110:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004114:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004118:	fa92 f2a2 	rbit	r2, r2
 800411c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004120:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004124:	fab2 f282 	clz	r2, r2
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	f042 0220 	orr.w	r2, r2, #32
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	b2d2      	uxtb	r2, r2
 8004132:	f002 021f 	and.w	r2, r2, #31
 8004136:	40d3      	lsrs	r3, r2
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0a0      	beq.n	8004082 <HAL_RCC_OscConfig+0x262>
 8004140:	e061      	b.n	8004206 <HAL_RCC_OscConfig+0x3e6>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004142:	f003 faad 	bl	80076a0 <HAL_GetTick>
 8004146:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800414a:	e00c      	b.n	8004166 <HAL_RCC_OscConfig+0x346>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800414c:	f003 faa8 	bl	80076a0 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8004156:	1ad2      	subs	r2, r2, r3
 8004158:	f241 3388 	movw	r3, #5000	; 0x1388
 800415c:	429a      	cmp	r2, r3
 800415e:	d902      	bls.n	8004166 <HAL_RCC_OscConfig+0x346>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	f000 be62 	b.w	8004e2a <HAL_RCC_OscConfig+0x100a>
 8004166:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800416a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800416e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8004172:	fa93 f3a3 	rbit	r3, r3
 8004176:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 800417a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800417e:	fab3 f383 	clz	r3, r3
 8004182:	b2db      	uxtb	r3, r3
 8004184:	f043 0320 	orr.w	r3, r3, #32
 8004188:	b2db      	uxtb	r3, r3
 800418a:	b2db      	uxtb	r3, r3
 800418c:	095b      	lsrs	r3, r3, #5
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b01      	cmp	r3, #1
 8004192:	d102      	bne.n	800419a <HAL_RCC_OscConfig+0x37a>
 8004194:	4b8e      	ldr	r3, [pc, #568]	; (80043d0 <HAL_RCC_OscConfig+0x5b0>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	e01b      	b.n	80041d2 <HAL_RCC_OscConfig+0x3b2>
 800419a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800419e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80041a6:	fa93 f3a3 	rbit	r3, r3
 80041aa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80041ae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80041b2:	fab3 f383 	clz	r3, r3
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	f043 0320 	orr.w	r3, r3, #32
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	095b      	lsrs	r3, r3, #5
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d102      	bne.n	80041ce <HAL_RCC_OscConfig+0x3ae>
 80041c8:	4b81      	ldr	r3, [pc, #516]	; (80043d0 <HAL_RCC_OscConfig+0x5b0>)
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	e001      	b.n	80041d2 <HAL_RCC_OscConfig+0x3b2>
 80041ce:	4b80      	ldr	r3, [pc, #512]	; (80043d0 <HAL_RCC_OscConfig+0x5b0>)
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041d6:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041da:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80041de:	fa92 f2a2 	rbit	r2, r2
 80041e2:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80041e6:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80041ea:	fab2 f282 	clz	r2, r2
 80041ee:	b2d2      	uxtb	r2, r2
 80041f0:	f042 0220 	orr.w	r2, r2, #32
 80041f4:	b2d2      	uxtb	r2, r2
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	f002 021f 	and.w	r2, r2, #31
 80041fc:	40d3      	lsrs	r3, r2
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1a2      	bne.n	800414c <HAL_RCC_OscConfig+0x32c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004206:	1d3b      	adds	r3, r7, #4
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 8185 	beq.w	8004520 <HAL_RCC_OscConfig+0x700>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004216:	4b6e      	ldr	r3, [pc, #440]	; (80043d0 <HAL_RCC_OscConfig+0x5b0>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f003 030c 	and.w	r3, r3, #12
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00b      	beq.n	800423a <HAL_RCC_OscConfig+0x41a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004222:	4b6b      	ldr	r3, [pc, #428]	; (80043d0 <HAL_RCC_OscConfig+0x5b0>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f003 030c 	and.w	r3, r3, #12
 800422a:	2b08      	cmp	r3, #8
 800422c:	d174      	bne.n	8004318 <HAL_RCC_OscConfig+0x4f8>
 800422e:	4b68      	ldr	r3, [pc, #416]	; (80043d0 <HAL_RCC_OscConfig+0x5b0>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d16e      	bne.n	8004318 <HAL_RCC_OscConfig+0x4f8>
 800423a:	2302      	movs	r3, #2
 800423c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004240:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004244:	fa93 f3a3 	rbit	r3, r3
 8004248:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 800424c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004250:	fab3 f383 	clz	r3, r3
 8004254:	b2db      	uxtb	r3, r3
 8004256:	f043 0320 	orr.w	r3, r3, #32
 800425a:	b2db      	uxtb	r3, r3
 800425c:	b2db      	uxtb	r3, r3
 800425e:	095b      	lsrs	r3, r3, #5
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b01      	cmp	r3, #1
 8004264:	d102      	bne.n	800426c <HAL_RCC_OscConfig+0x44c>
 8004266:	4b5a      	ldr	r3, [pc, #360]	; (80043d0 <HAL_RCC_OscConfig+0x5b0>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	e01a      	b.n	80042a2 <HAL_RCC_OscConfig+0x482>
 800426c:	2302      	movs	r3, #2
 800426e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004272:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004276:	fa93 f3a3 	rbit	r3, r3
 800427a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 800427e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004282:	fab3 f383 	clz	r3, r3
 8004286:	b2db      	uxtb	r3, r3
 8004288:	f043 0320 	orr.w	r3, r3, #32
 800428c:	b2db      	uxtb	r3, r3
 800428e:	b2db      	uxtb	r3, r3
 8004290:	095b      	lsrs	r3, r3, #5
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d102      	bne.n	800429e <HAL_RCC_OscConfig+0x47e>
 8004298:	4b4d      	ldr	r3, [pc, #308]	; (80043d0 <HAL_RCC_OscConfig+0x5b0>)
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	e001      	b.n	80042a2 <HAL_RCC_OscConfig+0x482>
 800429e:	4b4c      	ldr	r3, [pc, #304]	; (80043d0 <HAL_RCC_OscConfig+0x5b0>)
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	2202      	movs	r2, #2
 80042a4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80042ac:	fa92 f2a2 	rbit	r2, r2
 80042b0:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80042b4:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80042b8:	fab2 f282 	clz	r2, r2
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	f042 0220 	orr.w	r2, r2, #32
 80042c2:	b2d2      	uxtb	r2, r2
 80042c4:	b2d2      	uxtb	r2, r2
 80042c6:	f002 021f 	and.w	r2, r2, #31
 80042ca:	40d3      	lsrs	r3, r2
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d007      	beq.n	80042e4 <HAL_RCC_OscConfig+0x4c4>
 80042d4:	1d3b      	adds	r3, r7, #4
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d002      	beq.n	80042e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	f000 bda3 	b.w	8004e2a <HAL_RCC_OscConfig+0x100a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e4:	4b3a      	ldr	r3, [pc, #232]	; (80043d0 <HAL_RCC_OscConfig+0x5b0>)
 80042e6:	4a3a      	ldr	r2, [pc, #232]	; (80043d0 <HAL_RCC_OscConfig+0x5b0>)
 80042e8:	6812      	ldr	r2, [r2, #0]
 80042ea:	f022 01f8 	bic.w	r1, r2, #248	; 0xf8
 80042ee:	1d3a      	adds	r2, r7, #4
 80042f0:	6812      	ldr	r2, [r2, #0]
 80042f2:	6950      	ldr	r0, [r2, #20]
 80042f4:	22f8      	movs	r2, #248	; 0xf8
 80042f6:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fa:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80042fe:	fa92 f2a2 	rbit	r2, r2
 8004302:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004306:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800430a:	fab2 f282 	clz	r2, r2
 800430e:	fa00 f202 	lsl.w	r2, r0, r2
 8004312:	430a      	orrs	r2, r1
 8004314:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004316:	e103      	b.n	8004520 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004318:	1d3b      	adds	r3, r7, #4
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 808d 	beq.w	800443e <HAL_RCC_OscConfig+0x61e>
 8004324:	2301      	movs	r3, #1
 8004326:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800432e:	fa93 f3a3 	rbit	r3, r3
 8004332:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004336:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800433a:	fab3 f383 	clz	r3, r3
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8004344:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8004348:	2201      	movs	r2, #1
 800434a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800434c:	f003 f9a8 	bl	80076a0 <HAL_GetTick>
 8004350:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004354:	e00a      	b.n	800436c <HAL_RCC_OscConfig+0x54c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004356:	f003 f9a3 	bl	80076a0 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b64      	cmp	r3, #100	; 0x64
 8004364:	d902      	bls.n	800436c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	f000 bd5f 	b.w	8004e2a <HAL_RCC_OscConfig+0x100a>
 800436c:	2302      	movs	r3, #2
 800436e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004372:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004376:	fa93 f3a3 	rbit	r3, r3
 800437a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 800437e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004382:	fab3 f383 	clz	r3, r3
 8004386:	b2db      	uxtb	r3, r3
 8004388:	f043 0320 	orr.w	r3, r3, #32
 800438c:	b2db      	uxtb	r3, r3
 800438e:	b2db      	uxtb	r3, r3
 8004390:	095b      	lsrs	r3, r3, #5
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b01      	cmp	r3, #1
 8004396:	d102      	bne.n	800439e <HAL_RCC_OscConfig+0x57e>
 8004398:	4b0d      	ldr	r3, [pc, #52]	; (80043d0 <HAL_RCC_OscConfig+0x5b0>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	e01c      	b.n	80043d8 <HAL_RCC_OscConfig+0x5b8>
 800439e:	2302      	movs	r3, #2
 80043a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043a8:	fa93 f3a3 	rbit	r3, r3
 80043ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80043b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80043b4:	fab3 f383 	clz	r3, r3
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	f043 0320 	orr.w	r3, r3, #32
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	095b      	lsrs	r3, r3, #5
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d104      	bne.n	80043d4 <HAL_RCC_OscConfig+0x5b4>
 80043ca:	4b01      	ldr	r3, [pc, #4]	; (80043d0 <HAL_RCC_OscConfig+0x5b0>)
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	e003      	b.n	80043d8 <HAL_RCC_OscConfig+0x5b8>
 80043d0:	40021000 	.word	0x40021000
 80043d4:	4bbf      	ldr	r3, [pc, #764]	; (80046d4 <HAL_RCC_OscConfig+0x8b4>)
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	2202      	movs	r2, #2
 80043da:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043de:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80043e2:	fa92 f2a2 	rbit	r2, r2
 80043e6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80043ea:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80043ee:	fab2 f282 	clz	r2, r2
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	f042 0220 	orr.w	r2, r2, #32
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	b2d2      	uxtb	r2, r2
 80043fc:	f002 021f 	and.w	r2, r2, #31
 8004400:	40d3      	lsrs	r3, r2
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0a5      	beq.n	8004356 <HAL_RCC_OscConfig+0x536>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800440a:	4bb2      	ldr	r3, [pc, #712]	; (80046d4 <HAL_RCC_OscConfig+0x8b4>)
 800440c:	4ab1      	ldr	r2, [pc, #708]	; (80046d4 <HAL_RCC_OscConfig+0x8b4>)
 800440e:	6812      	ldr	r2, [r2, #0]
 8004410:	f022 01f8 	bic.w	r1, r2, #248	; 0xf8
 8004414:	1d3a      	adds	r2, r7, #4
 8004416:	6812      	ldr	r2, [r2, #0]
 8004418:	6950      	ldr	r0, [r2, #20]
 800441a:	22f8      	movs	r2, #248	; 0xf8
 800441c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004420:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004424:	fa92 f2a2 	rbit	r2, r2
 8004428:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 800442c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004430:	fab2 f282 	clz	r2, r2
 8004434:	fa00 f202 	lsl.w	r2, r0, r2
 8004438:	430a      	orrs	r2, r1
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	e070      	b.n	8004520 <HAL_RCC_OscConfig+0x700>
 800443e:	2301      	movs	r3, #1
 8004440:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004444:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004448:	fa93 f3a3 	rbit	r3, r3
 800444c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004454:	fab3 f383 	clz	r3, r3
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800445e:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004466:	f003 f91b 	bl	80076a0 <HAL_GetTick>
 800446a:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800446e:	e00a      	b.n	8004486 <HAL_RCC_OscConfig+0x666>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004470:	f003 f916 	bl	80076a0 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b64      	cmp	r3, #100	; 0x64
 800447e:	d902      	bls.n	8004486 <HAL_RCC_OscConfig+0x666>
          {
            return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	f000 bcd2 	b.w	8004e2a <HAL_RCC_OscConfig+0x100a>
 8004486:	2302      	movs	r3, #2
 8004488:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004490:	fa93 f3a3 	rbit	r3, r3
 8004494:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004498:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800449c:	fab3 f383 	clz	r3, r3
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	f043 0320 	orr.w	r3, r3, #32
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d102      	bne.n	80044b8 <HAL_RCC_OscConfig+0x698>
 80044b2:	4b88      	ldr	r3, [pc, #544]	; (80046d4 <HAL_RCC_OscConfig+0x8b4>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	e01a      	b.n	80044ee <HAL_RCC_OscConfig+0x6ce>
 80044b8:	2302      	movs	r3, #2
 80044ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80044c2:	fa93 f3a3 	rbit	r3, r3
 80044c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80044ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044ce:	fab3 f383 	clz	r3, r3
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	f043 0320 	orr.w	r3, r3, #32
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	095b      	lsrs	r3, r3, #5
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d102      	bne.n	80044ea <HAL_RCC_OscConfig+0x6ca>
 80044e4:	4b7b      	ldr	r3, [pc, #492]	; (80046d4 <HAL_RCC_OscConfig+0x8b4>)
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	e001      	b.n	80044ee <HAL_RCC_OscConfig+0x6ce>
 80044ea:	4b7a      	ldr	r3, [pc, #488]	; (80046d4 <HAL_RCC_OscConfig+0x8b4>)
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	2202      	movs	r2, #2
 80044f0:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f4:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80044f8:	fa92 f2a2 	rbit	r2, r2
 80044fc:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004500:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004504:	fab2 f282 	clz	r2, r2
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	f042 0220 	orr.w	r2, r2, #32
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	b2d2      	uxtb	r2, r2
 8004512:	f002 021f 	and.w	r2, r2, #31
 8004516:	40d3      	lsrs	r3, r2
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1a7      	bne.n	8004470 <HAL_RCC_OscConfig+0x650>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004520:	1d3b      	adds	r3, r7, #4
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 80f5 	beq.w	800471a <HAL_RCC_OscConfig+0x8fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004530:	1d3b      	adds	r3, r7, #4
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d073      	beq.n	8004622 <HAL_RCC_OscConfig+0x802>
 800453a:	2301      	movs	r3, #1
 800453c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004540:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004544:	fa93 f3a3 	rbit	r3, r3
 8004548:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 800454c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004550:	fab3 f383 	clz	r3, r3
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	461a      	mov	r2, r3
 8004558:	4b5f      	ldr	r3, [pc, #380]	; (80046d8 <HAL_RCC_OscConfig+0x8b8>)
 800455a:	4413      	add	r3, r2
 800455c:	2201      	movs	r2, #1
 800455e:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004560:	f003 f89e 	bl	80076a0 <HAL_GetTick>
 8004564:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004568:	e00a      	b.n	8004580 <HAL_RCC_OscConfig+0x760>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800456a:	f003 f899 	bl	80076a0 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b64      	cmp	r3, #100	; 0x64
 8004578:	d902      	bls.n	8004580 <HAL_RCC_OscConfig+0x760>
        {
          return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	f000 bc55 	b.w	8004e2a <HAL_RCC_OscConfig+0x100a>
 8004580:	2302      	movs	r3, #2
 8004582:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004586:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800458a:	fa93 f3a3 	rbit	r3, r3
 800458e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004596:	fab3 f383 	clz	r3, r3
 800459a:	b2db      	uxtb	r3, r3
 800459c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	095b      	lsrs	r3, r3, #5
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d102      	bne.n	80045b2 <HAL_RCC_OscConfig+0x792>
 80045ac:	4b49      	ldr	r3, [pc, #292]	; (80046d4 <HAL_RCC_OscConfig+0x8b4>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	e01a      	b.n	80045e8 <HAL_RCC_OscConfig+0x7c8>
 80045b2:	2302      	movs	r3, #2
 80045b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045bc:	fa93 f3a3 	rbit	r3, r3
 80045c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80045c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045c8:	fab3 f383 	clz	r3, r3
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	095b      	lsrs	r3, r3, #5
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d102      	bne.n	80045e4 <HAL_RCC_OscConfig+0x7c4>
 80045de:	4b3d      	ldr	r3, [pc, #244]	; (80046d4 <HAL_RCC_OscConfig+0x8b4>)
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	e001      	b.n	80045e8 <HAL_RCC_OscConfig+0x7c8>
 80045e4:	4b3b      	ldr	r3, [pc, #236]	; (80046d4 <HAL_RCC_OscConfig+0x8b4>)
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	2202      	movs	r2, #2
 80045ea:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ee:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80045f2:	fa92 f2a2 	rbit	r2, r2
 80045f6:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80045fa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80045fe:	fab2 f282 	clz	r2, r2
 8004602:	b2d2      	uxtb	r2, r2
 8004604:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	f002 021f 	and.w	r2, r2, #31
 8004610:	40d3      	lsrs	r3, r2
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0a7      	beq.n	800456a <HAL_RCC_OscConfig+0x74a>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software temporization of 1ms 
          should be added.*/
      HAL_Delay(1);
 800461a:	2001      	movs	r0, #1
 800461c:	f003 f84c 	bl	80076b8 <HAL_Delay>
 8004620:	e07b      	b.n	800471a <HAL_RCC_OscConfig+0x8fa>
 8004622:	2301      	movs	r3, #1
 8004624:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004628:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800462c:	fa93 f3a3 	rbit	r3, r3
 8004630:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004634:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004638:	fab3 f383 	clz	r3, r3
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	461a      	mov	r2, r3
 8004640:	4b25      	ldr	r3, [pc, #148]	; (80046d8 <HAL_RCC_OscConfig+0x8b8>)
 8004642:	4413      	add	r3, r2
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004648:	f003 f82a 	bl	80076a0 <HAL_GetTick>
 800464c:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004650:	e009      	b.n	8004666 <HAL_RCC_OscConfig+0x846>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004652:	f003 f825 	bl	80076a0 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b64      	cmp	r3, #100	; 0x64
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x846>
        {
          return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e3e1      	b.n	8004e2a <HAL_RCC_OscConfig+0x100a>
 8004666:	2302      	movs	r3, #2
 8004668:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004670:	fa93 f3a3 	rbit	r3, r3
 8004674:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004678:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800467c:	fab3 f383 	clz	r3, r3
 8004680:	b2db      	uxtb	r3, r3
 8004682:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004686:	b2db      	uxtb	r3, r3
 8004688:	b2db      	uxtb	r3, r3
 800468a:	095b      	lsrs	r3, r3, #5
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b01      	cmp	r3, #1
 8004690:	d102      	bne.n	8004698 <HAL_RCC_OscConfig+0x878>
 8004692:	4b10      	ldr	r3, [pc, #64]	; (80046d4 <HAL_RCC_OscConfig+0x8b4>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	e023      	b.n	80046e0 <HAL_RCC_OscConfig+0x8c0>
 8004698:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800469c:	2202      	movs	r2, #2
 800469e:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	fa93 f2a3 	rbit	r2, r3
 80046aa:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80046ae:	601a      	str	r2, [r3, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80046b0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	fab3 f383 	clz	r3, r3
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	095b      	lsrs	r3, r3, #5
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d107      	bne.n	80046dc <HAL_RCC_OscConfig+0x8bc>
 80046cc:	4b01      	ldr	r3, [pc, #4]	; (80046d4 <HAL_RCC_OscConfig+0x8b4>)
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	e006      	b.n	80046e0 <HAL_RCC_OscConfig+0x8c0>
 80046d2:	bf00      	nop
 80046d4:	40021000 	.word	0x40021000
 80046d8:	42420480 	.word	0x42420480
 80046dc:	4ba9      	ldr	r3, [pc, #676]	; (8004984 <HAL_RCC_OscConfig+0xb64>)
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80046e4:	2102      	movs	r1, #2
 80046e6:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e8:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80046ec:	6812      	ldr	r2, [r2, #0]
 80046ee:	fa92 f1a2 	rbit	r1, r2
 80046f2:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80046f6:	6011      	str	r1, [r2, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80046f8:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80046fc:	6812      	ldr	r2, [r2, #0]
 80046fe:	fab2 f282 	clz	r2, r2
 8004702:	b2d2      	uxtb	r2, r2
 8004704:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	b2d2      	uxtb	r2, r2
 800470c:	f002 021f 	and.w	r2, r2, #31
 8004710:	40d3      	lsrs	r3, r2
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d19b      	bne.n	8004652 <HAL_RCC_OscConfig+0x832>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800471a:	1d3b      	adds	r3, r7, #4
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 81bb 	beq.w	8004aa0 <HAL_RCC_OscConfig+0xc80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800472a:	4b96      	ldr	r3, [pc, #600]	; (8004984 <HAL_RCC_OscConfig+0xb64>)
 800472c:	4a95      	ldr	r2, [pc, #596]	; (8004984 <HAL_RCC_OscConfig+0xb64>)
 800472e:	69d2      	ldr	r2, [r2, #28]
 8004730:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004734:	61da      	str	r2, [r3, #28]
 8004736:	4b93      	ldr	r3, [pc, #588]	; (8004984 <HAL_RCC_OscConfig+0xb64>)
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800473e:	f107 0308 	add.w	r3, r7, #8
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	f107 0308 	add.w	r3, r7, #8
 8004748:	681b      	ldr	r3, [r3, #0]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 800474a:	4b8f      	ldr	r3, [pc, #572]	; (8004988 <HAL_RCC_OscConfig+0xb68>)
 800474c:	4a8e      	ldr	r2, [pc, #568]	; (8004988 <HAL_RCC_OscConfig+0xb68>)
 800474e:	6812      	ldr	r2, [r2, #0]
 8004750:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004754:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004756:	f002 ffa3 	bl	80076a0 <HAL_GetTick>
 800475a:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800475e:	e009      	b.n	8004774 <HAL_RCC_OscConfig+0x954>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004760:	f002 ff9e 	bl	80076a0 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b64      	cmp	r3, #100	; 0x64
 800476e:	d901      	bls.n	8004774 <HAL_RCC_OscConfig+0x954>
      {
        return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e35a      	b.n	8004e2a <HAL_RCC_OscConfig+0x100a>
    SET_BIT(PWR->CR, PWR_CR_DBP);

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004774:	4b84      	ldr	r3, [pc, #528]	; (8004988 <HAL_RCC_OscConfig+0xb68>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0ef      	beq.n	8004760 <HAL_RCC_OscConfig+0x940>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8004780:	4b80      	ldr	r3, [pc, #512]	; (8004984 <HAL_RCC_OscConfig+0xb64>)
 8004782:	4a80      	ldr	r2, [pc, #512]	; (8004984 <HAL_RCC_OscConfig+0xb64>)
 8004784:	6a12      	ldr	r2, [r2, #32]
 8004786:	f022 0201 	bic.w	r2, r2, #1
 800478a:	621a      	str	r2, [r3, #32]
 800478c:	4b7d      	ldr	r3, [pc, #500]	; (8004984 <HAL_RCC_OscConfig+0xb64>)
 800478e:	4a7d      	ldr	r2, [pc, #500]	; (8004984 <HAL_RCC_OscConfig+0xb64>)
 8004790:	6a12      	ldr	r2, [r2, #32]
 8004792:	f022 0204 	bic.w	r2, r2, #4
 8004796:	621a      	str	r2, [r3, #32]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004798:	f002 ff82 	bl	80076a0 <HAL_GetTick>
 800479c:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
    
    /* Wait till LSE is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047a0:	e00b      	b.n	80047ba <HAL_RCC_OscConfig+0x99a>
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047a2:	f002 ff7d 	bl	80076a0 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80047ac:	1ad2      	subs	r2, r2, r3
 80047ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x99a>
      {
        return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e337      	b.n	8004e2a <HAL_RCC_OscConfig+0x100a>
 80047ba:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80047be:	2202      	movs	r2, #2
 80047c0:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	fa93 f2a3 	rbit	r2, r3
 80047cc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80047d0:	601a      	str	r2, [r3, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80047d2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80047d6:	681b      	ldr	r3, [r3, #0]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047d8:	fab3 f383 	clz	r3, r3
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	095b      	lsrs	r3, r3, #5
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d102      	bne.n	80047f4 <HAL_RCC_OscConfig+0x9d4>
 80047ee:	4b65      	ldr	r3, [pc, #404]	; (8004984 <HAL_RCC_OscConfig+0xb64>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	e01e      	b.n	8004832 <HAL_RCC_OscConfig+0xa12>
 80047f4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80047f8:	2202      	movs	r2, #2
 80047fa:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	fa93 f2a3 	rbit	r2, r3
 8004806:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800480a:	601a      	str	r2, [r3, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 800480c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	fab3 f383 	clz	r3, r3
 8004816:	b2db      	uxtb	r3, r3
 8004818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800481c:	b2db      	uxtb	r3, r3
 800481e:	b2db      	uxtb	r3, r3
 8004820:	095b      	lsrs	r3, r3, #5
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d102      	bne.n	800482e <HAL_RCC_OscConfig+0xa0e>
 8004828:	4b56      	ldr	r3, [pc, #344]	; (8004984 <HAL_RCC_OscConfig+0xb64>)
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	e001      	b.n	8004832 <HAL_RCC_OscConfig+0xa12>
 800482e:	4b55      	ldr	r3, [pc, #340]	; (8004984 <HAL_RCC_OscConfig+0xb64>)
 8004830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004832:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8004836:	2102      	movs	r1, #2
 8004838:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800483e:	6812      	ldr	r2, [r2, #0]
 8004840:	fa92 f1a2 	rbit	r1, r2
 8004844:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8004848:	6011      	str	r1, [r2, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 800484a:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800484e:	6812      	ldr	r2, [r2, #0]
 8004850:	fab2 f282 	clz	r2, r2
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	b2d2      	uxtb	r2, r2
 800485e:	f002 021f 	and.w	r2, r2, #31
 8004862:	40d3      	lsrs	r3, r2
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	2b00      	cmp	r3, #0
 800486a:	d19a      	bne.n	80047a2 <HAL_RCC_OscConfig+0x982>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800486c:	1d3b      	adds	r3, r7, #4
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d106      	bne.n	8004884 <HAL_RCC_OscConfig+0xa64>
 8004876:	4b43      	ldr	r3, [pc, #268]	; (8004984 <HAL_RCC_OscConfig+0xb64>)
 8004878:	4a42      	ldr	r2, [pc, #264]	; (8004984 <HAL_RCC_OscConfig+0xb64>)
 800487a:	6a12      	ldr	r2, [r2, #32]
 800487c:	f042 0201 	orr.w	r2, r2, #1
 8004880:	621a      	str	r2, [r3, #32]
 8004882:	e02f      	b.n	80048e4 <HAL_RCC_OscConfig+0xac4>
 8004884:	1d3b      	adds	r3, r7, #4
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10c      	bne.n	80048a8 <HAL_RCC_OscConfig+0xa88>
 800488e:	4b3d      	ldr	r3, [pc, #244]	; (8004984 <HAL_RCC_OscConfig+0xb64>)
 8004890:	4a3c      	ldr	r2, [pc, #240]	; (8004984 <HAL_RCC_OscConfig+0xb64>)
 8004892:	6a12      	ldr	r2, [r2, #32]
 8004894:	f022 0201 	bic.w	r2, r2, #1
 8004898:	621a      	str	r2, [r3, #32]
 800489a:	4b3a      	ldr	r3, [pc, #232]	; (8004984 <HAL_RCC_OscConfig+0xb64>)
 800489c:	4a39      	ldr	r2, [pc, #228]	; (8004984 <HAL_RCC_OscConfig+0xb64>)
 800489e:	6a12      	ldr	r2, [r2, #32]
 80048a0:	f022 0204 	bic.w	r2, r2, #4
 80048a4:	621a      	str	r2, [r3, #32]
 80048a6:	e01d      	b.n	80048e4 <HAL_RCC_OscConfig+0xac4>
 80048a8:	1d3b      	adds	r3, r7, #4
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	2b05      	cmp	r3, #5
 80048b0:	d10c      	bne.n	80048cc <HAL_RCC_OscConfig+0xaac>
 80048b2:	4b34      	ldr	r3, [pc, #208]	; (8004984 <HAL_RCC_OscConfig+0xb64>)
 80048b4:	4a33      	ldr	r2, [pc, #204]	; (8004984 <HAL_RCC_OscConfig+0xb64>)
 80048b6:	6a12      	ldr	r2, [r2, #32]
 80048b8:	f042 0204 	orr.w	r2, r2, #4
 80048bc:	621a      	str	r2, [r3, #32]
 80048be:	4b31      	ldr	r3, [pc, #196]	; (8004984 <HAL_RCC_OscConfig+0xb64>)
 80048c0:	4a30      	ldr	r2, [pc, #192]	; (8004984 <HAL_RCC_OscConfig+0xb64>)
 80048c2:	6a12      	ldr	r2, [r2, #32]
 80048c4:	f042 0201 	orr.w	r2, r2, #1
 80048c8:	621a      	str	r2, [r3, #32]
 80048ca:	e00b      	b.n	80048e4 <HAL_RCC_OscConfig+0xac4>
 80048cc:	4b2d      	ldr	r3, [pc, #180]	; (8004984 <HAL_RCC_OscConfig+0xb64>)
 80048ce:	4a2d      	ldr	r2, [pc, #180]	; (8004984 <HAL_RCC_OscConfig+0xb64>)
 80048d0:	6a12      	ldr	r2, [r2, #32]
 80048d2:	f022 0201 	bic.w	r2, r2, #1
 80048d6:	621a      	str	r2, [r3, #32]
 80048d8:	4b2a      	ldr	r3, [pc, #168]	; (8004984 <HAL_RCC_OscConfig+0xb64>)
 80048da:	4a2a      	ldr	r2, [pc, #168]	; (8004984 <HAL_RCC_OscConfig+0xb64>)
 80048dc:	6a12      	ldr	r2, [r2, #32]
 80048de:	f022 0204 	bic.w	r2, r2, #4
 80048e2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048e4:	1d3b      	adds	r3, r7, #4
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d06e      	beq.n	80049cc <HAL_RCC_OscConfig+0xbac>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ee:	f002 fed7 	bl	80076a0 <HAL_GetTick>
 80048f2:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048f6:	e00b      	b.n	8004910 <HAL_RCC_OscConfig+0xaf0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048f8:	f002 fed2 	bl	80076a0 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8004902:	1ad2      	subs	r2, r2, r3
 8004904:	f241 3388 	movw	r3, #5000	; 0x1388
 8004908:	429a      	cmp	r2, r3
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0xaf0>
        {
          return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e28c      	b.n	8004e2a <HAL_RCC_OscConfig+0x100a>
 8004910:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004914:	2202      	movs	r2, #2
 8004916:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004918:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	fa93 f2a3 	rbit	r2, r3
 8004922:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004926:	601a      	str	r2, [r3, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004928:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800492c:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800492e:	fab3 f383 	clz	r3, r3
 8004932:	b2db      	uxtb	r3, r3
 8004934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004938:	b2db      	uxtb	r3, r3
 800493a:	b2db      	uxtb	r3, r3
 800493c:	095b      	lsrs	r3, r3, #5
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b01      	cmp	r3, #1
 8004942:	d102      	bne.n	800494a <HAL_RCC_OscConfig+0xb2a>
 8004944:	4b0f      	ldr	r3, [pc, #60]	; (8004984 <HAL_RCC_OscConfig+0xb64>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	e022      	b.n	8004990 <HAL_RCC_OscConfig+0xb70>
 800494a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800494e:	2202      	movs	r2, #2
 8004950:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004952:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	fa93 f2a3 	rbit	r2, r3
 800495c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004960:	601a      	str	r2, [r3, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004962:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	fab3 f383 	clz	r3, r3
 800496c:	b2db      	uxtb	r3, r3
 800496e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004972:	b2db      	uxtb	r3, r3
 8004974:	b2db      	uxtb	r3, r3
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d106      	bne.n	800498c <HAL_RCC_OscConfig+0xb6c>
 800497e:	4b01      	ldr	r3, [pc, #4]	; (8004984 <HAL_RCC_OscConfig+0xb64>)
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	e005      	b.n	8004990 <HAL_RCC_OscConfig+0xb70>
 8004984:	40021000 	.word	0x40021000
 8004988:	40007000 	.word	0x40007000
 800498c:	4bb3      	ldr	r3, [pc, #716]	; (8004c5c <HAL_RCC_OscConfig+0xe3c>)
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004994:	2102      	movs	r1, #2
 8004996:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004998:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800499c:	6812      	ldr	r2, [r2, #0]
 800499e:	fa92 f1a2 	rbit	r1, r2
 80049a2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80049a6:	6011      	str	r1, [r2, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80049a8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80049ac:	6812      	ldr	r2, [r2, #0]
 80049ae:	fab2 f282 	clz	r2, r2
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049b8:	b2d2      	uxtb	r2, r2
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	f002 021f 	and.w	r2, r2, #31
 80049c0:	40d3      	lsrs	r3, r2
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d096      	beq.n	80048f8 <HAL_RCC_OscConfig+0xad8>
 80049ca:	e069      	b.n	8004aa0 <HAL_RCC_OscConfig+0xc80>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049cc:	f002 fe68 	bl	80076a0 <HAL_GetTick>
 80049d0:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049d4:	e00b      	b.n	80049ee <HAL_RCC_OscConfig+0xbce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049d6:	f002 fe63 	bl	80076a0 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80049e0:	1ad2      	subs	r2, r2, r3
 80049e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0xbce>
        {
          return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e21d      	b.n	8004e2a <HAL_RCC_OscConfig+0x100a>
 80049ee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80049f2:	2202      	movs	r2, #2
 80049f4:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	fa93 f2a3 	rbit	r2, r3
 8004a00:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004a04:	601a      	str	r2, [r3, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004a06:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004a0a:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a0c:	fab3 f383 	clz	r3, r3
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	095b      	lsrs	r3, r3, #5
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d102      	bne.n	8004a28 <HAL_RCC_OscConfig+0xc08>
 8004a22:	4b8e      	ldr	r3, [pc, #568]	; (8004c5c <HAL_RCC_OscConfig+0xe3c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	e01e      	b.n	8004a66 <HAL_RCC_OscConfig+0xc46>
 8004a28:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a30:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	fa93 f2a3 	rbit	r2, r3
 8004a3a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004a3e:	601a      	str	r2, [r3, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004a40:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	fab3 f383 	clz	r3, r3
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	095b      	lsrs	r3, r3, #5
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d102      	bne.n	8004a62 <HAL_RCC_OscConfig+0xc42>
 8004a5c:	4b7f      	ldr	r3, [pc, #508]	; (8004c5c <HAL_RCC_OscConfig+0xe3c>)
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	e001      	b.n	8004a66 <HAL_RCC_OscConfig+0xc46>
 8004a62:	4b7e      	ldr	r3, [pc, #504]	; (8004c5c <HAL_RCC_OscConfig+0xe3c>)
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8004a6a:	2102      	movs	r1, #2
 8004a6c:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8004a72:	6812      	ldr	r2, [r2, #0]
 8004a74:	fa92 f1a2 	rbit	r1, r2
 8004a78:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004a7c:	6011      	str	r1, [r2, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004a7e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004a82:	6812      	ldr	r2, [r2, #0]
 8004a84:	fab2 f282 	clz	r2, r2
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	b2d2      	uxtb	r2, r2
 8004a92:	f002 021f 	and.w	r2, r2, #31
 8004a96:	40d3      	lsrs	r3, r2
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d19a      	bne.n	80049d6 <HAL_RCC_OscConfig+0xbb6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aa0:	1d3b      	adds	r3, r7, #4
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 81be 	beq.w	8004e28 <HAL_RCC_OscConfig+0x1008>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004aac:	4b6b      	ldr	r3, [pc, #428]	; (8004c5c <HAL_RCC_OscConfig+0xe3c>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f003 030c 	and.w	r3, r3, #12
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	f000 81b5 	beq.w	8004e24 <HAL_RCC_OscConfig+0x1004>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004aba:	1d3b      	adds	r3, r7, #4
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	69db      	ldr	r3, [r3, #28]
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	f040 812a 	bne.w	8004d1a <HAL_RCC_OscConfig+0xefa>
 8004ac6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004aca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ace:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	fa93 f2a3 	rbit	r2, r3
 8004ada:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004ade:	601a      	str	r2, [r3, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004ae0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004ae4:	681b      	ldr	r3, [r3, #0]
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ae6:	fab3 f383 	clz	r3, r3
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8004af0:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8004af4:	2200      	movs	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af8:	f002 fdd2 	bl	80076a0 <HAL_GetTick>
 8004afc:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b00:	e009      	b.n	8004b16 <HAL_RCC_OscConfig+0xcf6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b02:	f002 fdcd 	bl	80076a0 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b64      	cmp	r3, #100	; 0x64
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0xcf6>
          {
            return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e189      	b.n	8004e2a <HAL_RCC_OscConfig+0x100a>
 8004b16:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004b1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b1e:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b20:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	fa93 f2a3 	rbit	r2, r3
 8004b2a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004b2e:	601a      	str	r2, [r3, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004b30:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004b34:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b36:	fab3 f383 	clz	r3, r3
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	f043 0320 	orr.w	r3, r3, #32
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	095b      	lsrs	r3, r3, #5
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d102      	bne.n	8004b52 <HAL_RCC_OscConfig+0xd32>
 8004b4c:	4b43      	ldr	r3, [pc, #268]	; (8004c5c <HAL_RCC_OscConfig+0xe3c>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	e01f      	b.n	8004b92 <HAL_RCC_OscConfig+0xd72>
 8004b52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b5a:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	fa93 f2a3 	rbit	r2, r3
 8004b66:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004b6a:	601a      	str	r2, [r3, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004b6c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	fab3 f383 	clz	r3, r3
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	f043 0320 	orr.w	r3, r3, #32
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	095b      	lsrs	r3, r3, #5
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d102      	bne.n	8004b8e <HAL_RCC_OscConfig+0xd6e>
 8004b88:	4b34      	ldr	r3, [pc, #208]	; (8004c5c <HAL_RCC_OscConfig+0xe3c>)
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	e001      	b.n	8004b92 <HAL_RCC_OscConfig+0xd72>
 8004b8e:	4b33      	ldr	r3, [pc, #204]	; (8004c5c <HAL_RCC_OscConfig+0xe3c>)
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004b96:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004b9a:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004ba0:	6812      	ldr	r2, [r2, #0]
 8004ba2:	fa92 f1a2 	rbit	r1, r2
 8004ba6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004baa:	6011      	str	r1, [r2, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004bac:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004bb0:	6812      	ldr	r2, [r2, #0]
 8004bb2:	fab2 f282 	clz	r2, r2
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	f042 0220 	orr.w	r2, r2, #32
 8004bbc:	b2d2      	uxtb	r2, r2
 8004bbe:	b2d2      	uxtb	r2, r2
 8004bc0:	f002 021f 	and.w	r2, r2, #31
 8004bc4:	40d3      	lsrs	r3, r2
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d199      	bne.n	8004b02 <HAL_RCC_OscConfig+0xce2>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004bce:	1d3b      	adds	r3, r7, #4
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd8:	d109      	bne.n	8004bee <HAL_RCC_OscConfig+0xdce>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004bda:	4b20      	ldr	r3, [pc, #128]	; (8004c5c <HAL_RCC_OscConfig+0xe3c>)
 8004bdc:	4a1f      	ldr	r2, [pc, #124]	; (8004c5c <HAL_RCC_OscConfig+0xe3c>)
 8004bde:	6852      	ldr	r2, [r2, #4]
 8004be0:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8004be4:	1d3a      	adds	r2, r7, #4
 8004be6:	6812      	ldr	r2, [r2, #0]
 8004be8:	6892      	ldr	r2, [r2, #8]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	605a      	str	r2, [r3, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bee:	4b1b      	ldr	r3, [pc, #108]	; (8004c5c <HAL_RCC_OscConfig+0xe3c>)
 8004bf0:	4a1a      	ldr	r2, [pc, #104]	; (8004c5c <HAL_RCC_OscConfig+0xe3c>)
 8004bf2:	6852      	ldr	r2, [r2, #4]
 8004bf4:	f422 1174 	bic.w	r1, r2, #3997696	; 0x3d0000
 8004bf8:	1d3a      	adds	r2, r7, #4
 8004bfa:	6812      	ldr	r2, [r2, #0]
 8004bfc:	6a10      	ldr	r0, [r2, #32]
 8004bfe:	1d3a      	adds	r2, r7, #4
 8004c00:	6812      	ldr	r2, [r2, #0]
 8004c02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c04:	4302      	orrs	r2, r0
 8004c06:	430a      	orrs	r2, r1
 8004c08:	605a      	str	r2, [r3, #4]
 8004c0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c12:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	fa93 f2a3 	rbit	r2, r3
 8004c1e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004c22:	601a      	str	r2, [r3, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004c24:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004c28:	681b      	ldr	r3, [r3, #0]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c2a:	fab3 f383 	clz	r3, r3
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8004c34:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8004c38:	2201      	movs	r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c3c:	f002 fd30 	bl	80076a0 <HAL_GetTick>
 8004c40:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c44:	e00c      	b.n	8004c60 <HAL_RCC_OscConfig+0xe40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c46:	f002 fd2b 	bl	80076a0 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b64      	cmp	r3, #100	; 0x64
 8004c54:	d904      	bls.n	8004c60 <HAL_RCC_OscConfig+0xe40>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e0e7      	b.n	8004e2a <HAL_RCC_OscConfig+0x100a>
 8004c5a:	bf00      	nop
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c68:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	fa93 f2a3 	rbit	r2, r3
 8004c74:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004c78:	601a      	str	r2, [r3, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004c7a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004c7e:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c80:	fab3 f383 	clz	r3, r3
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	f043 0320 	orr.w	r3, r3, #32
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	095b      	lsrs	r3, r3, #5
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d102      	bne.n	8004c9c <HAL_RCC_OscConfig+0xe7c>
 8004c96:	4b67      	ldr	r3, [pc, #412]	; (8004e34 <HAL_RCC_OscConfig+0x1014>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	e01f      	b.n	8004cdc <HAL_RCC_OscConfig+0xebc>
 8004c9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004ca0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ca4:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	fa93 f2a3 	rbit	r2, r3
 8004cb0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004cb4:	601a      	str	r2, [r3, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004cb6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	fab3 f383 	clz	r3, r3
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	f043 0320 	orr.w	r3, r3, #32
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	095b      	lsrs	r3, r3, #5
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d102      	bne.n	8004cd8 <HAL_RCC_OscConfig+0xeb8>
 8004cd2:	4b58      	ldr	r3, [pc, #352]	; (8004e34 <HAL_RCC_OscConfig+0x1014>)
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	e001      	b.n	8004cdc <HAL_RCC_OscConfig+0xebc>
 8004cd8:	4b56      	ldr	r3, [pc, #344]	; (8004e34 <HAL_RCC_OscConfig+0x1014>)
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004ce0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004ce4:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004cea:	6812      	ldr	r2, [r2, #0]
 8004cec:	fa92 f1a2 	rbit	r1, r2
 8004cf0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004cf4:	6011      	str	r1, [r2, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004cf6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004cfa:	6812      	ldr	r2, [r2, #0]
 8004cfc:	fab2 f282 	clz	r2, r2
 8004d00:	b2d2      	uxtb	r2, r2
 8004d02:	f042 0220 	orr.w	r2, r2, #32
 8004d06:	b2d2      	uxtb	r2, r2
 8004d08:	b2d2      	uxtb	r2, r2
 8004d0a:	f002 021f 	and.w	r2, r2, #31
 8004d0e:	40d3      	lsrs	r3, r2
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d096      	beq.n	8004c46 <HAL_RCC_OscConfig+0xe26>
 8004d18:	e086      	b.n	8004e28 <HAL_RCC_OscConfig+0x1008>
 8004d1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d1e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d22:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	fa93 f2a3 	rbit	r2, r3
 8004d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d32:	601a      	str	r2, [r3, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d38:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d3a:	fab3 f383 	clz	r3, r3
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8004d44:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d4c:	f002 fca8 	bl	80076a0 <HAL_GetTick>
 8004d50:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d54:	e009      	b.n	8004d6a <HAL_RCC_OscConfig+0xf4a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d56:	f002 fca3 	bl	80076a0 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b64      	cmp	r3, #100	; 0x64
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0xf4a>
          {
            return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e05f      	b.n	8004e2a <HAL_RCC_OscConfig+0x100a>
 8004d6a:	f107 0320 	add.w	r3, r7, #32
 8004d6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d72:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d74:	f107 0320 	add.w	r3, r7, #32
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	fa93 f2a3 	rbit	r2, r3
 8004d7e:	f107 031c 	add.w	r3, r7, #28
 8004d82:	601a      	str	r2, [r3, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004d84:	f107 031c 	add.w	r3, r7, #28
 8004d88:	681b      	ldr	r3, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d8a:	fab3 f383 	clz	r3, r3
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	f043 0320 	orr.w	r3, r3, #32
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	095b      	lsrs	r3, r3, #5
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d102      	bne.n	8004da6 <HAL_RCC_OscConfig+0xf86>
 8004da0:	4b24      	ldr	r3, [pc, #144]	; (8004e34 <HAL_RCC_OscConfig+0x1014>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	e01f      	b.n	8004de6 <HAL_RCC_OscConfig+0xfc6>
 8004da6:	f107 0318 	add.w	r3, r7, #24
 8004daa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004dae:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db0:	f107 0318 	add.w	r3, r7, #24
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	fa93 f2a3 	rbit	r2, r3
 8004dba:	f107 0314 	add.w	r3, r7, #20
 8004dbe:	601a      	str	r2, [r3, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004dc0:	f107 0314 	add.w	r3, r7, #20
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	fab3 f383 	clz	r3, r3
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	f043 0320 	orr.w	r3, r3, #32
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	095b      	lsrs	r3, r3, #5
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d102      	bne.n	8004de2 <HAL_RCC_OscConfig+0xfc2>
 8004ddc:	4b15      	ldr	r3, [pc, #84]	; (8004e34 <HAL_RCC_OscConfig+0x1014>)
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	e001      	b.n	8004de6 <HAL_RCC_OscConfig+0xfc6>
 8004de2:	4b14      	ldr	r3, [pc, #80]	; (8004e34 <HAL_RCC_OscConfig+0x1014>)
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	f107 0210 	add.w	r2, r7, #16
 8004dea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004dee:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df0:	f107 0210 	add.w	r2, r7, #16
 8004df4:	6812      	ldr	r2, [r2, #0]
 8004df6:	fa92 f1a2 	rbit	r1, r2
 8004dfa:	f107 020c 	add.w	r2, r7, #12
 8004dfe:	6011      	str	r1, [r2, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004e00:	f107 020c 	add.w	r2, r7, #12
 8004e04:	6812      	ldr	r2, [r2, #0]
 8004e06:	fab2 f282 	clz	r2, r2
 8004e0a:	b2d2      	uxtb	r2, r2
 8004e0c:	f042 0220 	orr.w	r2, r2, #32
 8004e10:	b2d2      	uxtb	r2, r2
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	f002 021f 	and.w	r2, r2, #31
 8004e18:	40d3      	lsrs	r3, r2
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d199      	bne.n	8004d56 <HAL_RCC_OscConfig+0xf36>
 8004e22:	e001      	b.n	8004e28 <HAL_RCC_OscConfig+0x1008>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e000      	b.n	8004e2a <HAL_RCC_OscConfig+0x100a>
    }
  }
  
  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	40021000 	.word	0x40021000

08004e38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b0a8      	sub	sp, #160	; 0xa0
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004e42:	2300      	movs	r3, #0
 8004e44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004e48:	4baf      	ldr	r3, [pc, #700]	; (8005108 <HAL_RCC_ClockConfig+0x2d0>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0207 	and.w	r2, r3, #7
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	f080 8163 	bcs.w	800511e <HAL_RCC_ClockConfig+0x2e6>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e58:	4bab      	ldr	r3, [pc, #684]	; (8005108 <HAL_RCC_ClockConfig+0x2d0>)
 8004e5a:	4aab      	ldr	r2, [pc, #684]	; (8005108 <HAL_RCC_ClockConfig+0x2d0>)
 8004e5c:	6812      	ldr	r2, [r2, #0]
 8004e5e:	f022 0107 	bic.w	r1, r2, #7
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e68:	4ba7      	ldr	r3, [pc, #668]	; (8005108 <HAL_RCC_ClockConfig+0x2d0>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0207 	and.w	r2, r3, #7
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d001      	beq.n	8004e7a <HAL_RCC_ClockConfig+0x42>
    {
      return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e2c6      	b.n	8005408 <HAL_RCC_ClockConfig+0x5d0>
    }
    
#endif /* FLASH_ACR_LATENCY */
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d008      	beq.n	8004e98 <HAL_RCC_ClockConfig+0x60>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e86:	4ba1      	ldr	r3, [pc, #644]	; (800510c <HAL_RCC_ClockConfig+0x2d4>)
 8004e88:	4aa0      	ldr	r2, [pc, #640]	; (800510c <HAL_RCC_ClockConfig+0x2d4>)
 8004e8a:	6852      	ldr	r2, [r2, #4]
 8004e8c:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6892      	ldr	r2, [r2, #8]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	605a      	str	r2, [r3, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 828e 	beq.w	80053c2 <HAL_RCC_ClockConfig+0x58a>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d152      	bne.n	8004f54 <HAL_RCC_ClockConfig+0x11c>
 8004eae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004eb2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004eba:	fa93 f3a3 	rbit	r3, r3
 8004ebe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004ec2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ec6:	fab3 f383 	clz	r3, r3
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	f043 0320 	orr.w	r3, r3, #32
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	095b      	lsrs	r3, r3, #5
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d102      	bne.n	8004ee2 <HAL_RCC_ClockConfig+0xaa>
 8004edc:	4b8b      	ldr	r3, [pc, #556]	; (800510c <HAL_RCC_ClockConfig+0x2d4>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	e01b      	b.n	8004f1a <HAL_RCC_ClockConfig+0xe2>
 8004ee2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ee6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004eee:	fa93 f3a3 	rbit	r3, r3
 8004ef2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004efa:	fab3 f383 	clz	r3, r3
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	f043 0320 	orr.w	r3, r3, #32
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	095b      	lsrs	r3, r3, #5
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d102      	bne.n	8004f16 <HAL_RCC_ClockConfig+0xde>
 8004f10:	4b7e      	ldr	r3, [pc, #504]	; (800510c <HAL_RCC_ClockConfig+0x2d4>)
 8004f12:	6a1b      	ldr	r3, [r3, #32]
 8004f14:	e001      	b.n	8004f1a <HAL_RCC_ClockConfig+0xe2>
 8004f16:	4b7d      	ldr	r3, [pc, #500]	; (800510c <HAL_RCC_ClockConfig+0x2d4>)
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f1e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f22:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004f26:	fa92 f2a2 	rbit	r2, r2
 8004f2a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004f2e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004f32:	fab2 f282 	clz	r2, r2
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	f042 0220 	orr.w	r2, r2, #32
 8004f3c:	b2d2      	uxtb	r2, r2
 8004f3e:	b2d2      	uxtb	r2, r2
 8004f40:	f002 021f 	and.w	r2, r2, #31
 8004f44:	40d3      	lsrs	r3, r2
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f040 8091 	bne.w	8005072 <HAL_RCC_ClockConfig+0x23a>
        {
          return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e259      	b.n	8005408 <HAL_RCC_ClockConfig+0x5d0>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d147      	bne.n	8004fec <HAL_RCC_ClockConfig+0x1b4>
 8004f5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f68:	fa93 f3a3 	rbit	r3, r3
 8004f6c:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004f6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f70:	fab3 f383 	clz	r3, r3
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	f043 0320 	orr.w	r3, r3, #32
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	095b      	lsrs	r3, r3, #5
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d102      	bne.n	8004f8c <HAL_RCC_ClockConfig+0x154>
 8004f86:	4b61      	ldr	r3, [pc, #388]	; (800510c <HAL_RCC_ClockConfig+0x2d4>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	e017      	b.n	8004fbc <HAL_RCC_ClockConfig+0x184>
 8004f8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f90:	67bb      	str	r3, [r7, #120]	; 0x78
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f94:	fa93 f3a3 	rbit	r3, r3
 8004f98:	677b      	str	r3, [r7, #116]	; 0x74
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004f9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f9c:	fab3 f383 	clz	r3, r3
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	f043 0320 	orr.w	r3, r3, #32
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	095b      	lsrs	r3, r3, #5
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d102      	bne.n	8004fb8 <HAL_RCC_ClockConfig+0x180>
 8004fb2:	4b56      	ldr	r3, [pc, #344]	; (800510c <HAL_RCC_ClockConfig+0x2d4>)
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	e001      	b.n	8004fbc <HAL_RCC_ClockConfig+0x184>
 8004fb8:	4b54      	ldr	r3, [pc, #336]	; (800510c <HAL_RCC_ClockConfig+0x2d4>)
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fc0:	673a      	str	r2, [r7, #112]	; 0x70
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004fc4:	fa92 f2a2 	rbit	r2, r2
 8004fc8:	66fa      	str	r2, [r7, #108]	; 0x6c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004fca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004fcc:	fab2 f282 	clz	r2, r2
 8004fd0:	b2d2      	uxtb	r2, r2
 8004fd2:	f042 0220 	orr.w	r2, r2, #32
 8004fd6:	b2d2      	uxtb	r2, r2
 8004fd8:	b2d2      	uxtb	r2, r2
 8004fda:	f002 021f 	and.w	r2, r2, #31
 8004fde:	40d3      	lsrs	r3, r2
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d144      	bne.n	8005072 <HAL_RCC_ClockConfig+0x23a>
        {
          return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e20d      	b.n	8005408 <HAL_RCC_ClockConfig+0x5d0>
 8004fec:	2302      	movs	r3, #2
 8004fee:	66bb      	str	r3, [r7, #104]	; 0x68
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ff2:	fa93 f3a3 	rbit	r3, r3
 8004ff6:	667b      	str	r3, [r7, #100]	; 0x64
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004ff8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ffa:	fab3 f383 	clz	r3, r3
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	f043 0320 	orr.w	r3, r3, #32
 8005004:	b2db      	uxtb	r3, r3
 8005006:	b2db      	uxtb	r3, r3
 8005008:	095b      	lsrs	r3, r3, #5
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b01      	cmp	r3, #1
 800500e:	d102      	bne.n	8005016 <HAL_RCC_ClockConfig+0x1de>
 8005010:	4b3e      	ldr	r3, [pc, #248]	; (800510c <HAL_RCC_ClockConfig+0x2d4>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	e016      	b.n	8005044 <HAL_RCC_ClockConfig+0x20c>
 8005016:	2302      	movs	r3, #2
 8005018:	663b      	str	r3, [r7, #96]	; 0x60
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800501a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800501c:	fa93 f3a3 	rbit	r3, r3
 8005020:	65fb      	str	r3, [r7, #92]	; 0x5c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8005022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005024:	fab3 f383 	clz	r3, r3
 8005028:	b2db      	uxtb	r3, r3
 800502a:	f043 0320 	orr.w	r3, r3, #32
 800502e:	b2db      	uxtb	r3, r3
 8005030:	b2db      	uxtb	r3, r3
 8005032:	095b      	lsrs	r3, r3, #5
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d102      	bne.n	8005040 <HAL_RCC_ClockConfig+0x208>
 800503a:	4b34      	ldr	r3, [pc, #208]	; (800510c <HAL_RCC_ClockConfig+0x2d4>)
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	e001      	b.n	8005044 <HAL_RCC_ClockConfig+0x20c>
 8005040:	4b32      	ldr	r3, [pc, #200]	; (800510c <HAL_RCC_ClockConfig+0x2d4>)
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	2202      	movs	r2, #2
 8005046:	65ba      	str	r2, [r7, #88]	; 0x58
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005048:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800504a:	fa92 f2a2 	rbit	r2, r2
 800504e:	657a      	str	r2, [r7, #84]	; 0x54
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8005050:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005052:	fab2 f282 	clz	r2, r2
 8005056:	b2d2      	uxtb	r2, r2
 8005058:	f042 0220 	orr.w	r2, r2, #32
 800505c:	b2d2      	uxtb	r2, r2
 800505e:	b2d2      	uxtb	r2, r2
 8005060:	f002 021f 	and.w	r2, r2, #31
 8005064:	40d3      	lsrs	r3, r2
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <HAL_RCC_ClockConfig+0x23a>
        {
          return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e1ca      	b.n	8005408 <HAL_RCC_ClockConfig+0x5d0>
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005072:	4b26      	ldr	r3, [pc, #152]	; (800510c <HAL_RCC_ClockConfig+0x2d4>)
 8005074:	4a25      	ldr	r2, [pc, #148]	; (800510c <HAL_RCC_ClockConfig+0x2d4>)
 8005076:	6852      	ldr	r2, [r2, #4]
 8005078:	f022 0103 	bic.w	r1, r2, #3
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	6852      	ldr	r2, [r2, #4]
 8005080:	430a      	orrs	r2, r1
 8005082:	605a      	str	r2, [r3, #4]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005084:	f002 fb0c 	bl	80076a0 <HAL_GetTick>
 8005088:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d113      	bne.n	80050bc <HAL_RCC_ClockConfig+0x284>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005094:	e00b      	b.n	80050ae <HAL_RCC_ClockConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005096:	f002 fb03 	bl	80076a0 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050a0:	1ad2      	subs	r2, r2, r3
 80050a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e1ac      	b.n	8005408 <HAL_RCC_ClockConfig+0x5d0>
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80050ae:	4b17      	ldr	r3, [pc, #92]	; (800510c <HAL_RCC_ClockConfig+0x2d4>)
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f003 030c 	and.w	r3, r3, #12
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	d1ed      	bne.n	8005096 <HAL_RCC_ClockConfig+0x25e>
 80050ba:	e182      	b.n	80053c2 <HAL_RCC_ClockConfig+0x58a>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d113      	bne.n	80050ec <HAL_RCC_ClockConfig+0x2b4>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050c4:	e00b      	b.n	80050de <HAL_RCC_ClockConfig+0x2a6>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050c6:	f002 faeb 	bl	80076a0 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050d0:	1ad2      	subs	r2, r2, r3
 80050d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d901      	bls.n	80050de <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e194      	b.n	8005408 <HAL_RCC_ClockConfig+0x5d0>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050de:	4b0b      	ldr	r3, [pc, #44]	; (800510c <HAL_RCC_ClockConfig+0x2d4>)
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f003 030c 	and.w	r3, r3, #12
 80050e6:	2b08      	cmp	r3, #8
 80050e8:	d1ed      	bne.n	80050c6 <HAL_RCC_ClockConfig+0x28e>
 80050ea:	e16a      	b.n	80053c2 <HAL_RCC_ClockConfig+0x58a>
          }
        }
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80050ec:	e010      	b.n	8005110 <HAL_RCC_ClockConfig+0x2d8>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ee:	f002 fad7 	bl	80076a0 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050f8:	1ad2      	subs	r2, r2, r3
 80050fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80050fe:	429a      	cmp	r2, r3
 8005100:	d906      	bls.n	8005110 <HAL_RCC_ClockConfig+0x2d8>
          {
            return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e180      	b.n	8005408 <HAL_RCC_ClockConfig+0x5d0>
 8005106:	bf00      	nop
 8005108:	40022000 	.word	0x40022000
 800510c:	40021000 	.word	0x40021000
          }
        }
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005110:	4b9f      	ldr	r3, [pc, #636]	; (8005390 <HAL_RCC_ClockConfig+0x558>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f003 030c 	and.w	r3, r3, #12
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1e8      	bne.n	80050ee <HAL_RCC_ClockConfig+0x2b6>
 800511c:	e151      	b.n	80053c2 <HAL_RCC_ClockConfig+0x58a>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d008      	beq.n	800513c <HAL_RCC_ClockConfig+0x304>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800512a:	4b99      	ldr	r3, [pc, #612]	; (8005390 <HAL_RCC_ClockConfig+0x558>)
 800512c:	4a98      	ldr	r2, [pc, #608]	; (8005390 <HAL_RCC_ClockConfig+0x558>)
 800512e:	6852      	ldr	r2, [r2, #4]
 8005130:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6892      	ldr	r2, [r2, #8]
 8005138:	430a      	orrs	r2, r1
 800513a:	605a      	str	r2, [r3, #4]
    }
    
    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 812b 	beq.w	80053a0 <HAL_RCC_ClockConfig+0x568>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d146      	bne.n	80051e0 <HAL_RCC_ClockConfig+0x3a8>
 8005152:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005156:	653b      	str	r3, [r7, #80]	; 0x50
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005158:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800515a:	fa93 f3a3 	rbit	r3, r3
 800515e:	64fb      	str	r3, [r7, #76]	; 0x4c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8005160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005162:	fab3 f383 	clz	r3, r3
 8005166:	b2db      	uxtb	r3, r3
 8005168:	f043 0320 	orr.w	r3, r3, #32
 800516c:	b2db      	uxtb	r3, r3
 800516e:	b2db      	uxtb	r3, r3
 8005170:	095b      	lsrs	r3, r3, #5
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b01      	cmp	r3, #1
 8005176:	d102      	bne.n	800517e <HAL_RCC_ClockConfig+0x346>
 8005178:	4b85      	ldr	r3, [pc, #532]	; (8005390 <HAL_RCC_ClockConfig+0x558>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	e017      	b.n	80051ae <HAL_RCC_ClockConfig+0x376>
 800517e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005182:	64bb      	str	r3, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005184:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005186:	fa93 f3a3 	rbit	r3, r3
 800518a:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 800518c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800518e:	fab3 f383 	clz	r3, r3
 8005192:	b2db      	uxtb	r3, r3
 8005194:	f043 0320 	orr.w	r3, r3, #32
 8005198:	b2db      	uxtb	r3, r3
 800519a:	b2db      	uxtb	r3, r3
 800519c:	095b      	lsrs	r3, r3, #5
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d102      	bne.n	80051aa <HAL_RCC_ClockConfig+0x372>
 80051a4:	4b7a      	ldr	r3, [pc, #488]	; (8005390 <HAL_RCC_ClockConfig+0x558>)
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	e001      	b.n	80051ae <HAL_RCC_ClockConfig+0x376>
 80051aa:	4b79      	ldr	r3, [pc, #484]	; (8005390 <HAL_RCC_ClockConfig+0x558>)
 80051ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80051b2:	643a      	str	r2, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051b6:	fa92 f2a2 	rbit	r2, r2
 80051ba:	63fa      	str	r2, [r7, #60]	; 0x3c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80051bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051be:	fab2 f282 	clz	r2, r2
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	f042 0220 	orr.w	r2, r2, #32
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	b2d2      	uxtb	r2, r2
 80051cc:	f002 021f 	and.w	r2, r2, #31
 80051d0:	40d3      	lsrs	r3, r2
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f040 808f 	bne.w	80052fa <HAL_RCC_ClockConfig+0x4c2>
        {
          return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e113      	b.n	8005408 <HAL_RCC_ClockConfig+0x5d0>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d145      	bne.n	8005274 <HAL_RCC_ClockConfig+0x43c>
 80051e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051ec:	63bb      	str	r3, [r7, #56]	; 0x38
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f0:	fa93 f3a3 	rbit	r3, r3
 80051f4:	637b      	str	r3, [r7, #52]	; 0x34
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80051f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051f8:	fab3 f383 	clz	r3, r3
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	f043 0320 	orr.w	r3, r3, #32
 8005202:	b2db      	uxtb	r3, r3
 8005204:	b2db      	uxtb	r3, r3
 8005206:	095b      	lsrs	r3, r3, #5
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b01      	cmp	r3, #1
 800520c:	d102      	bne.n	8005214 <HAL_RCC_ClockConfig+0x3dc>
 800520e:	4b60      	ldr	r3, [pc, #384]	; (8005390 <HAL_RCC_ClockConfig+0x558>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	e017      	b.n	8005244 <HAL_RCC_ClockConfig+0x40c>
 8005214:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005218:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800521a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521c:	fa93 f3a3 	rbit	r3, r3
 8005220:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8005222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005224:	fab3 f383 	clz	r3, r3
 8005228:	b2db      	uxtb	r3, r3
 800522a:	f043 0320 	orr.w	r3, r3, #32
 800522e:	b2db      	uxtb	r3, r3
 8005230:	b2db      	uxtb	r3, r3
 8005232:	095b      	lsrs	r3, r3, #5
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d102      	bne.n	8005240 <HAL_RCC_ClockConfig+0x408>
 800523a:	4b55      	ldr	r3, [pc, #340]	; (8005390 <HAL_RCC_ClockConfig+0x558>)
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	e001      	b.n	8005244 <HAL_RCC_ClockConfig+0x40c>
 8005240:	4b53      	ldr	r3, [pc, #332]	; (8005390 <HAL_RCC_ClockConfig+0x558>)
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005248:	62ba      	str	r2, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800524a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800524c:	fa92 f2a2 	rbit	r2, r2
 8005250:	627a      	str	r2, [r7, #36]	; 0x24
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8005252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005254:	fab2 f282 	clz	r2, r2
 8005258:	b2d2      	uxtb	r2, r2
 800525a:	f042 0220 	orr.w	r2, r2, #32
 800525e:	b2d2      	uxtb	r2, r2
 8005260:	b2d2      	uxtb	r2, r2
 8005262:	f002 021f 	and.w	r2, r2, #31
 8005266:	40d3      	lsrs	r3, r2
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b00      	cmp	r3, #0
 800526e:	d144      	bne.n	80052fa <HAL_RCC_ClockConfig+0x4c2>
        {
          return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e0c9      	b.n	8005408 <HAL_RCC_ClockConfig+0x5d0>
 8005274:	2302      	movs	r3, #2
 8005276:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005278:	6a3b      	ldr	r3, [r7, #32]
 800527a:	fa93 f3a3 	rbit	r3, r3
 800527e:	61fb      	str	r3, [r7, #28]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8005280:	69fb      	ldr	r3, [r7, #28]
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005282:	fab3 f383 	clz	r3, r3
 8005286:	b2db      	uxtb	r3, r3
 8005288:	f043 0320 	orr.w	r3, r3, #32
 800528c:	b2db      	uxtb	r3, r3
 800528e:	b2db      	uxtb	r3, r3
 8005290:	095b      	lsrs	r3, r3, #5
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b01      	cmp	r3, #1
 8005296:	d102      	bne.n	800529e <HAL_RCC_ClockConfig+0x466>
 8005298:	4b3d      	ldr	r3, [pc, #244]	; (8005390 <HAL_RCC_ClockConfig+0x558>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	e016      	b.n	80052cc <HAL_RCC_ClockConfig+0x494>
 800529e:	2302      	movs	r3, #2
 80052a0:	61bb      	str	r3, [r7, #24]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	fa93 f3a3 	rbit	r3, r3
 80052a8:	617b      	str	r3, [r7, #20]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	fab3 f383 	clz	r3, r3
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	f043 0320 	orr.w	r3, r3, #32
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	095b      	lsrs	r3, r3, #5
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d102      	bne.n	80052c8 <HAL_RCC_ClockConfig+0x490>
 80052c2:	4b33      	ldr	r3, [pc, #204]	; (8005390 <HAL_RCC_ClockConfig+0x558>)
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	e001      	b.n	80052cc <HAL_RCC_ClockConfig+0x494>
 80052c8:	4b31      	ldr	r3, [pc, #196]	; (8005390 <HAL_RCC_ClockConfig+0x558>)
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	2202      	movs	r2, #2
 80052ce:	613a      	str	r2, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	fa92 f2a2 	rbit	r2, r2
 80052d6:	60fa      	str	r2, [r7, #12]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	fab2 f282 	clz	r2, r2
 80052de:	b2d2      	uxtb	r2, r2
 80052e0:	f042 0220 	orr.w	r2, r2, #32
 80052e4:	b2d2      	uxtb	r2, r2
 80052e6:	b2d2      	uxtb	r2, r2
 80052e8:	f002 021f 	and.w	r2, r2, #31
 80052ec:	40d3      	lsrs	r3, r2
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_RCC_ClockConfig+0x4c2>
        {
          return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e086      	b.n	8005408 <HAL_RCC_ClockConfig+0x5d0>
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052fa:	4b25      	ldr	r3, [pc, #148]	; (8005390 <HAL_RCC_ClockConfig+0x558>)
 80052fc:	4a24      	ldr	r2, [pc, #144]	; (8005390 <HAL_RCC_ClockConfig+0x558>)
 80052fe:	6852      	ldr	r2, [r2, #4]
 8005300:	f022 0103 	bic.w	r1, r2, #3
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	6852      	ldr	r2, [r2, #4]
 8005308:	430a      	orrs	r2, r1
 800530a:	605a      	str	r2, [r3, #4]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800530c:	f002 f9c8 	bl	80076a0 <HAL_GetTick>
 8005310:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d113      	bne.n	8005344 <HAL_RCC_ClockConfig+0x50c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800531c:	e00b      	b.n	8005336 <HAL_RCC_ClockConfig+0x4fe>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800531e:	f002 f9bf 	bl	80076a0 <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005328:	1ad2      	subs	r2, r2, r3
 800532a:	f241 3388 	movw	r3, #5000	; 0x1388
 800532e:	429a      	cmp	r2, r3
 8005330:	d901      	bls.n	8005336 <HAL_RCC_ClockConfig+0x4fe>
          {
            return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e068      	b.n	8005408 <HAL_RCC_ClockConfig+0x5d0>
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005336:	4b16      	ldr	r3, [pc, #88]	; (8005390 <HAL_RCC_ClockConfig+0x558>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f003 030c 	and.w	r3, r3, #12
 800533e:	2b04      	cmp	r3, #4
 8005340:	d1ed      	bne.n	800531e <HAL_RCC_ClockConfig+0x4e6>
 8005342:	e02d      	b.n	80053a0 <HAL_RCC_ClockConfig+0x568>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	2b02      	cmp	r3, #2
 800534a:	d113      	bne.n	8005374 <HAL_RCC_ClockConfig+0x53c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800534c:	e00b      	b.n	8005366 <HAL_RCC_ClockConfig+0x52e>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800534e:	f002 f9a7 	bl	80076a0 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005358:	1ad2      	subs	r2, r2, r3
 800535a:	f241 3388 	movw	r3, #5000	; 0x1388
 800535e:	429a      	cmp	r2, r3
 8005360:	d901      	bls.n	8005366 <HAL_RCC_ClockConfig+0x52e>
          {
            return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e050      	b.n	8005408 <HAL_RCC_ClockConfig+0x5d0>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005366:	4b0a      	ldr	r3, [pc, #40]	; (8005390 <HAL_RCC_ClockConfig+0x558>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f003 030c 	and.w	r3, r3, #12
 800536e:	2b08      	cmp	r3, #8
 8005370:	d1ed      	bne.n	800534e <HAL_RCC_ClockConfig+0x516>
 8005372:	e015      	b.n	80053a0 <HAL_RCC_ClockConfig+0x568>
          }
        }
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005374:	e00e      	b.n	8005394 <HAL_RCC_ClockConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005376:	f002 f993 	bl	80076a0 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005380:	1ad2      	subs	r2, r2, r3
 8005382:	f241 3388 	movw	r3, #5000	; 0x1388
 8005386:	429a      	cmp	r2, r3
 8005388:	d904      	bls.n	8005394 <HAL_RCC_ClockConfig+0x55c>
          {
            return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e03c      	b.n	8005408 <HAL_RCC_ClockConfig+0x5d0>
 800538e:	bf00      	nop
 8005390:	40021000 	.word	0x40021000
          }
        }
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005394:	4b1e      	ldr	r3, [pc, #120]	; (8005410 <HAL_RCC_ClockConfig+0x5d8>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f003 030c 	and.w	r3, r3, #12
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1ea      	bne.n	8005376 <HAL_RCC_ClockConfig+0x53e>
        }
      }      
    } 
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053a0:	4b1c      	ldr	r3, [pc, #112]	; (8005414 <HAL_RCC_ClockConfig+0x5dc>)
 80053a2:	4a1c      	ldr	r2, [pc, #112]	; (8005414 <HAL_RCC_ClockConfig+0x5dc>)
 80053a4:	6812      	ldr	r2, [r2, #0]
 80053a6:	f022 0107 	bic.w	r1, r2, #7
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80053b0:	4b18      	ldr	r3, [pc, #96]	; (8005414 <HAL_RCC_ClockConfig+0x5dc>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0207 	and.w	r2, r3, #7
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d001      	beq.n	80053c2 <HAL_RCC_ClockConfig+0x58a>
    {
      return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e022      	b.n	8005408 <HAL_RCC_ClockConfig+0x5d0>
    }
  }
#endif /* FLASH_ACR_LATENCY */
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d008      	beq.n	80053e0 <HAL_RCC_ClockConfig+0x5a8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053ce:	4b10      	ldr	r3, [pc, #64]	; (8005410 <HAL_RCC_ClockConfig+0x5d8>)
 80053d0:	4a0f      	ldr	r2, [pc, #60]	; (8005410 <HAL_RCC_ClockConfig+0x5d8>)
 80053d2:	6852      	ldr	r2, [r2, #4]
 80053d4:	f422 61e0 	bic.w	r1, r2, #1792	; 0x700
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	68d2      	ldr	r2, [r2, #12]
 80053dc:	430a      	orrs	r2, r1
 80053de:	605a      	str	r2, [r3, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0308 	and.w	r3, r3, #8
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d009      	beq.n	8005400 <HAL_RCC_ClockConfig+0x5c8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80053ec:	4b08      	ldr	r3, [pc, #32]	; (8005410 <HAL_RCC_ClockConfig+0x5d8>)
 80053ee:	4a08      	ldr	r2, [pc, #32]	; (8005410 <HAL_RCC_ClockConfig+0x5d8>)
 80053f0:	6852      	ldr	r2, [r2, #4]
 80053f2:	f422 5160 	bic.w	r1, r2, #14336	; 0x3800
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6912      	ldr	r2, [r2, #16]
 80053fa:	00d2      	lsls	r2, r2, #3
 80053fc:	430a      	orrs	r2, r1
 80053fe:	605a      	str	r2, [r3, #4]
  }
 
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005400:	2000      	movs	r0, #0
 8005402:	f002 f923 	bl	800764c <HAL_InitTick>
  
  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	37a0      	adds	r7, #160	; 0xa0
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	40021000 	.word	0x40021000
 8005414:	40022000 	.word	0x40022000

08005418 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005418:	b490      	push	{r4, r7}
 800541a:	b08e      	sub	sp, #56	; 0x38
 800541c:	af00      	add	r7, sp, #0
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 800541e:	4b36      	ldr	r3, [pc, #216]	; (80054f8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8005420:	1d3c      	adds	r4, r7, #4
 8005422:	6818      	ldr	r0, [r3, #0]
 8005424:	6859      	ldr	r1, [r3, #4]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 800542c:	4a33      	ldr	r2, [pc, #204]	; (80054fc <HAL_RCC_GetSysClockFreq+0xe4>)
 800542e:	463b      	mov	r3, r7
 8005430:	8812      	ldrh	r2, [r2, #0]
 8005432:	801a      	strh	r2, [r3, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 8005434:	2300      	movs	r3, #0
 8005436:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005438:	2300      	movs	r3, #0
 800543a:	62bb      	str	r3, [r7, #40]	; 0x28
 800543c:	2300      	movs	r3, #0
 800543e:	637b      	str	r3, [r7, #52]	; 0x34
 8005440:	2300      	movs	r3, #0
 8005442:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0;
 8005444:	2300      	movs	r3, #0
 8005446:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8005448:	4b2d      	ldr	r3, [pc, #180]	; (8005500 <HAL_RCC_GetSysClockFreq+0xe8>)
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800544e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005450:	f003 030c 	and.w	r3, r3, #12
 8005454:	2b04      	cmp	r3, #4
 8005456:	d002      	beq.n	800545e <HAL_RCC_GetSysClockFreq+0x46>
 8005458:	2b08      	cmp	r3, #8
 800545a:	d003      	beq.n	8005464 <HAL_RCC_GetSysClockFreq+0x4c>
 800545c:	e043      	b.n	80054e6 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800545e:	4b29      	ldr	r3, [pc, #164]	; (8005504 <HAL_RCC_GetSysClockFreq+0xec>)
 8005460:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005462:	e043      	b.n	80054ec <HAL_RCC_GetSysClockFreq+0xd4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8005464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005466:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800546a:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800546e:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	fa93 f3a3 	rbit	r3, r3
 8005476:	61fb      	str	r3, [r7, #28]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	fab3 f383 	clz	r3, r3
 800547e:	fa22 f303 	lsr.w	r3, r2, r3
 8005482:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005486:	4413      	add	r3, r2
 8005488:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 800548c:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800548e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d01e      	beq.n	80054d6 <HAL_RCC_GetSysClockFreq+0xbe>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8005498:	4b19      	ldr	r3, [pc, #100]	; (8005500 <HAL_RCC_GetSysClockFreq+0xe8>)
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 80054a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054a4:	61bb      	str	r3, [r7, #24]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	fa93 f3a3 	rbit	r3, r3
 80054ac:	617b      	str	r3, [r7, #20]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	fab3 f383 	clz	r3, r3
 80054b4:	fa22 f303 	lsr.w	r3, r2, r3
 80054b8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80054bc:	4413      	add	r3, r2
 80054be:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80054c2:	62bb      	str	r3, [r7, #40]	; 0x28
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 80054c4:	4a0f      	ldr	r2, [pc, #60]	; (8005504 <HAL_RCC_GetSysClockFreq+0xec>)
 80054c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ce:	fb02 f303 	mul.w	r3, r2, r3
 80054d2:	637b      	str	r3, [r7, #52]	; 0x34
 80054d4:	e004      	b.n	80054e0 <HAL_RCC_GetSysClockFreq+0xc8>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	4a0b      	ldr	r2, [pc, #44]	; (8005508 <HAL_RCC_GetSysClockFreq+0xf0>)
 80054da:	fb02 f303 	mul.w	r3, r2, r3
 80054de:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 80054e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80054e4:	e002      	b.n	80054ec <HAL_RCC_GetSysClockFreq+0xd4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80054e6:	4b07      	ldr	r3, [pc, #28]	; (8005504 <HAL_RCC_GetSysClockFreq+0xec>)
 80054e8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80054ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3738      	adds	r7, #56	; 0x38
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bc90      	pop	{r4, r7}
 80054f6:	4770      	bx	lr
 80054f8:	08008ff4 	.word	0x08008ff4
 80054fc:	08009004 	.word	0x08009004
 8005500:	40021000 	.word	0x40021000
 8005504:	007a1200 	.word	0x007a1200
 8005508:	003d0900 	.word	0x003d0900

0800550c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8005512:	f7ff ff81 	bl	8005418 <HAL_RCC_GetSysClockFreq>
 8005516:	4602      	mov	r2, r0
 8005518:	4b0c      	ldr	r3, [pc, #48]	; (800554c <HAL_RCC_GetHCLKFreq+0x40>)
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8005520:	23f0      	movs	r3, #240	; 0xf0
 8005522:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	fa93 f3a3 	rbit	r3, r3
 800552a:	603b      	str	r3, [r7, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	fab3 f383 	clz	r3, r3
 8005532:	fa21 f303 	lsr.w	r3, r1, r3
 8005536:	4906      	ldr	r1, [pc, #24]	; (8005550 <HAL_RCC_GetHCLKFreq+0x44>)
 8005538:	5ccb      	ldrb	r3, [r1, r3]
 800553a:	40da      	lsrs	r2, r3
 800553c:	4b05      	ldr	r3, [pc, #20]	; (8005554 <HAL_RCC_GetHCLKFreq+0x48>)
 800553e:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8005540:	4b04      	ldr	r3, [pc, #16]	; (8005554 <HAL_RCC_GetHCLKFreq+0x48>)
 8005542:	681b      	ldr	r3, [r3, #0]
}
 8005544:	4618      	mov	r0, r3
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	40021000 	.word	0x40021000
 8005550:	08009008 	.word	0x08009008
 8005554:	20000000 	.word	0x20000000

08005558 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800555e:	f7ff ffd5 	bl	800550c <HAL_RCC_GetHCLKFreq>
 8005562:	4602      	mov	r2, r0
 8005564:	4b0b      	ldr	r3, [pc, #44]	; (8005594 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
 800556c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005570:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	fa93 f3a3 	rbit	r3, r3
 8005578:	603b      	str	r3, [r7, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	fab3 f383 	clz	r3, r3
 8005580:	fa21 f303 	lsr.w	r3, r1, r3
 8005584:	4904      	ldr	r1, [pc, #16]	; (8005598 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005586:	5ccb      	ldrb	r3, [r1, r3]
 8005588:	fa22 f303 	lsr.w	r3, r2, r3
}    
 800558c:	4618      	mov	r0, r3
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	40021000 	.word	0x40021000
 8005598:	08009008 	.word	0x08009008

0800559c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80055a2:	f7ff ffb3 	bl	800550c <HAL_RCC_GetHCLKFreq>
 80055a6:	4602      	mov	r2, r0
 80055a8:	4b0b      	ldr	r3, [pc, #44]	; (80055d8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f403 5160 	and.w	r1, r3, #14336	; 0x3800
 80055b0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80055b4:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	fa93 f3a3 	rbit	r3, r3
 80055bc:	603b      	str	r3, [r7, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	fab3 f383 	clz	r3, r3
 80055c4:	fa21 f303 	lsr.w	r3, r1, r3
 80055c8:	4904      	ldr	r1, [pc, #16]	; (80055dc <HAL_RCC_GetPCLK2Freq+0x40>)
 80055ca:	5ccb      	ldrb	r3, [r1, r3]
 80055cc:	fa22 f303 	lsr.w	r3, r2, r3
} 
 80055d0:	4618      	mov	r0, r3
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	40021000 	.word	0x40021000
 80055dc:	08009008 	.word	0x08009008

080055e0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055ea:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	fa93 f3a3 	rbit	r3, r3
 80055f2:	603b      	str	r3, [r7, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80055f4:	683b      	ldr	r3, [r7, #0]
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80055f6:	fab3 f383 	clz	r3, r3
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8005600:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 8005604:	2201      	movs	r2, #1
 8005606:	601a      	str	r2, [r3, #0]
}
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop

08005614 <HAL_I2C_Init>:
  * @param  hi2c : Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005614:	b590      	push	{r4, r7, lr}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0;
 800561c:	2300      	movs	r3, #0
 800561e:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0;
 8005620:	2300      	movs	r3, #0
 8005622:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e06a      	b.n	8005704 <HAL_I2C_Init+0xf0>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d106      	bne.n	8005648 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f002 feae 	bl	80083a4 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	6812      	ldr	r2, [r2, #0]
 8005658:	6812      	ldr	r2, [r2, #0]
 800565a:	f022 0201 	bic.w	r2, r2, #1
 800565e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005660:	f7ff ff7a 	bl	8005558 <HAL_RCC_GetPCLK1Freq>
 8005664:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQ_RANGE(pclk1);
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	4b28      	ldr	r3, [pc, #160]	; (800570c <HAL_I2C_Init+0xf8>)
 800566a:	fba3 0302 	umull	r0, r3, r3, r2
 800566e:	0c9b      	lsrs	r3, r3, #18
 8005670:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6859      	ldr	r1, [r3, #4]
 8005682:	4b23      	ldr	r3, [pc, #140]	; (8005710 <HAL_I2C_Init+0xfc>)
 8005684:	4299      	cmp	r1, r3
 8005686:	d802      	bhi.n	800568e <HAL_I2C_Init+0x7a>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	3301      	adds	r3, #1
 800568c:	e009      	b.n	80056a2 <HAL_I2C_Init+0x8e>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8005694:	fb01 f103 	mul.w	r1, r1, r3
 8005698:	4b1e      	ldr	r3, [pc, #120]	; (8005714 <HAL_I2C_Init+0x100>)
 800569a:	fba3 0301 	umull	r0, r3, r3, r1
 800569e:	099b      	lsrs	r3, r3, #6
 80056a0:	3301      	adds	r3, #1
 80056a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_Configure_Speed(hi2c, pclk1);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681c      	ldr	r4, [r3, #0]
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	68b9      	ldr	r1, [r7, #8]
 80056ac:	f000 fb7a 	bl	8005da4 <I2C_Configure_Speed>
 80056b0:	4603      	mov	r3, r0
 80056b2:	61e3      	str	r3, [r4, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	69d1      	ldr	r1, [r2, #28]
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	6a12      	ldr	r2, [r2, #32]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	6911      	ldr	r1, [r2, #16]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	68d2      	ldr	r2, [r2, #12]
 80056d0:	430a      	orrs	r2, r1
 80056d2:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	6951      	ldr	r1, [r2, #20]
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	6992      	ldr	r2, [r2, #24]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	6812      	ldr	r2, [r2, #0]
 80056ec:	6812      	ldr	r2, [r2, #0]
 80056ee:	f042 0201 	orr.w	r2, r2, #1
 80056f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->State = HAL_I2C_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	bd90      	pop	{r4, r7, pc}
 800570c:	431bde83 	.word	0x431bde83
 8005710:	000186a0 	.word	0x000186a0
 8005714:	10624dd3 	.word	0x10624dd3

08005718 <HAL_I2C_Master_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	607a      	str	r2, [r7, #4]
 8005722:	460a      	mov	r2, r1
 8005724:	817a      	strh	r2, [r7, #10]
 8005726:	813b      	strh	r3, [r7, #8]
  if(hi2c->State == HAL_I2C_STATE_READY)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b01      	cmp	r3, #1
 8005732:	f040 809a 	bne.w	800586a <HAL_I2C_Master_Transmit+0x152>
  {
    if((pData == NULL) || (Size == 0))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d002      	beq.n	8005742 <HAL_I2C_Master_Transmit+0x2a>
 800573c:	893b      	ldrh	r3, [r7, #8]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_I2C_Master_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e092      	b.n	800586c <HAL_I2C_Master_Transmit+0x154>
    }

    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG) != HAL_OK)
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	494a      	ldr	r1, [pc, #296]	; (8005874 <HAL_I2C_Master_Transmit+0x15c>)
 800574a:	2201      	movs	r2, #1
 800574c:	f242 7310 	movw	r3, #10000	; 0x2710
 8005750:	f000 fb76 	bl	8005e40 <I2C_WaitOnFlagUntilTimeout>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 800575a:	2302      	movs	r3, #2
 800575c:	e086      	b.n	800586c <HAL_I2C_Master_Transmit+0x154>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005764:	2b01      	cmp	r3, #1
 8005766:	d101      	bne.n	800576c <HAL_I2C_Master_Transmit+0x54>
 8005768:	2302      	movs	r3, #2
 800576a:	e07f      	b.n	800586c <HAL_I2C_Master_Transmit+0x154>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	6812      	ldr	r2, [r2, #0]
 800577c:	6812      	ldr	r2, [r2, #0]
 800577e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005782:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY_TX;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2212      	movs	r2, #18
 8005788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	639a      	str	r2, [r3, #56]	; 0x38

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout) != HAL_OK)
 8005792:	897b      	ldrh	r3, [r7, #10]
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	4619      	mov	r1, r3
 8005798:	6a3a      	ldr	r2, [r7, #32]
 800579a:	f000 f9ff 	bl	8005b9c <I2C_MasterRequestWrite>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00f      	beq.n	80057c4 <HAL_I2C_Master_Transmit+0xac>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a8:	2b04      	cmp	r3, #4
 80057aa:	d105      	bne.n	80057b8 <HAL_I2C_Master_Transmit+0xa0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e059      	b.n	800586c <HAL_I2C_Master_Transmit+0x154>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e053      	b.n	800586c <HAL_I2C_Master_Transmit+0x154>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	617b      	str	r3, [r7, #20]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	617b      	str	r3, [r7, #20]
 80057d4:	697b      	ldr	r3, [r7, #20]

    while(Size > 0)
 80057d6:	e028      	b.n	800582a <HAL_I2C_Master_Transmit+0x112>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	4927      	ldr	r1, [pc, #156]	; (8005878 <HAL_I2C_Master_Transmit+0x160>)
 80057dc:	2200      	movs	r2, #0
 80057de:	6a3b      	ldr	r3, [r7, #32]
 80057e0:	f000 fb2e 	bl	8005e40 <I2C_WaitOnFlagUntilTimeout>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <HAL_I2C_Master_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e03e      	b.n	800586c <HAL_I2C_Master_Transmit+0x154>
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*pData++);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	1c59      	adds	r1, r3, #1
 80057f6:	6079      	str	r1, [r7, #4]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	6113      	str	r3, [r2, #16]
      Size--;
 80057fc:	893b      	ldrh	r3, [r7, #8]
 80057fe:	3b01      	subs	r3, #1
 8005800:	813b      	strh	r3, [r7, #8]

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00c      	beq.n	800582a <HAL_I2C_Master_Transmit+0x112>
 8005810:	893b      	ldrh	r3, [r7, #8]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d009      	beq.n	800582a <HAL_I2C_Master_Transmit+0x112>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*pData++);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	1c59      	adds	r1, r3, #1
 800581e:	6079      	str	r1, [r7, #4]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	6113      	str	r3, [r2, #16]
        Size--;
 8005824:	893b      	ldrh	r3, [r7, #8]
 8005826:	3b01      	subs	r3, #1
 8005828:	813b      	strh	r3, [r7, #8]
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    while(Size > 0)
 800582a:	893b      	ldrh	r3, [r7, #8]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1d3      	bne.n	80057d8 <HAL_I2C_Master_Transmit+0xc0>
        Size--;
      }
    }

    /* Wait until TXE flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout) != HAL_OK)
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	4912      	ldr	r1, [pc, #72]	; (800587c <HAL_I2C_Master_Transmit+0x164>)
 8005834:	2200      	movs	r2, #0
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	f000 fb02 	bl	8005e40 <I2C_WaitOnFlagUntilTimeout>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <HAL_I2C_Master_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e012      	b.n	800586c <HAL_I2C_Master_Transmit+0x154>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	6812      	ldr	r2, [r2, #0]
 800584e:	6812      	ldr	r2, [r2, #0]
 8005850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005854:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	e000      	b.n	800586c <HAL_I2C_Master_Transmit+0x154>
  }
  else
  {
    return HAL_BUSY;
 800586a:	2302      	movs	r3, #2
  }
}
 800586c:	4618      	mov	r0, r3
 800586e:	3718      	adds	r7, #24
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	00100002 	.word	0x00100002
 8005878:	00010080 	.word	0x00010080
 800587c:	00010004 	.word	0x00010004

08005880 <HAL_I2C_Master_Receive>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b088      	sub	sp, #32
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	607a      	str	r2, [r7, #4]
 800588a:	460a      	mov	r2, r1
 800588c:	817a      	strh	r2, [r7, #10]
 800588e:	813b      	strh	r3, [r7, #8]
  if(hi2c->State == HAL_I2C_STATE_READY)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b01      	cmp	r3, #1
 800589a:	f040 8177 	bne.w	8005b8c <HAL_I2C_Master_Receive+0x30c>
  {
    if((pData == NULL) || (Size == 0))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <HAL_I2C_Master_Receive+0x2a>
 80058a4:	893b      	ldrh	r3, [r7, #8]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_I2C_Master_Receive+0x2e>
    {
      return  HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e16f      	b.n	8005b8e <HAL_I2C_Master_Receive+0x30e>
    }

    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG) != HAL_OK)
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	4992      	ldr	r1, [pc, #584]	; (8005afc <HAL_I2C_Master_Receive+0x27c>)
 80058b2:	2201      	movs	r2, #1
 80058b4:	f242 7310 	movw	r3, #10000	; 0x2710
 80058b8:	f000 fac2 	bl	8005e40 <I2C_WaitOnFlagUntilTimeout>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d001      	beq.n	80058c6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80058c2:	2302      	movs	r3, #2
 80058c4:	e163      	b.n	8005b8e <HAL_I2C_Master_Receive+0x30e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d101      	bne.n	80058d4 <HAL_I2C_Master_Receive+0x54>
 80058d0:	2302      	movs	r3, #2
 80058d2:	e15c      	b.n	8005b8e <HAL_I2C_Master_Receive+0x30e>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	6812      	ldr	r2, [r2, #0]
 80058e4:	6812      	ldr	r2, [r2, #0]
 80058e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY_RX;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2222      	movs	r2, #34	; 0x22
 80058f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout) != HAL_OK)
 80058fa:	897b      	ldrh	r3, [r7, #10]
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	4619      	mov	r1, r3
 8005900:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005902:	f000 f9ad 	bl	8005c60 <I2C_MasterRequestRead>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00f      	beq.n	800592c <HAL_I2C_Master_Receive+0xac>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005910:	2b04      	cmp	r3, #4
 8005912:	d105      	bne.n	8005920 <HAL_I2C_Master_Receive+0xa0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e136      	b.n	8005b8e <HAL_I2C_Master_Receive+0x30e>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e130      	b.n	8005b8e <HAL_I2C_Master_Receive+0x30e>
      }
    }

    if(Size == 1)
 800592c:	893b      	ldrh	r3, [r7, #8]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d11b      	bne.n	800596a <HAL_I2C_Master_Receive+0xea>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	6812      	ldr	r2, [r2, #0]
 800593a:	6812      	ldr	r2, [r2, #0]
 800593c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005940:	601a      	str	r2, [r3, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005942:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	61fb      	str	r3, [r7, #28]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	61fb      	str	r3, [r7, #28]
 8005954:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	6812      	ldr	r2, [r2, #0]
 800595e:	6812      	ldr	r2, [r2, #0]
 8005960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005964:	601a      	str	r2, [r3, #0]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8005966:	b662      	cpsie	i
 8005968:	e030      	b.n	80059cc <HAL_I2C_Master_Receive+0x14c>
	  
      /* Re-enable IRQs */
      __enable_irq(); 
    }
    else if(Size == 2)
 800596a:	893b      	ldrh	r3, [r7, #8]
 800596c:	2b02      	cmp	r3, #2
 800596e:	d11b      	bne.n	80059a8 <HAL_I2C_Master_Receive+0x128>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	6812      	ldr	r2, [r2, #0]
 8005978:	6812      	ldr	r2, [r2, #0]
 800597a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800597e:	601a      	str	r2, [r3, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005980:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	61bb      	str	r3, [r7, #24]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	61bb      	str	r3, [r7, #24]
 8005992:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	6812      	ldr	r2, [r2, #0]
 800599c:	6812      	ldr	r2, [r2, #0]
 800599e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059a2:	601a      	str	r2, [r3, #0]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80059a4:	b662      	cpsie	i
 80059a6:	e011      	b.n	80059cc <HAL_I2C_Master_Receive+0x14c>
       __enable_irq(); 
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	6812      	ldr	r2, [r2, #0]
 80059b0:	6812      	ldr	r2, [r2, #0]
 80059b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059b6:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	617b      	str	r3, [r7, #20]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	617b      	str	r3, [r7, #20]
 80059c8:	697b      	ldr	r3, [r7, #20]
    }

    while(Size > 0)
 80059ca:	e0d1      	b.n	8005b70 <HAL_I2C_Master_Receive+0x2f0>
 80059cc:	e0d0      	b.n	8005b70 <HAL_I2C_Master_Receive+0x2f0>
    {
      if(Size <= 3)
 80059ce:	893b      	ldrh	r3, [r7, #8]
 80059d0:	2b03      	cmp	r3, #3
 80059d2:	f200 80a5 	bhi.w	8005b20 <HAL_I2C_Master_Receive+0x2a0>
      {
        /* One byte */
        if(Size == 1)
 80059d6:	893b      	ldrh	r3, [r7, #8]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d116      	bne.n	8005a0a <HAL_I2C_Master_Receive+0x18a>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	4948      	ldr	r1, [pc, #288]	; (8005b00 <HAL_I2C_Master_Receive+0x280>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e4:	f000 fa2c 	bl	8005e40 <I2C_WaitOnFlagUntilTimeout>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <HAL_I2C_Master_Receive+0x172>
          {
            return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e0cd      	b.n	8005b8e <HAL_I2C_Master_Receive+0x30e>
          }

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	607a      	str	r2, [r7, #4]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	6812      	ldr	r2, [r2, #0]
 80059fc:	6912      	ldr	r2, [r2, #16]
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	701a      	strb	r2, [r3, #0]
          Size--;
 8005a02:	893b      	ldrh	r3, [r7, #8]
 8005a04:	3b01      	subs	r3, #1
 8005a06:	813b      	strh	r3, [r7, #8]
 8005a08:	e0b2      	b.n	8005b70 <HAL_I2C_Master_Receive+0x2f0>
        }
        /* Two bytes */
        else if(Size == 2)
 8005a0a:	893b      	ldrh	r3, [r7, #8]
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d12b      	bne.n	8005a68 <HAL_I2C_Master_Receive+0x1e8>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout) != HAL_OK)
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	493c      	ldr	r1, [pc, #240]	; (8005b04 <HAL_I2C_Master_Receive+0x284>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a18:	f000 fa12 	bl	8005e40 <I2C_WaitOnFlagUntilTimeout>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <HAL_I2C_Master_Receive+0x1a6>
          {
            return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e0b3      	b.n	8005b8e <HAL_I2C_Master_Receive+0x30e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005a26:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
           __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	6812      	ldr	r2, [r2, #0]
 8005a30:	6812      	ldr	r2, [r2, #0]
 8005a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	1c5a      	adds	r2, r3, #1
 8005a3c:	607a      	str	r2, [r7, #4]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	6812      	ldr	r2, [r2, #0]
 8005a42:	6912      	ldr	r2, [r2, #16]
 8005a44:	b2d2      	uxtb	r2, r2
 8005a46:	701a      	strb	r2, [r3, #0]
          Size--;
 8005a48:	893b      	ldrh	r3, [r7, #8]
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	813b      	strh	r3, [r7, #8]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8005a4e:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	607a      	str	r2, [r7, #4]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	6812      	ldr	r2, [r2, #0]
 8005a5a:	6912      	ldr	r2, [r2, #16]
 8005a5c:	b2d2      	uxtb	r2, r2
 8005a5e:	701a      	strb	r2, [r3, #0]
          Size--;
 8005a60:	893b      	ldrh	r3, [r7, #8]
 8005a62:	3b01      	subs	r3, #1
 8005a64:	813b      	strh	r3, [r7, #8]
 8005a66:	e083      	b.n	8005b70 <HAL_I2C_Master_Receive+0x2f0>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout) != HAL_OK)
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	4926      	ldr	r1, [pc, #152]	; (8005b04 <HAL_I2C_Master_Receive+0x284>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a70:	f000 f9e6 	bl	8005e40 <I2C_WaitOnFlagUntilTimeout>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <HAL_I2C_Master_Receive+0x1fe>
          {
            return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e087      	b.n	8005b8e <HAL_I2C_Master_Receive+0x30e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	6812      	ldr	r2, [r2, #0]
 8005a86:	6812      	ldr	r2, [r2, #0]
 8005a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a8c:	601a      	str	r2, [r3, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005a8e:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	1c5a      	adds	r2, r3, #1
 8005a94:	607a      	str	r2, [r7, #4]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	6812      	ldr	r2, [r2, #0]
 8005a9a:	6912      	ldr	r2, [r2, #16]
 8005a9c:	b2d2      	uxtb	r2, r2
 8005a9e:	701a      	strb	r2, [r3, #0]
          Size--;
 8005aa0:	893b      	ldrh	r3, [r7, #8]
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	813b      	strh	r3, [r7, #8]

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout) != HAL_OK)
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	4916      	ldr	r1, [pc, #88]	; (8005b04 <HAL_I2C_Master_Receive+0x284>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aae:	f000 f9c7 	bl	8005e40 <I2C_WaitOnFlagUntilTimeout>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d001      	beq.n	8005abc <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e068      	b.n	8005b8e <HAL_I2C_Master_Receive+0x30e>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	6812      	ldr	r2, [r2, #0]
 8005ac4:	6812      	ldr	r2, [r2, #0]
 8005ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	1c5a      	adds	r2, r3, #1
 8005ad0:	607a      	str	r2, [r7, #4]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	6812      	ldr	r2, [r2, #0]
 8005ad6:	6912      	ldr	r2, [r2, #16]
 8005ad8:	b2d2      	uxtb	r2, r2
 8005ada:	701a      	strb	r2, [r3, #0]
          Size--;
 8005adc:	893b      	ldrh	r3, [r7, #8]
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	813b      	strh	r3, [r7, #8]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8005ae2:	b662      	cpsie	i
	  
          /* Re-enable IRQs */
          __enable_irq(); 

          /* Wait until RXNE flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	4906      	ldr	r1, [pc, #24]	; (8005b00 <HAL_I2C_Master_Receive+0x280>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aec:	f000 f9a8 	bl	8005e40 <I2C_WaitOnFlagUntilTimeout>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d008      	beq.n	8005b08 <HAL_I2C_Master_Receive+0x288>
          {
            return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e049      	b.n	8005b8e <HAL_I2C_Master_Receive+0x30e>
 8005afa:	bf00      	nop
 8005afc:	00100002 	.word	0x00100002
 8005b00:	00010040 	.word	0x00010040
 8005b04:	00010004 	.word	0x00010004
          }

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	607a      	str	r2, [r7, #4]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	6812      	ldr	r2, [r2, #0]
 8005b12:	6912      	ldr	r2, [r2, #16]
 8005b14:	b2d2      	uxtb	r2, r2
 8005b16:	701a      	strb	r2, [r3, #0]
          Size--;
 8005b18:	893b      	ldrh	r3, [r7, #8]
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	813b      	strh	r3, [r7, #8]
 8005b1e:	e027      	b.n	8005b70 <HAL_I2C_Master_Receive+0x2f0>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	491d      	ldr	r1, [pc, #116]	; (8005b98 <HAL_I2C_Master_Receive+0x318>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b28:	f000 f98a 	bl	8005e40 <I2C_WaitOnFlagUntilTimeout>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d001      	beq.n	8005b36 <HAL_I2C_Master_Receive+0x2b6>
        {
          return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e02b      	b.n	8005b8e <HAL_I2C_Master_Receive+0x30e>
        }

        /* Read data from DR */
        (*pData++) = hi2c->Instance->DR;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	1c5a      	adds	r2, r3, #1
 8005b3a:	607a      	str	r2, [r7, #4]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	6812      	ldr	r2, [r2, #0]
 8005b40:	6912      	ldr	r2, [r2, #16]
 8005b42:	b2d2      	uxtb	r2, r2
 8005b44:	701a      	strb	r2, [r3, #0]
        Size--;
 8005b46:	893b      	ldrh	r3, [r7, #8]
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	813b      	strh	r3, [r7, #8]

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	f003 0304 	and.w	r3, r3, #4
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00a      	beq.n	8005b70 <HAL_I2C_Master_Receive+0x2f0>
        {
          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	1c5a      	adds	r2, r3, #1
 8005b5e:	607a      	str	r2, [r7, #4]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	6812      	ldr	r2, [r2, #0]
 8005b64:	6912      	ldr	r2, [r2, #16]
 8005b66:	b2d2      	uxtb	r2, r2
 8005b68:	701a      	strb	r2, [r3, #0]
          Size--;
 8005b6a:	893b      	ldrh	r3, [r7, #8]
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	813b      	strh	r3, [r7, #8]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
    }

    while(Size > 0)
 8005b70:	893b      	ldrh	r3, [r7, #8]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f47f af2b 	bne.w	80059ce <HAL_I2C_Master_Receive+0x14e>
          Size--;
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	e000      	b.n	8005b8e <HAL_I2C_Master_Receive+0x30e>
  }
  else
  {
    return HAL_BUSY;
 8005b8c:	2302      	movs	r3, #2
  }
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3720      	adds	r7, #32
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	00010040 	.word	0x00010040

08005b9c <I2C_MasterRequestWrite>:
  * @param  DevAddress: Target device address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	607a      	str	r2, [r7, #4]
 8005ba8:	817b      	strh	r3, [r7, #10]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	6812      	ldr	r2, [r2, #0]
 8005bb2:	6812      	ldr	r2, [r2, #0]
 8005bb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bb8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f000 f93c 	bl	8005e40 <I2C_WaitOnFlagUntilTimeout>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <I2C_MasterRequestWrite+0x36>
  {
    return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e03d      	b.n	8005c4e <I2C_MasterRequestWrite+0xb2>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bda:	d107      	bne.n	8005bec <I2C_MasterRequestWrite+0x50>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	897a      	ldrh	r2, [r7, #10]
 8005be2:	b2d2      	uxtb	r2, r2
 8005be4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005be8:	611a      	str	r2, [r3, #16]
 8005bea:	e01f      	b.n	8005c2c <I2C_MasterRequestWrite+0x90>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	897a      	ldrh	r2, [r7, #10]
 8005bf2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005bf6:	11d2      	asrs	r2, r2, #7
 8005bf8:	b2d2      	uxtb	r2, r2
 8005bfa:	f062 020f 	orn	r2, r2, #15
 8005bfe:	b2d2      	uxtb	r2, r2
 8005c00:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout) != HAL_OK)
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	4914      	ldr	r1, [pc, #80]	; (8005c58 <I2C_MasterRequestWrite+0xbc>)
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	f000 f9a4 	bl	8005f54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d007      	beq.n	8005c22 <I2C_MasterRequestWrite+0x86>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c16:	2b04      	cmp	r3, #4
 8005c18:	d101      	bne.n	8005c1e <I2C_MasterRequestWrite+0x82>
      {
        return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e017      	b.n	8005c4e <I2C_MasterRequestWrite+0xb2>
      }
      else
      {
        return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e015      	b.n	8005c4e <I2C_MasterRequestWrite+0xb2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	897a      	ldrh	r2, [r7, #10]
 8005c28:	b2d2      	uxtb	r2, r2
 8005c2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout) != HAL_OK)
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	490b      	ldr	r1, [pc, #44]	; (8005c5c <I2C_MasterRequestWrite+0xc0>)
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	f000 f98f 	bl	8005f54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d007      	beq.n	8005c4c <I2C_MasterRequestWrite+0xb0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	d101      	bne.n	8005c48 <I2C_MasterRequestWrite+0xac>
    {
      return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e002      	b.n	8005c4e <I2C_MasterRequestWrite+0xb2>
    }
    else
    {
      return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e000      	b.n	8005c4e <I2C_MasterRequestWrite+0xb2>
    }
  }

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	00010008 	.word	0x00010008
 8005c5c:	00010002 	.word	0x00010002

08005c60 <I2C_MasterRequestRead>:
  * @param  DevAddress: Target device address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	460b      	mov	r3, r1
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	817b      	strh	r3, [r7, #10]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	6812      	ldr	r2, [r2, #0]
 8005c76:	6812      	ldr	r2, [r2, #0]
 8005c78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c7c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	6812      	ldr	r2, [r2, #0]
 8005c86:	6812      	ldr	r2, [r2, #0]
 8005c88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c94:	2200      	movs	r2, #0
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f000 f8d2 	bl	8005e40 <I2C_WaitOnFlagUntilTimeout>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <I2C_MasterRequestRead+0x46>
  {
    return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e076      	b.n	8005d94 <I2C_MasterRequestRead+0x134>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cae:	d108      	bne.n	8005cc2 <I2C_MasterRequestRead+0x62>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	897a      	ldrh	r2, [r7, #10]
 8005cb6:	b2d2      	uxtb	r2, r2
 8005cb8:	f042 0201 	orr.w	r2, r2, #1
 8005cbc:	b2d2      	uxtb	r2, r2
 8005cbe:	611a      	str	r2, [r3, #16]
 8005cc0:	e057      	b.n	8005d72 <I2C_MasterRequestRead+0x112>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	897a      	ldrh	r2, [r7, #10]
 8005cc8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005ccc:	11d2      	asrs	r2, r2, #7
 8005cce:	b2d2      	uxtb	r2, r2
 8005cd0:	f062 020f 	orn	r2, r2, #15
 8005cd4:	b2d2      	uxtb	r2, r2
 8005cd6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout) != HAL_OK)
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	4930      	ldr	r1, [pc, #192]	; (8005d9c <I2C_MasterRequestRead+0x13c>)
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	f000 f939 	bl	8005f54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d007      	beq.n	8005cf8 <I2C_MasterRequestRead+0x98>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cec:	2b04      	cmp	r3, #4
 8005cee:	d101      	bne.n	8005cf4 <I2C_MasterRequestRead+0x94>
      {
        return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e04f      	b.n	8005d94 <I2C_MasterRequestRead+0x134>
      }
      else
      {
        return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e04d      	b.n	8005d94 <I2C_MasterRequestRead+0x134>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	897a      	ldrh	r2, [r7, #10]
 8005cfe:	b2d2      	uxtb	r2, r2
 8005d00:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout) != HAL_OK)
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	4926      	ldr	r1, [pc, #152]	; (8005da0 <I2C_MasterRequestRead+0x140>)
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	f000 f924 	bl	8005f54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d007      	beq.n	8005d22 <I2C_MasterRequestRead+0xc2>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	d101      	bne.n	8005d1e <I2C_MasterRequestRead+0xbe>
      {
        return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e03a      	b.n	8005d94 <I2C_MasterRequestRead+0x134>
      }
      else
      {
        return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e038      	b.n	8005d94 <I2C_MasterRequestRead+0x134>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	617b      	str	r3, [r7, #20]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	617b      	str	r3, [r7, #20]
 8005d32:	697b      	ldr	r3, [r7, #20]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	6812      	ldr	r2, [r2, #0]
 8005d3c:	6812      	ldr	r2, [r2, #0]
 8005d3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d42:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f000 f877 	bl	8005e40 <I2C_WaitOnFlagUntilTimeout>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <I2C_MasterRequestRead+0xfc>
    {
      return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e01b      	b.n	8005d94 <I2C_MasterRequestRead+0x134>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	897a      	ldrh	r2, [r7, #10]
 8005d62:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005d66:	11d2      	asrs	r2, r2, #7
 8005d68:	b2d2      	uxtb	r2, r2
 8005d6a:	f062 020e 	orn	r2, r2, #14
 8005d6e:	b2d2      	uxtb	r2, r2
 8005d70:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout) != HAL_OK)
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	490a      	ldr	r1, [pc, #40]	; (8005da0 <I2C_MasterRequestRead+0x140>)
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	f000 f8ec 	bl	8005f54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d007      	beq.n	8005d92 <I2C_MasterRequestRead+0x132>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	d101      	bne.n	8005d8e <I2C_MasterRequestRead+0x12e>
    {
      return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e002      	b.n	8005d94 <I2C_MasterRequestRead+0x134>
    }
    else
    {
      return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e000      	b.n	8005d94 <I2C_MasterRequestRead+0x134>
    }
  }

  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3718      	adds	r7, #24
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	00010008 	.word	0x00010008
 8005da0:	00010002 	.word	0x00010002

08005da4 <I2C_Configure_Speed>:
  *                the configuration information for the specified I2C.
  * @param  I2CClkSrcFreq: PCLK frequency from RCC.
  * @retval CCR Speed: Speed to set in I2C CCR Register
  */
static uint32_t I2C_Configure_Speed(I2C_HandleTypeDef *hi2c, uint32_t I2CClkSrcFreq)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0;
 8005dae:	2300      	movs	r3, #0
 8005db0:	60fb      	str	r3, [r7, #12]
  
  /* Clock Standard Mode */
  if(hi2c->Init.ClockSpeed <= I2C_STANDARD_MODE_MAX_CLK)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685a      	ldr	r2, [r3, #4]
 8005db6:	4b21      	ldr	r3, [pc, #132]	; (8005e3c <I2C_Configure_Speed+0x98>)
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d80f      	bhi.n	8005ddc <I2C_Configure_Speed+0x38>
  {
    /* Calculate Value to be set in CCR register */
    tmp1 = (I2CClkSrcFreq/(hi2c->Init.ClockSpeed << 1));
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	005b      	lsls	r3, r3, #1
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc8:	60fb      	str	r3, [r7, #12]
    
    /* The minimum allowed value set in CCR register is 0x04 for Standard Mode */
    if( (tmp1 & I2C_CCR_CCR) < 4 )
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dd0:	2b03      	cmp	r3, #3
 8005dd2:	d801      	bhi.n	8005dd8 <I2C_Configure_Speed+0x34>
    {
      return 4;
 8005dd4:	2304      	movs	r3, #4
 8005dd6:	e02b      	b.n	8005e30 <I2C_Configure_Speed+0x8c>
    }
    else
    {
      return tmp1;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	e029      	b.n	8005e30 <I2C_Configure_Speed+0x8c>
    }
  }
  else
  {
    /* Clock Fast Mode */
    tmp1 = I2C_CCR_FS;
 8005ddc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005de0:	60fb      	str	r3, [r7, #12]
    
    /* Duty Cylce tLow/tHigh = 2 */
    if(hi2c->Init.DutyCycle == I2C_DUTYCYCLE_2)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10b      	bne.n	8005e02 <I2C_Configure_Speed+0x5e>
    {
      tmp1 |= (I2CClkSrcFreq/(hi2c->Init.ClockSpeed * 3)) | I2C_DUTYCYCLE_2; 
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	4613      	mov	r3, r2
 8005df0:	005b      	lsls	r3, r3, #1
 8005df2:	4413      	add	r3, r2
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	e00e      	b.n	8005e20 <I2C_Configure_Speed+0x7c>
    }
    else /* Duty Cylce tLow/tHigh = 16/9 */
    {
      tmp1 |= (I2CClkSrcFreq/(hi2c->Init.ClockSpeed * 25)) | I2C_DUTYCYCLE_16_9;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	4613      	mov	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4413      	add	r3, r2
 8005e0c:	009a      	lsls	r2, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e1e:	60fb      	str	r3, [r7, #12]
    }

    /* The minimum allowed value set in CCR register is 0x01 for Fast Mode */
    if( (tmp1 & I2C_CCR_CCR) < 1 )
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <I2C_Configure_Speed+0x8a>
    {
      return 1;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e000      	b.n	8005e30 <I2C_Configure_Speed+0x8c>
    }
    else
    {
      return tmp1;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
    }
  }
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	000186a0 	.word	0x000186a0

08005e40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	603b      	str	r3, [r7, #0]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = 0;
 8005e50:	2300      	movs	r3, #0
 8005e52:	617b      	str	r3, [r7, #20]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e54:	f001 fc24 	bl	80076a0 <HAL_GetTick>
 8005e58:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 8005e5a:	79fb      	ldrb	r3, [r7, #7]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d13a      	bne.n	8005ed6 <I2C_WaitOnFlagUntilTimeout+0x96>
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e60:	e018      	b.n	8005e94 <I2C_WaitOnFlagUntilTimeout+0x54>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e68:	d014      	beq.n	8005e94 <I2C_WaitOnFlagUntilTimeout+0x54>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d007      	beq.n	8005e80 <I2C_WaitOnFlagUntilTimeout+0x40>
 8005e70:	f001 fc16 	bl	80076a0 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	1ad2      	subs	r2, r2, r3
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d909      	bls.n	8005e94 <I2C_WaitOnFlagUntilTimeout+0x54>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e05b      	b.n	8005f4c <I2C_WaitOnFlagUntilTimeout+0x10c>
  tickstart = HAL_GetTick();

  /* Wait until flag is set */
  if(Status == RESET)
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	0c1b      	lsrs	r3, r3, #16
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d10c      	bne.n	8005eb8 <I2C_WaitOnFlagUntilTimeout+0x78>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	43da      	mvns	r2, r3
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	bf0c      	ite	eq
 8005eb0:	2300      	moveq	r3, #0
 8005eb2:	2301      	movne	r3, #1
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	e00b      	b.n	8005ed0 <I2C_WaitOnFlagUntilTimeout+0x90>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	43da      	mvns	r2, r3
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	bf0c      	ite	eq
 8005eca:	2300      	moveq	r3, #0
 8005ecc:	2301      	movne	r3, #1
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1c6      	bne.n	8005e62 <I2C_WaitOnFlagUntilTimeout+0x22>
 8005ed4:	e039      	b.n	8005f4a <I2C_WaitOnFlagUntilTimeout+0x10a>
      }
    }
  }
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8005ed6:	e018      	b.n	8005f0a <I2C_WaitOnFlagUntilTimeout+0xca>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ede:	d014      	beq.n	8005f0a <I2C_WaitOnFlagUntilTimeout+0xca>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d007      	beq.n	8005ef6 <I2C_WaitOnFlagUntilTimeout+0xb6>
 8005ee6:	f001 fbdb 	bl	80076a0 <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	1ad2      	subs	r2, r2, r3
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d909      	bls.n	8005f0a <I2C_WaitOnFlagUntilTimeout+0xca>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e020      	b.n	8005f4c <I2C_WaitOnFlagUntilTimeout+0x10c>
      }
    }
  }
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	0c1b      	lsrs	r3, r3, #16
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d10c      	bne.n	8005f2e <I2C_WaitOnFlagUntilTimeout+0xee>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	43da      	mvns	r2, r3
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	bf14      	ite	ne
 8005f26:	2300      	movne	r3, #0
 8005f28:	2301      	moveq	r3, #1
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	e00b      	b.n	8005f46 <I2C_WaitOnFlagUntilTimeout+0x106>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	43da      	mvns	r2, r3
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	4013      	ands	r3, r2
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	bf14      	ite	ne
 8005f40:	2300      	movne	r3, #0
 8005f42:	2301      	moveq	r3, #1
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1c6      	bne.n	8005ed8 <I2C_WaitOnFlagUntilTimeout+0x98>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3718      	adds	r7, #24
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Flag: specifies the I2C flag to check.
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8005f60:	2300      	movs	r3, #0
 8005f62:	617b      	str	r3, [r7, #20]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f64:	f001 fb9c 	bl	80076a0 <HAL_GetTick>
 8005f68:	6178      	str	r0, [r7, #20]

  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f6a:	e03c      	b.n	8005fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d01c      	beq.n	8005fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	6812      	ldr	r2, [r2, #0]
 8005f82:	6812      	ldr	r2, [r2, #0]
 8005f84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f88:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	6812      	ldr	r2, [r2, #0]
 8005f92:	6952      	ldr	r2, [r2, #20]
 8005f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f98:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2204      	movs	r2, #4
 8005f9e:	639a      	str	r2, [r3, #56]	; 0x38
      hi2c->State= HAL_I2C_STATE_READY;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e039      	b.n	8006028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fba:	d014      	beq.n	8005fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d007      	beq.n	8005fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x7e>
 8005fc2:	f001 fb6d 	bl	80076a0 <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	1ad2      	subs	r2, r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d909      	bls.n	8005fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->State= HAL_I2C_STATE_READY;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e020      	b.n	8006028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  uint32_t tickstart = 0;

  /* Get tick */
  tickstart = HAL_GetTick();

  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	0c1b      	lsrs	r3, r3, #16
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d10c      	bne.n	800600a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	43da      	mvns	r2, r3
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	bf0c      	ite	eq
 8006002:	2300      	moveq	r3, #0
 8006004:	2301      	movne	r3, #1
 8006006:	b2db      	uxtb	r3, r3
 8006008:	e00b      	b.n	8006022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	43da      	mvns	r2, r3
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	4013      	ands	r3, r2
 8006016:	b29b      	uxth	r3, r3
 8006018:	2b00      	cmp	r3, #0
 800601a:	bf0c      	ite	eq
 800601c:	2300      	moveq	r3, #0
 800601e:	2301      	movne	r3, #1
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1a2      	bne.n	8005f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x18>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3718      	adds	r7, #24
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006030:	b480      	push	{r7}
 8006032:	b08b      	sub	sp, #44	; 0x2c
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800603a:	2300      	movs	r3, #0
 800603c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00;
 800603e:	2300      	movs	r3, #0
 8006040:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00;
 8006042:	2300      	movs	r3, #0
 8006044:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00;
 8006046:	2300      	movs	r3, #0
 8006048:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800604a:	2300      	movs	r3, #0
 800604c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800604e:	2300      	movs	r3, #0
 8006050:	627b      	str	r3, [r7, #36]	; 0x24
 8006052:	e128      	b.n	80062a6 <HAL_GPIO_Init+0x276>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	2201      	movs	r2, #1
 8006058:	fa02 f303 	lsl.w	r3, r2, r3
 800605c:	61fb      	str	r3, [r7, #28]
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	4013      	ands	r3, r2
 8006066:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006068:	69ba      	ldr	r2, [r7, #24]
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	429a      	cmp	r2, r3
 800606e:	f040 8117 	bne.w	80062a0 <HAL_GPIO_Init+0x270>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	2b12      	cmp	r3, #18
 8006078:	d034      	beq.n	80060e4 <HAL_GPIO_Init+0xb4>
 800607a:	2b12      	cmp	r3, #18
 800607c:	d80d      	bhi.n	800609a <HAL_GPIO_Init+0x6a>
 800607e:	2b02      	cmp	r3, #2
 8006080:	d02b      	beq.n	80060da <HAL_GPIO_Init+0xaa>
 8006082:	2b02      	cmp	r3, #2
 8006084:	d804      	bhi.n	8006090 <HAL_GPIO_Init+0x60>
 8006086:	2b00      	cmp	r3, #0
 8006088:	d031      	beq.n	80060ee <HAL_GPIO_Init+0xbe>
 800608a:	2b01      	cmp	r3, #1
 800608c:	d01c      	beq.n	80060c8 <HAL_GPIO_Init+0x98>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 800608e:	e049      	b.n	8006124 <HAL_GPIO_Init+0xf4>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006090:	2b03      	cmp	r3, #3
 8006092:	d044      	beq.n	800611e <HAL_GPIO_Init+0xee>
 8006094:	2b11      	cmp	r3, #17
 8006096:	d01b      	beq.n	80060d0 <HAL_GPIO_Init+0xa0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 8006098:	e044      	b.n	8006124 <HAL_GPIO_Init+0xf4>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800609a:	4a87      	ldr	r2, [pc, #540]	; (80062b8 <HAL_GPIO_Init+0x288>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d026      	beq.n	80060ee <HAL_GPIO_Init+0xbe>
 80060a0:	4a85      	ldr	r2, [pc, #532]	; (80062b8 <HAL_GPIO_Init+0x288>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d806      	bhi.n	80060b4 <HAL_GPIO_Init+0x84>
 80060a6:	4a85      	ldr	r2, [pc, #532]	; (80062bc <HAL_GPIO_Init+0x28c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d020      	beq.n	80060ee <HAL_GPIO_Init+0xbe>
 80060ac:	4a84      	ldr	r2, [pc, #528]	; (80062c0 <HAL_GPIO_Init+0x290>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d01d      	beq.n	80060ee <HAL_GPIO_Init+0xbe>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 80060b2:	e037      	b.n	8006124 <HAL_GPIO_Init+0xf4>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80060b4:	4a83      	ldr	r2, [pc, #524]	; (80062c4 <HAL_GPIO_Init+0x294>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d019      	beq.n	80060ee <HAL_GPIO_Init+0xbe>
 80060ba:	4a83      	ldr	r2, [pc, #524]	; (80062c8 <HAL_GPIO_Init+0x298>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d016      	beq.n	80060ee <HAL_GPIO_Init+0xbe>
 80060c0:	4a82      	ldr	r2, [pc, #520]	; (80062cc <HAL_GPIO_Init+0x29c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d013      	beq.n	80060ee <HAL_GPIO_Init+0xbe>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 80060c6:	e02d      	b.n	8006124 <HAL_GPIO_Init+0xf4>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	623b      	str	r3, [r7, #32]
          break;
 80060ce:	e029      	b.n	8006124 <HAL_GPIO_Init+0xf4>
          
        /* If we are configuring the pin in OUTPUT open-drain mode */
        case GPIO_MODE_OUTPUT_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	3304      	adds	r3, #4
 80060d6:	623b      	str	r3, [r7, #32]
          break;
 80060d8:	e024      	b.n	8006124 <HAL_GPIO_Init+0xf4>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
        case GPIO_MODE_AF_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	3308      	adds	r3, #8
 80060e0:	623b      	str	r3, [r7, #32]
          break;
 80060e2:	e01f      	b.n	8006124 <HAL_GPIO_Init+0xf4>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
        case GPIO_MODE_AF_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	330c      	adds	r3, #12
 80060ea:	623b      	str	r3, [r7, #32]
          break;
 80060ec:	e01a      	b.n	8006124 <HAL_GPIO_Init+0xf4>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d102      	bne.n	80060fc <HAL_GPIO_Init+0xcc>
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80060f6:	2304      	movs	r3, #4
 80060f8:	623b      	str	r3, [r7, #32]
 80060fa:	e00f      	b.n	800611c <HAL_GPIO_Init+0xec>
          }
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d105      	bne.n	8006110 <HAL_GPIO_Init+0xe0>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006104:	2308      	movs	r3, #8
 8006106:	623b      	str	r3, [r7, #32]
            
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	69fa      	ldr	r2, [r7, #28]
 800610c:	611a      	str	r2, [r3, #16]
 800610e:	e005      	b.n	800611c <HAL_GPIO_Init+0xec>
          }
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006110:	2308      	movs	r3, #8
 8006112:	623b      	str	r3, [r7, #32]
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	69fa      	ldr	r2, [r7, #28]
 8006118:	615a      	str	r2, [r3, #20]
          }
          break; 
 800611a:	e003      	b.n	8006124 <HAL_GPIO_Init+0xf4>
 800611c:	e002      	b.n	8006124 <HAL_GPIO_Init+0xf4>
          
        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800611e:	2300      	movs	r3, #0
 8006120:	623b      	str	r3, [r7, #32]
          break;
 8006122:	bf00      	nop
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	2bff      	cmp	r3, #255	; 0xff
 8006128:	d801      	bhi.n	800612e <HAL_GPIO_Init+0xfe>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	e001      	b.n	8006132 <HAL_GPIO_Init+0x102>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	3304      	adds	r3, #4
 8006132:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	2bff      	cmp	r3, #255	; 0xff
 8006138:	d802      	bhi.n	8006140 <HAL_GPIO_Init+0x110>
 800613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	e002      	b.n	8006146 <HAL_GPIO_Init+0x116>
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	3b08      	subs	r3, #8
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	613b      	str	r3, [r7, #16]
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	210f      	movs	r1, #15
 8006150:	fa01 f303 	lsl.w	r3, r1, r3
 8006154:	43db      	mvns	r3, r3
 8006156:	401a      	ands	r2, r3
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	6a39      	ldr	r1, [r7, #32]
 800615c:	fa01 f303 	lsl.w	r3, r1, r3
 8006160:	431a      	orrs	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	601a      	str	r2, [r3, #0]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 8096 	beq.w	80062a0 <HAL_GPIO_Init+0x270>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006174:	4b56      	ldr	r3, [pc, #344]	; (80062d0 <HAL_GPIO_Init+0x2a0>)
 8006176:	4a56      	ldr	r2, [pc, #344]	; (80062d0 <HAL_GPIO_Init+0x2a0>)
 8006178:	6992      	ldr	r2, [r2, #24]
 800617a:	f042 0201 	orr.w	r2, r2, #1
 800617e:	619a      	str	r2, [r3, #24]
 8006180:	4b53      	ldr	r3, [pc, #332]	; (80062d0 <HAL_GPIO_Init+0x2a0>)
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	f003 0301 	and.w	r3, r3, #1
 8006188:	60bb      	str	r3, [r7, #8]
 800618a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2];
 800618c:	4b51      	ldr	r3, [pc, #324]	; (80062d4 <HAL_GPIO_Init+0x2a4>)
 800618e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006190:	0892      	lsrs	r2, r2, #2
 8006192:	3202      	adds	r2, #2
 8006194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006198:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	f003 0303 	and.w	r3, r3, #3
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	220f      	movs	r2, #15
 80061a4:	fa02 f303 	lsl.w	r3, r2, r3
 80061a8:	43db      	mvns	r3, r3
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	4013      	ands	r3, r2
 80061ae:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	4b49      	ldr	r3, [pc, #292]	; (80062d8 <HAL_GPIO_Init+0x2a8>)
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d013      	beq.n	80061e0 <HAL_GPIO_Init+0x1b0>
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	4b48      	ldr	r3, [pc, #288]	; (80062dc <HAL_GPIO_Init+0x2ac>)
 80061bc:	429a      	cmp	r2, r3
 80061be:	d00d      	beq.n	80061dc <HAL_GPIO_Init+0x1ac>
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	4b47      	ldr	r3, [pc, #284]	; (80062e0 <HAL_GPIO_Init+0x2b0>)
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d007      	beq.n	80061d8 <HAL_GPIO_Init+0x1a8>
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	4b46      	ldr	r3, [pc, #280]	; (80062e4 <HAL_GPIO_Init+0x2b4>)
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d101      	bne.n	80061d4 <HAL_GPIO_Init+0x1a4>
 80061d0:	2303      	movs	r3, #3
 80061d2:	e006      	b.n	80061e2 <HAL_GPIO_Init+0x1b2>
 80061d4:	2304      	movs	r3, #4
 80061d6:	e004      	b.n	80061e2 <HAL_GPIO_Init+0x1b2>
 80061d8:	2302      	movs	r3, #2
 80061da:	e002      	b.n	80061e2 <HAL_GPIO_Init+0x1b2>
 80061dc:	2301      	movs	r3, #1
 80061de:	e000      	b.n	80061e2 <HAL_GPIO_Init+0x1b2>
 80061e0:	2300      	movs	r3, #0
 80061e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061e4:	f002 0203 	and.w	r2, r2, #3
 80061e8:	0092      	lsls	r2, r2, #2
 80061ea:	4093      	lsls	r3, r2
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2] = temp;
 80061f2:	4b38      	ldr	r3, [pc, #224]	; (80062d4 <HAL_GPIO_Init+0x2a4>)
 80061f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061f6:	0892      	lsrs	r2, r2, #2
 80061f8:	3202      	adds	r2, #2
 80061fa:	6979      	ldr	r1, [r7, #20]
 80061fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d006      	beq.n	800621a <HAL_GPIO_Init+0x1ea>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 800620c:	4b36      	ldr	r3, [pc, #216]	; (80062e8 <HAL_GPIO_Init+0x2b8>)
 800620e:	4a36      	ldr	r2, [pc, #216]	; (80062e8 <HAL_GPIO_Init+0x2b8>)
 8006210:	6811      	ldr	r1, [r2, #0]
 8006212:	69ba      	ldr	r2, [r7, #24]
 8006214:	430a      	orrs	r2, r1
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	e006      	b.n	8006228 <HAL_GPIO_Init+0x1f8>
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 800621a:	4b33      	ldr	r3, [pc, #204]	; (80062e8 <HAL_GPIO_Init+0x2b8>)
 800621c:	4a32      	ldr	r2, [pc, #200]	; (80062e8 <HAL_GPIO_Init+0x2b8>)
 800621e:	6811      	ldr	r1, [r2, #0]
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	43d2      	mvns	r2, r2
 8006224:	400a      	ands	r2, r1
 8006226:	601a      	str	r2, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d006      	beq.n	8006242 <HAL_GPIO_Init+0x212>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8006234:	4b2c      	ldr	r3, [pc, #176]	; (80062e8 <HAL_GPIO_Init+0x2b8>)
 8006236:	4a2c      	ldr	r2, [pc, #176]	; (80062e8 <HAL_GPIO_Init+0x2b8>)
 8006238:	6851      	ldr	r1, [r2, #4]
 800623a:	69ba      	ldr	r2, [r7, #24]
 800623c:	430a      	orrs	r2, r1
 800623e:	605a      	str	r2, [r3, #4]
 8006240:	e006      	b.n	8006250 <HAL_GPIO_Init+0x220>
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8006242:	4b29      	ldr	r3, [pc, #164]	; (80062e8 <HAL_GPIO_Init+0x2b8>)
 8006244:	4a28      	ldr	r2, [pc, #160]	; (80062e8 <HAL_GPIO_Init+0x2b8>)
 8006246:	6851      	ldr	r1, [r2, #4]
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	43d2      	mvns	r2, r2
 800624c:	400a      	ands	r2, r1
 800624e:	605a      	str	r2, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d006      	beq.n	800626a <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 800625c:	4b22      	ldr	r3, [pc, #136]	; (80062e8 <HAL_GPIO_Init+0x2b8>)
 800625e:	4a22      	ldr	r2, [pc, #136]	; (80062e8 <HAL_GPIO_Init+0x2b8>)
 8006260:	6891      	ldr	r1, [r2, #8]
 8006262:	69ba      	ldr	r2, [r7, #24]
 8006264:	430a      	orrs	r2, r1
 8006266:	609a      	str	r2, [r3, #8]
 8006268:	e006      	b.n	8006278 <HAL_GPIO_Init+0x248>
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 800626a:	4b1f      	ldr	r3, [pc, #124]	; (80062e8 <HAL_GPIO_Init+0x2b8>)
 800626c:	4a1e      	ldr	r2, [pc, #120]	; (80062e8 <HAL_GPIO_Init+0x2b8>)
 800626e:	6891      	ldr	r1, [r2, #8]
 8006270:	69ba      	ldr	r2, [r7, #24]
 8006272:	43d2      	mvns	r2, r2
 8006274:	400a      	ands	r2, r1
 8006276:	609a      	str	r2, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d006      	beq.n	8006292 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8006284:	4b18      	ldr	r3, [pc, #96]	; (80062e8 <HAL_GPIO_Init+0x2b8>)
 8006286:	4a18      	ldr	r2, [pc, #96]	; (80062e8 <HAL_GPIO_Init+0x2b8>)
 8006288:	68d1      	ldr	r1, [r2, #12]
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	430a      	orrs	r2, r1
 800628e:	60da      	str	r2, [r3, #12]
 8006290:	e006      	b.n	80062a0 <HAL_GPIO_Init+0x270>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8006292:	4b15      	ldr	r3, [pc, #84]	; (80062e8 <HAL_GPIO_Init+0x2b8>)
 8006294:	4a14      	ldr	r2, [pc, #80]	; (80062e8 <HAL_GPIO_Init+0x2b8>)
 8006296:	68d1      	ldr	r1, [r2, #12]
 8006298:	69ba      	ldr	r2, [r7, #24]
 800629a:	43d2      	mvns	r2, r2
 800629c:	400a      	ands	r2, r1
 800629e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	3301      	adds	r3, #1
 80062a4:	627b      	str	r3, [r7, #36]	; 0x24
 80062a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a8:	2b0f      	cmp	r3, #15
 80062aa:	f67f aed3 	bls.w	8006054 <HAL_GPIO_Init+0x24>
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
        }
      }
    }
  }
}
 80062ae:	372c      	adds	r7, #44	; 0x2c
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	10210000 	.word	0x10210000
 80062bc:	10110000 	.word	0x10110000
 80062c0:	10120000 	.word	0x10120000
 80062c4:	10310000 	.word	0x10310000
 80062c8:	10320000 	.word	0x10320000
 80062cc:	10220000 	.word	0x10220000
 80062d0:	40021000 	.word	0x40021000
 80062d4:	40010000 	.word	0x40010000
 80062d8:	40010800 	.word	0x40010800
 80062dc:	40010c00 	.word	0x40010c00
 80062e0:	40011000 	.word	0x40011000
 80062e4:	40011400 	.word	0x40011400
 80062e8:	40010400 	.word	0x40010400

080062ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_BIT_RESET: to clear the port pin
  *            @arg GPIO_BIT_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	4613      	mov	r3, r2
 80062f6:	460a      	mov	r2, r1
 80062f8:	807a      	strh	r2, [r7, #2]
 80062fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80062fc:	787b      	ldrb	r3, [r7, #1]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d003      	beq.n	800630a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006302:	887a      	ldrh	r2, [r7, #2]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	611a      	str	r2, [r3, #16]
 8006308:	e003      	b.n	8006312 <HAL_GPIO_WritePin+0x26>
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800630a:	887b      	ldrh	r3, [r7, #2]
 800630c:	041a      	lsls	r2, r3, #16
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	611a      	str	r2, [r3, #16]
  }
}
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief This function handles EXTI interrupt request.
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	4603      	mov	r3, r0
 8006324:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8006326:	4b08      	ldr	r3, [pc, #32]	; (8006348 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006328:	695a      	ldr	r2, [r3, #20]
 800632a:	88fb      	ldrh	r3, [r7, #6]
 800632c:	4013      	ands	r3, r2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d006      	beq.n	8006340 <HAL_GPIO_EXTI_IRQHandler+0x24>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006332:	4b05      	ldr	r3, [pc, #20]	; (8006348 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006334:	88fa      	ldrh	r2, [r7, #6]
 8006336:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006338:	88fb      	ldrh	r3, [r7, #6]
 800633a:	4618      	mov	r0, r3
 800633c:	f000 f806 	bl	800634c <HAL_GPIO_EXTI_Callback>
  }
}
 8006340:	3708      	adds	r7, #8
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	40010400 	.word	0x40010400

0800634c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	4603      	mov	r3, r0
 8006354:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8006368:	2300      	movs	r3, #0
 800636a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d101      	bne.n	8006376 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e039      	b.n	80063ea <HAL_DMA_Init+0x8a>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  if(hdma->State == HAL_DMA_STATE_RESET)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800637c:	2b00      	cmp	r3, #0
 800637e:	d103      	bne.n	8006388 <HAL_DMA_Init+0x28>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 2020 	strb.w	r2, [r3, #32]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2202      	movs	r2, #2
 800638c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800639e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80063a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	689b      	ldr	r3, [r3, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80063ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	691b      	ldr	r3, [r3, #16]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	699b      	ldr	r3, [r3, #24]
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	69db      	ldr	r3, [r3, #28]
 80063ca:	4313      	orrs	r3, r2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	60fb      	str	r3, [r7, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	601a      	str	r2, [r3, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop

080063f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
 8006404:	603b      	str	r3, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdma);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f893 3020 	ldrb.w	r3, [r3, #32]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d101      	bne.n	8006414 <HAL_DMA_Start_IT+0x1c>
 8006410:	2302      	movs	r3, #2
 8006412:	e036      	b.n	8006482 <HAL_DMA_Start_IT+0x8a>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2020 	strb.w	r2, [r3, #32]

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2202      	movs	r2, #2
 8006420:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	6812      	ldr	r2, [r2, #0]
 800642c:	6812      	ldr	r2, [r2, #0]
 800642e:	f022 0201 	bic.w	r2, r2, #1
 8006432:	601a      	str	r2, [r3, #0]
  
  /* Configure the source, destination address and the data length */
  DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	68b9      	ldr	r1, [r7, #8]
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	f000 fa14 	bl	8006868 <DMA_SetConfig>
  
  /* Enable the transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	6812      	ldr	r2, [r2, #0]
 8006448:	6812      	ldr	r2, [r2, #0]
 800644a:	f042 0202 	orr.w	r2, r2, #2
 800644e:	601a      	str	r2, [r3, #0]

  /* Enable the Half transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	6812      	ldr	r2, [r2, #0]
 8006458:	6812      	ldr	r2, [r2, #0]
 800645a:	f042 0204 	orr.w	r2, r2, #4
 800645e:	601a      	str	r2, [r3, #0]

  /* Enable the transfer Error interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	6812      	ldr	r2, [r2, #0]
 8006468:	6812      	ldr	r2, [r2, #0]
 800646a:	f042 0208 	orr.w	r2, r2, #8
 800646e:	601a      	str	r2, [r3, #0]
  
   /* Enable the Peripheral */
  __HAL_DMA_ENABLE(hdma);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	6812      	ldr	r2, [r2, #0]
 8006478:	6812      	ldr	r2, [r2, #0]
 800647a:	f042 0201 	orr.w	r2, r2, #1
 800647e:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8006480:	2300      	movs	r3, #0
} 
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop

0800648c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8006494:	4b8f      	ldr	r3, [pc, #572]	; (80066d4 <HAL_DMA_IRQHandler+0x248>)
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4619      	mov	r1, r3
 800649e:	4b8e      	ldr	r3, [pc, #568]	; (80066d8 <HAL_DMA_IRQHandler+0x24c>)
 80064a0:	4299      	cmp	r1, r3
 80064a2:	d02e      	beq.n	8006502 <HAL_DMA_IRQHandler+0x76>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4619      	mov	r1, r3
 80064aa:	4b8c      	ldr	r3, [pc, #560]	; (80066dc <HAL_DMA_IRQHandler+0x250>)
 80064ac:	4299      	cmp	r1, r3
 80064ae:	d026      	beq.n	80064fe <HAL_DMA_IRQHandler+0x72>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4619      	mov	r1, r3
 80064b6:	4b8a      	ldr	r3, [pc, #552]	; (80066e0 <HAL_DMA_IRQHandler+0x254>)
 80064b8:	4299      	cmp	r1, r3
 80064ba:	d01d      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x6c>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4619      	mov	r1, r3
 80064c2:	4b88      	ldr	r3, [pc, #544]	; (80066e4 <HAL_DMA_IRQHandler+0x258>)
 80064c4:	4299      	cmp	r1, r3
 80064c6:	d014      	beq.n	80064f2 <HAL_DMA_IRQHandler+0x66>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4619      	mov	r1, r3
 80064ce:	4b86      	ldr	r3, [pc, #536]	; (80066e8 <HAL_DMA_IRQHandler+0x25c>)
 80064d0:	4299      	cmp	r1, r3
 80064d2:	d00b      	beq.n	80064ec <HAL_DMA_IRQHandler+0x60>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4619      	mov	r1, r3
 80064da:	4b84      	ldr	r3, [pc, #528]	; (80066ec <HAL_DMA_IRQHandler+0x260>)
 80064dc:	4299      	cmp	r1, r3
 80064de:	d102      	bne.n	80064e6 <HAL_DMA_IRQHandler+0x5a>
 80064e0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80064e4:	e00e      	b.n	8006504 <HAL_DMA_IRQHandler+0x78>
 80064e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064ea:	e00b      	b.n	8006504 <HAL_DMA_IRQHandler+0x78>
 80064ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80064f0:	e008      	b.n	8006504 <HAL_DMA_IRQHandler+0x78>
 80064f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064f6:	e005      	b.n	8006504 <HAL_DMA_IRQHandler+0x78>
 80064f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064fc:	e002      	b.n	8006504 <HAL_DMA_IRQHandler+0x78>
 80064fe:	2380      	movs	r3, #128	; 0x80
 8006500:	e000      	b.n	8006504 <HAL_DMA_IRQHandler+0x78>
 8006502:	2308      	movs	r3, #8
 8006504:	4013      	ands	r3, r2
 8006506:	2b00      	cmp	r3, #0
 8006508:	d05c      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x138>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0308 	and.w	r3, r3, #8
 8006514:	2b00      	cmp	r3, #0
 8006516:	d055      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x138>
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	6812      	ldr	r2, [r2, #0]
 8006520:	6812      	ldr	r2, [r2, #0]
 8006522:	f022 0208 	bic.w	r2, r2, #8
 8006526:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006528:	4a6a      	ldr	r2, [pc, #424]	; (80066d4 <HAL_DMA_IRQHandler+0x248>)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4619      	mov	r1, r3
 8006530:	4b69      	ldr	r3, [pc, #420]	; (80066d8 <HAL_DMA_IRQHandler+0x24c>)
 8006532:	4299      	cmp	r1, r3
 8006534:	d02e      	beq.n	8006594 <HAL_DMA_IRQHandler+0x108>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4619      	mov	r1, r3
 800653c:	4b67      	ldr	r3, [pc, #412]	; (80066dc <HAL_DMA_IRQHandler+0x250>)
 800653e:	4299      	cmp	r1, r3
 8006540:	d026      	beq.n	8006590 <HAL_DMA_IRQHandler+0x104>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4619      	mov	r1, r3
 8006548:	4b65      	ldr	r3, [pc, #404]	; (80066e0 <HAL_DMA_IRQHandler+0x254>)
 800654a:	4299      	cmp	r1, r3
 800654c:	d01d      	beq.n	800658a <HAL_DMA_IRQHandler+0xfe>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4619      	mov	r1, r3
 8006554:	4b63      	ldr	r3, [pc, #396]	; (80066e4 <HAL_DMA_IRQHandler+0x258>)
 8006556:	4299      	cmp	r1, r3
 8006558:	d014      	beq.n	8006584 <HAL_DMA_IRQHandler+0xf8>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4619      	mov	r1, r3
 8006560:	4b61      	ldr	r3, [pc, #388]	; (80066e8 <HAL_DMA_IRQHandler+0x25c>)
 8006562:	4299      	cmp	r1, r3
 8006564:	d00b      	beq.n	800657e <HAL_DMA_IRQHandler+0xf2>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4619      	mov	r1, r3
 800656c:	4b5f      	ldr	r3, [pc, #380]	; (80066ec <HAL_DMA_IRQHandler+0x260>)
 800656e:	4299      	cmp	r1, r3
 8006570:	d102      	bne.n	8006578 <HAL_DMA_IRQHandler+0xec>
 8006572:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006576:	e00e      	b.n	8006596 <HAL_DMA_IRQHandler+0x10a>
 8006578:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800657c:	e00b      	b.n	8006596 <HAL_DMA_IRQHandler+0x10a>
 800657e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006582:	e008      	b.n	8006596 <HAL_DMA_IRQHandler+0x10a>
 8006584:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006588:	e005      	b.n	8006596 <HAL_DMA_IRQHandler+0x10a>
 800658a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800658e:	e002      	b.n	8006596 <HAL_DMA_IRQHandler+0x10a>
 8006590:	2380      	movs	r3, #128	; 0x80
 8006592:	e000      	b.n	8006596 <HAL_DMA_IRQHandler+0x10a>
 8006594:	2308      	movs	r3, #8
 8006596:	6053      	str	r3, [r2, #4]
      
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800659c:	f043 0201 	orr.w	r2, r3, #1
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2204      	movs	r2, #4
 80065a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      
      /* Process Unlocked */
      __HAL_UNLOCK(hdma); 
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 2020 	strb.w	r2, [r3, #32]
      
      if (hdma->XferErrorCallback != NULL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d003      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x138>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	4798      	blx	r3
      }
    }
  }

  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80065c4:	4b43      	ldr	r3, [pc, #268]	; (80066d4 <HAL_DMA_IRQHandler+0x248>)
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4619      	mov	r1, r3
 80065ce:	4b42      	ldr	r3, [pc, #264]	; (80066d8 <HAL_DMA_IRQHandler+0x24c>)
 80065d0:	4299      	cmp	r1, r3
 80065d2:	d02e      	beq.n	8006632 <HAL_DMA_IRQHandler+0x1a6>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4619      	mov	r1, r3
 80065da:	4b40      	ldr	r3, [pc, #256]	; (80066dc <HAL_DMA_IRQHandler+0x250>)
 80065dc:	4299      	cmp	r1, r3
 80065de:	d026      	beq.n	800662e <HAL_DMA_IRQHandler+0x1a2>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4619      	mov	r1, r3
 80065e6:	4b3e      	ldr	r3, [pc, #248]	; (80066e0 <HAL_DMA_IRQHandler+0x254>)
 80065e8:	4299      	cmp	r1, r3
 80065ea:	d01d      	beq.n	8006628 <HAL_DMA_IRQHandler+0x19c>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4619      	mov	r1, r3
 80065f2:	4b3c      	ldr	r3, [pc, #240]	; (80066e4 <HAL_DMA_IRQHandler+0x258>)
 80065f4:	4299      	cmp	r1, r3
 80065f6:	d014      	beq.n	8006622 <HAL_DMA_IRQHandler+0x196>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4619      	mov	r1, r3
 80065fe:	4b3a      	ldr	r3, [pc, #232]	; (80066e8 <HAL_DMA_IRQHandler+0x25c>)
 8006600:	4299      	cmp	r1, r3
 8006602:	d00b      	beq.n	800661c <HAL_DMA_IRQHandler+0x190>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4619      	mov	r1, r3
 800660a:	4b38      	ldr	r3, [pc, #224]	; (80066ec <HAL_DMA_IRQHandler+0x260>)
 800660c:	4299      	cmp	r1, r3
 800660e:	d102      	bne.n	8006616 <HAL_DMA_IRQHandler+0x18a>
 8006610:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006614:	e00e      	b.n	8006634 <HAL_DMA_IRQHandler+0x1a8>
 8006616:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800661a:	e00b      	b.n	8006634 <HAL_DMA_IRQHandler+0x1a8>
 800661c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006620:	e008      	b.n	8006634 <HAL_DMA_IRQHandler+0x1a8>
 8006622:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006626:	e005      	b.n	8006634 <HAL_DMA_IRQHandler+0x1a8>
 8006628:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800662c:	e002      	b.n	8006634 <HAL_DMA_IRQHandler+0x1a8>
 800662e:	2340      	movs	r3, #64	; 0x40
 8006630:	e000      	b.n	8006634 <HAL_DMA_IRQHandler+0x1a8>
 8006632:	2304      	movs	r3, #4
 8006634:	4013      	ands	r3, r2
 8006636:	2b00      	cmp	r3, #0
 8006638:	d068      	beq.n	800670c <HAL_DMA_IRQHandler+0x280>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0304 	and.w	r3, r3, #4
 8006644:	2b00      	cmp	r3, #0
 8006646:	d061      	beq.n	800670c <HAL_DMA_IRQHandler+0x280>
    { 
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0320 	and.w	r3, r3, #32
 8006652:	2b00      	cmp	r3, #0
 8006654:	d107      	bne.n	8006666 <HAL_DMA_IRQHandler+0x1da>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	6812      	ldr	r2, [r2, #0]
 800665e:	6812      	ldr	r2, [r2, #0]
 8006660:	f022 0204 	bic.w	r2, r2, #4
 8006664:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006666:	4a1b      	ldr	r2, [pc, #108]	; (80066d4 <HAL_DMA_IRQHandler+0x248>)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4619      	mov	r1, r3
 800666e:	4b1a      	ldr	r3, [pc, #104]	; (80066d8 <HAL_DMA_IRQHandler+0x24c>)
 8006670:	4299      	cmp	r1, r3
 8006672:	d03d      	beq.n	80066f0 <HAL_DMA_IRQHandler+0x264>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4619      	mov	r1, r3
 800667a:	4b18      	ldr	r3, [pc, #96]	; (80066dc <HAL_DMA_IRQHandler+0x250>)
 800667c:	4299      	cmp	r1, r3
 800667e:	d026      	beq.n	80066ce <HAL_DMA_IRQHandler+0x242>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4619      	mov	r1, r3
 8006686:	4b16      	ldr	r3, [pc, #88]	; (80066e0 <HAL_DMA_IRQHandler+0x254>)
 8006688:	4299      	cmp	r1, r3
 800668a:	d01d      	beq.n	80066c8 <HAL_DMA_IRQHandler+0x23c>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4619      	mov	r1, r3
 8006692:	4b14      	ldr	r3, [pc, #80]	; (80066e4 <HAL_DMA_IRQHandler+0x258>)
 8006694:	4299      	cmp	r1, r3
 8006696:	d014      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x236>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4619      	mov	r1, r3
 800669e:	4b12      	ldr	r3, [pc, #72]	; (80066e8 <HAL_DMA_IRQHandler+0x25c>)
 80066a0:	4299      	cmp	r1, r3
 80066a2:	d00b      	beq.n	80066bc <HAL_DMA_IRQHandler+0x230>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4619      	mov	r1, r3
 80066aa:	4b10      	ldr	r3, [pc, #64]	; (80066ec <HAL_DMA_IRQHandler+0x260>)
 80066ac:	4299      	cmp	r1, r3
 80066ae:	d102      	bne.n	80066b6 <HAL_DMA_IRQHandler+0x22a>
 80066b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80066b4:	e01d      	b.n	80066f2 <HAL_DMA_IRQHandler+0x266>
 80066b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80066ba:	e01a      	b.n	80066f2 <HAL_DMA_IRQHandler+0x266>
 80066bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80066c0:	e017      	b.n	80066f2 <HAL_DMA_IRQHandler+0x266>
 80066c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80066c6:	e014      	b.n	80066f2 <HAL_DMA_IRQHandler+0x266>
 80066c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066cc:	e011      	b.n	80066f2 <HAL_DMA_IRQHandler+0x266>
 80066ce:	2340      	movs	r3, #64	; 0x40
 80066d0:	e00f      	b.n	80066f2 <HAL_DMA_IRQHandler+0x266>
 80066d2:	bf00      	nop
 80066d4:	40020000 	.word	0x40020000
 80066d8:	40020008 	.word	0x40020008
 80066dc:	4002001c 	.word	0x4002001c
 80066e0:	40020030 	.word	0x40020030
 80066e4:	40020044 	.word	0x40020044
 80066e8:	40020058 	.word	0x40020058
 80066ec:	4002006c 	.word	0x4002006c
 80066f0:	2304      	movs	r3, #4
 80066f2:	6053      	str	r3, [r2, #4]

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2211      	movs	r2, #17
 80066f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      if(hdma->XferHalfCpltCallback != NULL)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006700:	2b00      	cmp	r3, #0
 8006702:	d003      	beq.n	800670c <HAL_DMA_IRQHandler+0x280>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	4798      	blx	r3
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800670c:	4b4f      	ldr	r3, [pc, #316]	; (800684c <HAL_DMA_IRQHandler+0x3c0>)
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4619      	mov	r1, r3
 8006716:	4b4e      	ldr	r3, [pc, #312]	; (8006850 <HAL_DMA_IRQHandler+0x3c4>)
 8006718:	4299      	cmp	r1, r3
 800671a:	d02e      	beq.n	800677a <HAL_DMA_IRQHandler+0x2ee>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4619      	mov	r1, r3
 8006722:	4b4c      	ldr	r3, [pc, #304]	; (8006854 <HAL_DMA_IRQHandler+0x3c8>)
 8006724:	4299      	cmp	r1, r3
 8006726:	d026      	beq.n	8006776 <HAL_DMA_IRQHandler+0x2ea>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4619      	mov	r1, r3
 800672e:	4b4a      	ldr	r3, [pc, #296]	; (8006858 <HAL_DMA_IRQHandler+0x3cc>)
 8006730:	4299      	cmp	r1, r3
 8006732:	d01d      	beq.n	8006770 <HAL_DMA_IRQHandler+0x2e4>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4619      	mov	r1, r3
 800673a:	4b48      	ldr	r3, [pc, #288]	; (800685c <HAL_DMA_IRQHandler+0x3d0>)
 800673c:	4299      	cmp	r1, r3
 800673e:	d014      	beq.n	800676a <HAL_DMA_IRQHandler+0x2de>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4619      	mov	r1, r3
 8006746:	4b46      	ldr	r3, [pc, #280]	; (8006860 <HAL_DMA_IRQHandler+0x3d4>)
 8006748:	4299      	cmp	r1, r3
 800674a:	d00b      	beq.n	8006764 <HAL_DMA_IRQHandler+0x2d8>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4619      	mov	r1, r3
 8006752:	4b44      	ldr	r3, [pc, #272]	; (8006864 <HAL_DMA_IRQHandler+0x3d8>)
 8006754:	4299      	cmp	r1, r3
 8006756:	d102      	bne.n	800675e <HAL_DMA_IRQHandler+0x2d2>
 8006758:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800675c:	e00e      	b.n	800677c <HAL_DMA_IRQHandler+0x2f0>
 800675e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006762:	e00b      	b.n	800677c <HAL_DMA_IRQHandler+0x2f0>
 8006764:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006768:	e008      	b.n	800677c <HAL_DMA_IRQHandler+0x2f0>
 800676a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800676e:	e005      	b.n	800677c <HAL_DMA_IRQHandler+0x2f0>
 8006770:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006774:	e002      	b.n	800677c <HAL_DMA_IRQHandler+0x2f0>
 8006776:	2320      	movs	r3, #32
 8006778:	e000      	b.n	800677c <HAL_DMA_IRQHandler+0x2f0>
 800677a:	2302      	movs	r3, #2
 800677c:	4013      	ands	r3, r2
 800677e:	2b00      	cmp	r3, #0
 8006780:	d061      	beq.n	8006846 <HAL_DMA_IRQHandler+0x3ba>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0302 	and.w	r3, r3, #2
 800678c:	2b00      	cmp	r3, #0
 800678e:	d05a      	beq.n	8006846 <HAL_DMA_IRQHandler+0x3ba>
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0320 	and.w	r3, r3, #32
 800679a:	2b00      	cmp	r3, #0
 800679c:	d107      	bne.n	80067ae <HAL_DMA_IRQHandler+0x322>
      {
        /* Disable the transfer complete interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	6812      	ldr	r2, [r2, #0]
 80067a6:	6812      	ldr	r2, [r2, #0]
 80067a8:	f022 0202 	bic.w	r2, r2, #2
 80067ac:	601a      	str	r2, [r3, #0]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80067ae:	4a27      	ldr	r2, [pc, #156]	; (800684c <HAL_DMA_IRQHandler+0x3c0>)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4619      	mov	r1, r3
 80067b6:	4b26      	ldr	r3, [pc, #152]	; (8006850 <HAL_DMA_IRQHandler+0x3c4>)
 80067b8:	4299      	cmp	r1, r3
 80067ba:	d02e      	beq.n	800681a <HAL_DMA_IRQHandler+0x38e>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4619      	mov	r1, r3
 80067c2:	4b24      	ldr	r3, [pc, #144]	; (8006854 <HAL_DMA_IRQHandler+0x3c8>)
 80067c4:	4299      	cmp	r1, r3
 80067c6:	d026      	beq.n	8006816 <HAL_DMA_IRQHandler+0x38a>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4619      	mov	r1, r3
 80067ce:	4b22      	ldr	r3, [pc, #136]	; (8006858 <HAL_DMA_IRQHandler+0x3cc>)
 80067d0:	4299      	cmp	r1, r3
 80067d2:	d01d      	beq.n	8006810 <HAL_DMA_IRQHandler+0x384>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4619      	mov	r1, r3
 80067da:	4b20      	ldr	r3, [pc, #128]	; (800685c <HAL_DMA_IRQHandler+0x3d0>)
 80067dc:	4299      	cmp	r1, r3
 80067de:	d014      	beq.n	800680a <HAL_DMA_IRQHandler+0x37e>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4619      	mov	r1, r3
 80067e6:	4b1e      	ldr	r3, [pc, #120]	; (8006860 <HAL_DMA_IRQHandler+0x3d4>)
 80067e8:	4299      	cmp	r1, r3
 80067ea:	d00b      	beq.n	8006804 <HAL_DMA_IRQHandler+0x378>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4619      	mov	r1, r3
 80067f2:	4b1c      	ldr	r3, [pc, #112]	; (8006864 <HAL_DMA_IRQHandler+0x3d8>)
 80067f4:	4299      	cmp	r1, r3
 80067f6:	d102      	bne.n	80067fe <HAL_DMA_IRQHandler+0x372>
 80067f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80067fc:	e00e      	b.n	800681c <HAL_DMA_IRQHandler+0x390>
 80067fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006802:	e00b      	b.n	800681c <HAL_DMA_IRQHandler+0x390>
 8006804:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006808:	e008      	b.n	800681c <HAL_DMA_IRQHandler+0x390>
 800680a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800680e:	e005      	b.n	800681c <HAL_DMA_IRQHandler+0x390>
 8006810:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006814:	e002      	b.n	800681c <HAL_DMA_IRQHandler+0x390>
 8006816:	2320      	movs	r3, #32
 8006818:	e000      	b.n	800681c <HAL_DMA_IRQHandler+0x390>
 800681a:	2302      	movs	r3, #2
 800681c:	6053      	str	r3, [r2, #4]
    
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	635a      	str	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2020 	strb.w	r2, [r3, #32]
    
      if(hdma->XferCpltCallback != NULL)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <HAL_DMA_IRQHandler+0x3ba>
      {       
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	4798      	blx	r3
      }
    }
  }
}
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	40020000 	.word	0x40020000
 8006850:	40020008 	.word	0x40020008
 8006854:	4002001c 	.word	0x4002001c
 8006858:	40020030 	.word	0x40020030
 800685c:	40020044 	.word	0x40020044
 8006860:	40020058 	.word	0x40020058
 8006864:	4002006c 	.word	0x4002006c

08006868 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
 8006874:	603b      	str	r3, [r7, #0]
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	2b10      	cmp	r3, #16
 8006884:	d108      	bne.n	8006898 <DMA_SetConfig+0x30>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	60da      	str	r2, [r3, #12]
 8006896:	e007      	b.n	80068a8 <DMA_SetConfig+0x40>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	60da      	str	r2, [r3, #12]
  }
}
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop

080068b4 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f003 0307 	and.w	r3, r3, #7
 80068c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80068c4:	4b0c      	ldr	r3, [pc, #48]	; (80068f8 <NVIC_SetPriorityGrouping+0x44>)
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80068d0:	4013      	ands	r3, r2
 80068d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80068dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80068e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068e4:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80068e6:	4b04      	ldr	r3, [pc, #16]	; (80068f8 <NVIC_SetPriorityGrouping+0x44>)
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	60da      	str	r2, [r3, #12]
}
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	e000ed00 	.word	0xe000ed00

080068fc <NVIC_GetPriorityGrouping>:
  The function reads the priority grouping field from the NVIC Interrupt Controller.

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80068fc:	b480      	push	{r7}
 80068fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006900:	4b04      	ldr	r3, [pc, #16]	; (8006914 <NVIC_GetPriorityGrouping+0x18>)
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006908:	0a1b      	lsrs	r3, r3, #8
}
 800690a:	4618      	mov	r0, r3
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	e000ed00 	.word	0xe000ed00

08006918 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	4603      	mov	r3, r0
 8006920:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006922:	4b08      	ldr	r3, [pc, #32]	; (8006944 <NVIC_EnableIRQ+0x2c>)
 8006924:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8006928:	0952      	lsrs	r2, r2, #5
 800692a:	79f9      	ldrb	r1, [r7, #7]
 800692c:	f001 011f 	and.w	r1, r1, #31
 8006930:	2001      	movs	r0, #1
 8006932:	fa00 f101 	lsl.w	r1, r0, r1
 8006936:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr
 8006944:	e000e100 	.word	0xe000e100

08006948 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	4603      	mov	r3, r0
 8006950:	6039      	str	r1, [r7, #0]
 8006952:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 8006954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006958:	2b00      	cmp	r3, #0
 800695a:	da0b      	bge.n	8006974 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800695c:	490d      	ldr	r1, [pc, #52]	; (8006994 <NVIC_SetPriority+0x4c>)
 800695e:	79fb      	ldrb	r3, [r7, #7]
 8006960:	f003 030f 	and.w	r3, r3, #15
 8006964:	3b04      	subs	r3, #4
 8006966:	683a      	ldr	r2, [r7, #0]
 8006968:	b2d2      	uxtb	r2, r2
 800696a:	0112      	lsls	r2, r2, #4
 800696c:	b2d2      	uxtb	r2, r2
 800696e:	440b      	add	r3, r1
 8006970:	761a      	strb	r2, [r3, #24]
 8006972:	e009      	b.n	8006988 <NVIC_SetPriority+0x40>
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006974:	4908      	ldr	r1, [pc, #32]	; (8006998 <NVIC_SetPriority+0x50>)
 8006976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800697a:	683a      	ldr	r2, [r7, #0]
 800697c:	b2d2      	uxtb	r2, r2
 800697e:	0112      	lsls	r2, r2, #4
 8006980:	b2d2      	uxtb	r2, r2
 8006982:	440b      	add	r3, r1
 8006984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	e000ed00 	.word	0xe000ed00
 8006998:	e000e100 	.word	0xe000e100

0800699c <NVIC_EncodePriority>:
    \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
    \param [in]       SubPriority  Subpriority value (starting from 0).
    \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800699c:	b480      	push	{r7}
 800699e:	b089      	sub	sp, #36	; 0x24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f003 0307 	and.w	r3, r3, #7
 80069ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	f1c3 0307 	rsb	r3, r3, #7
 80069b6:	2b04      	cmp	r3, #4
 80069b8:	bf28      	it	cs
 80069ba:	2304      	movcs	r3, #4
 80069bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	3304      	adds	r3, #4
 80069c2:	2b06      	cmp	r3, #6
 80069c4:	d902      	bls.n	80069cc <NVIC_EncodePriority+0x30>
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	3b03      	subs	r3, #3
 80069ca:	e000      	b.n	80069ce <NVIC_EncodePriority+0x32>
 80069cc:	2300      	movs	r3, #0
 80069ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	2201      	movs	r2, #1
 80069d4:	fa02 f303 	lsl.w	r3, r2, r3
 80069d8:	1e5a      	subs	r2, r3, #1
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	401a      	ands	r2, r3
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	2101      	movs	r1, #1
 80069e6:	fa01 f303 	lsl.w	r3, r1, r3
 80069ea:	1e59      	subs	r1, r3, #1
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80069f0:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3724      	adds	r7, #36	; 0x24
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop

08006a00 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a10:	d301      	bcc.n	8006a16 <SysTick_Config+0x16>
 8006a12:	2301      	movs	r3, #1
 8006a14:	e00f      	b.n	8006a36 <SysTick_Config+0x36>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006a16:	4b0a      	ldr	r3, [pc, #40]	; (8006a40 <SysTick_Config+0x40>)
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	3a01      	subs	r2, #1
 8006a1c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a22:	210f      	movs	r1, #15
 8006a24:	f7ff ff90 	bl	8006948 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006a28:	4b05      	ldr	r3, [pc, #20]	; (8006a40 <SysTick_Config+0x40>)
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006a2e:	4b04      	ldr	r3, [pc, #16]	; (8006a40 <SysTick_Config+0x40>)
 8006a30:	2207      	movs	r2, #7
 8006a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3708      	adds	r7, #8
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	e000e010 	.word	0xe000e010

08006a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7ff ff31 	bl	80068b4 <NVIC_SetPriorityGrouping>
}
 8006a52:	3708      	adds	r7, #8
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	4603      	mov	r3, r0
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
 8006a64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006a66:	2300      	movs	r3, #0
 8006a68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006a6a:	f7ff ff47 	bl	80068fc <NVIC_GetPriorityGrouping>
 8006a6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a70:	6978      	ldr	r0, [r7, #20]
 8006a72:	68b9      	ldr	r1, [r7, #8]
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	f7ff ff91 	bl	800699c <NVIC_EncodePriority>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8006a80:	4610      	mov	r0, r2
 8006a82:	4619      	mov	r1, r3
 8006a84:	f7ff ff60 	bl	8006948 <NVIC_SetPriority>
}
 8006a88:	3718      	adds	r7, #24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop

08006a90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	4603      	mov	r3, r0
 8006a98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7ff ff3a 	bl	8006918 <NVIC_EnableIRQ>
}
 8006aa4:	3708      	adds	r7, #8
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop

08006aac <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f7ff ffa3 	bl	8006a00 <SysTick_Config>
 8006aba:	4603      	mov	r3, r0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3708      	adds	r7, #8
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2b04      	cmp	r3, #4
 8006ad0:	d106      	bne.n	8006ae0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8006ad2:	4b09      	ldr	r3, [pc, #36]	; (8006af8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8006ad4:	4a08      	ldr	r2, [pc, #32]	; (8006af8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8006ad6:	6812      	ldr	r2, [r2, #0]
 8006ad8:	f042 0204 	orr.w	r2, r2, #4
 8006adc:	601a      	str	r2, [r3, #0]
 8006ade:	e005      	b.n	8006aec <HAL_SYSTICK_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8006ae0:	4b05      	ldr	r3, [pc, #20]	; (8006af8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8006ae2:	4a05      	ldr	r2, [pc, #20]	; (8006af8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8006ae4:	6812      	ldr	r2, [r2, #0]
 8006ae6:	f022 0204 	bic.w	r2, r2, #4
 8006aea:	601a      	str	r2, [r3, #0]
  }
}
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	e000e010 	.word	0xe000e010

08006afc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8006b00:	f000 f802 	bl	8006b08 <HAL_SYSTICK_Callback>
}
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop

08006b08 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8006b14:	b590      	push	{r4, r7, lr}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0;
 8006b20:	2300      	movs	r3, #0
 8006b22:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d101      	bne.n	8006b32 <HAL_ADCEx_Calibration_Start+0x1e>
 8006b2e:	2302      	movs	r3, #2
 8006b30:	e086      	b.n	8006c40 <HAL_ADCEx_Calibration_Start+0x12c>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fcd0 	bl	80074e0 <ADC_ConversionStop_Disable>
 8006b40:	4603      	mov	r3, r0
 8006b42:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006b44:	7dfb      	ldrb	r3, [r7, #23]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d175      	bne.n	8006c36 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006b52:	f023 0302 	bic.w	r3, r3, #2
 8006b56:	f043 0202 	orr.w	r2, r3, #2
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8006b5e:	4b3a      	ldr	r3, [pc, #232]	; (8006c48 <HAL_ADCEx_Calibration_Start+0x134>)
 8006b60:	681c      	ldr	r4, [r3, #0]
 8006b62:	2002      	movs	r0, #2
 8006b64:	f7fd f87a 	bl	8003c5c <HAL_RCCEx_GetPeriphCLKFreq>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8006b6e:	005b      	lsls	r3, r3, #1
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
 8006b70:	60fb      	str	r3, [r7, #12]
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );

    while(wait_loop_index != 0)
 8006b72:	e002      	b.n	8006b7a <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	3b01      	subs	r3, #1
 8006b78:	60fb      	str	r3, [r7, #12]
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );

    while(wait_loop_index != 0)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1f9      	bne.n	8006b74 <HAL_ADCEx_Calibration_Start+0x60>
    {
      wait_loop_index--;
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fc5b 	bl	800743c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	6812      	ldr	r2, [r2, #0]
 8006b8e:	6892      	ldr	r2, [r2, #8]
 8006b90:	f042 0208 	orr.w	r2, r2, #8
 8006b94:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8006b96:	f000 fd83 	bl	80076a0 <HAL_GetTick>
 8006b9a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8006b9c:	e014      	b.n	8006bc8 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8006b9e:	f000 fd7f 	bl	80076a0 <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	2b0a      	cmp	r3, #10
 8006baa:	d90d      	bls.n	8006bc8 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb0:	f023 0312 	bic.w	r3, r3, #18
 8006bb4:	f043 0210 	orr.w	r2, r3, #16
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e03b      	b.n	8006c40 <HAL_ADCEx_Calibration_Start+0x12c>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
    
    tickstart = HAL_GetTick();  

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f003 0308 	and.w	r3, r3, #8
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1e3      	bne.n	8006b9e <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	6812      	ldr	r2, [r2, #0]
 8006bde:	6892      	ldr	r2, [r2, #8]
 8006be0:	f042 0204 	orr.w	r2, r2, #4
 8006be4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8006be6:	f000 fd5b 	bl	80076a0 <HAL_GetTick>
 8006bea:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8006bec:	e014      	b.n	8006c18 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8006bee:	f000 fd57 	bl	80076a0 <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	2b0a      	cmp	r3, #10
 8006bfa:	d90d      	bls.n	8006c18 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c00:	f023 0312 	bic.w	r3, r3, #18
 8006c04:	f043 0210 	orr.w	r2, r3, #16
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	e013      	b.n	8006c40 <HAL_ADCEx_Calibration_Start+0x12c>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
    
    tickstart = HAL_GetTick();  

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f003 0304 	and.w	r3, r3, #4
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1e3      	bne.n	8006bee <HAL_ADCEx_Calibration_Start+0xda>
        return HAL_ERROR;
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2a:	f023 0303 	bic.w	r3, r3, #3
 8006c2e:	f043 0201 	orr.w	r2, r3, #1
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8006c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	371c      	adds	r7, #28
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd90      	pop	{r4, r7, pc}
 8006c48:	20000000 	.word	0x20000000

08006c4c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b08c      	sub	sp, #48	; 0x30
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c54:	2300      	movs	r3, #0
 8006c56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint32_t tmp_cr1 = 0;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t tmp_cr2 = 0;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	623b      	str	r3, [r7, #32]
  uint32_t tmp_sqr1 = 0;
 8006c62:	2300      	movs	r3, #0
 8006c64:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d101      	bne.n	8006c70 <HAL_ADC_Init+0x24>
  {
    return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e0db      	b.n	8006e28 <HAL_ADC_Init+0x1dc>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d109      	bne.n	8006c8c <HAL_ADC_Init+0x40>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f001 fb24 	bl	80082d4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fc27 	bl	80074e0 <ADC_ConversionStop_Disable>
 8006c92:	4603      	mov	r3, r0
 8006c94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9c:	f003 0310 	and.w	r3, r3, #16
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f040 80b6 	bne.w	8006e12 <HAL_ADC_Init+0x1c6>
 8006ca6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f040 80b1 	bne.w	8006e12 <HAL_ADC_Init+0x1c6>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006cb8:	f023 0302 	bic.w	r3, r3, #2
 8006cbc:	f043 0202 	orr.w	r2, r3, #2
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	69db      	ldr	r3, [r3, #28]
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8006ccc:	431a      	orrs	r2, r3
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68d9      	ldr	r1, [r3, #12]
 8006cd2:	2302      	movs	r3, #2
 8006cd4:	61fb      	str	r3, [r7, #28]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	fa93 f3a3 	rbit	r3, r3
 8006cdc:	61bb      	str	r3, [r7, #24]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	fab3 f383 	clz	r3, r3
 8006ce4:	fa01 f303 	lsl.w	r3, r1, r3
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8006ce8:	4313      	orrs	r3, r2
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8006cea:	6a3a      	ldr	r2, [r7, #32]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	623b      	str	r3, [r7, #32]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cf8:	d003      	beq.n	8006d02 <HAL_ADC_Init+0xb6>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d102      	bne.n	8006d08 <HAL_ADC_Init+0xbc>
 8006d02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d06:	e000      	b.n	8006d0a <HAL_ADC_Init+0xbe>
 8006d08:	2300      	movs	r3, #0
 8006d0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	62bb      	str	r3, [r7, #40]	; 0x28
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d123      	bne.n	8006d60 <HAL_ADC_Init+0x114>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d113      	bne.n	8006d48 <HAL_ADC_Init+0xfc>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	1e5a      	subs	r2, r3, #1
 8006d26:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006d2a:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	fa93 f3a3 	rbit	r3, r3
 8006d32:	613b      	str	r3, [r7, #16]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	fab3 f383 	clz	r3, r3
 8006d3a:	409a      	lsls	r2, r3
 8006d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d44:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d46:	e00b      	b.n	8006d60 <HAL_ADC_Init+0x114>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4c:	f043 0220 	orr.w	r2, r3, #32
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d58:	f043 0201 	orr.w	r2, r3, #1
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	6812      	ldr	r2, [r2, #0]
 8006d68:	6852      	ldr	r2, [r2, #4]
 8006d6a:	f422 4169 	bic.w	r1, r2, #59648	; 0xe900
 8006d6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d70:	430a      	orrs	r2, r1
 8006d72:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	6899      	ldr	r1, [r3, #8]
 8006d7e:	4b2c      	ldr	r3, [pc, #176]	; (8006e30 <HAL_ADC_Init+0x1e4>)
 8006d80:	400b      	ands	r3, r1
 8006d82:	6a39      	ldr	r1, [r7, #32]
 8006d84:	430b      	orrs	r3, r1
 8006d86:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d90:	d10f      	bne.n	8006db2 <HAL_ADC_Init+0x166>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	1e5a      	subs	r2, r3, #1
 8006d98:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
 8006d9c:	60fb      	str	r3, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	fa93 f3a3 	rbit	r3, r3
 8006da4:	60bb      	str	r3, [r7, #8]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	fab3 f383 	clz	r3, r3
 8006dac:	fa02 f303 	lsl.w	r3, r2, r3
 8006db0:	627b      	str	r3, [r7, #36]	; 0x24
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	6812      	ldr	r2, [r2, #0]
 8006dba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006dbc:	f422 0170 	bic.w	r1, r2, #15728640	; 0xf00000
 8006dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	689a      	ldr	r2, [r3, #8]
 8006dcc:	4b19      	ldr	r3, [pc, #100]	; (8006e34 <HAL_ADC_Init+0x1e8>)
 8006dce:	4013      	ands	r3, r2
 8006dd0:	6a3a      	ldr	r2, [r7, #32]
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d10b      	bne.n	8006dee <HAL_ADC_Init+0x1a2>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de0:	f023 0303 	bic.w	r3, r3, #3
 8006de4:	f043 0201 	orr.w	r2, r3, #1
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	629a      	str	r2, [r3, #40]	; 0x28
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006dec:	e01a      	b.n	8006e24 <HAL_ADC_Init+0x1d8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df2:	f023 0312 	bic.w	r3, r3, #18
 8006df6:	f043 0210 	orr.w	r2, r3, #16
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e02:	f043 0201 	orr.w	r2, r3, #1
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006e10:	e008      	b.n	8006e24 <HAL_ADC_Init+0x1d8>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e16:	f043 0210 	orr.w	r2, r3, #16
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006e24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3730      	adds	r7, #48	; 0x30
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	ffe1f7fd 	.word	0xffe1f7fd
 8006e34:	ff1f0efe 	.word	0xff1f0efe

08006e38 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e40:	2300      	movs	r3, #0
 8006e42:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d101      	bne.n	8006e52 <HAL_ADC_Start+0x1a>
 8006e4e:	2302      	movs	r3, #2
 8006e50:	e099      	b.n	8006f86 <HAL_ADC_Start+0x14e>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 faee 	bl	800743c <ADC_Enable>
 8006e60:	4603      	mov	r3, r0
 8006e62:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f040 8088 	bne.w	8006f7c <HAL_ADC_Start+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e74:	f023 0301 	bic.w	r3, r3, #1
 8006e78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	4b42      	ldr	r3, [pc, #264]	; (8006f90 <HAL_ADC_Start+0x158>)
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d105      	bne.n	8006e96 <HAL_ADC_Start+0x5e>
 8006e8a:	4b42      	ldr	r3, [pc, #264]	; (8006f94 <HAL_ADC_Start+0x15c>)
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d116      	bne.n	8006ec4 <HAL_ADC_Start+0x8c>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d008      	beq.n	8006ec2 <HAL_ADC_Start+0x8a>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006eb8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	629a      	str	r2, [r3, #40]	; 0x28
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006ec0:	e01e      	b.n	8006f00 <HAL_ADC_Start+0xc8>
 8006ec2:	e01d      	b.n	8006f00 <HAL_ADC_Start+0xc8>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	4b2f      	ldr	r3, [pc, #188]	; (8006f94 <HAL_ADC_Start+0x15c>)
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d004      	beq.n	8006ee4 <HAL_ADC_Start+0xac>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	4b2c      	ldr	r3, [pc, #176]	; (8006f90 <HAL_ADC_Start+0x158>)
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d10d      	bne.n	8006f00 <HAL_ADC_Start+0xc8>
 8006ee4:	4b2b      	ldr	r3, [pc, #172]	; (8006f94 <HAL_ADC_Start+0x15c>)
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d007      	beq.n	8006f00 <HAL_ADC_Start+0xc8>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006ef8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d006      	beq.n	8006f1a <HAL_ADC_Start+0xe2>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f10:	f023 0206 	bic.w	r2, r3, #6
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	62da      	str	r2, [r3, #44]	; 0x2c
 8006f18:	e002      	b.n	8006f20 <HAL_ADC_Start+0xe8>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f06f 0202 	mvn.w	r2, #2
 8006f30:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006f3c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006f40:	d113      	bne.n	8006f6a <HAL_ADC_Start+0x132>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681a      	ldr	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8006f46:	4b12      	ldr	r3, [pc, #72]	; (8006f90 <HAL_ADC_Start+0x158>)
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d105      	bne.n	8006f58 <HAL_ADC_Start+0x120>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8006f4c:	4b11      	ldr	r3, [pc, #68]	; (8006f94 <HAL_ADC_Start+0x15c>)
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d108      	bne.n	8006f6a <HAL_ADC_Start+0x132>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	6812      	ldr	r2, [r2, #0]
 8006f60:	6892      	ldr	r2, [r2, #8]
 8006f62:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8006f66:	609a      	str	r2, [r3, #8]
 8006f68:	e00c      	b.n	8006f84 <HAL_ADC_Start+0x14c>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	6812      	ldr	r2, [r2, #0]
 8006f72:	6892      	ldr	r2, [r2, #8]
 8006f74:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006f78:	609a      	str	r2, [r3, #8]
 8006f7a:	e003      	b.n	8006f84 <HAL_ADC_Start+0x14c>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8006f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	40012800 	.word	0x40012800
 8006f94:	40012400 	.word	0x40012400

08006f98 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b086      	sub	sp, #24
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	4b66      	ldr	r3, [pc, #408]	; (8007148 <HAL_ADC_Start_DMA+0x1b0>)
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d004      	beq.n	8006fbc <HAL_ADC_Start_DMA+0x24>
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	4b65      	ldr	r3, [pc, #404]	; (800714c <HAL_ADC_Start_DMA+0x1b4>)
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d106      	bne.n	8006fca <HAL_ADC_Start_DMA+0x32>
 8006fbc:	4b62      	ldr	r3, [pc, #392]	; (8007148 <HAL_ADC_Start_DMA+0x1b0>)
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f040 80b7 	bne.w	8007138 <HAL_ADC_Start_DMA+0x1a0>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d101      	bne.n	8006fd8 <HAL_ADC_Start_DMA+0x40>
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	e0b2      	b.n	800713e <HAL_ADC_Start_DMA+0x1a6>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f000 fa2b 	bl	800743c <ADC_Enable>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006fea:	7dfb      	ldrb	r3, [r7, #23]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f040 809e 	bne.w	800712e <HAL_ADC_Start_DMA+0x196>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006ffa:	f023 0301 	bic.w	r3, r3, #1
 8006ffe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	4b50      	ldr	r3, [pc, #320]	; (800714c <HAL_ADC_Start_DMA+0x1b4>)
 800700c:	429a      	cmp	r2, r3
 800700e:	d105      	bne.n	800701c <HAL_ADC_Start_DMA+0x84>
 8007010:	4b4d      	ldr	r3, [pc, #308]	; (8007148 <HAL_ADC_Start_DMA+0x1b0>)
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d116      	bne.n	800704a <HAL_ADC_Start_DMA+0xb2>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007020:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007032:	2b00      	cmp	r3, #0
 8007034:	d008      	beq.n	8007048 <HAL_ADC_Start_DMA+0xb0>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800703e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	629a      	str	r2, [r3, #40]	; 0x28
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007046:	e01e      	b.n	8007086 <HAL_ADC_Start_DMA+0xee>
 8007048:	e01d      	b.n	8007086 <HAL_ADC_Start_DMA+0xee>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	4b3b      	ldr	r3, [pc, #236]	; (8007148 <HAL_ADC_Start_DMA+0x1b0>)
 800705c:	429a      	cmp	r2, r3
 800705e:	d004      	beq.n	800706a <HAL_ADC_Start_DMA+0xd2>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	4b39      	ldr	r3, [pc, #228]	; (800714c <HAL_ADC_Start_DMA+0x1b4>)
 8007066:	429a      	cmp	r2, r3
 8007068:	d10d      	bne.n	8007086 <HAL_ADC_Start_DMA+0xee>
 800706a:	4b37      	ldr	r3, [pc, #220]	; (8007148 <HAL_ADC_Start_DMA+0x1b0>)
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007072:	2b00      	cmp	r3, #0
 8007074:	d007      	beq.n	8007086 <HAL_ADC_Start_DMA+0xee>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800707e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d006      	beq.n	80070a0 <HAL_ADC_Start_DMA+0x108>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007096:	f023 0206 	bic.w	r2, r3, #6
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	62da      	str	r2, [r3, #44]	; 0x2c
 800709e:	e002      	b.n	80070a6 <HAL_ADC_Start_DMA+0x10e>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	4a27      	ldr	r2, [pc, #156]	; (8007150 <HAL_ADC_Start_DMA+0x1b8>)
 80070b4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	4a26      	ldr	r2, [pc, #152]	; (8007154 <HAL_ADC_Start_DMA+0x1bc>)
 80070bc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	4a25      	ldr	r2, [pc, #148]	; (8007158 <HAL_ADC_Start_DMA+0x1c0>)
 80070c4:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f06f 0202 	mvn.w	r2, #2
 80070ce:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	6812      	ldr	r2, [r2, #0]
 80070d8:	6892      	ldr	r2, [r2, #8]
 80070da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070de:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6a19      	ldr	r1, [r3, #32]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	334c      	adds	r3, #76	; 0x4c
 80070ea:	461a      	mov	r2, r3
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	4608      	mov	r0, r1
 80070f0:	4611      	mov	r1, r2
 80070f2:	461a      	mov	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f7ff f97f 	bl	80063f8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007104:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8007108:	d108      	bne.n	800711c <HAL_ADC_Start_DMA+0x184>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68fa      	ldr	r2, [r7, #12]
 8007110:	6812      	ldr	r2, [r2, #0]
 8007112:	6892      	ldr	r2, [r2, #8]
 8007114:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8007118:	609a      	str	r2, [r3, #8]
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800711a:	e00f      	b.n	800713c <HAL_ADC_Start_DMA+0x1a4>
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	6812      	ldr	r2, [r2, #0]
 8007124:	6892      	ldr	r2, [r2, #8]
 8007126:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800712a:	609a      	str	r2, [r3, #8]
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800712c:	e006      	b.n	800713c <HAL_ADC_Start_DMA+0x1a4>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007136:	e001      	b.n	800713c <HAL_ADC_Start_DMA+0x1a4>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800713c:	7dfb      	ldrb	r3, [r7, #23]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3718      	adds	r7, #24
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	40012400 	.word	0x40012400
 800714c:	40012800 	.word	0x40012800
 8007150:	08007555 	.word	0x08007555
 8007154:	080075d1 	.word	0x080075d1
 8007158:	080075ed 	.word	0x080075ed

0800715c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8007164:	370c      	adds	r7, #12
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop

08007170 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007178:	370c      	adds	r7, #12
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop

08007184 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop

08007198 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8007198:	b490      	push	{r4, r7}
 800719a:	b098      	sub	sp, #96	; 0x60
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80071a2:	2300      	movs	r3, #0
 80071a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  __IO uint32_t wait_loop_index = 0;
 80071a8:	2300      	movs	r3, #0
 80071aa:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d101      	bne.n	80071ba <HAL_ADC_ConfigChannel+0x22>
 80071b6:	2302      	movs	r3, #2
 80071b8:	e134      	b.n	8007424 <HAL_ADC_ConfigChannel+0x28c>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	2b06      	cmp	r3, #6
 80071c8:	d82e      	bhi.n	8007228 <HAL_ADC_ConfigChannel+0x90>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	6812      	ldr	r2, [r2, #0]
 80071d2:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80071d4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80071d8:	65ba      	str	r2, [r7, #88]	; 0x58
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071dc:	fa92 f2a2 	rbit	r2, r2
 80071e0:	657a      	str	r2, [r7, #84]	; 0x54
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80071e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80071e4:	fab2 f282 	clz	r2, r2
 80071e8:	6838      	ldr	r0, [r7, #0]
 80071ea:	6840      	ldr	r0, [r0, #4]
 80071ec:	3801      	subs	r0, #1
 80071ee:	fb00 f202 	mul.w	r2, r0, r2
 80071f2:	201f      	movs	r0, #31
 80071f4:	fa00 f202 	lsl.w	r2, r0, r2
 80071f8:	43d2      	mvns	r2, r2
 80071fa:	4011      	ands	r1, r2
 80071fc:	683a      	ldr	r2, [r7, #0]
 80071fe:	6810      	ldr	r0, [r2, #0]
 8007200:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8007204:	653a      	str	r2, [r7, #80]	; 0x50
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007206:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007208:	fa92 f2a2 	rbit	r2, r2
 800720c:	64fa      	str	r2, [r7, #76]	; 0x4c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 800720e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007210:	fab2 f282 	clz	r2, r2
 8007214:	683c      	ldr	r4, [r7, #0]
 8007216:	6864      	ldr	r4, [r4, #4]
 8007218:	3c01      	subs	r4, #1
 800721a:	fb04 f202 	mul.w	r2, r4, r2
 800721e:	fa00 f202 	lsl.w	r2, r0, r2
 8007222:	430a      	orrs	r2, r1
 8007224:	635a      	str	r2, [r3, #52]	; 0x34
 8007226:	e060      	b.n	80072ea <HAL_ADC_ConfigChannel+0x152>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	2b0c      	cmp	r3, #12
 800722e:	d82e      	bhi.n	800728e <HAL_ADC_ConfigChannel+0xf6>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	6812      	ldr	r2, [r2, #0]
 8007238:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800723a:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800723e:	64ba      	str	r2, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007240:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007242:	fa92 f2a2 	rbit	r2, r2
 8007246:	647a      	str	r2, [r7, #68]	; 0x44
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8007248:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800724a:	fab2 f282 	clz	r2, r2
 800724e:	6838      	ldr	r0, [r7, #0]
 8007250:	6840      	ldr	r0, [r0, #4]
 8007252:	3807      	subs	r0, #7
 8007254:	fb00 f202 	mul.w	r2, r0, r2
 8007258:	201f      	movs	r0, #31
 800725a:	fa00 f202 	lsl.w	r2, r0, r2
 800725e:	43d2      	mvns	r2, r2
 8007260:	4011      	ands	r1, r2
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	6810      	ldr	r0, [r2, #0]
 8007266:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800726a:	643a      	str	r2, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800726c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800726e:	fa92 f2a2 	rbit	r2, r2
 8007272:	63fa      	str	r2, [r7, #60]	; 0x3c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8007274:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007276:	fab2 f282 	clz	r2, r2
 800727a:	683c      	ldr	r4, [r7, #0]
 800727c:	6864      	ldr	r4, [r4, #4]
 800727e:	3c07      	subs	r4, #7
 8007280:	fb04 f202 	mul.w	r2, r4, r2
 8007284:	fa00 f202 	lsl.w	r2, r0, r2
 8007288:	430a      	orrs	r2, r1
 800728a:	631a      	str	r2, [r3, #48]	; 0x30
 800728c:	e02d      	b.n	80072ea <HAL_ADC_ConfigChannel+0x152>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	6812      	ldr	r2, [r2, #0]
 8007296:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007298:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800729c:	63ba      	str	r2, [r7, #56]	; 0x38
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800729e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072a0:	fa92 f2a2 	rbit	r2, r2
 80072a4:	637a      	str	r2, [r7, #52]	; 0x34
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80072a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072a8:	fab2 f282 	clz	r2, r2
 80072ac:	6838      	ldr	r0, [r7, #0]
 80072ae:	6840      	ldr	r0, [r0, #4]
 80072b0:	380d      	subs	r0, #13
 80072b2:	fb00 f202 	mul.w	r2, r0, r2
 80072b6:	201f      	movs	r0, #31
 80072b8:	fa00 f202 	lsl.w	r2, r0, r2
 80072bc:	43d2      	mvns	r2, r2
 80072be:	4011      	ands	r1, r2
 80072c0:	683a      	ldr	r2, [r7, #0]
 80072c2:	6810      	ldr	r0, [r2, #0]
 80072c4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80072c8:	633a      	str	r2, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072cc:	fa92 f2a2 	rbit	r2, r2
 80072d0:	62fa      	str	r2, [r7, #44]	; 0x2c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80072d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072d4:	fab2 f282 	clz	r2, r2
 80072d8:	683c      	ldr	r4, [r7, #0]
 80072da:	6864      	ldr	r4, [r4, #4]
 80072dc:	3c0d      	subs	r4, #13
 80072de:	fb04 f202 	mul.w	r2, r4, r2
 80072e2:	fa00 f202 	lsl.w	r2, r0, r2
 80072e6:	430a      	orrs	r2, r1
 80072e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b09      	cmp	r3, #9
 80072f0:	d92c      	bls.n	800734c <HAL_ADC_ConfigChannel+0x1b4>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	6812      	ldr	r2, [r2, #0]
 80072fa:	68d1      	ldr	r1, [r2, #12]
 80072fc:	2238      	movs	r2, #56	; 0x38
 80072fe:	62ba      	str	r2, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007302:	fa92 f2a2 	rbit	r2, r2
 8007306:	627a      	str	r2, [r7, #36]	; 0x24
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8007308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800730a:	fab2 f282 	clz	r2, r2
 800730e:	6838      	ldr	r0, [r7, #0]
 8007310:	6800      	ldr	r0, [r0, #0]
 8007312:	380a      	subs	r0, #10
 8007314:	fb00 f202 	mul.w	r2, r0, r2
 8007318:	2007      	movs	r0, #7
 800731a:	fa00 f202 	lsl.w	r2, r0, r2
 800731e:	43d2      	mvns	r2, r2
 8007320:	4011      	ands	r1, r2
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	6890      	ldr	r0, [r2, #8]
 8007326:	2238      	movs	r2, #56	; 0x38
 8007328:	623a      	str	r2, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800732a:	6a3a      	ldr	r2, [r7, #32]
 800732c:	fa92 f2a2 	rbit	r2, r2
 8007330:	61fa      	str	r2, [r7, #28]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8007332:	69fa      	ldr	r2, [r7, #28]
 8007334:	fab2 f282 	clz	r2, r2
 8007338:	683c      	ldr	r4, [r7, #0]
 800733a:	6824      	ldr	r4, [r4, #0]
 800733c:	3c0a      	subs	r4, #10
 800733e:	fb04 f202 	mul.w	r2, r4, r2
 8007342:	fa00 f202 	lsl.w	r2, r0, r2
 8007346:	430a      	orrs	r2, r1
 8007348:	60da      	str	r2, [r3, #12]
 800734a:	e029      	b.n	80073a0 <HAL_ADC_ConfigChannel+0x208>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	6812      	ldr	r2, [r2, #0]
 8007354:	6911      	ldr	r1, [r2, #16]
 8007356:	2238      	movs	r2, #56	; 0x38
 8007358:	61ba      	str	r2, [r7, #24]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800735a:	69ba      	ldr	r2, [r7, #24]
 800735c:	fa92 f2a2 	rbit	r2, r2
 8007360:	617a      	str	r2, [r7, #20]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8007362:	697a      	ldr	r2, [r7, #20]
 8007364:	fab2 f282 	clz	r2, r2
 8007368:	6838      	ldr	r0, [r7, #0]
 800736a:	6800      	ldr	r0, [r0, #0]
 800736c:	fb00 f202 	mul.w	r2, r0, r2
 8007370:	2007      	movs	r0, #7
 8007372:	fa00 f202 	lsl.w	r2, r0, r2
 8007376:	43d2      	mvns	r2, r2
 8007378:	4011      	ands	r1, r2
 800737a:	683a      	ldr	r2, [r7, #0]
 800737c:	6890      	ldr	r0, [r2, #8]
 800737e:	2238      	movs	r2, #56	; 0x38
 8007380:	613a      	str	r2, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	fa92 f2a2 	rbit	r2, r2
 8007388:	60fa      	str	r2, [r7, #12]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	fab2 f282 	clz	r2, r2
 8007390:	683c      	ldr	r4, [r7, #0]
 8007392:	6824      	ldr	r4, [r4, #0]
 8007394:	fb04 f202 	mul.w	r2, r4, r2
 8007398:	fa00 f202 	lsl.w	r2, r0, r2
 800739c:	430a      	orrs	r2, r1
 800739e:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b10      	cmp	r3, #16
 80073a6:	d003      	beq.n	80073b0 <HAL_ADC_ConfigChannel+0x218>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80073ac:	2b11      	cmp	r3, #17
 80073ae:	d133      	bne.n	8007418 <HAL_ADC_ConfigChannel+0x280>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	4b1e      	ldr	r3, [pc, #120]	; (8007430 <HAL_ADC_ConfigChannel+0x298>)
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d125      	bne.n	8007406 <HAL_ADC_ConfigChannel+0x26e>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d127      	bne.n	8007418 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	6812      	ldr	r2, [r2, #0]
 80073d0:	6892      	ldr	r2, [r2, #8]
 80073d2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80073d6:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2b10      	cmp	r3, #16
 80073de:	d11b      	bne.n	8007418 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80073e0:	4b14      	ldr	r3, [pc, #80]	; (8007434 <HAL_ADC_ConfigChannel+0x29c>)
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	4b14      	ldr	r3, [pc, #80]	; (8007438 <HAL_ADC_ConfigChannel+0x2a0>)
 80073e6:	fba3 1302 	umull	r1, r3, r3, r2
 80073ea:	0c9a      	lsrs	r2, r3, #18
 80073ec:	4613      	mov	r3, r2
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4413      	add	r3, r2
 80073f2:	005b      	lsls	r3, r3, #1
 80073f4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80073f6:	e002      	b.n	80073fe <HAL_ADC_ConfigChannel+0x266>
          {
            wait_loop_index--;
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	3b01      	subs	r3, #1
 80073fc:	60bb      	str	r3, [r7, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
          while(wait_loop_index != 0)
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1f9      	bne.n	80073f8 <HAL_ADC_ConfigChannel+0x260>
 8007404:	e008      	b.n	8007418 <HAL_ADC_ConfigChannel+0x280>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800740a:	f043 0220 	orr.w	r2, r3, #32
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8007420:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007424:	4618      	mov	r0, r3
 8007426:	3760      	adds	r7, #96	; 0x60
 8007428:	46bd      	mov	sp, r7
 800742a:	bc90      	pop	{r4, r7}
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	40012400 	.word	0x40012400
 8007434:	20000000 	.word	0x20000000
 8007438:	431bde83 	.word	0x431bde83

0800743c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007444:	2300      	movs	r3, #0
 8007446:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8007448:	2300      	movs	r3, #0
 800744a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	f003 0301 	and.w	r3, r3, #1
 8007456:	2b00      	cmp	r3, #0
 8007458:	d139      	bne.n	80074ce <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	6812      	ldr	r2, [r2, #0]
 8007462:	6892      	ldr	r2, [r2, #8]
 8007464:	f042 0201 	orr.w	r2, r2, #1
 8007468:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800746a:	4b1b      	ldr	r3, [pc, #108]	; (80074d8 <ADC_Enable+0x9c>)
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	4b1b      	ldr	r3, [pc, #108]	; (80074dc <ADC_Enable+0xa0>)
 8007470:	fba3 1302 	umull	r1, r3, r3, r2
 8007474:	0c9b      	lsrs	r3, r3, #18
 8007476:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8007478:	e002      	b.n	8007480 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	3b01      	subs	r3, #1
 800747e:	60bb      	str	r3, [r7, #8]
    __HAL_ADC_ENABLE(hadc);
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
    while(wait_loop_index != 0)
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1f9      	bne.n	800747a <ADC_Enable+0x3e>
    {
      wait_loop_index--;
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007486:	f000 f90b 	bl	80076a0 <HAL_GetTick>
 800748a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800748c:	e018      	b.n	80074c0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800748e:	f000 f907 	bl	80076a0 <HAL_GetTick>
 8007492:	4602      	mov	r2, r0
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	2b02      	cmp	r3, #2
 800749a:	d911      	bls.n	80074c0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a0:	f043 0210 	orr.w	r2, r3, #16
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ac:	f043 0201 	orr.w	r2, r3, #1
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	e007      	b.n	80074d0 <ADC_Enable+0x94>
    
    /* Get tick count */
    tickstart = HAL_GetTick();

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d0df      	beq.n	800748e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	20000000 	.word	0x20000000
 80074dc:	431bde83 	.word	0x431bde83

080074e0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80074e8:	2300      	movs	r3, #0
 80074ea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d027      	beq.n	800754a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	6812      	ldr	r2, [r2, #0]
 8007502:	6892      	ldr	r2, [r2, #8]
 8007504:	f022 0201 	bic.w	r2, r2, #1
 8007508:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800750a:	f000 f8c9 	bl	80076a0 <HAL_GetTick>
 800750e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007510:	e014      	b.n	800753c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007512:	f000 f8c5 	bl	80076a0 <HAL_GetTick>
 8007516:	4602      	mov	r2, r0
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	1ad3      	subs	r3, r2, r3
 800751c:	2b02      	cmp	r3, #2
 800751e:	d90d      	bls.n	800753c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007524:	f043 0210 	orr.w	r2, r3, #16
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007530:	f043 0201 	orr.w	r2, r3, #1
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e007      	b.n	800754c <ADC_ConversionStop_Disable+0x6c>
     
    /* Get tick count */
    tickstart = HAL_GetTick();
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f003 0301 	and.w	r3, r3, #1
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1e3      	bne.n	8007512 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007560:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007566:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800756a:	2b00      	cmp	r3, #0
 800756c:	d127      	bne.n	80075be <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007572:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007584:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8007588:	d115      	bne.n	80075b6 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	68db      	ldr	r3, [r3, #12]
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800758e:	2b00      	cmp	r3, #0
 8007590:	d111      	bne.n	80075b6 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007596:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d105      	bne.n	80075b6 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ae:	f043 0201 	orr.w	r2, r3, #1
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f7ff fdd0 	bl	800715c <HAL_ADC_ConvCpltCallback>
 80075bc:	e004      	b.n	80075c8 <ADC_DMAConvCplt+0x74>
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	4798      	blx	r3
  }
}
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop

080075d0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075dc:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f7ff fdc6 	bl	8007170 <HAL_ADC_ConvHalfCpltCallback>
}
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop

080075ec <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f8:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760a:	f043 0204 	orr.w	r2, r3, #4
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f7ff fdb6 	bl	8007184 <HAL_ADC_ErrorCallback>
}
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop

08007620 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007624:	4b08      	ldr	r3, [pc, #32]	; (8007648 <HAL_Init+0x28>)
 8007626:	4a08      	ldr	r2, [pc, #32]	; (8007648 <HAL_Init+0x28>)
 8007628:	6812      	ldr	r2, [r2, #0]
 800762a:	f042 0210 	orr.w	r2, r2, #16
 800762e:	601a      	str	r2, [r3, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007630:	2003      	movs	r0, #3
 8007632:	f7ff fa07 	bl	8006a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007636:	2000      	movs	r0, #0
 8007638:	f000 f808 	bl	800764c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800763c:	f000 fe22 	bl	8008284 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	40022000 	.word	0x40022000

0800764c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8007654:	f7fd ff5a 	bl	800550c <HAL_RCC_GetHCLKFreq>
 8007658:	4602      	mov	r2, r0
 800765a:	4b09      	ldr	r3, [pc, #36]	; (8007680 <HAL_InitTick+0x34>)
 800765c:	fba3 1302 	umull	r1, r3, r3, r2
 8007660:	099b      	lsrs	r3, r3, #6
 8007662:	4618      	mov	r0, r3
 8007664:	f7ff fa22 	bl	8006aac <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8007668:	f04f 30ff 	mov.w	r0, #4294967295
 800766c:	6879      	ldr	r1, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	f7ff f9f2 	bl	8006a58 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3708      	adds	r7, #8
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	10624dd3 	.word	0x10624dd3

08007684 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007684:	b480      	push	{r7}
 8007686:	af00      	add	r7, sp, #0
  uwTick++;
 8007688:	4b04      	ldr	r3, [pc, #16]	; (800769c <HAL_IncTick+0x18>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	1c5a      	adds	r2, r3, #1
 800768e:	4b03      	ldr	r3, [pc, #12]	; (800769c <HAL_IncTick+0x18>)
 8007690:	601a      	str	r2, [r3, #0]
}
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	2000002c 	.word	0x2000002c

080076a0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80076a0:	b480      	push	{r7}
 80076a2:	af00      	add	r7, sp, #0
  return uwTick;
 80076a4:	4b03      	ldr	r3, [pc, #12]	; (80076b4 <HAL_GetTick+0x14>)
 80076a6:	681b      	ldr	r3, [r3, #0]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	2000002c 	.word	0x2000002c

080076b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80076c0:	2300      	movs	r3, #0
 80076c2:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 80076c4:	f7ff ffec 	bl	80076a0 <HAL_GetTick>
 80076c8:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80076ca:	bf00      	nop
 80076cc:	f7ff ffe8 	bl	80076a0 <HAL_GetTick>
 80076d0:	4602      	mov	r2, r0
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	1ad2      	subs	r2, r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d3f7      	bcc.n	80076cc <HAL_Delay+0x14>
  {
  }
}
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop

080076e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80076e4:	b480      	push	{r7}
 80076e6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80076e8:	4b15      	ldr	r3, [pc, #84]	; (8007740 <SystemInit+0x5c>)
 80076ea:	4a15      	ldr	r2, [pc, #84]	; (8007740 <SystemInit+0x5c>)
 80076ec:	6812      	ldr	r2, [r2, #0]
 80076ee:	f042 0201 	orr.w	r2, r2, #1
 80076f2:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80076f4:	4a12      	ldr	r2, [pc, #72]	; (8007740 <SystemInit+0x5c>)
 80076f6:	4b12      	ldr	r3, [pc, #72]	; (8007740 <SystemInit+0x5c>)
 80076f8:	6859      	ldr	r1, [r3, #4]
 80076fa:	4b12      	ldr	r3, [pc, #72]	; (8007744 <SystemInit+0x60>)
 80076fc:	400b      	ands	r3, r1
 80076fe:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007700:	4a0f      	ldr	r2, [pc, #60]	; (8007740 <SystemInit+0x5c>)
 8007702:	4b0f      	ldr	r3, [pc, #60]	; (8007740 <SystemInit+0x5c>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800770a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800770e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007710:	4b0b      	ldr	r3, [pc, #44]	; (8007740 <SystemInit+0x5c>)
 8007712:	4a0b      	ldr	r2, [pc, #44]	; (8007740 <SystemInit+0x5c>)
 8007714:	6812      	ldr	r2, [r2, #0]
 8007716:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800771a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800771c:	4b08      	ldr	r3, [pc, #32]	; (8007740 <SystemInit+0x5c>)
 800771e:	4a08      	ldr	r2, [pc, #32]	; (8007740 <SystemInit+0x5c>)
 8007720:	6852      	ldr	r2, [r2, #4]
 8007722:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8007726:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8007728:	4b05      	ldr	r3, [pc, #20]	; (8007740 <SystemInit+0x5c>)
 800772a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800772e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8007730:	4b05      	ldr	r3, [pc, #20]	; (8007748 <SystemInit+0x64>)
 8007732:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007736:	609a      	str	r2, [r3, #8]
#endif 
}
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr
 8007740:	40021000 	.word	0x40021000
 8007744:	f8ff0000 	.word	0xf8ff0000
 8007748:	e000ed00 	.word	0xe000ed00

0800774c <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 800774c:	b480      	push	{r7}
 800774e:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007750:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007754:	4a05      	ldr	r2, [pc, #20]	; (800776c <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007756:	4b05      	ldr	r3, [pc, #20]	; (800776c <NVIC_SystemReset+0x20>)
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800775e:	4b04      	ldr	r3, [pc, #16]	; (8007770 <NVIC_SystemReset+0x24>)
 8007760:	430b      	orrs	r3, r1
 8007762:	60d3      	str	r3, [r2, #12]
 8007764:	f3bf 8f4f 	dsb	sy

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8007768:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */
  while(1) { __NOP(); }                                             /* wait until reset */
 800776a:	e7fd      	b.n	8007768 <NVIC_SystemReset+0x1c>
 800776c:	e000ed00 	.word	0xe000ed00
 8007770:	05fa0004 	.word	0x05fa0004

08007774 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
if(HAL_GetTick()%100==0 && Status!=STOP_STATUS && Transmit==1) HAL_UART_Transmit_DMA(&huart3,(uint8_t*)TxBuffer,34);
 8007778:	f7ff ff92 	bl	80076a0 <HAL_GetTick>
 800777c:	4602      	mov	r2, r0
 800777e:	4b0e      	ldr	r3, [pc, #56]	; (80077b8 <SysTick_Handler+0x44>)
 8007780:	fba3 1302 	umull	r1, r3, r3, r2
 8007784:	095b      	lsrs	r3, r3, #5
 8007786:	2164      	movs	r1, #100	; 0x64
 8007788:	fb01 f303 	mul.w	r3, r1, r3
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	2b00      	cmp	r3, #0
 8007790:	d10d      	bne.n	80077ae <SysTick_Handler+0x3a>
 8007792:	4b0a      	ldr	r3, [pc, #40]	; (80077bc <SysTick_Handler+0x48>)
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d009      	beq.n	80077ae <SysTick_Handler+0x3a>
 800779a:	4b09      	ldr	r3, [pc, #36]	; (80077c0 <SysTick_Handler+0x4c>)
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d104      	bne.n	80077ae <SysTick_Handler+0x3a>
 80077a4:	4807      	ldr	r0, [pc, #28]	; (80077c4 <SysTick_Handler+0x50>)
 80077a6:	4908      	ldr	r1, [pc, #32]	; (80077c8 <SysTick_Handler+0x54>)
 80077a8:	2222      	movs	r2, #34	; 0x22
 80077aa:	f7fa f8f5 	bl	8001998 <HAL_UART_Transmit_DMA>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80077ae:	f7ff ff69 	bl	8007684 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80077b2:	f7ff f9a3 	bl	8006afc <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	51eb851f 	.word	0x51eb851f
 80077bc:	20000060 	.word	0x20000060
 80077c0:	2000008c 	.word	0x2000008c
 80077c4:	20000308 	.word	0x20000308
 80077c8:	200000cc 	.word	0x200000cc

080077cc <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel1 global interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	uint8_t i;
//	counter++;

		for(i=0;i<6;i++)
 80077d2:	2300      	movs	r3, #0
 80077d4:	71fb      	strb	r3, [r7, #7]
 80077d6:	e02c      	b.n	8007832 <DMA1_Channel1_IRQHandler+0x66>
		{
			test=adcData[i];
 80077d8:	79fa      	ldrb	r2, [r7, #7]
 80077da:	4b1a      	ldr	r3, [pc, #104]	; (8007844 <DMA1_Channel1_IRQHandler+0x78>)
 80077dc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	461a      	mov	r2, r3
 80077e4:	4b18      	ldr	r3, [pc, #96]	; (8007848 <DMA1_Channel1_IRQHandler+0x7c>)
 80077e6:	601a      	str	r2, [r3, #0]
			if(test>Max3[i]) Max3[i]=test;
 80077e8:	79fa      	ldrb	r2, [r7, #7]
 80077ea:	4b18      	ldr	r3, [pc, #96]	; (800784c <DMA1_Channel1_IRQHandler+0x80>)
 80077ec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	461a      	mov	r2, r3
 80077f4:	4b14      	ldr	r3, [pc, #80]	; (8007848 <DMA1_Channel1_IRQHandler+0x7c>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d206      	bcs.n	800780a <DMA1_Channel1_IRQHandler+0x3e>
 80077fc:	79fa      	ldrb	r2, [r7, #7]
 80077fe:	4b12      	ldr	r3, [pc, #72]	; (8007848 <DMA1_Channel1_IRQHandler+0x7c>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	b299      	uxth	r1, r3
 8007804:	4b11      	ldr	r3, [pc, #68]	; (800784c <DMA1_Channel1_IRQHandler+0x80>)
 8007806:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			if(test<Min3[i]) Min3[i]=test;
 800780a:	79fa      	ldrb	r2, [r7, #7]
 800780c:	4b10      	ldr	r3, [pc, #64]	; (8007850 <DMA1_Channel1_IRQHandler+0x84>)
 800780e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007812:	b29b      	uxth	r3, r3
 8007814:	461a      	mov	r2, r3
 8007816:	4b0c      	ldr	r3, [pc, #48]	; (8007848 <DMA1_Channel1_IRQHandler+0x7c>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	429a      	cmp	r2, r3
 800781c:	d906      	bls.n	800782c <DMA1_Channel1_IRQHandler+0x60>
 800781e:	79fa      	ldrb	r2, [r7, #7]
 8007820:	4b09      	ldr	r3, [pc, #36]	; (8007848 <DMA1_Channel1_IRQHandler+0x7c>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	b299      	uxth	r1, r3
 8007826:	4b0a      	ldr	r3, [pc, #40]	; (8007850 <DMA1_Channel1_IRQHandler+0x84>)
 8007828:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	uint8_t i;
//	counter++;

		for(i=0;i<6;i++)
 800782c:	79fb      	ldrb	r3, [r7, #7]
 800782e:	3301      	adds	r3, #1
 8007830:	71fb      	strb	r3, [r7, #7]
 8007832:	79fb      	ldrb	r3, [r7, #7]
 8007834:	2b05      	cmp	r3, #5
 8007836:	d9cf      	bls.n	80077d8 <DMA1_Channel1_IRQHandler+0xc>
			if(test>Max3[i]) Max3[i]=test;
			if(test<Min3[i]) Min3[i]=test;
		}

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007838:	4806      	ldr	r0, [pc, #24]	; (8007854 <DMA1_Channel1_IRQHandler+0x88>)
 800783a:	f7fe fe27 	bl	800648c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800783e:	3708      	adds	r7, #8
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	20000118 	.word	0x20000118
 8007848:	20000098 	.word	0x20000098
 800784c:	200000b8 	.word	0x200000b8
 8007850:	20000080 	.word	0x20000080
 8007854:	20000430 	.word	0x20000430

08007858 <DMA1_Channel2_IRQHandler>:

/**
* @brief This function handles DMA1 channel2 global interrupt.
*/
void DMA1_Channel2_IRQHandler(void)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
	int32_t pom;

	TxBuffer[0]='#';
 800785e:	4b78      	ldr	r3, [pc, #480]	; (8007a40 <DMA1_Channel2_IRQHandler+0x1e8>)
 8007860:	2223      	movs	r2, #35	; 0x23
 8007862:	701a      	strb	r2, [r3, #0]
	for (i=0;i<8;i++)
 8007864:	4b77      	ldr	r3, [pc, #476]	; (8007a44 <DMA1_Channel2_IRQHandler+0x1ec>)
 8007866:	2200      	movs	r2, #0
 8007868:	701a      	strb	r2, [r3, #0]
 800786a:	e0d8      	b.n	8007a1e <DMA1_Channel2_IRQHandler+0x1c6>
	{
		if (i<6) pom=SensorTab[i][indexer]-dys0[i];
 800786c:	4b75      	ldr	r3, [pc, #468]	; (8007a44 <DMA1_Channel2_IRQHandler+0x1ec>)
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	b25b      	sxtb	r3, r3
 8007872:	2b05      	cmp	r3, #5
 8007874:	dc15      	bgt.n	80078a2 <DMA1_Channel2_IRQHandler+0x4a>
 8007876:	4b73      	ldr	r3, [pc, #460]	; (8007a44 <DMA1_Channel2_IRQHandler+0x1ec>)
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	b25a      	sxtb	r2, r3
 800787c:	4b72      	ldr	r3, [pc, #456]	; (8007a48 <DMA1_Channel2_IRQHandler+0x1f0>)
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	b258      	sxtb	r0, r3
 8007882:	4972      	ldr	r1, [pc, #456]	; (8007a4c <DMA1_Channel2_IRQHandler+0x1f4>)
 8007884:	4613      	mov	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	4413      	add	r3, r2
 800788a:	4403      	add	r3, r0
 800788c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8007890:	4b6c      	ldr	r3, [pc, #432]	; (8007a44 <DMA1_Channel2_IRQHandler+0x1ec>)
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	b259      	sxtb	r1, r3
 8007896:	4b6e      	ldr	r3, [pc, #440]	; (8007a50 <DMA1_Channel2_IRQHandler+0x1f8>)
 8007898:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800789c:	b29b      	uxth	r3, r3
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	607b      	str	r3, [r7, #4]
		if(i==6) pom=angle/1000;
 80078a2:	4b68      	ldr	r3, [pc, #416]	; (8007a44 <DMA1_Channel2_IRQHandler+0x1ec>)
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	b25b      	sxtb	r3, r3
 80078a8:	2b06      	cmp	r3, #6
 80078aa:	d108      	bne.n	80078be <DMA1_Channel2_IRQHandler+0x66>
 80078ac:	4b69      	ldr	r3, [pc, #420]	; (8007a54 <DMA1_Channel2_IRQHandler+0x1fc>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a69      	ldr	r2, [pc, #420]	; (8007a58 <DMA1_Channel2_IRQHandler+0x200>)
 80078b2:	fb82 0203 	smull	r0, r2, r2, r3
 80078b6:	1192      	asrs	r2, r2, #6
 80078b8:	17db      	asrs	r3, r3, #31
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	607b      	str	r3, [r7, #4]
		if(i==7) pom=distance/1000;
 80078be:	4b61      	ldr	r3, [pc, #388]	; (8007a44 <DMA1_Channel2_IRQHandler+0x1ec>)
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	b25b      	sxtb	r3, r3
 80078c4:	2b07      	cmp	r3, #7
 80078c6:	d108      	bne.n	80078da <DMA1_Channel2_IRQHandler+0x82>
 80078c8:	4b64      	ldr	r3, [pc, #400]	; (8007a5c <DMA1_Channel2_IRQHandler+0x204>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a62      	ldr	r2, [pc, #392]	; (8007a58 <DMA1_Channel2_IRQHandler+0x200>)
 80078ce:	fb82 1203 	smull	r1, r2, r2, r3
 80078d2:	1192      	asrs	r2, r2, #6
 80078d4:	17db      	asrs	r3, r3, #31
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	607b      	str	r3, [r7, #4]
		if (pom>0)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	dd4a      	ble.n	8007976 <DMA1_Channel2_IRQHandler+0x11e>
		{
			TxBuffer[i*4+1]='+';
 80078e0:	4b58      	ldr	r3, [pc, #352]	; (8007a44 <DMA1_Channel2_IRQHandler+0x1ec>)
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	b25b      	sxtb	r3, r3
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	3301      	adds	r3, #1
 80078ea:	4a55      	ldr	r2, [pc, #340]	; (8007a40 <DMA1_Channel2_IRQHandler+0x1e8>)
 80078ec:	212b      	movs	r1, #43	; 0x2b
 80078ee:	54d1      	strb	r1, [r2, r3]
			TxBuffer[i*4+2]=(uint8_t)( pom/100+48);
 80078f0:	4b54      	ldr	r3, [pc, #336]	; (8007a44 <DMA1_Channel2_IRQHandler+0x1ec>)
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	b25b      	sxtb	r3, r3
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	1c9a      	adds	r2, r3, #2
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4958      	ldr	r1, [pc, #352]	; (8007a60 <DMA1_Channel2_IRQHandler+0x208>)
 80078fe:	fb81 0103 	smull	r0, r1, r1, r3
 8007902:	1149      	asrs	r1, r1, #5
 8007904:	17db      	asrs	r3, r3, #31
 8007906:	1acb      	subs	r3, r1, r3
 8007908:	b2db      	uxtb	r3, r3
 800790a:	3330      	adds	r3, #48	; 0x30
 800790c:	b2d9      	uxtb	r1, r3
 800790e:	4b4c      	ldr	r3, [pc, #304]	; (8007a40 <DMA1_Channel2_IRQHandler+0x1e8>)
 8007910:	5499      	strb	r1, [r3, r2]
			TxBuffer[i*4+3]=(uint8_t)((pom%100)/10+48);
 8007912:	4b4c      	ldr	r3, [pc, #304]	; (8007a44 <DMA1_Channel2_IRQHandler+0x1ec>)
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	b25b      	sxtb	r3, r3
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	1cd9      	adds	r1, r3, #3
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	4b50      	ldr	r3, [pc, #320]	; (8007a60 <DMA1_Channel2_IRQHandler+0x208>)
 8007920:	fb83 0302 	smull	r0, r3, r3, r2
 8007924:	1158      	asrs	r0, r3, #5
 8007926:	17d3      	asrs	r3, r2, #31
 8007928:	1ac3      	subs	r3, r0, r3
 800792a:	2064      	movs	r0, #100	; 0x64
 800792c:	fb00 f303 	mul.w	r3, r0, r3
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	4a4c      	ldr	r2, [pc, #304]	; (8007a64 <DMA1_Channel2_IRQHandler+0x20c>)
 8007934:	fb82 0203 	smull	r0, r2, r2, r3
 8007938:	1092      	asrs	r2, r2, #2
 800793a:	17db      	asrs	r3, r3, #31
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	b2db      	uxtb	r3, r3
 8007940:	3330      	adds	r3, #48	; 0x30
 8007942:	b2da      	uxtb	r2, r3
 8007944:	4b3e      	ldr	r3, [pc, #248]	; (8007a40 <DMA1_Channel2_IRQHandler+0x1e8>)
 8007946:	545a      	strb	r2, [r3, r1]
			TxBuffer[i*4+4]=(uint8_t)( pom%10+48);
 8007948:	4b3e      	ldr	r3, [pc, #248]	; (8007a44 <DMA1_Channel2_IRQHandler+0x1ec>)
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	b25b      	sxtb	r3, r3
 800794e:	3301      	adds	r3, #1
 8007950:	0098      	lsls	r0, r3, #2
 8007952:	6879      	ldr	r1, [r7, #4]
 8007954:	4b43      	ldr	r3, [pc, #268]	; (8007a64 <DMA1_Channel2_IRQHandler+0x20c>)
 8007956:	fb83 2301 	smull	r2, r3, r3, r1
 800795a:	109a      	asrs	r2, r3, #2
 800795c:	17cb      	asrs	r3, r1, #31
 800795e:	1ad2      	subs	r2, r2, r3
 8007960:	4613      	mov	r3, r2
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	4413      	add	r3, r2
 8007966:	005b      	lsls	r3, r3, #1
 8007968:	1aca      	subs	r2, r1, r3
 800796a:	b2d3      	uxtb	r3, r2
 800796c:	3330      	adds	r3, #48	; 0x30
 800796e:	b2da      	uxtb	r2, r3
 8007970:	4b33      	ldr	r3, [pc, #204]	; (8007a40 <DMA1_Channel2_IRQHandler+0x1e8>)
 8007972:	541a      	strb	r2, [r3, r0]
 8007974:	e04c      	b.n	8007a10 <DMA1_Channel2_IRQHandler+0x1b8>
		}
		else
		{
			TxBuffer[i*4+1]='-';
 8007976:	4b33      	ldr	r3, [pc, #204]	; (8007a44 <DMA1_Channel2_IRQHandler+0x1ec>)
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	b25b      	sxtb	r3, r3
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	3301      	adds	r3, #1
 8007980:	4a2f      	ldr	r2, [pc, #188]	; (8007a40 <DMA1_Channel2_IRQHandler+0x1e8>)
 8007982:	212d      	movs	r1, #45	; 0x2d
 8007984:	54d1      	strb	r1, [r2, r3]
			TxBuffer[i*4+2]=(uint8_t)( (  pom*(-1) )/100+48);
 8007986:	4b2f      	ldr	r3, [pc, #188]	; (8007a44 <DMA1_Channel2_IRQHandler+0x1ec>)
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	b25b      	sxtb	r3, r3
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	1c9a      	adds	r2, r3, #2
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	425b      	negs	r3, r3
 8007994:	4932      	ldr	r1, [pc, #200]	; (8007a60 <DMA1_Channel2_IRQHandler+0x208>)
 8007996:	fb81 0103 	smull	r0, r1, r1, r3
 800799a:	1149      	asrs	r1, r1, #5
 800799c:	17db      	asrs	r3, r3, #31
 800799e:	1acb      	subs	r3, r1, r3
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	3330      	adds	r3, #48	; 0x30
 80079a4:	b2d9      	uxtb	r1, r3
 80079a6:	4b26      	ldr	r3, [pc, #152]	; (8007a40 <DMA1_Channel2_IRQHandler+0x1e8>)
 80079a8:	5499      	strb	r1, [r3, r2]
			TxBuffer[i*4+3]=(uint8_t)( ( (pom*(-1) )%100)/10+48);
 80079aa:	4b26      	ldr	r3, [pc, #152]	; (8007a44 <DMA1_Channel2_IRQHandler+0x1ec>)
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	b25b      	sxtb	r3, r3
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	1cd9      	adds	r1, r3, #3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	425a      	negs	r2, r3
 80079b8:	4b29      	ldr	r3, [pc, #164]	; (8007a60 <DMA1_Channel2_IRQHandler+0x208>)
 80079ba:	fb83 0302 	smull	r0, r3, r3, r2
 80079be:	1158      	asrs	r0, r3, #5
 80079c0:	17d3      	asrs	r3, r2, #31
 80079c2:	1ac3      	subs	r3, r0, r3
 80079c4:	2064      	movs	r0, #100	; 0x64
 80079c6:	fb00 f303 	mul.w	r3, r0, r3
 80079ca:	1ad3      	subs	r3, r2, r3
 80079cc:	4a25      	ldr	r2, [pc, #148]	; (8007a64 <DMA1_Channel2_IRQHandler+0x20c>)
 80079ce:	fb82 0203 	smull	r0, r2, r2, r3
 80079d2:	1092      	asrs	r2, r2, #2
 80079d4:	17db      	asrs	r3, r3, #31
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	3330      	adds	r3, #48	; 0x30
 80079dc:	b2da      	uxtb	r2, r3
 80079de:	4b18      	ldr	r3, [pc, #96]	; (8007a40 <DMA1_Channel2_IRQHandler+0x1e8>)
 80079e0:	545a      	strb	r2, [r3, r1]
			TxBuffer[i*4+4]=(uint8_t)( (  pom*(-1))%10+48);
 80079e2:	4b18      	ldr	r3, [pc, #96]	; (8007a44 <DMA1_Channel2_IRQHandler+0x1ec>)
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	b25b      	sxtb	r3, r3
 80079e8:	3301      	adds	r3, #1
 80079ea:	0098      	lsls	r0, r3, #2
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4259      	negs	r1, r3
 80079f0:	4b1c      	ldr	r3, [pc, #112]	; (8007a64 <DMA1_Channel2_IRQHandler+0x20c>)
 80079f2:	fb83 2301 	smull	r2, r3, r3, r1
 80079f6:	109a      	asrs	r2, r3, #2
 80079f8:	17cb      	asrs	r3, r1, #31
 80079fa:	1ad2      	subs	r2, r2, r3
 80079fc:	4613      	mov	r3, r2
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	4413      	add	r3, r2
 8007a02:	005b      	lsls	r3, r3, #1
 8007a04:	1aca      	subs	r2, r1, r3
 8007a06:	b2d3      	uxtb	r3, r2
 8007a08:	3330      	adds	r3, #48	; 0x30
 8007a0a:	b2da      	uxtb	r2, r3
 8007a0c:	4b0c      	ldr	r3, [pc, #48]	; (8007a40 <DMA1_Channel2_IRQHandler+0x1e8>)
 8007a0e:	541a      	strb	r2, [r3, r0]
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
	int32_t pom;

	TxBuffer[0]='#';
	for (i=0;i<8;i++)
 8007a10:	4b0c      	ldr	r3, [pc, #48]	; (8007a44 <DMA1_Channel2_IRQHandler+0x1ec>)
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	3301      	adds	r3, #1
 8007a18:	b2da      	uxtb	r2, r3
 8007a1a:	4b0a      	ldr	r3, [pc, #40]	; (8007a44 <DMA1_Channel2_IRQHandler+0x1ec>)
 8007a1c:	701a      	strb	r2, [r3, #0]
 8007a1e:	4b09      	ldr	r3, [pc, #36]	; (8007a44 <DMA1_Channel2_IRQHandler+0x1ec>)
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	b25b      	sxtb	r3, r3
 8007a24:	2b07      	cmp	r3, #7
 8007a26:	f77f af21 	ble.w	800786c <DMA1_Channel2_IRQHandler+0x14>
			TxBuffer[i*4+2]=(uint8_t)( (  pom*(-1) )/100+48);
			TxBuffer[i*4+3]=(uint8_t)( ( (pom*(-1) )%100)/10+48);
			TxBuffer[i*4+4]=(uint8_t)( (  pom*(-1))%10+48);
		}
	}
	TxBuffer[33]='~';
 8007a2a:	4b05      	ldr	r3, [pc, #20]	; (8007a40 <DMA1_Channel2_IRQHandler+0x1e8>)
 8007a2c:	227e      	movs	r2, #126	; 0x7e
 8007a2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8007a32:	480d      	ldr	r0, [pc, #52]	; (8007a68 <DMA1_Channel2_IRQHandler+0x210>)
 8007a34:	f7fe fd2a 	bl	800648c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8007a38:	3708      	adds	r7, #8
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	200000cc 	.word	0x200000cc
 8007a44:	2000042d 	.word	0x2000042d
 8007a48:	20000074 	.word	0x20000074
 8007a4c:	200004b8 	.word	0x200004b8
 8007a50:	20000050 	.word	0x20000050
 8007a54:	20000064 	.word	0x20000064
 8007a58:	10624dd3 	.word	0x10624dd3
 8007a5c:	20000068 	.word	0x20000068
 8007a60:	51eb851f 	.word	0x51eb851f
 8007a64:	66666667 	.word	0x66666667
 8007a68:	20000384 	.word	0x20000384

08007a6c <DMA1_Channel3_IRQHandler>:

/**
* @brief This function handles DMA1 channel3 global interrupt.
*/
void DMA1_Channel3_IRQHandler(void)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
	static int8_t tmp_tryb=-1;

	if(RxBuffer[0]=='d')	//Drive
 8007a70:	4b2b      	ldr	r3, [pc, #172]	; (8007b20 <DMA1_Channel3_IRQHandler+0xb4>)
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b64      	cmp	r3, #100	; 0x64
 8007a78:	d10c      	bne.n	8007a94 <DMA1_Channel3_IRQHandler+0x28>
	{
		Status=DRIVE_STATUS;
 8007a7a:	4b2a      	ldr	r3, [pc, #168]	; (8007b24 <DMA1_Channel3_IRQHandler+0xb8>)
 8007a7c:	2202      	movs	r2, #2
 8007a7e:	701a      	strb	r2, [r3, #0]
		Transmit=1;
 8007a80:	4b29      	ldr	r3, [pc, #164]	; (8007b28 <DMA1_Channel3_IRQHandler+0xbc>)
 8007a82:	2201      	movs	r2, #1
 8007a84:	701a      	strb	r2, [r3, #0]
		tryb=tmp_tryb;
 8007a86:	4b29      	ldr	r3, [pc, #164]	; (8007b2c <DMA1_Channel3_IRQHandler+0xc0>)
 8007a88:	781a      	ldrb	r2, [r3, #0]
 8007a8a:	4b29      	ldr	r3, [pc, #164]	; (8007b30 <DMA1_Channel3_IRQHandler+0xc4>)
 8007a8c:	701a      	strb	r2, [r3, #0]
		tmp_tryb=-1;
 8007a8e:	4b27      	ldr	r3, [pc, #156]	; (8007b2c <DMA1_Channel3_IRQHandler+0xc0>)
 8007a90:	22ff      	movs	r2, #255	; 0xff
 8007a92:	701a      	strb	r2, [r3, #0]
	}
	if(RxBuffer[0]=='p')	//Pause
 8007a94:	4b22      	ldr	r3, [pc, #136]	; (8007b20 <DMA1_Channel3_IRQHandler+0xb4>)
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	2b70      	cmp	r3, #112	; 0x70
 8007a9c:	d112      	bne.n	8007ac4 <DMA1_Channel3_IRQHandler+0x58>
	{
		Status=PAUSE_STATUS;
 8007a9e:	4b21      	ldr	r3, [pc, #132]	; (8007b24 <DMA1_Channel3_IRQHandler+0xb8>)
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	701a      	strb	r2, [r3, #0]
		Transmit=1;
 8007aa4:	4b20      	ldr	r3, [pc, #128]	; (8007b28 <DMA1_Channel3_IRQHandler+0xbc>)
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	701a      	strb	r2, [r3, #0]
		tmp_tryb=tryb;
 8007aaa:	4b21      	ldr	r3, [pc, #132]	; (8007b30 <DMA1_Channel3_IRQHandler+0xc4>)
 8007aac:	781a      	ldrb	r2, [r3, #0]
 8007aae:	4b1f      	ldr	r3, [pc, #124]	; (8007b2c <DMA1_Channel3_IRQHandler+0xc0>)
 8007ab0:	701a      	strb	r2, [r3, #0]
		tryb=0;
 8007ab2:	4b1f      	ldr	r3, [pc, #124]	; (8007b30 <DMA1_Channel3_IRQHandler+0xc4>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	701a      	strb	r2, [r3, #0]
		TIM1->CCR1=0;
 8007ab8:	4b1e      	ldr	r3, [pc, #120]	; (8007b34 <DMA1_Channel3_IRQHandler+0xc8>)
 8007aba:	2200      	movs	r2, #0
 8007abc:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2=0;
 8007abe:	4b1d      	ldr	r3, [pc, #116]	; (8007b34 <DMA1_Channel3_IRQHandler+0xc8>)
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if(RxBuffer[0]=='r')	//Reset
 8007ac4:	4b16      	ldr	r3, [pc, #88]	; (8007b20 <DMA1_Channel3_IRQHandler+0xb4>)
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	2b72      	cmp	r3, #114	; 0x72
 8007acc:	d101      	bne.n	8007ad2 <DMA1_Channel3_IRQHandler+0x66>
	{
		NVIC_SystemReset();
 8007ace:	f7ff fe3d 	bl	800774c <NVIC_SystemReset>
	}
	if(RxBuffer[0]=='P')
 8007ad2:	4b13      	ldr	r3, [pc, #76]	; (8007b20 <DMA1_Channel3_IRQHandler+0xb4>)
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	2b50      	cmp	r3, #80	; 0x50
 8007ada:	d108      	bne.n	8007aee <DMA1_Channel3_IRQHandler+0x82>
	{
		tryb=1;
 8007adc:	4b14      	ldr	r3, [pc, #80]	; (8007b30 <DMA1_Channel3_IRQHandler+0xc4>)
 8007ade:	2201      	movs	r2, #1
 8007ae0:	701a      	strb	r2, [r3, #0]
		drive(VEL);
 8007ae2:	20fa      	movs	r0, #250	; 0xfa
 8007ae4:	f7f8 fc1c 	bl	8000320 <drive>
		tryb=0;
 8007ae8:	4b11      	ldr	r3, [pc, #68]	; (8007b30 <DMA1_Channel3_IRQHandler+0xc4>)
 8007aea:	2200      	movs	r2, #0
 8007aec:	701a      	strb	r2, [r3, #0]
	}
	if(RxBuffer[0]=='L') rotary(VELR,-95000);
 8007aee:	4b0c      	ldr	r3, [pc, #48]	; (8007b20 <DMA1_Channel3_IRQHandler+0xb4>)
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b4c      	cmp	r3, #76	; 0x4c
 8007af6:	d104      	bne.n	8007b02 <DMA1_Channel3_IRQHandler+0x96>
 8007af8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8007afc:	490e      	ldr	r1, [pc, #56]	; (8007b38 <DMA1_Channel3_IRQHandler+0xcc>)
 8007afe:	f7f8 fb25 	bl	800014c <rotary>
	if(RxBuffer[0]=='R') rotary(VELR,90000);
 8007b02:	4b07      	ldr	r3, [pc, #28]	; (8007b20 <DMA1_Channel3_IRQHandler+0xb4>)
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	2b52      	cmp	r3, #82	; 0x52
 8007b0a:	d104      	bne.n	8007b16 <DMA1_Channel3_IRQHandler+0xaa>
 8007b0c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8007b10:	490a      	ldr	r1, [pc, #40]	; (8007b3c <DMA1_Channel3_IRQHandler+0xd0>)
 8007b12:	f7f8 fb1b 	bl	800014c <rotary>
  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8007b16:	480a      	ldr	r0, [pc, #40]	; (8007b40 <DMA1_Channel3_IRQHandler+0xd4>)
 8007b18:	f7fe fcb8 	bl	800648c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	200000c4 	.word	0x200000c4
 8007b24:	20000060 	.word	0x20000060
 8007b28:	2000008c 	.word	0x2000008c
 8007b2c:	20000004 	.word	0x20000004
 8007b30:	20000075 	.word	0x20000075
 8007b34:	40012c00 	.word	0x40012c00
 8007b38:	fffe8ce8 	.word	0xfffe8ce8
 8007b3c:	00015f90 	.word	0x00015f90
 8007b40:	200002d0 	.word	0x200002d0

08007b44 <TIM4_IRQHandler>:

/**
* @brief This function handles TIM4 global interrupt.
*/
void TIM4_IRQHandler(void)
{
 8007b44:	b598      	push	{r3, r4, r7, lr}
 8007b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	static uint8_t count=0;
	static int32_t rate[3]={0,0,0},prev_rate=0,tmp_rate[2],prev_vel=0;

	count++;
 8007b48:	4b57      	ldr	r3, [pc, #348]	; (8007ca8 <TIM4_IRQHandler+0x164>)
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	b2da      	uxtb	r2, r3
 8007b50:	4b55      	ldr	r3, [pc, #340]	; (8007ca8 <TIM4_IRQHandler+0x164>)
 8007b52:	701a      	strb	r2, [r3, #0]
	indexer=count%5;
 8007b54:	4b54      	ldr	r3, [pc, #336]	; (8007ca8 <TIM4_IRQHandler+0x164>)
 8007b56:	781a      	ldrb	r2, [r3, #0]
 8007b58:	4b54      	ldr	r3, [pc, #336]	; (8007cac <TIM4_IRQHandler+0x168>)
 8007b5a:	fba3 0302 	umull	r0, r3, r3, r2
 8007b5e:	0899      	lsrs	r1, r3, #2
 8007b60:	460b      	mov	r3, r1
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	440b      	add	r3, r1
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	b2da      	uxtb	r2, r3
 8007b6c:	4b50      	ldr	r3, [pc, #320]	; (8007cb0 <TIM4_IRQHandler+0x16c>)
 8007b6e:	701a      	strb	r2, [r3, #0]
	if(count%2==0)
 8007b70:	4b4d      	ldr	r3, [pc, #308]	; (8007ca8 <TIM4_IRQHandler+0x164>)
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	f003 0301 	and.w	r3, r3, #1
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f040 8086 	bne.w	8007c8c <TIM4_IRQHandler+0x148>
		{
			HAL_GPIO_WritePin(Sensor2_GPIO_Port,Sensor2_Pin,0);
 8007b80:	484c      	ldr	r0, [pc, #304]	; (8007cb4 <TIM4_IRQHandler+0x170>)
 8007b82:	2180      	movs	r1, #128	; 0x80
 8007b84:	2200      	movs	r2, #0
 8007b86:	f7fe fbb1 	bl	80062ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Sensor1_GPIO_Port,Sensor1_Pin,1);
 8007b8a:	484a      	ldr	r0, [pc, #296]	; (8007cb4 <TIM4_IRQHandler+0x170>)
 8007b8c:	2140      	movs	r1, #64	; 0x40
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f7fe fbac 	bl	80062ec <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(Sensor3_GPIO_Port,Sensor3_Pin,1);

			for(i=0;i<6;i++)
 8007b94:	4b48      	ldr	r3, [pc, #288]	; (8007cb8 <TIM4_IRQHandler+0x174>)
 8007b96:	2200      	movs	r2, #0
 8007b98:	701a      	strb	r2, [r3, #0]
 8007b9a:	e071      	b.n	8007c80 <TIM4_IRQHandler+0x13c>
			{
				if(i==1||i==2||i==5) MinMax[i][0]=Max3[i];
 8007b9c:	4b46      	ldr	r3, [pc, #280]	; (8007cb8 <TIM4_IRQHandler+0x174>)
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	b25b      	sxtb	r3, r3
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d009      	beq.n	8007bba <TIM4_IRQHandler+0x76>
 8007ba6:	4b44      	ldr	r3, [pc, #272]	; (8007cb8 <TIM4_IRQHandler+0x174>)
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	b25b      	sxtb	r3, r3
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d004      	beq.n	8007bba <TIM4_IRQHandler+0x76>
 8007bb0:	4b41      	ldr	r3, [pc, #260]	; (8007cb8 <TIM4_IRQHandler+0x174>)
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	b25b      	sxtb	r3, r3
 8007bb6:	2b05      	cmp	r3, #5
 8007bb8:	d10c      	bne.n	8007bd4 <TIM4_IRQHandler+0x90>
 8007bba:	4b3f      	ldr	r3, [pc, #252]	; (8007cb8 <TIM4_IRQHandler+0x174>)
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	b25a      	sxtb	r2, r3
 8007bc0:	4b3d      	ldr	r3, [pc, #244]	; (8007cb8 <TIM4_IRQHandler+0x174>)
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	b259      	sxtb	r1, r3
 8007bc6:	4b3d      	ldr	r3, [pc, #244]	; (8007cbc <TIM4_IRQHandler+0x178>)
 8007bc8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8007bcc:	b299      	uxth	r1, r3
 8007bce:	4b3c      	ldr	r3, [pc, #240]	; (8007cc0 <TIM4_IRQHandler+0x17c>)
 8007bd0:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
				if(i==0||i==3||i==4) MinMax[i][1]=Min3[i];
 8007bd4:	4b38      	ldr	r3, [pc, #224]	; (8007cb8 <TIM4_IRQHandler+0x174>)
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d009      	beq.n	8007bf0 <TIM4_IRQHandler+0xac>
 8007bdc:	4b36      	ldr	r3, [pc, #216]	; (8007cb8 <TIM4_IRQHandler+0x174>)
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	b25b      	sxtb	r3, r3
 8007be2:	2b03      	cmp	r3, #3
 8007be4:	d004      	beq.n	8007bf0 <TIM4_IRQHandler+0xac>
 8007be6:	4b34      	ldr	r3, [pc, #208]	; (8007cb8 <TIM4_IRQHandler+0x174>)
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	b25b      	sxtb	r3, r3
 8007bec:	2b04      	cmp	r3, #4
 8007bee:	d10d      	bne.n	8007c0c <TIM4_IRQHandler+0xc8>
 8007bf0:	4b31      	ldr	r3, [pc, #196]	; (8007cb8 <TIM4_IRQHandler+0x174>)
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	b25b      	sxtb	r3, r3
 8007bf6:	4a30      	ldr	r2, [pc, #192]	; (8007cb8 <TIM4_IRQHandler+0x174>)
 8007bf8:	7812      	ldrb	r2, [r2, #0]
 8007bfa:	b251      	sxtb	r1, r2
 8007bfc:	4a31      	ldr	r2, [pc, #196]	; (8007cc4 <TIM4_IRQHandler+0x180>)
 8007bfe:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8007c02:	b292      	uxth	r2, r2
 8007c04:	492e      	ldr	r1, [pc, #184]	; (8007cc0 <TIM4_IRQHandler+0x17c>)
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	440b      	add	r3, r1
 8007c0a:	805a      	strh	r2, [r3, #2]
				SensorTab[i][indexer]=(MinMax[i][0]-MinMax[i][1])/10;
 8007c0c:	4b2a      	ldr	r3, [pc, #168]	; (8007cb8 <TIM4_IRQHandler+0x174>)
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	b25a      	sxtb	r2, r3
 8007c12:	4b27      	ldr	r3, [pc, #156]	; (8007cb0 <TIM4_IRQHandler+0x16c>)
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	b25c      	sxtb	r4, r3
 8007c18:	4b27      	ldr	r3, [pc, #156]	; (8007cb8 <TIM4_IRQHandler+0x174>)
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	b259      	sxtb	r1, r3
 8007c1e:	4b28      	ldr	r3, [pc, #160]	; (8007cc0 <TIM4_IRQHandler+0x17c>)
 8007c20:	f833 3021 	ldrh.w	r3, [r3, r1, lsl #2]
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	4619      	mov	r1, r3
 8007c28:	4b23      	ldr	r3, [pc, #140]	; (8007cb8 <TIM4_IRQHandler+0x174>)
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	b25b      	sxtb	r3, r3
 8007c2e:	4824      	ldr	r0, [pc, #144]	; (8007cc0 <TIM4_IRQHandler+0x17c>)
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4403      	add	r3, r0
 8007c34:	885b      	ldrh	r3, [r3, #2]
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	1acb      	subs	r3, r1, r3
 8007c3a:	4923      	ldr	r1, [pc, #140]	; (8007cc8 <TIM4_IRQHandler+0x184>)
 8007c3c:	fb81 0103 	smull	r0, r1, r1, r3
 8007c40:	1089      	asrs	r1, r1, #2
 8007c42:	17db      	asrs	r3, r3, #31
 8007c44:	1ac8      	subs	r0, r1, r3
 8007c46:	4921      	ldr	r1, [pc, #132]	; (8007ccc <TIM4_IRQHandler+0x188>)
 8007c48:	4613      	mov	r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	4413      	add	r3, r2
 8007c4e:	4423      	add	r3, r4
 8007c50:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
				Min3[i]=4000;
 8007c54:	4b18      	ldr	r3, [pc, #96]	; (8007cb8 <TIM4_IRQHandler+0x174>)
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	b25a      	sxtb	r2, r3
 8007c5a:	4b1a      	ldr	r3, [pc, #104]	; (8007cc4 <TIM4_IRQHandler+0x180>)
 8007c5c:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8007c60:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				Max3[i]=0;
 8007c64:	4b14      	ldr	r3, [pc, #80]	; (8007cb8 <TIM4_IRQHandler+0x174>)
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	b25a      	sxtb	r2, r3
 8007c6a:	4b14      	ldr	r3, [pc, #80]	; (8007cbc <TIM4_IRQHandler+0x178>)
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		{
			HAL_GPIO_WritePin(Sensor2_GPIO_Port,Sensor2_Pin,0);
			HAL_GPIO_WritePin(Sensor1_GPIO_Port,Sensor1_Pin,1);
//			HAL_GPIO_WritePin(Sensor3_GPIO_Port,Sensor3_Pin,1);

			for(i=0;i<6;i++)
 8007c72:	4b11      	ldr	r3, [pc, #68]	; (8007cb8 <TIM4_IRQHandler+0x174>)
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	3301      	adds	r3, #1
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	4b0e      	ldr	r3, [pc, #56]	; (8007cb8 <TIM4_IRQHandler+0x174>)
 8007c7e:	701a      	strb	r2, [r3, #0]
 8007c80:	4b0d      	ldr	r3, [pc, #52]	; (8007cb8 <TIM4_IRQHandler+0x174>)
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	b25b      	sxtb	r3, r3
 8007c86:	2b05      	cmp	r3, #5
 8007c88:	dd88      	ble.n	8007b9c <TIM4_IRQHandler+0x58>
 8007c8a:	e098      	b.n	8007dbe <TIM4_IRQHandler+0x27a>
				Max3[i]=0;
			}
		}
		else
		{
			HAL_GPIO_WritePin(Sensor1_GPIO_Port,Sensor1_Pin,0);
 8007c8c:	4809      	ldr	r0, [pc, #36]	; (8007cb4 <TIM4_IRQHandler+0x170>)
 8007c8e:	2140      	movs	r1, #64	; 0x40
 8007c90:	2200      	movs	r2, #0
 8007c92:	f7fe fb2b 	bl	80062ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Sensor2_GPIO_Port,Sensor2_Pin,1);
 8007c96:	4807      	ldr	r0, [pc, #28]	; (8007cb4 <TIM4_IRQHandler+0x170>)
 8007c98:	2180      	movs	r1, #128	; 0x80
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f7fe fb26 	bl	80062ec <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(Sensor3_GPIO_Port,Sensor3_Pin,0);

			for(i=0;i<6;i++)
 8007ca0:	4b05      	ldr	r3, [pc, #20]	; (8007cb8 <TIM4_IRQHandler+0x174>)
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	701a      	strb	r2, [r3, #0]
 8007ca6:	e085      	b.n	8007db4 <TIM4_IRQHandler+0x270>
 8007ca8:	20000030 	.word	0x20000030
 8007cac:	cccccccd 	.word	0xcccccccd
 8007cb0:	20000074 	.word	0x20000074
 8007cb4:	40010c00 	.word	0x40010c00
 8007cb8:	2000042d 	.word	0x2000042d
 8007cbc:	200000b8 	.word	0x200000b8
 8007cc0:	2000009c 	.word	0x2000009c
 8007cc4:	20000080 	.word	0x20000080
 8007cc8:	66666667 	.word	0x66666667
 8007ccc:	200004b8 	.word	0x200004b8
			{
				if(i==0||i==3||i==4) MinMax[i][0]=Max3[i];
 8007cd0:	4b9a      	ldr	r3, [pc, #616]	; (8007f3c <TIM4_IRQHandler+0x3f8>)
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d009      	beq.n	8007cec <TIM4_IRQHandler+0x1a8>
 8007cd8:	4b98      	ldr	r3, [pc, #608]	; (8007f3c <TIM4_IRQHandler+0x3f8>)
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	b25b      	sxtb	r3, r3
 8007cde:	2b03      	cmp	r3, #3
 8007ce0:	d004      	beq.n	8007cec <TIM4_IRQHandler+0x1a8>
 8007ce2:	4b96      	ldr	r3, [pc, #600]	; (8007f3c <TIM4_IRQHandler+0x3f8>)
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	b25b      	sxtb	r3, r3
 8007ce8:	2b04      	cmp	r3, #4
 8007cea:	d10c      	bne.n	8007d06 <TIM4_IRQHandler+0x1c2>
 8007cec:	4b93      	ldr	r3, [pc, #588]	; (8007f3c <TIM4_IRQHandler+0x3f8>)
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	b25a      	sxtb	r2, r3
 8007cf2:	4b92      	ldr	r3, [pc, #584]	; (8007f3c <TIM4_IRQHandler+0x3f8>)
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	b259      	sxtb	r1, r3
 8007cf8:	4b91      	ldr	r3, [pc, #580]	; (8007f40 <TIM4_IRQHandler+0x3fc>)
 8007cfa:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8007cfe:	b299      	uxth	r1, r3
 8007d00:	4b90      	ldr	r3, [pc, #576]	; (8007f44 <TIM4_IRQHandler+0x400>)
 8007d02:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
				if(i==1||i==2||i==5) MinMax[i][1]=Min3[i];
 8007d06:	4b8d      	ldr	r3, [pc, #564]	; (8007f3c <TIM4_IRQHandler+0x3f8>)
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	b25b      	sxtb	r3, r3
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d009      	beq.n	8007d24 <TIM4_IRQHandler+0x1e0>
 8007d10:	4b8a      	ldr	r3, [pc, #552]	; (8007f3c <TIM4_IRQHandler+0x3f8>)
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	b25b      	sxtb	r3, r3
 8007d16:	2b02      	cmp	r3, #2
 8007d18:	d004      	beq.n	8007d24 <TIM4_IRQHandler+0x1e0>
 8007d1a:	4b88      	ldr	r3, [pc, #544]	; (8007f3c <TIM4_IRQHandler+0x3f8>)
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	b25b      	sxtb	r3, r3
 8007d20:	2b05      	cmp	r3, #5
 8007d22:	d10d      	bne.n	8007d40 <TIM4_IRQHandler+0x1fc>
 8007d24:	4b85      	ldr	r3, [pc, #532]	; (8007f3c <TIM4_IRQHandler+0x3f8>)
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	b25b      	sxtb	r3, r3
 8007d2a:	4a84      	ldr	r2, [pc, #528]	; (8007f3c <TIM4_IRQHandler+0x3f8>)
 8007d2c:	7812      	ldrb	r2, [r2, #0]
 8007d2e:	b251      	sxtb	r1, r2
 8007d30:	4a85      	ldr	r2, [pc, #532]	; (8007f48 <TIM4_IRQHandler+0x404>)
 8007d32:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8007d36:	b292      	uxth	r2, r2
 8007d38:	4982      	ldr	r1, [pc, #520]	; (8007f44 <TIM4_IRQHandler+0x400>)
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	440b      	add	r3, r1
 8007d3e:	805a      	strh	r2, [r3, #2]
				SensorTab[i][indexer]=(MinMax[i][0]-MinMax[i][1])/10;
 8007d40:	4b7e      	ldr	r3, [pc, #504]	; (8007f3c <TIM4_IRQHandler+0x3f8>)
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	b25a      	sxtb	r2, r3
 8007d46:	4b81      	ldr	r3, [pc, #516]	; (8007f4c <TIM4_IRQHandler+0x408>)
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	b25c      	sxtb	r4, r3
 8007d4c:	4b7b      	ldr	r3, [pc, #492]	; (8007f3c <TIM4_IRQHandler+0x3f8>)
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	b259      	sxtb	r1, r3
 8007d52:	4b7c      	ldr	r3, [pc, #496]	; (8007f44 <TIM4_IRQHandler+0x400>)
 8007d54:	f833 3021 	ldrh.w	r3, [r3, r1, lsl #2]
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	4b77      	ldr	r3, [pc, #476]	; (8007f3c <TIM4_IRQHandler+0x3f8>)
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	b25b      	sxtb	r3, r3
 8007d62:	4878      	ldr	r0, [pc, #480]	; (8007f44 <TIM4_IRQHandler+0x400>)
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	4403      	add	r3, r0
 8007d68:	885b      	ldrh	r3, [r3, #2]
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	1acb      	subs	r3, r1, r3
 8007d6e:	4978      	ldr	r1, [pc, #480]	; (8007f50 <TIM4_IRQHandler+0x40c>)
 8007d70:	fb81 0103 	smull	r0, r1, r1, r3
 8007d74:	1089      	asrs	r1, r1, #2
 8007d76:	17db      	asrs	r3, r3, #31
 8007d78:	1ac8      	subs	r0, r1, r3
 8007d7a:	4976      	ldr	r1, [pc, #472]	; (8007f54 <TIM4_IRQHandler+0x410>)
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4413      	add	r3, r2
 8007d82:	4423      	add	r3, r4
 8007d84:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
				Min3[i]=4000;
 8007d88:	4b6c      	ldr	r3, [pc, #432]	; (8007f3c <TIM4_IRQHandler+0x3f8>)
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	b25a      	sxtb	r2, r3
 8007d8e:	4b6e      	ldr	r3, [pc, #440]	; (8007f48 <TIM4_IRQHandler+0x404>)
 8007d90:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8007d94:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				Max3[i]=0;
 8007d98:	4b68      	ldr	r3, [pc, #416]	; (8007f3c <TIM4_IRQHandler+0x3f8>)
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	b25a      	sxtb	r2, r3
 8007d9e:	4b68      	ldr	r3, [pc, #416]	; (8007f40 <TIM4_IRQHandler+0x3fc>)
 8007da0:	2100      	movs	r1, #0
 8007da2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		{
			HAL_GPIO_WritePin(Sensor1_GPIO_Port,Sensor1_Pin,0);
			HAL_GPIO_WritePin(Sensor2_GPIO_Port,Sensor2_Pin,1);
//			HAL_GPIO_WritePin(Sensor3_GPIO_Port,Sensor3_Pin,0);

			for(i=0;i<6;i++)
 8007da6:	4b65      	ldr	r3, [pc, #404]	; (8007f3c <TIM4_IRQHandler+0x3f8>)
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	3301      	adds	r3, #1
 8007dae:	b2da      	uxtb	r2, r3
 8007db0:	4b62      	ldr	r3, [pc, #392]	; (8007f3c <TIM4_IRQHandler+0x3f8>)
 8007db2:	701a      	strb	r2, [r3, #0]
 8007db4:	4b61      	ldr	r3, [pc, #388]	; (8007f3c <TIM4_IRQHandler+0x3f8>)
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	b25b      	sxtb	r3, r3
 8007dba:	2b05      	cmp	r3, #5
 8007dbc:	dd88      	ble.n	8007cd0 <TIM4_IRQHandler+0x18c>
				Min3[i]=4000;
				Max3[i]=0;
			}
		}

	test3[0]=SensorTab[4][indexer];
 8007dbe:	4b63      	ldr	r3, [pc, #396]	; (8007f4c <TIM4_IRQHandler+0x408>)
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	b25a      	sxtb	r2, r3
 8007dc4:	4b63      	ldr	r3, [pc, #396]	; (8007f54 <TIM4_IRQHandler+0x410>)
 8007dc6:	3214      	adds	r2, #20
 8007dc8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007dcc:	4b62      	ldr	r3, [pc, #392]	; (8007f58 <TIM4_IRQHandler+0x414>)
 8007dce:	601a      	str	r2, [r3, #0]

	/******************************************* Measurement rotational speed ***********************************/
	if(count%4==3)
 8007dd0:	4b62      	ldr	r3, [pc, #392]	; (8007f5c <TIM4_IRQHandler+0x418>)
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	f003 0303 	and.w	r3, r3, #3
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	2b03      	cmp	r3, #3
 8007ddc:	d12b      	bne.n	8007e36 <TIM4_IRQHandler+0x2f2>
	{
		tmp_rate[0]=TIM2->CNT;
 8007dde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de4:	461a      	mov	r2, r3
 8007de6:	4b5e      	ldr	r3, [pc, #376]	; (8007f60 <TIM4_IRQHandler+0x41c>)
 8007de8:	601a      	str	r2, [r3, #0]
		tmp_rate[1]=TIM3->CNT;
 8007dea:	4b5e      	ldr	r3, [pc, #376]	; (8007f64 <TIM4_IRQHandler+0x420>)
 8007dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dee:	461a      	mov	r2, r3
 8007df0:	4b5b      	ldr	r3, [pc, #364]	; (8007f60 <TIM4_IRQHandler+0x41c>)
 8007df2:	605a      	str	r2, [r3, #4]
		rate[0]=( tmp_rate[0]-tmp_rate[1] )*13; //64/4
 8007df4:	4b5a      	ldr	r3, [pc, #360]	; (8007f60 <TIM4_IRQHandler+0x41c>)
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	4b59      	ldr	r3, [pc, #356]	; (8007f60 <TIM4_IRQHandler+0x41c>)
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	1ad2      	subs	r2, r2, r3
 8007dfe:	4613      	mov	r3, r2
 8007e00:	005b      	lsls	r3, r3, #1
 8007e02:	4413      	add	r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	441a      	add	r2, r3
 8007e08:	4b57      	ldr	r3, [pc, #348]	; (8007f68 <TIM4_IRQHandler+0x424>)
 8007e0a:	601a      	str	r2, [r3, #0]
		lin_vel=((tmp_rate[1]-16384)+(tmp_rate[0]-16384))*8;// 17/2
 8007e0c:	4b54      	ldr	r3, [pc, #336]	; (8007f60 <TIM4_IRQHandler+0x41c>)
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	f5a3 4280 	sub.w	r2, r3, #16384	; 0x4000
 8007e14:	4b52      	ldr	r3, [pc, #328]	; (8007f60 <TIM4_IRQHandler+0x41c>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8007e1c:	4413      	add	r3, r2
 8007e1e:	00da      	lsls	r2, r3, #3
 8007e20:	4b52      	ldr	r3, [pc, #328]	; (8007f6c <TIM4_IRQHandler+0x428>)
 8007e22:	601a      	str	r2, [r3, #0]
		TIM3->CNT=16384;
 8007e24:	4b4f      	ldr	r3, [pc, #316]	; (8007f64 <TIM4_IRQHandler+0x420>)
 8007e26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007e2a:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2->CNT=16384;
 8007e2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007e34:	625a      	str	r2, [r3, #36]	; 0x24
	}
	rate[1]=((Read_AXIS(0x2C)-dryf)*700)/10000;
 8007e36:	202c      	movs	r0, #44	; 0x2c
 8007e38:	f7f9 fc02 	bl	8001640 <Read_AXIS>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	461a      	mov	r2, r3
 8007e40:	4b4b      	ldr	r3, [pc, #300]	; (8007f70 <TIM4_IRQHandler+0x42c>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8007e4a:	fb02 f303 	mul.w	r3, r2, r3
 8007e4e:	4a49      	ldr	r2, [pc, #292]	; (8007f74 <TIM4_IRQHandler+0x430>)
 8007e50:	fb82 1203 	smull	r1, r2, r2, r3
 8007e54:	1312      	asrs	r2, r2, #12
 8007e56:	17db      	asrs	r3, r3, #31
 8007e58:	1ad2      	subs	r2, r2, r3
 8007e5a:	4b43      	ldr	r3, [pc, #268]	; (8007f68 <TIM4_IRQHandler+0x424>)
 8007e5c:	605a      	str	r2, [r3, #4]
	rot_vel=(rate[1]+rate[1])/2;
 8007e5e:	4b42      	ldr	r3, [pc, #264]	; (8007f68 <TIM4_IRQHandler+0x424>)
 8007e60:	685a      	ldr	r2, [r3, #4]
 8007e62:	4b41      	ldr	r3, [pc, #260]	; (8007f68 <TIM4_IRQHandler+0x424>)
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	4413      	add	r3, r2
 8007e68:	0fda      	lsrs	r2, r3, #31
 8007e6a:	4413      	add	r3, r2
 8007e6c:	105b      	asrs	r3, r3, #1
 8007e6e:	461a      	mov	r2, r3
 8007e70:	4b41      	ldr	r3, [pc, #260]	; (8007f78 <TIM4_IRQHandler+0x434>)
 8007e72:	601a      	str	r2, [r3, #0]
	angle +=(prev_rate + rot_vel)/2;
 8007e74:	4b41      	ldr	r3, [pc, #260]	; (8007f7c <TIM4_IRQHandler+0x438>)
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	4b3f      	ldr	r3, [pc, #252]	; (8007f78 <TIM4_IRQHandler+0x434>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	0fda      	lsrs	r2, r3, #31
 8007e80:	4413      	add	r3, r2
 8007e82:	105b      	asrs	r3, r3, #1
 8007e84:	461a      	mov	r2, r3
 8007e86:	4b3e      	ldr	r3, [pc, #248]	; (8007f80 <TIM4_IRQHandler+0x43c>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	441a      	add	r2, r3
 8007e8c:	4b3c      	ldr	r3, [pc, #240]	; (8007f80 <TIM4_IRQHandler+0x43c>)
 8007e8e:	601a      	str	r2, [r3, #0]
	angle1+=rate[0];
 8007e90:	4b35      	ldr	r3, [pc, #212]	; (8007f68 <TIM4_IRQHandler+0x424>)
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	4b3b      	ldr	r3, [pc, #236]	; (8007f84 <TIM4_IRQHandler+0x440>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	441a      	add	r2, r3
 8007e9a:	4b3a      	ldr	r3, [pc, #232]	; (8007f84 <TIM4_IRQHandler+0x440>)
 8007e9c:	601a      	str	r2, [r3, #0]
	distance +=(prev_vel + lin_vel)/2; // [um]
 8007e9e:	4b3a      	ldr	r3, [pc, #232]	; (8007f88 <TIM4_IRQHandler+0x444>)
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	4b32      	ldr	r3, [pc, #200]	; (8007f6c <TIM4_IRQHandler+0x428>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	0fda      	lsrs	r2, r3, #31
 8007eaa:	4413      	add	r3, r2
 8007eac:	105b      	asrs	r3, r3, #1
 8007eae:	461a      	mov	r2, r3
 8007eb0:	4b36      	ldr	r3, [pc, #216]	; (8007f8c <TIM4_IRQHandler+0x448>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	441a      	add	r2, r3
 8007eb6:	4b35      	ldr	r3, [pc, #212]	; (8007f8c <TIM4_IRQHandler+0x448>)
 8007eb8:	601a      	str	r2, [r3, #0]

	prev_rate = rot_vel;
 8007eba:	4b2f      	ldr	r3, [pc, #188]	; (8007f78 <TIM4_IRQHandler+0x434>)
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	4b2f      	ldr	r3, [pc, #188]	; (8007f7c <TIM4_IRQHandler+0x438>)
 8007ec0:	601a      	str	r2, [r3, #0]
	prev_vel = lin_vel;
 8007ec2:	4b2a      	ldr	r3, [pc, #168]	; (8007f6c <TIM4_IRQHandler+0x428>)
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	4b30      	ldr	r3, [pc, #192]	; (8007f88 <TIM4_IRQHandler+0x444>)
 8007ec8:	601a      	str	r2, [r3, #0]

	test3[4]=test3[1]-angle;
 8007eca:	4b23      	ldr	r3, [pc, #140]	; (8007f58 <TIM4_IRQHandler+0x414>)
 8007ecc:	685a      	ldr	r2, [r3, #4]
 8007ece:	4b2c      	ldr	r3, [pc, #176]	; (8007f80 <TIM4_IRQHandler+0x43c>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	1ad2      	subs	r2, r2, r3
 8007ed4:	4b20      	ldr	r3, [pc, #128]	; (8007f58 <TIM4_IRQHandler+0x414>)
 8007ed6:	611a      	str	r2, [r3, #16]
	if ((test3[4]<1000 && test3[4]>0)||(test3[4]>-1000 && test3[4]<0)) test3[2]++;
 8007ed8:	4b1f      	ldr	r3, [pc, #124]	; (8007f58 <TIM4_IRQHandler+0x414>)
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ee0:	da03      	bge.n	8007eea <TIM4_IRQHandler+0x3a6>
 8007ee2:	4b1d      	ldr	r3, [pc, #116]	; (8007f58 <TIM4_IRQHandler+0x414>)
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	dc08      	bgt.n	8007efc <TIM4_IRQHandler+0x3b8>
 8007eea:	4b1b      	ldr	r3, [pc, #108]	; (8007f58 <TIM4_IRQHandler+0x414>)
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8007ef2:	dd08      	ble.n	8007f06 <TIM4_IRQHandler+0x3c2>
 8007ef4:	4b18      	ldr	r3, [pc, #96]	; (8007f58 <TIM4_IRQHandler+0x414>)
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	da04      	bge.n	8007f06 <TIM4_IRQHandler+0x3c2>
 8007efc:	4b16      	ldr	r3, [pc, #88]	; (8007f58 <TIM4_IRQHandler+0x414>)
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	1c5a      	adds	r2, r3, #1
 8007f02:	4b15      	ldr	r3, [pc, #84]	; (8007f58 <TIM4_IRQHandler+0x414>)
 8007f04:	609a      	str	r2, [r3, #8]

	/******************************************* Drive straight ***********************************/
	if(tryb==1)
 8007f06:	4b22      	ldr	r3, [pc, #136]	; (8007f90 <TIM4_IRQHandler+0x44c>)
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	b25b      	sxtb	r3, r3
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	f040 8172 	bne.w	80081f6 <TIM4_IRQHandler+0x6b2>
	{
		le_fr=SensorTab[2][indexer]-dys0[2];
 8007f12:	4b0e      	ldr	r3, [pc, #56]	; (8007f4c <TIM4_IRQHandler+0x408>)
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	b25a      	sxtb	r2, r3
 8007f18:	4b0e      	ldr	r3, [pc, #56]	; (8007f54 <TIM4_IRQHandler+0x410>)
 8007f1a:	320a      	adds	r2, #10
 8007f1c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007f20:	4b1c      	ldr	r3, [pc, #112]	; (8007f94 <TIM4_IRQHandler+0x450>)
 8007f22:	889b      	ldrh	r3, [r3, #4]
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	1ad2      	subs	r2, r2, r3
 8007f28:	4b1b      	ldr	r3, [pc, #108]	; (8007f98 <TIM4_IRQHandler+0x454>)
 8007f2a:	601a      	str	r2, [r3, #0]
		le_back=SensorTab[0][indexer]-dys0[0];
 8007f2c:	4b07      	ldr	r3, [pc, #28]	; (8007f4c <TIM4_IRQHandler+0x408>)
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	b25a      	sxtb	r2, r3
 8007f32:	4b08      	ldr	r3, [pc, #32]	; (8007f54 <TIM4_IRQHandler+0x410>)
 8007f34:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007f38:	e030      	b.n	8007f9c <TIM4_IRQHandler+0x458>
 8007f3a:	bf00      	nop
 8007f3c:	2000042d 	.word	0x2000042d
 8007f40:	200000b8 	.word	0x200000b8
 8007f44:	2000009c 	.word	0x2000009c
 8007f48:	20000080 	.word	0x20000080
 8007f4c:	20000074 	.word	0x20000074
 8007f50:	66666667 	.word	0x66666667
 8007f54:	200004b8 	.word	0x200004b8
 8007f58:	20000100 	.word	0x20000100
 8007f5c:	20000030 	.word	0x20000030
 8007f60:	20000034 	.word	0x20000034
 8007f64:	40000400 	.word	0x40000400
 8007f68:	2000003c 	.word	0x2000003c
 8007f6c:	2000005c 	.word	0x2000005c
 8007f70:	20000070 	.word	0x20000070
 8007f74:	68db8bad 	.word	0x68db8bad
 8007f78:	200003f8 	.word	0x200003f8
 8007f7c:	20000048 	.word	0x20000048
 8007f80:	20000064 	.word	0x20000064
 8007f84:	2000006c 	.word	0x2000006c
 8007f88:	2000004c 	.word	0x2000004c
 8007f8c:	20000068 	.word	0x20000068
 8007f90:	20000075 	.word	0x20000075
 8007f94:	20000050 	.word	0x20000050
 8007f98:	20000130 	.word	0x20000130
 8007f9c:	4b98      	ldr	r3, [pc, #608]	; (8008200 <TIM4_IRQHandler+0x6bc>)
 8007f9e:	881b      	ldrh	r3, [r3, #0]
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	1ad2      	subs	r2, r2, r3
 8007fa4:	4b97      	ldr	r3, [pc, #604]	; (8008204 <TIM4_IRQHandler+0x6c0>)
 8007fa6:	601a      	str	r2, [r3, #0]
		ri_fr=SensorTab[3][indexer]-dys0[3];
 8007fa8:	4b97      	ldr	r3, [pc, #604]	; (8008208 <TIM4_IRQHandler+0x6c4>)
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	b25a      	sxtb	r2, r3
 8007fae:	4b97      	ldr	r3, [pc, #604]	; (800820c <TIM4_IRQHandler+0x6c8>)
 8007fb0:	320f      	adds	r2, #15
 8007fb2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007fb6:	4b92      	ldr	r3, [pc, #584]	; (8008200 <TIM4_IRQHandler+0x6bc>)
 8007fb8:	88db      	ldrh	r3, [r3, #6]
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	1ad2      	subs	r2, r2, r3
 8007fbe:	4b94      	ldr	r3, [pc, #592]	; (8008210 <TIM4_IRQHandler+0x6cc>)
 8007fc0:	601a      	str	r2, [r3, #0]
		ri_back=SensorTab[1][indexer]-dys0[1];
 8007fc2:	4b91      	ldr	r3, [pc, #580]	; (8008208 <TIM4_IRQHandler+0x6c4>)
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	b25a      	sxtb	r2, r3
 8007fc8:	4b90      	ldr	r3, [pc, #576]	; (800820c <TIM4_IRQHandler+0x6c8>)
 8007fca:	3205      	adds	r2, #5
 8007fcc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007fd0:	4b8b      	ldr	r3, [pc, #556]	; (8008200 <TIM4_IRQHandler+0x6bc>)
 8007fd2:	885b      	ldrh	r3, [r3, #2]
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	1ad2      	subs	r2, r2, r3
 8007fd8:	4b8e      	ldr	r3, [pc, #568]	; (8008214 <TIM4_IRQHandler+0x6d0>)
 8007fda:	601a      	str	r2, [r3, #0]
//		{
//			error= (ri_fr-ri_back)*5/2 + ri_back*3/2 - angle1/80;
//		}
//		else error=-angle1/30;

		if (le_fr>SSL_Tresh &&  le_back>SSL_Tresh && abs(le_fr-le_back)<80)
 8007fdc:	4b8e      	ldr	r3, [pc, #568]	; (8008218 <TIM4_IRQHandler+0x6d4>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8007fe4:	db44      	blt.n	8008070 <TIM4_IRQHandler+0x52c>
 8007fe6:	4b87      	ldr	r3, [pc, #540]	; (8008204 <TIM4_IRQHandler+0x6c0>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8007fee:	db3f      	blt.n	8008070 <TIM4_IRQHandler+0x52c>
 8007ff0:	4b89      	ldr	r3, [pc, #548]	; (8008218 <TIM4_IRQHandler+0x6d4>)
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	4b83      	ldr	r3, [pc, #524]	; (8008204 <TIM4_IRQHandler+0x6c0>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	1ad3      	subs	r3, r2, r3
 8007ffa:	f113 0f4f 	cmn.w	r3, #79	; 0x4f
 8007ffe:	db37      	blt.n	8008070 <TIM4_IRQHandler+0x52c>
 8008000:	4b85      	ldr	r3, [pc, #532]	; (8008218 <TIM4_IRQHandler+0x6d4>)
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	4b7f      	ldr	r3, [pc, #508]	; (8008204 <TIM4_IRQHandler+0x6c0>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	2b4f      	cmp	r3, #79	; 0x4f
 800800c:	dc30      	bgt.n	8008070 <TIM4_IRQHandler+0x52c>
		{
			error=(le_back-le_fr)*5/2 - le_back*3/2 - le_back*abs(le_back)/160 - angle1/80;
 800800e:	4b7d      	ldr	r3, [pc, #500]	; (8008204 <TIM4_IRQHandler+0x6c0>)
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	4b81      	ldr	r3, [pc, #516]	; (8008218 <TIM4_IRQHandler+0x6d4>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	1ad2      	subs	r2, r2, r3
 8008018:	4613      	mov	r3, r2
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	4413      	add	r3, r2
 800801e:	0fda      	lsrs	r2, r3, #31
 8008020:	4413      	add	r3, r2
 8008022:	105b      	asrs	r3, r3, #1
 8008024:	4619      	mov	r1, r3
 8008026:	4b77      	ldr	r3, [pc, #476]	; (8008204 <TIM4_IRQHandler+0x6c0>)
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	4613      	mov	r3, r2
 800802c:	005b      	lsls	r3, r3, #1
 800802e:	4413      	add	r3, r2
 8008030:	0fda      	lsrs	r2, r3, #31
 8008032:	4413      	add	r3, r2
 8008034:	105b      	asrs	r3, r3, #1
 8008036:	1aca      	subs	r2, r1, r3
 8008038:	4b72      	ldr	r3, [pc, #456]	; (8008204 <TIM4_IRQHandler+0x6c0>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	bfb8      	it	lt
 8008040:	425b      	neglt	r3, r3
 8008042:	4970      	ldr	r1, [pc, #448]	; (8008204 <TIM4_IRQHandler+0x6c0>)
 8008044:	6809      	ldr	r1, [r1, #0]
 8008046:	fb01 f303 	mul.w	r3, r1, r3
 800804a:	4974      	ldr	r1, [pc, #464]	; (800821c <TIM4_IRQHandler+0x6d8>)
 800804c:	fb81 0103 	smull	r0, r1, r1, r3
 8008050:	1189      	asrs	r1, r1, #6
 8008052:	17db      	asrs	r3, r3, #31
 8008054:	1acb      	subs	r3, r1, r3
 8008056:	1ad2      	subs	r2, r2, r3
 8008058:	4b71      	ldr	r3, [pc, #452]	; (8008220 <TIM4_IRQHandler+0x6dc>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	496f      	ldr	r1, [pc, #444]	; (800821c <TIM4_IRQHandler+0x6d8>)
 800805e:	fb81 0103 	smull	r0, r1, r1, r3
 8008062:	1149      	asrs	r1, r1, #5
 8008064:	17db      	asrs	r3, r3, #31
 8008066:	1acb      	subs	r3, r1, r3
 8008068:	1ad2      	subs	r2, r2, r3
 800806a:	4b6e      	ldr	r3, [pc, #440]	; (8008224 <TIM4_IRQHandler+0x6e0>)
 800806c:	601a      	str	r2, [r3, #0]
 800806e:	e055      	b.n	800811c <TIM4_IRQHandler+0x5d8>
		}
		else if(ri_fr>SSR_Tresh && ri_back>SSR_Tresh && abs(ri_fr-ri_back)<80)
 8008070:	4b67      	ldr	r3, [pc, #412]	; (8008210 <TIM4_IRQHandler+0x6cc>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8008078:	db44      	blt.n	8008104 <TIM4_IRQHandler+0x5c0>
 800807a:	4b66      	ldr	r3, [pc, #408]	; (8008214 <TIM4_IRQHandler+0x6d0>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8008082:	db3f      	blt.n	8008104 <TIM4_IRQHandler+0x5c0>
 8008084:	4b62      	ldr	r3, [pc, #392]	; (8008210 <TIM4_IRQHandler+0x6cc>)
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	4b62      	ldr	r3, [pc, #392]	; (8008214 <TIM4_IRQHandler+0x6d0>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	1ad3      	subs	r3, r2, r3
 800808e:	f113 0f4f 	cmn.w	r3, #79	; 0x4f
 8008092:	db37      	blt.n	8008104 <TIM4_IRQHandler+0x5c0>
 8008094:	4b5e      	ldr	r3, [pc, #376]	; (8008210 <TIM4_IRQHandler+0x6cc>)
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	4b5e      	ldr	r3, [pc, #376]	; (8008214 <TIM4_IRQHandler+0x6d0>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	2b4f      	cmp	r3, #79	; 0x4f
 80080a0:	dc30      	bgt.n	8008104 <TIM4_IRQHandler+0x5c0>
		{
			error= (ri_fr-ri_back)*5/2 + ri_back*3/2 +ri_back*abs(ri_back)/160 - angle1/80;
 80080a2:	4b5b      	ldr	r3, [pc, #364]	; (8008210 <TIM4_IRQHandler+0x6cc>)
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	4b5b      	ldr	r3, [pc, #364]	; (8008214 <TIM4_IRQHandler+0x6d0>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	1ad2      	subs	r2, r2, r3
 80080ac:	4613      	mov	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	4413      	add	r3, r2
 80080b2:	0fda      	lsrs	r2, r3, #31
 80080b4:	4413      	add	r3, r2
 80080b6:	105b      	asrs	r3, r3, #1
 80080b8:	4619      	mov	r1, r3
 80080ba:	4b56      	ldr	r3, [pc, #344]	; (8008214 <TIM4_IRQHandler+0x6d0>)
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	4613      	mov	r3, r2
 80080c0:	005b      	lsls	r3, r3, #1
 80080c2:	4413      	add	r3, r2
 80080c4:	0fda      	lsrs	r2, r3, #31
 80080c6:	4413      	add	r3, r2
 80080c8:	105b      	asrs	r3, r3, #1
 80080ca:	18ca      	adds	r2, r1, r3
 80080cc:	4b51      	ldr	r3, [pc, #324]	; (8008214 <TIM4_IRQHandler+0x6d0>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	bfb8      	it	lt
 80080d4:	425b      	neglt	r3, r3
 80080d6:	494f      	ldr	r1, [pc, #316]	; (8008214 <TIM4_IRQHandler+0x6d0>)
 80080d8:	6809      	ldr	r1, [r1, #0]
 80080da:	fb01 f303 	mul.w	r3, r1, r3
 80080de:	494f      	ldr	r1, [pc, #316]	; (800821c <TIM4_IRQHandler+0x6d8>)
 80080e0:	fb81 0103 	smull	r0, r1, r1, r3
 80080e4:	1189      	asrs	r1, r1, #6
 80080e6:	17db      	asrs	r3, r3, #31
 80080e8:	1acb      	subs	r3, r1, r3
 80080ea:	441a      	add	r2, r3
 80080ec:	4b4c      	ldr	r3, [pc, #304]	; (8008220 <TIM4_IRQHandler+0x6dc>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	494a      	ldr	r1, [pc, #296]	; (800821c <TIM4_IRQHandler+0x6d8>)
 80080f2:	fb81 0103 	smull	r0, r1, r1, r3
 80080f6:	1149      	asrs	r1, r1, #5
 80080f8:	17db      	asrs	r3, r3, #31
 80080fa:	1acb      	subs	r3, r1, r3
 80080fc:	1ad2      	subs	r2, r2, r3
 80080fe:	4b49      	ldr	r3, [pc, #292]	; (8008224 <TIM4_IRQHandler+0x6e0>)
 8008100:	601a      	str	r2, [r3, #0]
 8008102:	e00b      	b.n	800811c <TIM4_IRQHandler+0x5d8>
		}
		else error=-angle1/30;
 8008104:	4b46      	ldr	r3, [pc, #280]	; (8008220 <TIM4_IRQHandler+0x6dc>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	425b      	negs	r3, r3
 800810a:	4a47      	ldr	r2, [pc, #284]	; (8008228 <TIM4_IRQHandler+0x6e4>)
 800810c:	fb82 1203 	smull	r1, r2, r2, r3
 8008110:	441a      	add	r2, r3
 8008112:	1112      	asrs	r2, r2, #4
 8008114:	17db      	asrs	r3, r3, #31
 8008116:	1ad2      	subs	r2, r2, r3
 8008118:	4b42      	ldr	r3, [pc, #264]	; (8008224 <TIM4_IRQHandler+0x6e0>)
 800811a:	601a      	str	r2, [r3, #0]

		propocjonal=error*K_drive;
 800811c:	4b41      	ldr	r3, [pc, #260]	; (8008224 <TIM4_IRQHandler+0x6e0>)
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	4613      	mov	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	4413      	add	r3, r2
 8008126:	0fda      	lsrs	r2, r3, #31
 8008128:	4413      	add	r3, r2
 800812a:	105b      	asrs	r3, r3, #1
 800812c:	461a      	mov	r2, r3
 800812e:	4b3f      	ldr	r3, [pc, #252]	; (800822c <TIM4_IRQHandler+0x6e8>)
 8008130:	601a      	str	r2, [r3, #0]

		integral+=error*I_drive;
 8008132:	4b3f      	ldr	r3, [pc, #252]	; (8008230 <TIM4_IRQHandler+0x6ec>)
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	4b3e      	ldr	r3, [pc, #248]	; (8008230 <TIM4_IRQHandler+0x6ec>)
 8008138:	601a      	str	r2, [r3, #0]
		if (integral>200) integral=100;
 800813a:	4b3d      	ldr	r3, [pc, #244]	; (8008230 <TIM4_IRQHandler+0x6ec>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2bc8      	cmp	r3, #200	; 0xc8
 8008140:	dd02      	ble.n	8008148 <TIM4_IRQHandler+0x604>
 8008142:	4b3b      	ldr	r3, [pc, #236]	; (8008230 <TIM4_IRQHandler+0x6ec>)
 8008144:	2264      	movs	r2, #100	; 0x64
 8008146:	601a      	str	r2, [r3, #0]
		if (integral<-200) integral=-100;
 8008148:	4b39      	ldr	r3, [pc, #228]	; (8008230 <TIM4_IRQHandler+0x6ec>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 8008150:	da03      	bge.n	800815a <TIM4_IRQHandler+0x616>
 8008152:	4b37      	ldr	r3, [pc, #220]	; (8008230 <TIM4_IRQHandler+0x6ec>)
 8008154:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8008158:	601a      	str	r2, [r3, #0]

		derivative=(error-error2)*D_drive;
 800815a:	4b32      	ldr	r3, [pc, #200]	; (8008224 <TIM4_IRQHandler+0x6e0>)
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	4b35      	ldr	r3, [pc, #212]	; (8008234 <TIM4_IRQHandler+0x6f0>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	22fa      	movs	r2, #250	; 0xfa
 8008166:	fb02 f203 	mul.w	r2, r2, r3
 800816a:	4b33      	ldr	r3, [pc, #204]	; (8008238 <TIM4_IRQHandler+0x6f4>)
 800816c:	601a      	str	r2, [r3, #0]
		error2=error;
 800816e:	4b2d      	ldr	r3, [pc, #180]	; (8008224 <TIM4_IRQHandler+0x6e0>)
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	4b30      	ldr	r3, [pc, #192]	; (8008234 <TIM4_IRQHandler+0x6f0>)
 8008174:	601a      	str	r2, [r3, #0]
		regulator=propocjonal+integral+derivative;
 8008176:	4b2d      	ldr	r3, [pc, #180]	; (800822c <TIM4_IRQHandler+0x6e8>)
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	4b2d      	ldr	r3, [pc, #180]	; (8008230 <TIM4_IRQHandler+0x6ec>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	441a      	add	r2, r3
 8008180:	4b2d      	ldr	r3, [pc, #180]	; (8008238 <TIM4_IRQHandler+0x6f4>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	441a      	add	r2, r3
 8008186:	4b2d      	ldr	r3, [pc, #180]	; (800823c <TIM4_IRQHandler+0x6f8>)
 8008188:	601a      	str	r2, [r3, #0]

		speed[0]=VEL-regulator;
 800818a:	4b2c      	ldr	r3, [pc, #176]	; (800823c <TIM4_IRQHandler+0x6f8>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f1c3 02fa 	rsb	r2, r3, #250	; 0xfa
 8008192:	4b2b      	ldr	r3, [pc, #172]	; (8008240 <TIM4_IRQHandler+0x6fc>)
 8008194:	601a      	str	r2, [r3, #0]
		speed[1]=VEL+regulator;
 8008196:	4b29      	ldr	r3, [pc, #164]	; (800823c <TIM4_IRQHandler+0x6f8>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 800819e:	4b28      	ldr	r3, [pc, #160]	; (8008240 <TIM4_IRQHandler+0x6fc>)
 80081a0:	605a      	str	r2, [r3, #4]

		if(speed[0]>999) speed[0]=999;
 80081a2:	4b27      	ldr	r3, [pc, #156]	; (8008240 <TIM4_IRQHandler+0x6fc>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081aa:	db04      	blt.n	80081b6 <TIM4_IRQHandler+0x672>
 80081ac:	4b24      	ldr	r3, [pc, #144]	; (8008240 <TIM4_IRQHandler+0x6fc>)
 80081ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80081b2:	601a      	str	r2, [r3, #0]
 80081b4:	e006      	b.n	80081c4 <TIM4_IRQHandler+0x680>
		else if(speed[0]<0) speed[0]=0;
 80081b6:	4b22      	ldr	r3, [pc, #136]	; (8008240 <TIM4_IRQHandler+0x6fc>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	da02      	bge.n	80081c4 <TIM4_IRQHandler+0x680>
 80081be:	4b20      	ldr	r3, [pc, #128]	; (8008240 <TIM4_IRQHandler+0x6fc>)
 80081c0:	2200      	movs	r2, #0
 80081c2:	601a      	str	r2, [r3, #0]
		if(speed[1]>999) speed[1]=999;
 80081c4:	4b1e      	ldr	r3, [pc, #120]	; (8008240 <TIM4_IRQHandler+0x6fc>)
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081cc:	db04      	blt.n	80081d8 <TIM4_IRQHandler+0x694>
 80081ce:	4b1c      	ldr	r3, [pc, #112]	; (8008240 <TIM4_IRQHandler+0x6fc>)
 80081d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80081d4:	605a      	str	r2, [r3, #4]
 80081d6:	e006      	b.n	80081e6 <TIM4_IRQHandler+0x6a2>
		else if(speed[1]<0) speed[1]=0;
 80081d8:	4b19      	ldr	r3, [pc, #100]	; (8008240 <TIM4_IRQHandler+0x6fc>)
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	da02      	bge.n	80081e6 <TIM4_IRQHandler+0x6a2>
 80081e0:	4b17      	ldr	r3, [pc, #92]	; (8008240 <TIM4_IRQHandler+0x6fc>)
 80081e2:	2200      	movs	r2, #0
 80081e4:	605a      	str	r2, [r3, #4]

		TIM1->CCR1=speed[0];
 80081e6:	4b17      	ldr	r3, [pc, #92]	; (8008244 <TIM4_IRQHandler+0x700>)
 80081e8:	4a15      	ldr	r2, [pc, #84]	; (8008240 <TIM4_IRQHandler+0x6fc>)
 80081ea:	6812      	ldr	r2, [r2, #0]
 80081ec:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2=speed[1];
 80081ee:	4b15      	ldr	r3, [pc, #84]	; (8008244 <TIM4_IRQHandler+0x700>)
 80081f0:	4a13      	ldr	r2, [pc, #76]	; (8008240 <TIM4_IRQHandler+0x6fc>)
 80081f2:	6852      	ldr	r2, [r2, #4]
 80081f4:	639a      	str	r2, [r3, #56]	; 0x38
	}

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80081f6:	4814      	ldr	r0, [pc, #80]	; (8008248 <TIM4_IRQHandler+0x704>)
 80081f8:	f7fa fa98 	bl	800272c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80081fc:	bd98      	pop	{r3, r4, r7, pc}
 80081fe:	bf00      	nop
 8008200:	20000050 	.word	0x20000050
 8008204:	2000012c 	.word	0x2000012c
 8008208:	20000074 	.word	0x20000074
 800820c:	200004b8 	.word	0x200004b8
 8008210:	20000128 	.word	0x20000128
 8008214:	20000134 	.word	0x20000134
 8008218:	20000130 	.word	0x20000130
 800821c:	66666667 	.word	0x66666667
 8008220:	2000006c 	.word	0x2000006c
 8008224:	200000f4 	.word	0x200000f4
 8008228:	88888889 	.word	0x88888889
 800822c:	200000fc 	.word	0x200000fc
 8008230:	20000114 	.word	0x20000114
 8008234:	20000124 	.word	0x20000124
 8008238:	20000078 	.word	0x20000078
 800823c:	20000090 	.word	0x20000090
 8008240:	20000678 	.word	0x20000678
 8008244:	40012c00 	.word	0x40012c00
 8008248:	20000294 	.word	0x20000294

0800824c <USART3_IRQHandler>:

/**
* @brief This function handles USART3 global interrupt.
*/
void USART3_IRQHandler(void)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8008250:	4801      	ldr	r0, [pc, #4]	; (8008258 <USART3_IRQHandler+0xc>)
 8008252:	f7f9 fc8d 	bl	8001b70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8008256:	bd80      	pop	{r7, pc}
 8008258:	20000308 	.word	0x20000308

0800825c <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(Status==STOP_STATUS) Status=DRIVE_STATUS;
 8008260:	4b07      	ldr	r3, [pc, #28]	; (8008280 <EXTI15_10_IRQHandler+0x24>)
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d103      	bne.n	8008270 <EXTI15_10_IRQHandler+0x14>
 8008268:	4b05      	ldr	r3, [pc, #20]	; (8008280 <EXTI15_10_IRQHandler+0x24>)
 800826a:	2202      	movs	r2, #2
 800826c:	701a      	strb	r2, [r3, #0]
 800826e:	e002      	b.n	8008276 <EXTI15_10_IRQHandler+0x1a>
	else Status=STOP_STATUS;
 8008270:	4b03      	ldr	r3, [pc, #12]	; (8008280 <EXTI15_10_IRQHandler+0x24>)
 8008272:	2200      	movs	r2, #0
 8008274:	701a      	strb	r2, [r3, #0]


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8008276:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800827a:	f7fe f84f 	bl	800631c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800827e:	bd80      	pop	{r7, pc}
 8008280:	20000060 	.word	0x20000060

08008284 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800828a:	4b10      	ldr	r3, [pc, #64]	; (80082cc <HAL_MspInit+0x48>)
 800828c:	4a0f      	ldr	r2, [pc, #60]	; (80082cc <HAL_MspInit+0x48>)
 800828e:	6992      	ldr	r2, [r2, #24]
 8008290:	f042 0201 	orr.w	r2, r2, #1
 8008294:	619a      	str	r2, [r3, #24]
 8008296:	4b0d      	ldr	r3, [pc, #52]	; (80082cc <HAL_MspInit+0x48>)
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	f003 0301 	and.w	r3, r3, #1
 800829e:	607b      	str	r3, [r7, #4]
 80082a0:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80082a2:	2003      	movs	r0, #3
 80082a4:	f7fe fbce 	bl	8006a44 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80082a8:	f04f 30ff 	mov.w	r0, #4294967295
 80082ac:	2100      	movs	r1, #0
 80082ae:	2200      	movs	r2, #0
 80082b0:	f7fe fbd2 	bl	8006a58 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80082b4:	4b06      	ldr	r3, [pc, #24]	; (80082d0 <HAL_MspInit+0x4c>)
 80082b6:	4a06      	ldr	r2, [pc, #24]	; (80082d0 <HAL_MspInit+0x4c>)
 80082b8:	6852      	ldr	r2, [r2, #4]
 80082ba:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 80082be:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80082c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	40021000 	.word	0x40021000
 80082d0:	40010000 	.word	0x40010000

080082d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b088      	sub	sp, #32
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	4b29      	ldr	r3, [pc, #164]	; (8008388 <HAL_ADC_MspInit+0xb4>)
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d14c      	bne.n	8008380 <HAL_ADC_MspInit+0xac>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __ADC1_CLK_ENABLE();
 80082e6:	4b29      	ldr	r3, [pc, #164]	; (800838c <HAL_ADC_MspInit+0xb8>)
 80082e8:	4a28      	ldr	r2, [pc, #160]	; (800838c <HAL_ADC_MspInit+0xb8>)
 80082ea:	6992      	ldr	r2, [r2, #24]
 80082ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082f0:	619a      	str	r2, [r3, #24]
 80082f2:	4b26      	ldr	r3, [pc, #152]	; (800838c <HAL_ADC_MspInit+0xb8>)
 80082f4:	699b      	ldr	r3, [r3, #24]
 80082f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082fa:	60fb      	str	r3, [r7, #12]
 80082fc:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = A2_Pin|A1_Pin|A8_Pin|A7_Pin;
 80082fe:	2333      	movs	r3, #51	; 0x33
 8008300:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008302:	2303      	movs	r3, #3
 8008304:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008306:	f107 0310 	add.w	r3, r7, #16
 800830a:	4821      	ldr	r0, [pc, #132]	; (8008390 <HAL_ADC_MspInit+0xbc>)
 800830c:	4619      	mov	r1, r3
 800830e:	f7fd fe8f 	bl	8006030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CHECK_Pin|A4_Pin|A6_Pin;
 8008312:	23d0      	movs	r3, #208	; 0xd0
 8008314:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008316:	2303      	movs	r3, #3
 8008318:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800831a:	f107 0310 	add.w	r3, r7, #16
 800831e:	481d      	ldr	r0, [pc, #116]	; (8008394 <HAL_ADC_MspInit+0xc0>)
 8008320:	4619      	mov	r1, r3
 8008322:	f7fd fe85 	bl	8006030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A5_Pin|A3_Pin;
 8008326:	2303      	movs	r3, #3
 8008328:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800832a:	2303      	movs	r3, #3
 800832c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800832e:	f107 0310 	add.w	r3, r7, #16
 8008332:	4819      	ldr	r0, [pc, #100]	; (8008398 <HAL_ADC_MspInit+0xc4>)
 8008334:	4619      	mov	r1, r3
 8008336:	f7fd fe7b 	bl	8006030 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA1_Channel1;
 800833a:	4b18      	ldr	r3, [pc, #96]	; (800839c <HAL_ADC_MspInit+0xc8>)
 800833c:	4a18      	ldr	r2, [pc, #96]	; (80083a0 <HAL_ADC_MspInit+0xcc>)
 800833e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008340:	4b16      	ldr	r3, [pc, #88]	; (800839c <HAL_ADC_MspInit+0xc8>)
 8008342:	2200      	movs	r2, #0
 8008344:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008346:	4b15      	ldr	r3, [pc, #84]	; (800839c <HAL_ADC_MspInit+0xc8>)
 8008348:	2200      	movs	r2, #0
 800834a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800834c:	4b13      	ldr	r3, [pc, #76]	; (800839c <HAL_ADC_MspInit+0xc8>)
 800834e:	2280      	movs	r2, #128	; 0x80
 8008350:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008352:	4b12      	ldr	r3, [pc, #72]	; (800839c <HAL_ADC_MspInit+0xc8>)
 8008354:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008358:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800835a:	4b10      	ldr	r3, [pc, #64]	; (800839c <HAL_ADC_MspInit+0xc8>)
 800835c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008360:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8008362:	4b0e      	ldr	r3, [pc, #56]	; (800839c <HAL_ADC_MspInit+0xc8>)
 8008364:	2220      	movs	r2, #32
 8008366:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8008368:	4b0c      	ldr	r3, [pc, #48]	; (800839c <HAL_ADC_MspInit+0xc8>)
 800836a:	2200      	movs	r2, #0
 800836c:	61da      	str	r2, [r3, #28]
    HAL_DMA_Init(&hdma_adc1);
 800836e:	480b      	ldr	r0, [pc, #44]	; (800839c <HAL_ADC_MspInit+0xc8>)
 8008370:	f7fd fff6 	bl	8006360 <HAL_DMA_Init>

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a09      	ldr	r2, [pc, #36]	; (800839c <HAL_ADC_MspInit+0xc8>)
 8008378:	621a      	str	r2, [r3, #32]
 800837a:	4b08      	ldr	r3, [pc, #32]	; (800839c <HAL_ADC_MspInit+0xc8>)
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8008380:	3720      	adds	r7, #32
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	40012400 	.word	0x40012400
 800838c:	40021000 	.word	0x40021000
 8008390:	40011000 	.word	0x40011000
 8008394:	40010800 	.word	0x40010800
 8008398:	40010c00 	.word	0x40010c00
 800839c:	20000430 	.word	0x20000430
 80083a0:	40020008 	.word	0x40020008

080083a4 <HAL_I2C_MspInit>:
  /* USER CODE END ADC1_MspDeInit 1 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b088      	sub	sp, #32
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	4b12      	ldr	r3, [pc, #72]	; (80083fc <HAL_I2C_MspInit+0x58>)
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d11e      	bne.n	80083f4 <HAL_I2C_MspInit+0x50>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80083b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80083ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80083bc:	2312      	movs	r3, #18
 80083be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80083c0:	2303      	movs	r3, #3
 80083c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083c4:	f107 0310 	add.w	r3, r7, #16
 80083c8:	480d      	ldr	r0, [pc, #52]	; (8008400 <HAL_I2C_MspInit+0x5c>)
 80083ca:	4619      	mov	r1, r3
 80083cc:	f7fd fe30 	bl	8006030 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80083d0:	4b0c      	ldr	r3, [pc, #48]	; (8008404 <HAL_I2C_MspInit+0x60>)
 80083d2:	4a0c      	ldr	r2, [pc, #48]	; (8008404 <HAL_I2C_MspInit+0x60>)
 80083d4:	6852      	ldr	r2, [r2, #4]
 80083d6:	f042 0202 	orr.w	r2, r2, #2
 80083da:	605a      	str	r2, [r3, #4]
    /* Peripheral clock enable */
    __I2C1_CLK_ENABLE();
 80083dc:	4b0a      	ldr	r3, [pc, #40]	; (8008408 <HAL_I2C_MspInit+0x64>)
 80083de:	4a0a      	ldr	r2, [pc, #40]	; (8008408 <HAL_I2C_MspInit+0x64>)
 80083e0:	69d2      	ldr	r2, [r2, #28]
 80083e2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80083e6:	61da      	str	r2, [r3, #28]
 80083e8:	4b07      	ldr	r3, [pc, #28]	; (8008408 <HAL_I2C_MspInit+0x64>)
 80083ea:	69db      	ldr	r3, [r3, #28]
 80083ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083f0:	60fb      	str	r3, [r7, #12]
 80083f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80083f4:	3720      	adds	r7, #32
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	40005400 	.word	0x40005400
 8008400:	40010c00 	.word	0x40010c00
 8008404:	40010000 	.word	0x40010000
 8008408:	40021000 	.word	0x40021000

0800840c <HAL_RTC_MspInit>:
  /* USER CODE END I2C1_MspDeInit 1 */

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]

  if(hrtc->Instance==RTC)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	4b11      	ldr	r3, [pc, #68]	; (8008460 <HAL_RTC_MspInit+0x54>)
 800841a:	429a      	cmp	r2, r3
 800841c:	d11d      	bne.n	800845a <HAL_RTC_MspInit+0x4e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800841e:	f7fd f8df 	bl	80055e0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8008422:	4b10      	ldr	r3, [pc, #64]	; (8008464 <HAL_RTC_MspInit+0x58>)
 8008424:	4a0f      	ldr	r2, [pc, #60]	; (8008464 <HAL_RTC_MspInit+0x58>)
 8008426:	69d2      	ldr	r2, [r2, #28]
 8008428:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800842c:	61da      	str	r2, [r3, #28]
 800842e:	4b0d      	ldr	r3, [pc, #52]	; (8008464 <HAL_RTC_MspInit+0x58>)
 8008430:	69db      	ldr	r3, [r3, #28]
 8008432:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008436:	60fb      	str	r3, [r7, #12]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800843e:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	fa93 f3a3 	rbit	r3, r3
 8008446:	613b      	str	r3, [r7, #16]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8008448:	693b      	ldr	r3, [r7, #16]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800844a:	fab3 f383 	clz	r3, r3
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	461a      	mov	r2, r3
 8008452:	4b05      	ldr	r3, [pc, #20]	; (8008468 <HAL_RTC_MspInit+0x5c>)
 8008454:	4413      	add	r3, r2
 8008456:	2201      	movs	r2, #1
 8008458:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800845a:	3718      	adds	r7, #24
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}
 8008460:	40002800 	.word	0x40002800
 8008464:	40021000 	.word	0x40021000
 8008468:	42420400 	.word	0x42420400

0800846c <HAL_SPI_MspInit>:
  /* USER CODE END RTC_MspDeInit 1 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b088      	sub	sp, #32
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI2)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	4b15      	ldr	r3, [pc, #84]	; (80084d0 <HAL_SPI_MspInit+0x64>)
 800847a:	429a      	cmp	r2, r3
 800847c:	d125      	bne.n	80084ca <HAL_SPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __SPI2_CLK_ENABLE();
 800847e:	4b15      	ldr	r3, [pc, #84]	; (80084d4 <HAL_SPI_MspInit+0x68>)
 8008480:	4a14      	ldr	r2, [pc, #80]	; (80084d4 <HAL_SPI_MspInit+0x68>)
 8008482:	69d2      	ldr	r2, [r2, #28]
 8008484:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008488:	61da      	str	r2, [r3, #28]
 800848a:	4b12      	ldr	r3, [pc, #72]	; (80084d4 <HAL_SPI_MspInit+0x68>)
 800848c:	69db      	ldr	r3, [r3, #28]
 800848e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008492:	60fb      	str	r3, [r7, #12]
 8008494:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8008496:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800849a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800849c:	2302      	movs	r3, #2
 800849e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80084a0:	2303      	movs	r3, #3
 80084a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084a4:	f107 0310 	add.w	r3, r7, #16
 80084a8:	480b      	ldr	r0, [pc, #44]	; (80084d8 <HAL_SPI_MspInit+0x6c>)
 80084aa:	4619      	mov	r1, r3
 80084ac:	f7fd fdc0 	bl	8006030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80084b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80084b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80084b6:	2300      	movs	r3, #0
 80084b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084ba:	2300      	movs	r3, #0
 80084bc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084be:	f107 0310 	add.w	r3, r7, #16
 80084c2:	4805      	ldr	r0, [pc, #20]	; (80084d8 <HAL_SPI_MspInit+0x6c>)
 80084c4:	4619      	mov	r1, r3
 80084c6:	f7fd fdb3 	bl	8006030 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80084ca:	3720      	adds	r7, #32
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	40003800 	.word	0x40003800
 80084d4:	40021000 	.word	0x40021000
 80084d8:	40010c00 	.word	0x40010c00

080084dc <HAL_TIM_Base_MspInit>:
  /* USER CODE END SPI2_MspDeInit 1 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b088      	sub	sp, #32
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM1)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	4b1c      	ldr	r3, [pc, #112]	; (800855c <HAL_TIM_Base_MspInit+0x80>)
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d119      	bne.n	8008522 <HAL_TIM_Base_MspInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __TIM1_CLK_ENABLE();
 80084ee:	4b1c      	ldr	r3, [pc, #112]	; (8008560 <HAL_TIM_Base_MspInit+0x84>)
 80084f0:	4a1b      	ldr	r2, [pc, #108]	; (8008560 <HAL_TIM_Base_MspInit+0x84>)
 80084f2:	6992      	ldr	r2, [r2, #24]
 80084f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084f8:	619a      	str	r2, [r3, #24]
 80084fa:	4b19      	ldr	r3, [pc, #100]	; (8008560 <HAL_TIM_Base_MspInit+0x84>)
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008502:	60fb      	str	r3, [r7, #12]
 8008504:	68fb      	ldr	r3, [r7, #12]
  
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = PWM_B_Pin|PWM_A_Pin;
 8008506:	f44f 7340 	mov.w	r3, #768	; 0x300
 800850a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800850c:	2302      	movs	r3, #2
 800850e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8008510:	2302      	movs	r3, #2
 8008512:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008514:	f107 0310 	add.w	r3, r7, #16
 8008518:	4812      	ldr	r0, [pc, #72]	; (8008564 <HAL_TIM_Base_MspInit+0x88>)
 800851a:	4619      	mov	r1, r3
 800851c:	f7fd fd88 	bl	8006030 <HAL_GPIO_Init>
 8008520:	e018      	b.n	8008554 <HAL_TIM_Base_MspInit+0x78>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	4b10      	ldr	r3, [pc, #64]	; (8008568 <HAL_TIM_Base_MspInit+0x8c>)
 8008528:	429a      	cmp	r2, r3
 800852a:	d113      	bne.n	8008554 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __TIM4_CLK_ENABLE();
 800852c:	4b0c      	ldr	r3, [pc, #48]	; (8008560 <HAL_TIM_Base_MspInit+0x84>)
 800852e:	4a0c      	ldr	r2, [pc, #48]	; (8008560 <HAL_TIM_Base_MspInit+0x84>)
 8008530:	69d2      	ldr	r2, [r2, #28]
 8008532:	f042 0204 	orr.w	r2, r2, #4
 8008536:	61da      	str	r2, [r3, #28]
 8008538:	4b09      	ldr	r3, [pc, #36]	; (8008560 <HAL_TIM_Base_MspInit+0x84>)
 800853a:	69db      	ldr	r3, [r3, #28]
 800853c:	f003 0304 	and.w	r3, r3, #4
 8008540:	60bb      	str	r3, [r7, #8]
 8008542:	68bb      	ldr	r3, [r7, #8]
  /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8008544:	201e      	movs	r0, #30
 8008546:	2100      	movs	r1, #0
 8008548:	2200      	movs	r2, #0
 800854a:	f7fe fa85 	bl	8006a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800854e:	201e      	movs	r0, #30
 8008550:	f7fe fa9e 	bl	8006a90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8008554:	3720      	adds	r7, #32
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	40012c00 	.word	0x40012c00
 8008560:	40021000 	.word	0x40021000
 8008564:	40010800 	.word	0x40010800
 8008568:	40000800 	.word	0x40000800

0800856c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b088      	sub	sp, #32
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_encoder->Instance==TIM2)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800857c:	d118      	bne.n	80085b0 <HAL_TIM_Encoder_MspInit+0x44>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __TIM2_CLK_ENABLE();
 800857e:	4b1f      	ldr	r3, [pc, #124]	; (80085fc <HAL_TIM_Encoder_MspInit+0x90>)
 8008580:	4a1e      	ldr	r2, [pc, #120]	; (80085fc <HAL_TIM_Encoder_MspInit+0x90>)
 8008582:	69d2      	ldr	r2, [r2, #28]
 8008584:	f042 0201 	orr.w	r2, r2, #1
 8008588:	61da      	str	r2, [r3, #28]
 800858a:	4b1c      	ldr	r3, [pc, #112]	; (80085fc <HAL_TIM_Encoder_MspInit+0x90>)
 800858c:	69db      	ldr	r3, [r3, #28]
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	60fb      	str	r3, [r7, #12]
 8008594:	68fb      	ldr	r3, [r7, #12]
  
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = ENC_A_1_Pin|ENC_A_2_Pin;
 8008596:	2303      	movs	r3, #3
 8008598:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800859a:	2300      	movs	r3, #0
 800859c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800859e:	2300      	movs	r3, #0
 80085a0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085a2:	f107 0310 	add.w	r3, r7, #16
 80085a6:	4816      	ldr	r0, [pc, #88]	; (8008600 <HAL_TIM_Encoder_MspInit+0x94>)
 80085a8:	4619      	mov	r1, r3
 80085aa:	f7fd fd41 	bl	8006030 <HAL_GPIO_Init>
 80085ae:	e022      	b.n	80085f6 <HAL_TIM_Encoder_MspInit+0x8a>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_encoder->Instance==TIM3)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	4b13      	ldr	r3, [pc, #76]	; (8008604 <HAL_TIM_Encoder_MspInit+0x98>)
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d11d      	bne.n	80085f6 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __TIM3_CLK_ENABLE();
 80085ba:	4b10      	ldr	r3, [pc, #64]	; (80085fc <HAL_TIM_Encoder_MspInit+0x90>)
 80085bc:	4a0f      	ldr	r2, [pc, #60]	; (80085fc <HAL_TIM_Encoder_MspInit+0x90>)
 80085be:	69d2      	ldr	r2, [r2, #28]
 80085c0:	f042 0202 	orr.w	r2, r2, #2
 80085c4:	61da      	str	r2, [r3, #28]
 80085c6:	4b0d      	ldr	r3, [pc, #52]	; (80085fc <HAL_TIM_Encoder_MspInit+0x90>)
 80085c8:	69db      	ldr	r3, [r3, #28]
 80085ca:	f003 0302 	and.w	r3, r3, #2
 80085ce:	60bb      	str	r3, [r7, #8]
 80085d0:	68bb      	ldr	r3, [r7, #8]
  
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = ENC_B_1_Pin|ENC_B_2_Pin;
 80085d2:	23c0      	movs	r3, #192	; 0xc0
 80085d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80085d6:	2300      	movs	r3, #0
 80085d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085da:	2300      	movs	r3, #0
 80085dc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80085de:	f107 0310 	add.w	r3, r7, #16
 80085e2:	4809      	ldr	r0, [pc, #36]	; (8008608 <HAL_TIM_Encoder_MspInit+0x9c>)
 80085e4:	4619      	mov	r1, r3
 80085e6:	f7fd fd23 	bl	8006030 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80085ea:	4b08      	ldr	r3, [pc, #32]	; (800860c <HAL_TIM_Encoder_MspInit+0xa0>)
 80085ec:	4a07      	ldr	r2, [pc, #28]	; (800860c <HAL_TIM_Encoder_MspInit+0xa0>)
 80085ee:	6852      	ldr	r2, [r2, #4]
 80085f0:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
 80085f4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80085f6:	3720      	adds	r7, #32
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	40021000 	.word	0x40021000
 8008600:	40010800 	.word	0x40010800
 8008604:	40000400 	.word	0x40000400
 8008608:	40011000 	.word	0x40011000
 800860c:	40010000 	.word	0x40010000

08008610 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b088      	sub	sp, #32
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART3)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	4b3a      	ldr	r3, [pc, #232]	; (8008708 <HAL_UART_MspInit+0xf8>)
 800861e:	429a      	cmp	r2, r3
 8008620:	d16f      	bne.n	8008702 <HAL_UART_MspInit+0xf2>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __USART3_CLK_ENABLE();
 8008622:	4b3a      	ldr	r3, [pc, #232]	; (800870c <HAL_UART_MspInit+0xfc>)
 8008624:	4a39      	ldr	r2, [pc, #228]	; (800870c <HAL_UART_MspInit+0xfc>)
 8008626:	69d2      	ldr	r2, [r2, #28]
 8008628:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800862c:	61da      	str	r2, [r3, #28]
 800862e:	4b37      	ldr	r3, [pc, #220]	; (800870c <HAL_UART_MspInit+0xfc>)
 8008630:	69db      	ldr	r3, [r3, #28]
 8008632:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008636:	60fb      	str	r3, [r7, #12]
 8008638:	68fb      	ldr	r3, [r7, #12]
  
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = Bluetooth_Tx_Pin;
 800863a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800863e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008640:	2302      	movs	r3, #2
 8008642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008644:	2303      	movs	r3, #3
 8008646:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Bluetooth_Tx_GPIO_Port, &GPIO_InitStruct);
 8008648:	f107 0310 	add.w	r3, r7, #16
 800864c:	4830      	ldr	r0, [pc, #192]	; (8008710 <HAL_UART_MspInit+0x100>)
 800864e:	4619      	mov	r1, r3
 8008650:	f7fd fcee 	bl	8006030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Bluetooth_Rx_Pin;
 8008654:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008658:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800865a:	2300      	movs	r3, #0
 800865c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800865e:	2300      	movs	r3, #0
 8008660:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(Bluetooth_Rx_GPIO_Port, &GPIO_InitStruct);
 8008662:	f107 0310 	add.w	r3, r7, #16
 8008666:	482a      	ldr	r0, [pc, #168]	; (8008710 <HAL_UART_MspInit+0x100>)
 8008668:	4619      	mov	r1, r3
 800866a:	f7fd fce1 	bl	8006030 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_usart3_tx.Instance = DMA1_Channel2;
 800866e:	4b29      	ldr	r3, [pc, #164]	; (8008714 <HAL_UART_MspInit+0x104>)
 8008670:	4a29      	ldr	r2, [pc, #164]	; (8008718 <HAL_UART_MspInit+0x108>)
 8008672:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008674:	4b27      	ldr	r3, [pc, #156]	; (8008714 <HAL_UART_MspInit+0x104>)
 8008676:	2210      	movs	r2, #16
 8008678:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800867a:	4b26      	ldr	r3, [pc, #152]	; (8008714 <HAL_UART_MspInit+0x104>)
 800867c:	2200      	movs	r2, #0
 800867e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008680:	4b24      	ldr	r3, [pc, #144]	; (8008714 <HAL_UART_MspInit+0x104>)
 8008682:	2280      	movs	r2, #128	; 0x80
 8008684:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008686:	4b23      	ldr	r3, [pc, #140]	; (8008714 <HAL_UART_MspInit+0x104>)
 8008688:	2200      	movs	r2, #0
 800868a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800868c:	4b21      	ldr	r3, [pc, #132]	; (8008714 <HAL_UART_MspInit+0x104>)
 800868e:	2200      	movs	r2, #0
 8008690:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8008692:	4b20      	ldr	r3, [pc, #128]	; (8008714 <HAL_UART_MspInit+0x104>)
 8008694:	2200      	movs	r2, #0
 8008696:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008698:	4b1e      	ldr	r3, [pc, #120]	; (8008714 <HAL_UART_MspInit+0x104>)
 800869a:	2200      	movs	r2, #0
 800869c:	61da      	str	r2, [r3, #28]
    HAL_DMA_Init(&hdma_usart3_tx);
 800869e:	481d      	ldr	r0, [pc, #116]	; (8008714 <HAL_UART_MspInit+0x104>)
 80086a0:	f7fd fe5e 	bl	8006360 <HAL_DMA_Init>

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a1b      	ldr	r2, [pc, #108]	; (8008714 <HAL_UART_MspInit+0x104>)
 80086a8:	631a      	str	r2, [r3, #48]	; 0x30
 80086aa:	4b1a      	ldr	r3, [pc, #104]	; (8008714 <HAL_UART_MspInit+0x104>)
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	625a      	str	r2, [r3, #36]	; 0x24

    hdma_usart3_rx.Instance = DMA1_Channel3;
 80086b0:	4b1a      	ldr	r3, [pc, #104]	; (800871c <HAL_UART_MspInit+0x10c>)
 80086b2:	4a1b      	ldr	r2, [pc, #108]	; (8008720 <HAL_UART_MspInit+0x110>)
 80086b4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80086b6:	4b19      	ldr	r3, [pc, #100]	; (800871c <HAL_UART_MspInit+0x10c>)
 80086b8:	2200      	movs	r2, #0
 80086ba:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80086bc:	4b17      	ldr	r3, [pc, #92]	; (800871c <HAL_UART_MspInit+0x10c>)
 80086be:	2200      	movs	r2, #0
 80086c0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80086c2:	4b16      	ldr	r3, [pc, #88]	; (800871c <HAL_UART_MspInit+0x10c>)
 80086c4:	2280      	movs	r2, #128	; 0x80
 80086c6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80086c8:	4b14      	ldr	r3, [pc, #80]	; (800871c <HAL_UART_MspInit+0x10c>)
 80086ca:	2200      	movs	r2, #0
 80086cc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80086ce:	4b13      	ldr	r3, [pc, #76]	; (800871c <HAL_UART_MspInit+0x10c>)
 80086d0:	2200      	movs	r2, #0
 80086d2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80086d4:	4b11      	ldr	r3, [pc, #68]	; (800871c <HAL_UART_MspInit+0x10c>)
 80086d6:	2220      	movs	r2, #32
 80086d8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80086da:	4b10      	ldr	r3, [pc, #64]	; (800871c <HAL_UART_MspInit+0x10c>)
 80086dc:	2200      	movs	r2, #0
 80086de:	61da      	str	r2, [r3, #28]
    HAL_DMA_Init(&hdma_usart3_rx);
 80086e0:	480e      	ldr	r0, [pc, #56]	; (800871c <HAL_UART_MspInit+0x10c>)
 80086e2:	f7fd fe3d 	bl	8006360 <HAL_DMA_Init>

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4a0c      	ldr	r2, [pc, #48]	; (800871c <HAL_UART_MspInit+0x10c>)
 80086ea:	635a      	str	r2, [r3, #52]	; 0x34
 80086ec:	4b0b      	ldr	r3, [pc, #44]	; (800871c <HAL_UART_MspInit+0x10c>)
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 80086f2:	2027      	movs	r0, #39	; 0x27
 80086f4:	2102      	movs	r1, #2
 80086f6:	2200      	movs	r2, #0
 80086f8:	f7fe f9ae 	bl	8006a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80086fc:	2027      	movs	r0, #39	; 0x27
 80086fe:	f7fe f9c7 	bl	8006a90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8008702:	3720      	adds	r7, #32
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	40004800 	.word	0x40004800
 800870c:	40021000 	.word	0x40021000
 8008710:	40010c00 	.word	0x40010c00
 8008714:	20000384 	.word	0x20000384
 8008718:	4002001c 	.word	0x4002001c
 800871c:	200002d0 	.word	0x200002d0
 8008720:	40020030 	.word	0x40020030

08008724 <main>:
int16_t X=0,Y=0,Z=0;

/* USER CODE END 0 */

int main(void)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 800872a:	f7fe ff79 	bl	8007620 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800872e:	f000 f8d5 	bl	80088dc <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008732:	f000 fb63 	bl	8008dfc <MX_GPIO_Init>
  MX_DMA_Init();
 8008736:	f000 fb35 	bl	8008da4 <MX_DMA_Init>
  MX_ADC1_Init();
 800873a:	f000 f91d 	bl	8008978 <MX_ADC1_Init>
  MX_I2C1_Init();
 800873e:	f000 f977 	bl	8008a30 <MX_I2C1_Init>
  MX_RTC_Init();
 8008742:	f000 f99d 	bl	8008a80 <MX_RTC_Init>
  MX_SPI2_Init();
 8008746:	f000 f9cd 	bl	8008ae4 <MX_SPI2_Init>
  MX_TIM1_Init();
 800874a:	f000 f9fb 	bl	8008b44 <MX_TIM1_Init>
  MX_TIM2_Init();
 800874e:	f000 fa5f 	bl	8008c10 <MX_TIM2_Init>
  MX_TIM3_Init();
 8008752:	f000 fa97 	bl	8008c84 <MX_TIM3_Init>
  MX_TIM4_Init();
 8008756:	f000 fad1 	bl	8008cfc <MX_TIM4_Init>
  MX_USART3_UART_Init();
 800875a:	f000 faff 	bl	8008d5c <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800875e:	4851      	ldr	r0, [pc, #324]	; (80088a4 <main+0x180>)
 8008760:	2118      	movs	r1, #24
 8008762:	f7f9 ffab 	bl	80026bc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8008766:	4850      	ldr	r0, [pc, #320]	; (80088a8 <main+0x184>)
 8008768:	2118      	movs	r1, #24
 800876a:	f7f9 ffa7 	bl	80026bc <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800876e:	484f      	ldr	r0, [pc, #316]	; (80088ac <main+0x188>)
 8008770:	2100      	movs	r1, #0
 8008772:	f7f9 fee5 	bl	8002540 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8008776:	484d      	ldr	r0, [pc, #308]	; (80088ac <main+0x188>)
 8008778:	2104      	movs	r1, #4
 800877a:	f7f9 fee1 	bl	8002540 <HAL_TIM_PWM_Start>


    // Start ADC DMA
  HAL_ADC_Start(&hadc1);
 800877e:	484c      	ldr	r0, [pc, #304]	; (80088b0 <main+0x18c>)
 8008780:	f7fe fb5a 	bl	8006e38 <HAL_ADC_Start>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8008784:	484a      	ldr	r0, [pc, #296]	; (80088b0 <main+0x18c>)
 8008786:	f7fe f9c5 	bl	8006b14 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcData, 6);
 800878a:	4849      	ldr	r0, [pc, #292]	; (80088b0 <main+0x18c>)
 800878c:	4949      	ldr	r1, [pc, #292]	; (80088b4 <main+0x190>)
 800878e:	2206      	movs	r2, #6
 8008790:	f7fe fc02 	bl	8006f98 <HAL_ADC_Start_DMA>

  HAL_UART_MspInit(&huart3);
 8008794:	4848      	ldr	r0, [pc, #288]	; (80088b8 <main+0x194>)
 8008796:	f7ff ff3b 	bl	8008610 <HAL_UART_MspInit>

  HAL_TIM_Base_Start(&htim4);
 800879a:	4848      	ldr	r0, [pc, #288]	; (80088bc <main+0x198>)
 800879c:	f7f9 fe36 	bl	800240c <HAL_TIM_Base_Start>

  HAL_UART_Receive_DMA(&huart3,(uint8_t*)RxBuffer,1);
 80087a0:	4845      	ldr	r0, [pc, #276]	; (80088b8 <main+0x194>)
 80087a2:	4947      	ldr	r1, [pc, #284]	; (80088c0 <main+0x19c>)
 80087a4:	2201      	movs	r2, #1
 80087a6:	f7f9 f971 	bl	8001a8c <HAL_UART_Receive_DMA>

  int i1, j1;
  for(i1=0;i1<XMAZE;i1++)
 80087aa:	2300      	movs	r3, #0
 80087ac:	607b      	str	r3, [r7, #4]
 80087ae:	e021      	b.n	80087f4 <main+0xd0>
  {
    for(j1=0;j1<YMAZE;j1++)
 80087b0:	2300      	movs	r3, #0
 80087b2:	603b      	str	r3, [r7, #0]
 80087b4:	e018      	b.n	80087e8 <main+0xc4>
    {
      cell[i1][j1]=-1;
 80087b6:	4943      	ldr	r1, [pc, #268]	; (80088c4 <main+0x1a0>)
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	4613      	mov	r3, r2
 80087bc:	00db      	lsls	r3, r3, #3
 80087be:	4413      	add	r3, r2
 80087c0:	005b      	lsls	r3, r3, #1
 80087c2:	683a      	ldr	r2, [r7, #0]
 80087c4:	4413      	add	r3, r2
 80087c6:	440b      	add	r3, r1
 80087c8:	22ff      	movs	r2, #255	; 0xff
 80087ca:	701a      	strb	r2, [r3, #0]
      walls[i1][j1]=-1;
 80087cc:	493e      	ldr	r1, [pc, #248]	; (80088c8 <main+0x1a4>)
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	4613      	mov	r3, r2
 80087d2:	00db      	lsls	r3, r3, #3
 80087d4:	4413      	add	r3, r2
 80087d6:	005b      	lsls	r3, r3, #1
 80087d8:	683a      	ldr	r2, [r7, #0]
 80087da:	4413      	add	r3, r2
 80087dc:	440b      	add	r3, r1
 80087de:	22ff      	movs	r2, #255	; 0xff
 80087e0:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_DMA(&huart3,(uint8_t*)RxBuffer,1);

  int i1, j1;
  for(i1=0;i1<XMAZE;i1++)
  {
    for(j1=0;j1<YMAZE;j1++)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	3301      	adds	r3, #1
 80087e6:	603b      	str	r3, [r7, #0]
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	2b11      	cmp	r3, #17
 80087ec:	dde3      	ble.n	80087b6 <main+0x92>
  HAL_TIM_Base_Start(&htim4);

  HAL_UART_Receive_DMA(&huart3,(uint8_t*)RxBuffer,1);

  int i1, j1;
  for(i1=0;i1<XMAZE;i1++)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	3301      	adds	r3, #1
 80087f2:	607b      	str	r3, [r7, #4]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2b11      	cmp	r3, #17
 80087f8:	ddda      	ble.n	80087b0 <main+0x8c>
    {
      cell[i1][j1]=-1;
      walls[i1][j1]=-1;
    }
  }
  while(Status==STOP_STATUS)
 80087fa:	e013      	b.n	8008824 <main+0x100>
  {
	  HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,1);
 80087fc:	4833      	ldr	r0, [pc, #204]	; (80088cc <main+0x1a8>)
 80087fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008802:	2201      	movs	r2, #1
 8008804:	f7fd fd72 	bl	80062ec <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8008808:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800880c:	f7fe ff54 	bl	80076b8 <HAL_Delay>
	  HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,0);
 8008810:	482e      	ldr	r0, [pc, #184]	; (80088cc <main+0x1a8>)
 8008812:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008816:	2200      	movs	r2, #0
 8008818:	f7fd fd68 	bl	80062ec <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800881c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008820:	f7fe ff4a 	bl	80076b8 <HAL_Delay>
    {
      cell[i1][j1]=-1;
      walls[i1][j1]=-1;
    }
  }
  while(Status==STOP_STATUS)
 8008824:	4b2a      	ldr	r3, [pc, #168]	; (80088d0 <main+0x1ac>)
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d0e7      	beq.n	80087fc <main+0xd8>
	  HAL_Delay(500);
	  HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,0);
	  HAL_Delay(500);
  }

  calibration();
 800882c:	f7f8 ff32 	bl	8001694 <calibration>

  while (1)
  {

		  if (istarget(x,y)==1) rstdrive();
 8008830:	4b28      	ldr	r3, [pc, #160]	; (80088d4 <main+0x1b0>)
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	b25a      	sxtb	r2, r3
 8008836:	4b28      	ldr	r3, [pc, #160]	; (80088d8 <main+0x1b4>)
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	b25b      	sxtb	r3, r3
 800883c:	4610      	mov	r0, r2
 800883e:	4619      	mov	r1, r3
 8008840:	f7f7 ff68 	bl	8000714 <istarget>
 8008844:	4603      	mov	r3, r0
 8008846:	2b01      	cmp	r3, #1
 8008848:	d101      	bne.n	800884e <main+0x12a>
 800884a:	f7f8 f8ab 	bl	80009a4 <rstdrive>
  if(Status==DRIVE_STATUS)
 800884e:	4b20      	ldr	r3, [pc, #128]	; (80088d0 <main+0x1ac>)
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	2b02      	cmp	r3, #2
 8008854:	d125      	bne.n	80088a2 <main+0x17e>
	  {
		  if (walls[x][y]==-1)
 8008856:	4b1f      	ldr	r3, [pc, #124]	; (80088d4 <main+0x1b0>)
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	b25a      	sxtb	r2, r3
 800885c:	4b1e      	ldr	r3, [pc, #120]	; (80088d8 <main+0x1b4>)
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	b258      	sxtb	r0, r3
 8008862:	4919      	ldr	r1, [pc, #100]	; (80088c8 <main+0x1a4>)
 8008864:	4613      	mov	r3, r2
 8008866:	00db      	lsls	r3, r3, #3
 8008868:	4413      	add	r3, r2
 800886a:	005b      	lsls	r3, r3, #1
 800886c:	4403      	add	r3, r0
 800886e:	440b      	add	r3, r1
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	b25b      	sxtb	r3, r3
 8008874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008878:	d108      	bne.n	800888c <main+0x168>
		  {
		 	 mapCell();
 800887a:	f7f8 f8b9 	bl	80009f0 <mapCell>

		 	 HAL_TIM_Base_Stop_IT(&htim4);
 800887e:	480f      	ldr	r0, [pc, #60]	; (80088bc <main+0x198>)
 8008880:	f7f9 fdfc 	bl	800247c <HAL_TIM_Base_Stop_IT>

		 	 flood();
 8008884:	f7f8 fd86 	bl	8001394 <flood>
		 	 findPath();
 8008888:	f7f7 ffa2 	bl	80007d0 <findPath>
		  }
		  readPath();
 800888c:	f7f8 f806 	bl	800089c <readPath>

		  HAL_TIM_Base_Start_IT(&htim4);
 8008890:	480a      	ldr	r0, [pc, #40]	; (80088bc <main+0x198>)
 8008892:	f7f9 fdd7 	bl	8002444 <HAL_TIM_Base_Start_IT>
		  set();
 8008896:	f7f8 f82d 	bl	80008f4 <set>
		  drive(VEL);
 800889a:	20fa      	movs	r0, #250	; 0xfa
 800889c:	f7f7 fd40 	bl	8000320 <drive>
	  }
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
  }
 80088a0:	e7c6      	b.n	8008830 <main+0x10c>
 80088a2:	e7c5      	b.n	8008830 <main+0x10c>
 80088a4:	200003bc 	.word	0x200003bc
 80088a8:	20000680 	.word	0x20000680
 80088ac:	2000047c 	.word	0x2000047c
 80088b0:	200003fc 	.word	0x200003fc
 80088b4:	20000118 	.word	0x20000118
 80088b8:	20000308 	.word	0x20000308
 80088bc:	20000294 	.word	0x20000294
 80088c0:	200000c4 	.word	0x200000c4
 80088c4:	20000534 	.word	0x20000534
 80088c8:	200006bc 	.word	0x200006bc
 80088cc:	40011000 	.word	0x40011000
 80088d0:	20000060 	.word	0x20000060
 80088d4:	20000005 	.word	0x20000005
 80088d8:	20000006 	.word	0x20000006

080088dc <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b094      	sub	sp, #80	; 0x50
 80088e0:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80088e2:	2309      	movs	r3, #9
 80088e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80088e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80088ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80088ec:	2300      	movs	r3, #0
 80088ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80088f0:	2301      	movs	r3, #1
 80088f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80088f4:	2302      	movs	r3, #2
 80088f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80088f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80088fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80088fe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8008902:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8008904:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008908:	4618      	mov	r0, r3
 800890a:	f7fb fa89 	bl	8003e20 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1;
 800890e:	2305      	movs	r3, #5
 8008910:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008912:	2302      	movs	r3, #2
 8008914:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008916:	2300      	movs	r3, #0
 8008918:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800891a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800891e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008920:	2300      	movs	r3, #0
 8008922:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8008924:	f107 0314 	add.w	r3, r7, #20
 8008928:	4618      	mov	r0, r3
 800892a:	2102      	movs	r1, #2
 800892c:	f7fc fa84 	bl	8004e38 <HAL_RCC_ClockConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8008930:	2303      	movs	r3, #3
 8008932:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8008934:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008938:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800893a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800893e:	60fb      	str	r3, [r7, #12]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8008940:	1d3b      	adds	r3, r7, #4
 8008942:	4618      	mov	r0, r3
 8008944:	f7fb f89c 	bl	8003a80 <HAL_RCCEx_PeriphCLKConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8008948:	f7fc fde0 	bl	800550c <HAL_RCC_GetHCLKFreq>
 800894c:	4602      	mov	r2, r0
 800894e:	4b09      	ldr	r3, [pc, #36]	; (8008974 <SystemClock_Config+0x98>)
 8008950:	fba3 1302 	umull	r1, r3, r3, r2
 8008954:	099b      	lsrs	r3, r3, #6
 8008956:	4618      	mov	r0, r3
 8008958:	f7fe f8a8 	bl	8006aac <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800895c:	2004      	movs	r0, #4
 800895e:	f7fe f8b1 	bl	8006ac4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8008962:	f04f 30ff 	mov.w	r0, #4294967295
 8008966:	2100      	movs	r1, #0
 8008968:	2200      	movs	r2, #0
 800896a:	f7fe f875 	bl	8006a58 <HAL_NVIC_SetPriority>
}
 800896e:	3750      	adds	r7, #80	; 0x50
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	10624dd3 	.word	0x10624dd3

08008978 <MX_ADC1_Init>:

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 800897e:	4b2a      	ldr	r3, [pc, #168]	; (8008a28 <MX_ADC1_Init+0xb0>)
 8008980:	4a2a      	ldr	r2, [pc, #168]	; (8008a2c <MX_ADC1_Init+0xb4>)
 8008982:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8008984:	4b28      	ldr	r3, [pc, #160]	; (8008a28 <MX_ADC1_Init+0xb0>)
 8008986:	f44f 7280 	mov.w	r2, #256	; 0x100
 800898a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800898c:	4b26      	ldr	r3, [pc, #152]	; (8008a28 <MX_ADC1_Init+0xb0>)
 800898e:	2201      	movs	r2, #1
 8008990:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008992:	4b25      	ldr	r3, [pc, #148]	; (8008a28 <MX_ADC1_Init+0xb0>)
 8008994:	2200      	movs	r2, #0
 8008996:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008998:	4b23      	ldr	r3, [pc, #140]	; (8008a28 <MX_ADC1_Init+0xb0>)
 800899a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800899e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80089a0:	4b21      	ldr	r3, [pc, #132]	; (8008a28 <MX_ADC1_Init+0xb0>)
 80089a2:	2200      	movs	r2, #0
 80089a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 6;
 80089a6:	4b20      	ldr	r3, [pc, #128]	; (8008a28 <MX_ADC1_Init+0xb0>)
 80089a8:	2206      	movs	r2, #6
 80089aa:	611a      	str	r2, [r3, #16]
  HAL_ADC_Init(&hadc1);
 80089ac:	481e      	ldr	r0, [pc, #120]	; (8008a28 <MX_ADC1_Init+0xb0>)
 80089ae:	f7fe f94d 	bl	8006c4c <HAL_ADC_Init>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_11;
 80089b2:	230b      	movs	r3, #11
 80089b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 80089b6:	2301      	movs	r3, #1
 80089b8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80089ba:	2304      	movs	r3, #4
 80089bc:	60fb      	str	r3, [r7, #12]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80089be:	1d3b      	adds	r3, r7, #4
 80089c0:	4819      	ldr	r0, [pc, #100]	; (8008a28 <MX_ADC1_Init+0xb0>)
 80089c2:	4619      	mov	r1, r3
 80089c4:	f7fe fbe8 	bl	8007198 <HAL_ADC_ConfigChannel>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_10;
 80089c8:	230a      	movs	r3, #10
 80089ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 2;
 80089cc:	2302      	movs	r3, #2
 80089ce:	60bb      	str	r3, [r7, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80089d0:	1d3b      	adds	r3, r7, #4
 80089d2:	4815      	ldr	r0, [pc, #84]	; (8008a28 <MX_ADC1_Init+0xb0>)
 80089d4:	4619      	mov	r1, r3
 80089d6:	f7fe fbdf 	bl	8007198 <HAL_ADC_ConfigChannel>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_9;
 80089da:	2309      	movs	r3, #9
 80089dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 3;
 80089de:	2303      	movs	r3, #3
 80089e0:	60bb      	str	r3, [r7, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80089e2:	1d3b      	adds	r3, r7, #4
 80089e4:	4810      	ldr	r0, [pc, #64]	; (8008a28 <MX_ADC1_Init+0xb0>)
 80089e6:	4619      	mov	r1, r3
 80089e8:	f7fe fbd6 	bl	8007198 <HAL_ADC_ConfigChannel>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_6;
 80089ec:	2306      	movs	r3, #6
 80089ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 4;
 80089f0:	2304      	movs	r3, #4
 80089f2:	60bb      	str	r3, [r7, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80089f4:	1d3b      	adds	r3, r7, #4
 80089f6:	480c      	ldr	r0, [pc, #48]	; (8008a28 <MX_ADC1_Init+0xb0>)
 80089f8:	4619      	mov	r1, r3
 80089fa:	f7fe fbcd 	bl	8007198 <HAL_ADC_ConfigChannel>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_8;
 80089fe:	2308      	movs	r3, #8
 8008a00:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 5;
 8008a02:	2305      	movs	r3, #5
 8008a04:	60bb      	str	r3, [r7, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8008a06:	1d3b      	adds	r3, r7, #4
 8008a08:	4807      	ldr	r0, [pc, #28]	; (8008a28 <MX_ADC1_Init+0xb0>)
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	f7fe fbc4 	bl	8007198 <HAL_ADC_ConfigChannel>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_7;
 8008a10:	2307      	movs	r3, #7
 8008a12:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 6;
 8008a14:	2306      	movs	r3, #6
 8008a16:	60bb      	str	r3, [r7, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8008a18:	1d3b      	adds	r3, r7, #4
 8008a1a:	4803      	ldr	r0, [pc, #12]	; (8008a28 <MX_ADC1_Init+0xb0>)
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	f7fe fbbb 	bl	8007198 <HAL_ADC_ConfigChannel>

}
 8008a22:	3710      	adds	r7, #16
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	200003fc 	.word	0x200003fc
 8008a2c:	40012400 	.word	0x40012400

08008a30 <MX_I2C1_Init>:

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8008a34:	4b0f      	ldr	r3, [pc, #60]	; (8008a74 <MX_I2C1_Init+0x44>)
 8008a36:	4a10      	ldr	r2, [pc, #64]	; (8008a78 <MX_I2C1_Init+0x48>)
 8008a38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8008a3a:	4b0e      	ldr	r3, [pc, #56]	; (8008a74 <MX_I2C1_Init+0x44>)
 8008a3c:	4a0f      	ldr	r2, [pc, #60]	; (8008a7c <MX_I2C1_Init+0x4c>)
 8008a3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008a40:	4b0c      	ldr	r3, [pc, #48]	; (8008a74 <MX_I2C1_Init+0x44>)
 8008a42:	2200      	movs	r2, #0
 8008a44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008a46:	4b0b      	ldr	r3, [pc, #44]	; (8008a74 <MX_I2C1_Init+0x44>)
 8008a48:	2200      	movs	r2, #0
 8008a4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008a4c:	4b09      	ldr	r3, [pc, #36]	; (8008a74 <MX_I2C1_Init+0x44>)
 8008a4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008a52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8008a54:	4b07      	ldr	r3, [pc, #28]	; (8008a74 <MX_I2C1_Init+0x44>)
 8008a56:	2200      	movs	r2, #0
 8008a58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008a5a:	4b06      	ldr	r3, [pc, #24]	; (8008a74 <MX_I2C1_Init+0x44>)
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8008a60:	4b04      	ldr	r3, [pc, #16]	; (8008a74 <MX_I2C1_Init+0x44>)
 8008a62:	2200      	movs	r2, #0
 8008a64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8008a66:	4b03      	ldr	r3, [pc, #12]	; (8008a74 <MX_I2C1_Init+0x44>)
 8008a68:	2200      	movs	r2, #0
 8008a6a:	621a      	str	r2, [r3, #32]
  HAL_I2C_Init(&hi2c1);
 8008a6c:	4801      	ldr	r0, [pc, #4]	; (8008a74 <MX_I2C1_Init+0x44>)
 8008a6e:	f7fc fdd1 	bl	8005614 <HAL_I2C_Init>

}
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	20000348 	.word	0x20000348
 8008a78:	40005400 	.word	0x40005400
 8008a7c:	000186a0 	.word	0x000186a0

08008a80 <MX_RTC_Init>:

/* RTC init function */
void MX_RTC_Init(void)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef DateToUpdate;

    /**Initialize RTC and set the Time and Date 
    */
  hrtc.Instance = RTC;
 8008a86:	4b15      	ldr	r3, [pc, #84]	; (8008adc <MX_RTC_Init+0x5c>)
 8008a88:	4a15      	ldr	r2, [pc, #84]	; (8008ae0 <MX_RTC_Init+0x60>)
 8008a8a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8008a8c:	4b13      	ldr	r3, [pc, #76]	; (8008adc <MX_RTC_Init+0x5c>)
 8008a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a92:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8008a94:	4b11      	ldr	r3, [pc, #68]	; (8008adc <MX_RTC_Init+0x5c>)
 8008a96:	2200      	movs	r2, #0
 8008a98:	609a      	str	r2, [r3, #8]
  HAL_RTC_Init(&hrtc);
 8008a9a:	4810      	ldr	r0, [pc, #64]	; (8008adc <MX_RTC_Init+0x5c>)
 8008a9c:	f7fa fc54 	bl	8003348 <HAL_RTC_Init>

  sTime.Hours = 0x0;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	71bb      	strb	r3, [r7, #6]

  HAL_RTC_SetTime(&hrtc, &sTime, FORMAT_BCD);
 8008aac:	1d3b      	adds	r3, r7, #4
 8008aae:	480b      	ldr	r0, [pc, #44]	; (8008adc <MX_RTC_Init+0x5c>)
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f7fa fcde 	bl	8003474 <HAL_RTC_SetTime>

  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8008abc:	2301      	movs	r3, #1
 8008abe:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	70fb      	strb	r3, [r7, #3]

  HAL_RTC_SetDate(&hrtc, &DateToUpdate, FORMAT_BCD);
 8008ac8:	463b      	mov	r3, r7
 8008aca:	4804      	ldr	r0, [pc, #16]	; (8008adc <MX_RTC_Init+0x5c>)
 8008acc:	4619      	mov	r1, r3
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f7fa fd66 	bl	80035a0 <HAL_RTC_SetDate>

}
 8008ad4:	3708      	adds	r7, #8
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	20000468 	.word	0x20000468
 8008ae0:	40002800 	.word	0x40002800

08008ae4 <MX_SPI2_Init>:

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8008ae8:	4b14      	ldr	r3, [pc, #80]	; (8008b3c <MX_SPI2_Init+0x58>)
 8008aea:	4a15      	ldr	r2, [pc, #84]	; (8008b40 <MX_SPI2_Init+0x5c>)
 8008aec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8008aee:	4b13      	ldr	r3, [pc, #76]	; (8008b3c <MX_SPI2_Init+0x58>)
 8008af0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008af4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8008af6:	4b11      	ldr	r3, [pc, #68]	; (8008b3c <MX_SPI2_Init+0x58>)
 8008af8:	2200      	movs	r2, #0
 8008afa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8008afc:	4b0f      	ldr	r3, [pc, #60]	; (8008b3c <MX_SPI2_Init+0x58>)
 8008afe:	2200      	movs	r2, #0
 8008b00:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b02:	4b0e      	ldr	r3, [pc, #56]	; (8008b3c <MX_SPI2_Init+0x58>)
 8008b04:	2200      	movs	r2, #0
 8008b06:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008b08:	4b0c      	ldr	r3, [pc, #48]	; (8008b3c <MX_SPI2_Init+0x58>)
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8008b0e:	4b0b      	ldr	r3, [pc, #44]	; (8008b3c <MX_SPI2_Init+0x58>)
 8008b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b14:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b16:	4b09      	ldr	r3, [pc, #36]	; (8008b3c <MX_SPI2_Init+0x58>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008b1c:	4b07      	ldr	r3, [pc, #28]	; (8008b3c <MX_SPI2_Init+0x58>)
 8008b1e:	2200      	movs	r2, #0
 8008b20:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLED;
 8008b22:	4b06      	ldr	r3, [pc, #24]	; (8008b3c <MX_SPI2_Init+0x58>)
 8008b24:	2200      	movs	r2, #0
 8008b26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8008b28:	4b04      	ldr	r3, [pc, #16]	; (8008b3c <MX_SPI2_Init+0x58>)
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8008b2e:	4b03      	ldr	r3, [pc, #12]	; (8008b3c <MX_SPI2_Init+0x58>)
 8008b30:	220a      	movs	r2, #10
 8008b32:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_SPI_Init(&hspi2);
 8008b34:	4801      	ldr	r0, [pc, #4]	; (8008b3c <MX_SPI2_Init+0x58>)
 8008b36:	f7fa fba1 	bl	800327c <HAL_SPI_Init>

}
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	2000023c 	.word	0x2000023c
 8008b40:	40003800 	.word	0x40003800

08008b44 <MX_TIM1_Init>:

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b094      	sub	sp, #80	; 0x50
 8008b48:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim1.Instance = TIM1;
 8008b4a:	4b2f      	ldr	r3, [pc, #188]	; (8008c08 <MX_TIM1_Init+0xc4>)
 8008b4c:	4a2f      	ldr	r2, [pc, #188]	; (8008c0c <MX_TIM1_Init+0xc8>)
 8008b4e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6-1;
 8008b50:	4b2d      	ldr	r3, [pc, #180]	; (8008c08 <MX_TIM1_Init+0xc4>)
 8008b52:	2205      	movs	r2, #5
 8008b54:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b56:	4b2c      	ldr	r3, [pc, #176]	; (8008c08 <MX_TIM1_Init+0xc4>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8008b5c:	4b2a      	ldr	r3, [pc, #168]	; (8008c08 <MX_TIM1_Init+0xc4>)
 8008b5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008b62:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008b64:	4b28      	ldr	r3, [pc, #160]	; (8008c08 <MX_TIM1_Init+0xc4>)
 8008b66:	2200      	movs	r2, #0
 8008b68:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008b6a:	4b27      	ldr	r3, [pc, #156]	; (8008c08 <MX_TIM1_Init+0xc4>)
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	615a      	str	r2, [r3, #20]
  HAL_TIM_Base_Init(&htim1);
 8008b70:	4825      	ldr	r0, [pc, #148]	; (8008c08 <MX_TIM1_Init+0xc4>)
 8008b72:	f7f9 fc1f 	bl	80023b4 <HAL_TIM_Base_Init>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b7a:	643b      	str	r3, [r7, #64]	; 0x40
  HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 8008b7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008b80:	4821      	ldr	r0, [pc, #132]	; (8008c08 <MX_TIM1_Init+0xc4>)
 8008b82:	4619      	mov	r1, r3
 8008b84:	f7f9 ffa0 	bl	8002ac8 <HAL_TIM_ConfigClockSource>

  HAL_TIM_PWM_Init(&htim1);
 8008b88:	481f      	ldr	r0, [pc, #124]	; (8008c08 <MX_TIM1_Init+0xc4>)
 8008b8a:	f7f9 fca3 	bl	80024d4 <HAL_TIM_PWM_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008b92:	2300      	movs	r3, #0
 8008b94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 8008b96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008b9a:	481b      	ldr	r0, [pc, #108]	; (8008c08 <MX_TIM1_Init+0xc4>)
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	f7f9 fbaf 	bl	8002300 <HAL_TIMEx_MasterConfigSynchronization>

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008baa:	2300      	movs	r3, #0
 8008bac:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.DeadTime = 0;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008bb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008bba:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 8008bc0:	f107 031c 	add.w	r3, r7, #28
 8008bc4:	4810      	ldr	r0, [pc, #64]	; (8008c08 <MX_TIM1_Init+0xc4>)
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	f7f9 fb60 	bl	800228c <HAL_TIMEx_ConfigBreakDeadTime>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008bcc:	2360      	movs	r3, #96	; 0x60
 8008bce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	613b      	str	r3, [r7, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008be0:	2300      	movs	r3, #0
 8008be2:	617b      	str	r3, [r7, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008be4:	2300      	movs	r3, #0
 8008be6:	61bb      	str	r3, [r7, #24]
  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 8008be8:	463b      	mov	r3, r7
 8008bea:	4807      	ldr	r0, [pc, #28]	; (8008c08 <MX_TIM1_Init+0xc4>)
 8008bec:	4619      	mov	r1, r3
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f7f9 fea4 	bl	800293c <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 8008bf4:	463b      	mov	r3, r7
 8008bf6:	4804      	ldr	r0, [pc, #16]	; (8008c08 <MX_TIM1_Init+0xc4>)
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	2204      	movs	r2, #4
 8008bfc:	f7f9 fe9e 	bl	800293c <HAL_TIM_PWM_ConfigChannel>

}
 8008c00:	3750      	adds	r7, #80	; 0x50
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	2000047c 	.word	0x2000047c
 8008c0c:	40012c00 	.word	0x40012c00

08008c10 <MX_TIM2_Init>:

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b08c      	sub	sp, #48	; 0x30
 8008c14:	af00      	add	r7, sp, #0

  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 8008c16:	4b1a      	ldr	r3, [pc, #104]	; (8008c80 <MX_TIM2_Init+0x70>)
 8008c18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008c1c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8008c1e:	4b18      	ldr	r3, [pc, #96]	; (8008c80 <MX_TIM2_Init+0x70>)
 8008c20:	2200      	movs	r2, #0
 8008c22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008c24:	4b16      	ldr	r3, [pc, #88]	; (8008c80 <MX_TIM2_Init+0x70>)
 8008c26:	2200      	movs	r2, #0
 8008c28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32767;
 8008c2a:	4b15      	ldr	r3, [pc, #84]	; (8008c80 <MX_TIM2_Init+0x70>)
 8008c2c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008c30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008c32:	4b13      	ldr	r3, [pc, #76]	; (8008c80 <MX_TIM2_Init+0x70>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	611a      	str	r2, [r3, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8008c38:	2303      	movs	r3, #3
 8008c3a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8008c40:	2301      	movs	r3, #1
 8008c42:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8008c44:	2300      	movs	r3, #0
 8008c46:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8008c4c:	2302      	movs	r3, #2
 8008c4e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8008c50:	2301      	movs	r3, #1
 8008c52:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8008c54:	2300      	movs	r3, #0
 8008c56:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_TIM_Encoder_Init(&htim2, &sConfig);
 8008c5c:	f107 030c 	add.w	r3, r7, #12
 8008c60:	4807      	ldr	r0, [pc, #28]	; (8008c80 <MX_TIM2_Init+0x70>)
 8008c62:	4619      	mov	r1, r3
 8008c64:	f7f9 fc94 	bl	8002590 <HAL_TIM_Encoder_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	60bb      	str	r3, [r7, #8]
  HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 8008c70:	1d3b      	adds	r3, r7, #4
 8008c72:	4803      	ldr	r0, [pc, #12]	; (8008c80 <MX_TIM2_Init+0x70>)
 8008c74:	4619      	mov	r1, r3
 8008c76:	f7f9 fb43 	bl	8002300 <HAL_TIMEx_MasterConfigSynchronization>

}
 8008c7a:	3730      	adds	r7, #48	; 0x30
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	20000680 	.word	0x20000680

08008c84 <MX_TIM3_Init>:

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b08c      	sub	sp, #48	; 0x30
 8008c88:	af00      	add	r7, sp, #0

  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 8008c8a:	4b1a      	ldr	r3, [pc, #104]	; (8008cf4 <MX_TIM3_Init+0x70>)
 8008c8c:	4a1a      	ldr	r2, [pc, #104]	; (8008cf8 <MX_TIM3_Init+0x74>)
 8008c8e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8008c90:	4b18      	ldr	r3, [pc, #96]	; (8008cf4 <MX_TIM3_Init+0x70>)
 8008c92:	2200      	movs	r2, #0
 8008c94:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008c96:	4b17      	ldr	r3, [pc, #92]	; (8008cf4 <MX_TIM3_Init+0x70>)
 8008c98:	2200      	movs	r2, #0
 8008c9a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 32767;
 8008c9c:	4b15      	ldr	r3, [pc, #84]	; (8008cf4 <MX_TIM3_Init+0x70>)
 8008c9e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008ca2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008ca4:	4b13      	ldr	r3, [pc, #76]	; (8008cf4 <MX_TIM3_Init+0x70>)
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	611a      	str	r2, [r3, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8008caa:	2303      	movs	r3, #3
 8008cac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8008cbe:	2302      	movs	r3, #2
 8008cc0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_TIM_Encoder_Init(&htim3, &sConfig);
 8008cce:	f107 030c 	add.w	r3, r7, #12
 8008cd2:	4808      	ldr	r0, [pc, #32]	; (8008cf4 <MX_TIM3_Init+0x70>)
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	f7f9 fc5b 	bl	8002590 <HAL_TIM_Encoder_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	60bb      	str	r3, [r7, #8]
  HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 8008ce2:	1d3b      	adds	r3, r7, #4
 8008ce4:	4803      	ldr	r0, [pc, #12]	; (8008cf4 <MX_TIM3_Init+0x70>)
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	f7f9 fb0a 	bl	8002300 <HAL_TIMEx_MasterConfigSynchronization>

}
 8008cec:	3730      	adds	r7, #48	; 0x30
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	200003bc 	.word	0x200003bc
 8008cf8:	40000400 	.word	0x40000400

08008cfc <MX_TIM4_Init>:

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b086      	sub	sp, #24
 8008d00:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
 8008d02:	4b14      	ldr	r3, [pc, #80]	; (8008d54 <MX_TIM4_Init+0x58>)
 8008d04:	4a14      	ldr	r2, [pc, #80]	; (8008d58 <MX_TIM4_Init+0x5c>)
 8008d06:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8008d08:	4b12      	ldr	r3, [pc, #72]	; (8008d54 <MX_TIM4_Init+0x58>)
 8008d0a:	2247      	movs	r2, #71	; 0x47
 8008d0c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008d0e:	4b11      	ldr	r3, [pc, #68]	; (8008d54 <MX_TIM4_Init+0x58>)
 8008d10:	2200      	movs	r2, #0
 8008d12:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8008d14:	4b0f      	ldr	r3, [pc, #60]	; (8008d54 <MX_TIM4_Init+0x58>)
 8008d16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008d1a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008d1c:	4b0d      	ldr	r3, [pc, #52]	; (8008d54 <MX_TIM4_Init+0x58>)
 8008d1e:	2200      	movs	r2, #0
 8008d20:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Init(&htim4);
 8008d22:	480c      	ldr	r0, [pc, #48]	; (8008d54 <MX_TIM4_Init+0x58>)
 8008d24:	f7f9 fb46 	bl	80023b4 <HAL_TIM_Base_Init>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d2c:	60bb      	str	r3, [r7, #8]
  HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 8008d2e:	f107 0308 	add.w	r3, r7, #8
 8008d32:	4808      	ldr	r0, [pc, #32]	; (8008d54 <MX_TIM4_Init+0x58>)
 8008d34:	4619      	mov	r1, r3
 8008d36:	f7f9 fec7 	bl	8002ac8 <HAL_TIM_ConfigClockSource>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8008d3a:	2310      	movs	r3, #16
 8008d3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	607b      	str	r3, [r7, #4]
  HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 8008d42:	463b      	mov	r3, r7
 8008d44:	4803      	ldr	r0, [pc, #12]	; (8008d54 <MX_TIM4_Init+0x58>)
 8008d46:	4619      	mov	r1, r3
 8008d48:	f7f9 fada 	bl	8002300 <HAL_TIMEx_MasterConfigSynchronization>

}
 8008d4c:	3718      	adds	r7, #24
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	20000294 	.word	0x20000294
 8008d58:	40000800 	.word	0x40000800

08008d5c <MX_USART3_UART_Init>:

/* USART3 init function */
void MX_USART3_UART_Init(void)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8008d60:	4b0e      	ldr	r3, [pc, #56]	; (8008d9c <MX_USART3_UART_Init+0x40>)
 8008d62:	4a0f      	ldr	r2, [pc, #60]	; (8008da0 <MX_USART3_UART_Init+0x44>)
 8008d64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8008d66:	4b0d      	ldr	r3, [pc, #52]	; (8008d9c <MX_USART3_UART_Init+0x40>)
 8008d68:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8008d6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008d6e:	4b0b      	ldr	r3, [pc, #44]	; (8008d9c <MX_USART3_UART_Init+0x40>)
 8008d70:	2200      	movs	r2, #0
 8008d72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008d74:	4b09      	ldr	r3, [pc, #36]	; (8008d9c <MX_USART3_UART_Init+0x40>)
 8008d76:	2200      	movs	r2, #0
 8008d78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008d7a:	4b08      	ldr	r3, [pc, #32]	; (8008d9c <MX_USART3_UART_Init+0x40>)
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008d80:	4b06      	ldr	r3, [pc, #24]	; (8008d9c <MX_USART3_UART_Init+0x40>)
 8008d82:	220c      	movs	r2, #12
 8008d84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008d86:	4b05      	ldr	r3, [pc, #20]	; (8008d9c <MX_USART3_UART_Init+0x40>)
 8008d88:	2200      	movs	r2, #0
 8008d8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008d8c:	4b03      	ldr	r3, [pc, #12]	; (8008d9c <MX_USART3_UART_Init+0x40>)
 8008d8e:	2200      	movs	r2, #0
 8008d90:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart3);
 8008d92:	4802      	ldr	r0, [pc, #8]	; (8008d9c <MX_USART3_UART_Init+0x40>)
 8008d94:	f7f8 fdb6 	bl	8001904 <HAL_UART_Init>

}
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	20000308 	.word	0x20000308
 8008da0:	40004800 	.word	0x40004800

08008da4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008daa:	4b13      	ldr	r3, [pc, #76]	; (8008df8 <MX_DMA_Init+0x54>)
 8008dac:	4a12      	ldr	r2, [pc, #72]	; (8008df8 <MX_DMA_Init+0x54>)
 8008dae:	6952      	ldr	r2, [r2, #20]
 8008db0:	f042 0201 	orr.w	r2, r2, #1
 8008db4:	615a      	str	r2, [r3, #20]
 8008db6:	4b10      	ldr	r3, [pc, #64]	; (8008df8 <MX_DMA_Init+0x54>)
 8008db8:	695b      	ldr	r3, [r3, #20]
 8008dba:	f003 0301 	and.w	r3, r3, #1
 8008dbe:	607b      	str	r3, [r7, #4]
 8008dc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8008dc2:	200b      	movs	r0, #11
 8008dc4:	2101      	movs	r1, #1
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f7fd fe46 	bl	8006a58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8008dcc:	200b      	movs	r0, #11
 8008dce:	f7fd fe5f 	bl	8006a90 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 8008dd2:	200c      	movs	r0, #12
 8008dd4:	2102      	movs	r1, #2
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f7fd fe3e 	bl	8006a58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8008ddc:	200c      	movs	r0, #12
 8008dde:	f7fd fe57 	bl	8006a90 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 2, 0);
 8008de2:	200d      	movs	r0, #13
 8008de4:	2102      	movs	r1, #2
 8008de6:	2200      	movs	r2, #0
 8008de8:	f7fd fe36 	bl	8006a58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8008dec:	200d      	movs	r0, #13
 8008dee:	f7fd fe4f 	bl	8006a90 <HAL_NVIC_EnableIRQ>

}
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	40021000 	.word	0x40021000

08008dfc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b088      	sub	sp, #32
 8008e00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 8008e02:	4b43      	ldr	r3, [pc, #268]	; (8008f10 <MX_GPIO_Init+0x114>)
 8008e04:	4a42      	ldr	r2, [pc, #264]	; (8008f10 <MX_GPIO_Init+0x114>)
 8008e06:	6992      	ldr	r2, [r2, #24]
 8008e08:	f042 0210 	orr.w	r2, r2, #16
 8008e0c:	619a      	str	r2, [r3, #24]
 8008e0e:	4b40      	ldr	r3, [pc, #256]	; (8008f10 <MX_GPIO_Init+0x114>)
 8008e10:	699b      	ldr	r3, [r3, #24]
 8008e12:	f003 0310 	and.w	r3, r3, #16
 8008e16:	60fb      	str	r3, [r7, #12]
 8008e18:	68fb      	ldr	r3, [r7, #12]
  __GPIOD_CLK_ENABLE();
 8008e1a:	4b3d      	ldr	r3, [pc, #244]	; (8008f10 <MX_GPIO_Init+0x114>)
 8008e1c:	4a3c      	ldr	r2, [pc, #240]	; (8008f10 <MX_GPIO_Init+0x114>)
 8008e1e:	6992      	ldr	r2, [r2, #24]
 8008e20:	f042 0220 	orr.w	r2, r2, #32
 8008e24:	619a      	str	r2, [r3, #24]
 8008e26:	4b3a      	ldr	r3, [pc, #232]	; (8008f10 <MX_GPIO_Init+0x114>)
 8008e28:	699b      	ldr	r3, [r3, #24]
 8008e2a:	f003 0320 	and.w	r3, r3, #32
 8008e2e:	60bb      	str	r3, [r7, #8]
 8008e30:	68bb      	ldr	r3, [r7, #8]
  __GPIOA_CLK_ENABLE();
 8008e32:	4b37      	ldr	r3, [pc, #220]	; (8008f10 <MX_GPIO_Init+0x114>)
 8008e34:	4a36      	ldr	r2, [pc, #216]	; (8008f10 <MX_GPIO_Init+0x114>)
 8008e36:	6992      	ldr	r2, [r2, #24]
 8008e38:	f042 0204 	orr.w	r2, r2, #4
 8008e3c:	619a      	str	r2, [r3, #24]
 8008e3e:	4b34      	ldr	r3, [pc, #208]	; (8008f10 <MX_GPIO_Init+0x114>)
 8008e40:	699b      	ldr	r3, [r3, #24]
 8008e42:	f003 0304 	and.w	r3, r3, #4
 8008e46:	607b      	str	r3, [r7, #4]
 8008e48:	687b      	ldr	r3, [r7, #4]
  __GPIOB_CLK_ENABLE();
 8008e4a:	4b31      	ldr	r3, [pc, #196]	; (8008f10 <MX_GPIO_Init+0x114>)
 8008e4c:	4a30      	ldr	r2, [pc, #192]	; (8008f10 <MX_GPIO_Init+0x114>)
 8008e4e:	6992      	ldr	r2, [r2, #24]
 8008e50:	f042 0208 	orr.w	r2, r2, #8
 8008e54:	619a      	str	r2, [r3, #24]
 8008e56:	4b2e      	ldr	r3, [pc, #184]	; (8008f10 <MX_GPIO_Init+0x114>)
 8008e58:	699b      	ldr	r3, [r3, #24]
 8008e5a:	f003 0308 	and.w	r3, r3, #8
 8008e5e:	603b      	str	r3, [r7, #0]
 8008e60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : Sensor3_Pin AIN2_Pin AIN1_Pin */
  GPIO_InitStruct.Pin = Sensor3_Pin|AIN2_Pin|AIN1_Pin;
 8008e62:	f640 4308 	movw	r3, #3080	; 0xc08
 8008e66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8008e6c:	2302      	movs	r3, #2
 8008e6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e70:	f107 0310 	add.w	r3, r7, #16
 8008e74:	4827      	ldr	r0, [pc, #156]	; (8008f14 <MX_GPIO_Init+0x118>)
 8008e76:	4619      	mov	r1, r3
 8008e78:	f7fd f8da 	bl	8006030 <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN2_Pin BIN1_Pin LED1_Pin */
  GPIO_InitStruct.Pin = BIN2_Pin|BIN1_Pin|LED1_Pin;
 8008e7c:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8008e80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e82:	2301      	movs	r3, #1
 8008e84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8008e86:	2302      	movs	r3, #2
 8008e88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e8a:	f107 0310 	add.w	r3, r7, #16
 8008e8e:	4822      	ldr	r0, [pc, #136]	; (8008f18 <MX_GPIO_Init+0x11c>)
 8008e90:	4619      	mov	r1, r3
 8008e92:	f7fd f8cd 	bl	8006030 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT2_Pin */
  GPIO_InitStruct.Pin = BUT2_Pin;
 8008e96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUT2_GPIO_Port, &GPIO_InitStruct);
 8008ea4:	f107 0310 	add.w	r3, r7, #16
 8008ea8:	481b      	ldr	r0, [pc, #108]	; (8008f18 <MX_GPIO_Init+0x11c>)
 8008eaa:	4619      	mov	r1, r3
 8008eac:	f7fd f8c0 	bl	8006030 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT1_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8008eb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008eb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008eb6:	4b19      	ldr	r3, [pc, #100]	; (8008f1c <MX_GPIO_Init+0x120>)
 8008eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8008ebe:	f107 0310 	add.w	r3, r7, #16
 8008ec2:	4815      	ldr	r0, [pc, #84]	; (8008f18 <MX_GPIO_Init+0x11c>)
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	f7fd f8b3 	bl	8006030 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8008eca:	2304      	movs	r3, #4
 8008ecc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8008ed2:	2302      	movs	r3, #2
 8008ed4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8008ed6:	f107 0310 	add.w	r3, r7, #16
 8008eda:	4811      	ldr	r0, [pc, #68]	; (8008f20 <MX_GPIO_Init+0x124>)
 8008edc:	4619      	mov	r1, r3
 8008ede:	f7fd f8a7 	bl	8006030 <HAL_GPIO_Init>

  /*Configure GPIO pins : Sensor1_Pin Sensor2_Pin */
  GPIO_InitStruct.Pin = Sensor1_Pin|Sensor2_Pin;
 8008ee2:	23c0      	movs	r3, #192	; 0xc0
 8008ee4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8008eea:	2302      	movs	r3, #2
 8008eec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008eee:	f107 0310 	add.w	r3, r7, #16
 8008ef2:	480c      	ldr	r0, [pc, #48]	; (8008f24 <MX_GPIO_Init+0x128>)
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	f7fd f89b 	bl	8006030 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8008efa:	2028      	movs	r0, #40	; 0x28
 8008efc:	2100      	movs	r1, #0
 8008efe:	2200      	movs	r2, #0
 8008f00:	f7fd fdaa 	bl	8006a58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008f04:	2028      	movs	r0, #40	; 0x28
 8008f06:	f7fd fdc3 	bl	8006a90 <HAL_NVIC_EnableIRQ>

}
 8008f0a:	3720      	adds	r7, #32
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	40021000 	.word	0x40021000
 8008f14:	40010800 	.word	0x40010800
 8008f18:	40011000 	.word	0x40011000
 8008f1c:	10110000 	.word	0x10110000
 8008f20:	40011400 	.word	0x40011400
 8008f24:	40010c00 	.word	0x40010c00

08008f28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8008f28:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8008f2a:	f000 b804 	b.w	8008f36 <LoopCopyDataInit>

08008f2e <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8008f2e:	4b0d      	ldr	r3, [pc, #52]	; (8008f64 <LoopFillZerobss+0x16>)
  ldr r3, [r3, r1]
 8008f30:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8008f32:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8008f34:	3104      	adds	r1, #4

08008f36 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8008f36:	480c      	ldr	r0, [pc, #48]	; (8008f68 <LoopFillZerobss+0x1a>)
  ldr r3, =_edata
 8008f38:	4b0c      	ldr	r3, [pc, #48]	; (8008f6c <LoopFillZerobss+0x1e>)
  adds r2, r0, r1
 8008f3a:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8008f3c:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8008f3e:	f4ff aff6 	bcc.w	8008f2e <CopyDataInit>
  ldr r2, =_sbss
 8008f42:	4a0b      	ldr	r2, [pc, #44]	; (8008f70 <LoopFillZerobss+0x22>)
  b LoopFillZerobss
 8008f44:	f000 b803 	b.w	8008f4e <LoopFillZerobss>

08008f48 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8008f48:	2300      	movs	r3, #0
  str r3, [r2], #4
 8008f4a:	f842 3b04 	str.w	r3, [r2], #4

08008f4e <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8008f4e:	4b09      	ldr	r3, [pc, #36]	; (8008f74 <LoopFillZerobss+0x26>)
  cmp r2, r3
 8008f50:	429a      	cmp	r2, r3
  bcc FillZerobss
 8008f52:	f4ff aff9 	bcc.w	8008f48 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008f56:	f7fe fbc5 	bl	80076e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008f5a:	f000 f80f 	bl	8008f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008f5e:	f7ff fbe1 	bl	8008724 <main>
  bx lr
 8008f62:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8008f64:	08009020 	.word	0x08009020
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8008f68:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8008f6c:	2000000c 	.word	0x2000000c
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8008f70:	2000000c 	.word	0x2000000c
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8008f74:	20000800 	.word	0x20000800

08008f78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008f78:	f7ff bffe 	b.w	8008f78 <ADC1_2_IRQHandler>

08008f7c <__libc_init_array>:
 8008f7c:	b570      	push	{r4, r5, r6, lr}
 8008f7e:	4b0e      	ldr	r3, [pc, #56]	; (8008fb8 <__libc_init_array+0x3c>)
 8008f80:	4d0e      	ldr	r5, [pc, #56]	; (8008fbc <__libc_init_array+0x40>)
 8008f82:	2400      	movs	r4, #0
 8008f84:	1aed      	subs	r5, r5, r3
 8008f86:	10ad      	asrs	r5, r5, #2
 8008f88:	461e      	mov	r6, r3
 8008f8a:	42ac      	cmp	r4, r5
 8008f8c:	d004      	beq.n	8008f98 <__libc_init_array+0x1c>
 8008f8e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008f92:	4790      	blx	r2
 8008f94:	3401      	adds	r4, #1
 8008f96:	e7f8      	b.n	8008f8a <__libc_init_array+0xe>
 8008f98:	f000 f816 	bl	8008fc8 <_init>
 8008f9c:	4d08      	ldr	r5, [pc, #32]	; (8008fc0 <__libc_init_array+0x44>)
 8008f9e:	4b09      	ldr	r3, [pc, #36]	; (8008fc4 <__libc_init_array+0x48>)
 8008fa0:	2400      	movs	r4, #0
 8008fa2:	1aed      	subs	r5, r5, r3
 8008fa4:	10ad      	asrs	r5, r5, #2
 8008fa6:	461e      	mov	r6, r3
 8008fa8:	42ac      	cmp	r4, r5
 8008faa:	d004      	beq.n	8008fb6 <__libc_init_array+0x3a>
 8008fac:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008fb0:	4790      	blx	r2
 8008fb2:	3401      	adds	r4, #1
 8008fb4:	e7f8      	b.n	8008fa8 <__libc_init_array+0x2c>
 8008fb6:	bd70      	pop	{r4, r5, r6, pc}
 8008fb8:	08009018 	.word	0x08009018
 8008fbc:	08009018 	.word	0x08009018
 8008fc0:	0800901c 	.word	0x0800901c
 8008fc4:	08009018 	.word	0x08009018

08008fc8 <_init>:
 8008fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fca:	bf00      	nop
 8008fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fce:	bc08      	pop	{r3}
 8008fd0:	469e      	mov	lr, r3
 8008fd2:	4770      	bx	lr

08008fd4 <_fini>:
 8008fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd6:	bf00      	nop
 8008fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fda:	bc08      	pop	{r3}
 8008fdc:	469e      	mov	lr, r3
 8008fde:	4770      	bx	lr
