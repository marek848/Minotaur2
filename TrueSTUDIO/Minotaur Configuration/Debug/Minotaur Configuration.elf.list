
Minotaur Configuration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c48  0800010c  0800010c  0000810c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08008d54  08008d54  00010d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008d8c  08008d8c  00010d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008d90  08008d90  00010d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08008d94  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000007d0  2000000c  08008da0  0001800c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200007dc  08008da0  000187dc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0001800c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000110e1  00000000  00000000  00018035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000027cb  00000000  00000000  00029116  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001098  00000000  00000000  0002b8e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f50  00000000  00000000  0002c980  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000084fe  00000000  00000000  0002d8d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000047c2  00000000  00000000  00035dce  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000082  00000000  00000000  0003a590  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003800  00000000  00000000  0003a614  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08008d3c 	.word	0x08008d3c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4803      	ldr	r0, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	08008d3c 	.word	0x08008d3c
 8000148:	20000010 	.word	0x20000010

0800014c <rotary>:
#include "stm32f1xx_hal.h"
#include "jazda.h"

 /**************************************************************/
 void rotary(int power, int32_t obrot)
  {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	 int32_t speed1;
	 obrot*=-1;
 8000156:	683b      	ldr	r3, [r7, #0]
 8000158:	425b      	negs	r3, r3
 800015a:	603b      	str	r3, [r7, #0]
	 test3[1]=obrot;
 800015c:	4b5d      	ldr	r3, [pc, #372]	; (80002d4 <rotary+0x188>)
 800015e:	683a      	ldr	r2, [r7, #0]
 8000160:	605a      	str	r2, [r3, #4]
	 angle=0;
 8000162:	4b5d      	ldr	r3, [pc, #372]	; (80002d8 <rotary+0x18c>)
 8000164:	2200      	movs	r2, #0
 8000166:	601a      	str	r2, [r3, #0]
	 test3[2]=0;
 8000168:	4b5a      	ldr	r3, [pc, #360]	; (80002d4 <rotary+0x188>)
 800016a:	2200      	movs	r2, #0
 800016c:	609a      	str	r2, [r3, #8]

	 Transmit=0;
 800016e:	4b5b      	ldr	r3, [pc, #364]	; (80002dc <rotary+0x190>)
 8000170:	2200      	movs	r2, #0
 8000172:	701a      	strb	r2, [r3, #0]

	 while(test3[2]<20)
 8000174:	e052      	b.n	800021c <rotary+0xd0>
	 {
		 speed1=(obrot-angle)/80;
 8000176:	4b58      	ldr	r3, [pc, #352]	; (80002d8 <rotary+0x18c>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	683a      	ldr	r2, [r7, #0]
 800017c:	1ad3      	subs	r3, r2, r3
 800017e:	4a58      	ldr	r2, [pc, #352]	; (80002e0 <rotary+0x194>)
 8000180:	fb82 1203 	smull	r1, r2, r2, r3
 8000184:	1152      	asrs	r2, r2, #5
 8000186:	17db      	asrs	r3, r3, #31
 8000188:	1ad3      	subs	r3, r2, r3
 800018a:	60fb      	str	r3, [r7, #12]

		 if(speed1<0)
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	2b00      	cmp	r3, #0
 8000190:	da18      	bge.n	80001c4 <rotary+0x78>
		 {
			 HAL_GPIO_WritePin(AIN1_GPIO_Port,AIN1_Pin,1);
 8000192:	4854      	ldr	r0, [pc, #336]	; (80002e4 <rotary+0x198>)
 8000194:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000198:	2201      	movs	r2, #1
 800019a:	f005 ff55 	bl	8006048 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(AIN2_GPIO_Port,AIN2_Pin,0);
 800019e:	4851      	ldr	r0, [pc, #324]	; (80002e4 <rotary+0x198>)
 80001a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001a4:	2200      	movs	r2, #0
 80001a6:	f005 ff4f 	bl	8006048 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(BIN1_GPIO_Port,BIN1_Pin,0);
 80001aa:	484f      	ldr	r0, [pc, #316]	; (80002e8 <rotary+0x19c>)
 80001ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001b0:	2200      	movs	r2, #0
 80001b2:	f005 ff49 	bl	8006048 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(BIN2_GPIO_Port,BIN2_Pin,1);
 80001b6:	484c      	ldr	r0, [pc, #304]	; (80002e8 <rotary+0x19c>)
 80001b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001bc:	2201      	movs	r2, #1
 80001be:	f005 ff43 	bl	8006048 <HAL_GPIO_WritePin>
 80001c2:	e017      	b.n	80001f4 <rotary+0xa8>
		 }
		 else
		 {

			HAL_GPIO_WritePin(AIN1_GPIO_Port,AIN1_Pin,0);
 80001c4:	4847      	ldr	r0, [pc, #284]	; (80002e4 <rotary+0x198>)
 80001c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001ca:	2200      	movs	r2, #0
 80001cc:	f005 ff3c 	bl	8006048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2_GPIO_Port,AIN2_Pin,1);
 80001d0:	4844      	ldr	r0, [pc, #272]	; (80002e4 <rotary+0x198>)
 80001d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001d6:	2201      	movs	r2, #1
 80001d8:	f005 ff36 	bl	8006048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN1_GPIO_Port,BIN1_Pin,1);
 80001dc:	4842      	ldr	r0, [pc, #264]	; (80002e8 <rotary+0x19c>)
 80001de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001e2:	2201      	movs	r2, #1
 80001e4:	f005 ff30 	bl	8006048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2_GPIO_Port,BIN2_Pin,0);
 80001e8:	483f      	ldr	r0, [pc, #252]	; (80002e8 <rotary+0x19c>)
 80001ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ee:	2200      	movs	r2, #0
 80001f0:	f005 ff2a 	bl	8006048 <HAL_GPIO_WritePin>
		 }

		 if(speed1<0) speed1=speed1*(-1);
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	da02      	bge.n	8000200 <rotary+0xb4>
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	425b      	negs	r3, r3
 80001fe:	60fb      	str	r3, [r7, #12]
		 if(speed1>power) speed1=power;
 8000200:	68fa      	ldr	r2, [r7, #12]
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	429a      	cmp	r2, r3
 8000206:	dd01      	ble.n	800020c <rotary+0xc0>
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	60fb      	str	r3, [r7, #12]

		 TIM1->CCR1=speed1+100;
 800020c:	4b37      	ldr	r3, [pc, #220]	; (80002ec <rotary+0x1a0>)
 800020e:	68fa      	ldr	r2, [r7, #12]
 8000210:	3264      	adds	r2, #100	; 0x64
 8000212:	635a      	str	r2, [r3, #52]	; 0x34
		 TIM1->CCR2=speed1+100;
 8000214:	4b35      	ldr	r3, [pc, #212]	; (80002ec <rotary+0x1a0>)
 8000216:	68fa      	ldr	r2, [r7, #12]
 8000218:	3264      	adds	r2, #100	; 0x64
 800021a:	639a      	str	r2, [r3, #56]	; 0x38
	 angle=0;
	 test3[2]=0;

	 Transmit=0;

	 while(test3[2]<20)
 800021c:	4b2d      	ldr	r3, [pc, #180]	; (80002d4 <rotary+0x188>)
 800021e:	689b      	ldr	r3, [r3, #8]
 8000220:	2b13      	cmp	r3, #19
 8000222:	dda8      	ble.n	8000176 <rotary+0x2a>
		 if(speed1>power) speed1=power;

		 TIM1->CCR1=speed1+100;
		 TIM1->CCR2=speed1+100;
	 }
	 TIM1->CCR1=0;
 8000224:	4b31      	ldr	r3, [pc, #196]	; (80002ec <rotary+0x1a0>)
 8000226:	2200      	movs	r2, #0
 8000228:	635a      	str	r2, [r3, #52]	; 0x34
	 TIM1->CCR2=0;
 800022a:	4b30      	ldr	r3, [pc, #192]	; (80002ec <rotary+0x1a0>)
 800022c:	2200      	movs	r2, #0
 800022e:	639a      	str	r2, [r3, #56]	; 0x38

	 if (obrot>45000 && obrot<135000) ori+=3;
 8000230:	683a      	ldr	r2, [r7, #0]
 8000232:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 8000236:	429a      	cmp	r2, r3
 8000238:	dd0b      	ble.n	8000252 <rotary+0x106>
 800023a:	683a      	ldr	r2, [r7, #0]
 800023c:	4b2c      	ldr	r3, [pc, #176]	; (80002f0 <rotary+0x1a4>)
 800023e:	429a      	cmp	r2, r3
 8000240:	dc07      	bgt.n	8000252 <rotary+0x106>
 8000242:	4b2c      	ldr	r3, [pc, #176]	; (80002f4 <rotary+0x1a8>)
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	b2db      	uxtb	r3, r3
 8000248:	3303      	adds	r3, #3
 800024a:	b2db      	uxtb	r3, r3
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4b29      	ldr	r3, [pc, #164]	; (80002f4 <rotary+0x1a8>)
 8000250:	701a      	strb	r2, [r3, #0]
	 if (obrot<-45000 && obrot>-135000) ori+=1;
 8000252:	683a      	ldr	r2, [r7, #0]
 8000254:	4b28      	ldr	r3, [pc, #160]	; (80002f8 <rotary+0x1ac>)
 8000256:	429a      	cmp	r2, r3
 8000258:	da0b      	bge.n	8000272 <rotary+0x126>
 800025a:	683a      	ldr	r2, [r7, #0]
 800025c:	4b27      	ldr	r3, [pc, #156]	; (80002fc <rotary+0x1b0>)
 800025e:	429a      	cmp	r2, r3
 8000260:	db07      	blt.n	8000272 <rotary+0x126>
 8000262:	4b24      	ldr	r3, [pc, #144]	; (80002f4 <rotary+0x1a8>)
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	b2db      	uxtb	r3, r3
 8000268:	3301      	adds	r3, #1
 800026a:	b2db      	uxtb	r3, r3
 800026c:	b2da      	uxtb	r2, r3
 800026e:	4b21      	ldr	r3, [pc, #132]	; (80002f4 <rotary+0x1a8>)
 8000270:	701a      	strb	r2, [r3, #0]
	 if ((obrot<-135000 && obrot>-225000) || (obrot>135000 && obrot<225000))  ori+=2;
 8000272:	683a      	ldr	r2, [r7, #0]
 8000274:	4b22      	ldr	r3, [pc, #136]	; (8000300 <rotary+0x1b4>)
 8000276:	429a      	cmp	r2, r3
 8000278:	da03      	bge.n	8000282 <rotary+0x136>
 800027a:	683a      	ldr	r2, [r7, #0]
 800027c:	4b21      	ldr	r3, [pc, #132]	; (8000304 <rotary+0x1b8>)
 800027e:	429a      	cmp	r2, r3
 8000280:	da07      	bge.n	8000292 <rotary+0x146>
 8000282:	683a      	ldr	r2, [r7, #0]
 8000284:	4b20      	ldr	r3, [pc, #128]	; (8000308 <rotary+0x1bc>)
 8000286:	429a      	cmp	r2, r3
 8000288:	dd0b      	ble.n	80002a2 <rotary+0x156>
 800028a:	683a      	ldr	r2, [r7, #0]
 800028c:	4b1f      	ldr	r3, [pc, #124]	; (800030c <rotary+0x1c0>)
 800028e:	429a      	cmp	r2, r3
 8000290:	dc07      	bgt.n	80002a2 <rotary+0x156>
 8000292:	4b18      	ldr	r3, [pc, #96]	; (80002f4 <rotary+0x1a8>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	b2db      	uxtb	r3, r3
 8000298:	3302      	adds	r3, #2
 800029a:	b2db      	uxtb	r3, r3
 800029c:	b2da      	uxtb	r2, r3
 800029e:	4b15      	ldr	r3, [pc, #84]	; (80002f4 <rotary+0x1a8>)
 80002a0:	701a      	strb	r2, [r3, #0]

	 if(ori>4) ori-=4;
 80002a2:	4b14      	ldr	r3, [pc, #80]	; (80002f4 <rotary+0x1a8>)
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	b25b      	sxtb	r3, r3
 80002a8:	2b04      	cmp	r3, #4
 80002aa:	dd07      	ble.n	80002bc <rotary+0x170>
 80002ac:	4b11      	ldr	r3, [pc, #68]	; (80002f4 <rotary+0x1a8>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	3b04      	subs	r3, #4
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	b2da      	uxtb	r2, r3
 80002b8:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <rotary+0x1a8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	 angle=0;
 80002bc:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <rotary+0x18c>)
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
	 angle1=0;
 80002c2:	4b13      	ldr	r3, [pc, #76]	; (8000310 <rotary+0x1c4>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
	 Transmit=1;
 80002c8:	4b04      	ldr	r3, [pc, #16]	; (80002dc <rotary+0x190>)
 80002ca:	2201      	movs	r2, #1
 80002cc:	701a      	strb	r2, [r3, #0]
//
}
 80002ce:	3710      	adds	r7, #16
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	200000f0 	.word	0x200000f0
 80002d8:	20000064 	.word	0x20000064
 80002dc:	20000088 	.word	0x20000088
 80002e0:	66666667 	.word	0x66666667
 80002e4:	40010800 	.word	0x40010800
 80002e8:	40011000 	.word	0x40011000
 80002ec:	40012c00 	.word	0x40012c00
 80002f0:	00020f57 	.word	0x00020f57
 80002f4:	20000007 	.word	0x20000007
 80002f8:	ffff5038 	.word	0xffff5038
 80002fc:	fffdf0a9 	.word	0xfffdf0a9
 8000300:	fffdf0a8 	.word	0xfffdf0a8
 8000304:	fffc9119 	.word	0xfffc9119
 8000308:	00020f58 	.word	0x00020f58
 800030c:	00036ee7 	.word	0x00036ee7
 8000310:	2000006c 	.word	0x2000006c

08000314 <drive>:

 }

/**************************************************************/
 void drive(int power)
 {
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
	uint8_t wall_left, wall_right;

	HAL_GPIO_WritePin(AIN1_GPIO_Port,AIN1_Pin,0);
 800031c:	4858      	ldr	r0, [pc, #352]	; (8000480 <drive+0x16c>)
 800031e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000322:	2200      	movs	r2, #0
 8000324:	f005 fe90 	bl	8006048 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AIN2_GPIO_Port,AIN2_Pin,1);
 8000328:	4855      	ldr	r0, [pc, #340]	; (8000480 <drive+0x16c>)
 800032a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800032e:	2201      	movs	r2, #1
 8000330:	f005 fe8a 	bl	8006048 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIN1_GPIO_Port,BIN1_Pin,0);
 8000334:	4853      	ldr	r0, [pc, #332]	; (8000484 <drive+0x170>)
 8000336:	f44f 7100 	mov.w	r1, #512	; 0x200
 800033a:	2200      	movs	r2, #0
 800033c:	f005 fe84 	bl	8006048 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIN2_GPIO_Port,BIN2_Pin,1);
 8000340:	4850      	ldr	r0, [pc, #320]	; (8000484 <drive+0x170>)
 8000342:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000346:	2201      	movs	r2, #1
 8000348:	f005 fe7e 	bl	8006048 <HAL_GPIO_WritePin>

	if(SensorTab[2][indexer]-dys0[2]<SL_Tresh && SensorTab[0][indexer]-dys0[0]<SL_Tresh) wall_left=0;
 800034c:	4b4e      	ldr	r3, [pc, #312]	; (8000488 <drive+0x174>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	b25a      	sxtb	r2, r3
 8000352:	4b4e      	ldr	r3, [pc, #312]	; (800048c <drive+0x178>)
 8000354:	320a      	adds	r2, #10
 8000356:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800035a:	4b4d      	ldr	r3, [pc, #308]	; (8000490 <drive+0x17c>)
 800035c:	889b      	ldrh	r3, [r3, #4]
 800035e:	b29b      	uxth	r3, r3
 8000360:	1ad3      	subs	r3, r2, r3
 8000362:	f113 0f96 	cmn.w	r3, #150	; 0x96
 8000366:	da0f      	bge.n	8000388 <drive+0x74>
 8000368:	4b47      	ldr	r3, [pc, #284]	; (8000488 <drive+0x174>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	b25a      	sxtb	r2, r3
 800036e:	4b47      	ldr	r3, [pc, #284]	; (800048c <drive+0x178>)
 8000370:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000374:	4b46      	ldr	r3, [pc, #280]	; (8000490 <drive+0x17c>)
 8000376:	881b      	ldrh	r3, [r3, #0]
 8000378:	b29b      	uxth	r3, r3
 800037a:	1ad3      	subs	r3, r2, r3
 800037c:	f113 0f96 	cmn.w	r3, #150	; 0x96
 8000380:	da02      	bge.n	8000388 <drive+0x74>
 8000382:	2300      	movs	r3, #0
 8000384:	73fb      	strb	r3, [r7, #15]
 8000386:	e001      	b.n	800038c <drive+0x78>
	else wall_left=1;
 8000388:	2301      	movs	r3, #1
 800038a:	73fb      	strb	r3, [r7, #15]
	if(SensorTab[3][indexer]-dys0[3]<SR_Tresh && SensorTab[1][indexer]-dys0[1]<SR_Tresh) wall_right=0;
 800038c:	4b3e      	ldr	r3, [pc, #248]	; (8000488 <drive+0x174>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	b25a      	sxtb	r2, r3
 8000392:	4b3e      	ldr	r3, [pc, #248]	; (800048c <drive+0x178>)
 8000394:	320f      	adds	r2, #15
 8000396:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800039a:	4b3d      	ldr	r3, [pc, #244]	; (8000490 <drive+0x17c>)
 800039c:	88db      	ldrh	r3, [r3, #6]
 800039e:	b29b      	uxth	r3, r3
 80003a0:	1ad3      	subs	r3, r2, r3
 80003a2:	f113 0f96 	cmn.w	r3, #150	; 0x96
 80003a6:	da10      	bge.n	80003ca <drive+0xb6>
 80003a8:	4b37      	ldr	r3, [pc, #220]	; (8000488 <drive+0x174>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	b25a      	sxtb	r2, r3
 80003ae:	4b37      	ldr	r3, [pc, #220]	; (800048c <drive+0x178>)
 80003b0:	3205      	adds	r2, #5
 80003b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003b6:	4b36      	ldr	r3, [pc, #216]	; (8000490 <drive+0x17c>)
 80003b8:	885b      	ldrh	r3, [r3, #2]
 80003ba:	b29b      	uxth	r3, r3
 80003bc:	1ad3      	subs	r3, r2, r3
 80003be:	f113 0f96 	cmn.w	r3, #150	; 0x96
 80003c2:	da02      	bge.n	80003ca <drive+0xb6>
 80003c4:	2300      	movs	r3, #0
 80003c6:	73bb      	strb	r3, [r7, #14]
 80003c8:	e001      	b.n	80003ce <drive+0xba>
	else wall_right=1;
 80003ca:	2301      	movs	r3, #1
 80003cc:	73bb      	strb	r3, [r7, #14]

	change_wall=0;
 80003ce:	4b31      	ldr	r3, [pc, #196]	; (8000494 <drive+0x180>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	701a      	strb	r2, [r3, #0]
	distance=0;
 80003d4:	4b30      	ldr	r3, [pc, #192]	; (8000498 <drive+0x184>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,0);
 80003da:	4830      	ldr	r0, [pc, #192]	; (800049c <drive+0x188>)
 80003dc:	2104      	movs	r1, #4
 80003de:	2200      	movs	r2, #0
 80003e0:	f005 fe32 	bl	8006048 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,0);
 80003e4:	4827      	ldr	r0, [pc, #156]	; (8000484 <drive+0x170>)
 80003e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003ea:	2200      	movs	r2, #0
 80003ec:	f005 fe2c 	bl	8006048 <HAL_GPIO_WritePin>

	tryb=1;
 80003f0:	4b2b      	ldr	r3, [pc, #172]	; (80004a0 <drive+0x18c>)
 80003f2:	2201      	movs	r2, #1
 80003f4:	701a      	strb	r2, [r3, #0]
	while(distance<DISTANCE)
 80003f6:	bf00      	nop
 80003f8:	4b27      	ldr	r3, [pc, #156]	; (8000498 <drive+0x184>)
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	4b29      	ldr	r3, [pc, #164]	; (80004a4 <drive+0x190>)
 80003fe:	429a      	cmp	r2, r3
 8000400:	ddfa      	ble.n	80003f8 <drive+0xe4>
//				distance=69000;
//			}
//		}
	}

   	tryb=0;
 8000402:	4b27      	ldr	r3, [pc, #156]	; (80004a0 <drive+0x18c>)
 8000404:	2200      	movs	r2, #0
 8000406:	701a      	strb	r2, [r3, #0]

	TIM1->CCR1=0;
 8000408:	4b27      	ldr	r3, [pc, #156]	; (80004a8 <drive+0x194>)
 800040a:	2200      	movs	r2, #0
 800040c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=0;
 800040e:	4b26      	ldr	r3, [pc, #152]	; (80004a8 <drive+0x194>)
 8000410:	2200      	movs	r2, #0
 8000412:	639a      	str	r2, [r3, #56]	; 0x38

	if (ori==1) y++;
 8000414:	4b25      	ldr	r3, [pc, #148]	; (80004ac <drive+0x198>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	b25b      	sxtb	r3, r3
 800041a:	2b01      	cmp	r3, #1
 800041c:	d107      	bne.n	800042e <drive+0x11a>
 800041e:	4b24      	ldr	r3, [pc, #144]	; (80004b0 <drive+0x19c>)
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	b2db      	uxtb	r3, r3
 8000424:	3301      	adds	r3, #1
 8000426:	b2da      	uxtb	r2, r3
 8000428:	4b21      	ldr	r3, [pc, #132]	; (80004b0 <drive+0x19c>)
 800042a:	701a      	strb	r2, [r3, #0]
 800042c:	e025      	b.n	800047a <drive+0x166>
	else if(ori==2) x++;
 800042e:	4b1f      	ldr	r3, [pc, #124]	; (80004ac <drive+0x198>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	b25b      	sxtb	r3, r3
 8000434:	2b02      	cmp	r3, #2
 8000436:	d107      	bne.n	8000448 <drive+0x134>
 8000438:	4b1e      	ldr	r3, [pc, #120]	; (80004b4 <drive+0x1a0>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	b2db      	uxtb	r3, r3
 800043e:	3301      	adds	r3, #1
 8000440:	b2da      	uxtb	r2, r3
 8000442:	4b1c      	ldr	r3, [pc, #112]	; (80004b4 <drive+0x1a0>)
 8000444:	701a      	strb	r2, [r3, #0]
 8000446:	e018      	b.n	800047a <drive+0x166>
	else if(ori==3) y--;
 8000448:	4b18      	ldr	r3, [pc, #96]	; (80004ac <drive+0x198>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	b25b      	sxtb	r3, r3
 800044e:	2b03      	cmp	r3, #3
 8000450:	d107      	bne.n	8000462 <drive+0x14e>
 8000452:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <drive+0x19c>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	b2db      	uxtb	r3, r3
 8000458:	3b01      	subs	r3, #1
 800045a:	b2da      	uxtb	r2, r3
 800045c:	4b14      	ldr	r3, [pc, #80]	; (80004b0 <drive+0x19c>)
 800045e:	701a      	strb	r2, [r3, #0]
 8000460:	e00b      	b.n	800047a <drive+0x166>
	else if(ori==4) x--;
 8000462:	4b12      	ldr	r3, [pc, #72]	; (80004ac <drive+0x198>)
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	b25b      	sxtb	r3, r3
 8000468:	2b04      	cmp	r3, #4
 800046a:	d106      	bne.n	800047a <drive+0x166>
 800046c:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <drive+0x1a0>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	b2db      	uxtb	r3, r3
 8000472:	3b01      	subs	r3, #1
 8000474:	b2da      	uxtb	r2, r3
 8000476:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <drive+0x1a0>)
 8000478:	701a      	strb	r2, [r3, #0]

 }
 800047a:	3710      	adds	r7, #16
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	40010800 	.word	0x40010800
 8000484:	40011000 	.word	0x40011000
 8000488:	20000074 	.word	0x20000074
 800048c:	20000498 	.word	0x20000498
 8000490:	20000050 	.word	0x20000050
 8000494:	2000040c 	.word	0x2000040c
 8000498:	20000068 	.word	0x20000068
 800049c:	40011400 	.word	0x40011400
 80004a0:	20000075 	.word	0x20000075
 80004a4:	00026f0b 	.word	0x00026f0b
 80004a8:	40012c00 	.word	0x40012c00
 80004ac:	20000007 	.word	0x20000007
 80004b0:	20000006 	.word	0x20000006
 80004b4:	20000005 	.word	0x20000005

080004b8 <istarget>:
/****************************************************/
int istarget(int i1, int j1)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]

	if (target[0]==target[1])
 80004c2:	4b2b      	ldr	r3, [pc, #172]	; (8000570 <istarget+0xb8>)
 80004c4:	781a      	ldrb	r2, [r3, #0]
 80004c6:	4b2a      	ldr	r3, [pc, #168]	; (8000570 <istarget+0xb8>)
 80004c8:	785b      	ldrb	r3, [r3, #1]
 80004ca:	b252      	sxtb	r2, r2
 80004cc:	b25b      	sxtb	r3, r3
 80004ce:	429a      	cmp	r2, r3
 80004d0:	d10f      	bne.n	80004f2 <istarget+0x3a>
	{
		if(target[0]==i1&&target[0]==j1)return 1;
 80004d2:	4b27      	ldr	r3, [pc, #156]	; (8000570 <istarget+0xb8>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	b25a      	sxtb	r2, r3
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	429a      	cmp	r2, r3
 80004dc:	d107      	bne.n	80004ee <istarget+0x36>
 80004de:	4b24      	ldr	r3, [pc, #144]	; (8000570 <istarget+0xb8>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	b25a      	sxtb	r2, r3
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	429a      	cmp	r2, r3
 80004e8:	d101      	bne.n	80004ee <istarget+0x36>
 80004ea:	2301      	movs	r3, #1
 80004ec:	e03a      	b.n	8000564 <istarget+0xac>
		else return 0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	e038      	b.n	8000564 <istarget+0xac>
	}
	else
	{
		if(target[0]==i1&&target[0]==j1)return 1;
 80004f2:	4b1f      	ldr	r3, [pc, #124]	; (8000570 <istarget+0xb8>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	b25a      	sxtb	r2, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d107      	bne.n	800050e <istarget+0x56>
 80004fe:	4b1c      	ldr	r3, [pc, #112]	; (8000570 <istarget+0xb8>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	b25a      	sxtb	r2, r3
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	429a      	cmp	r2, r3
 8000508:	d101      	bne.n	800050e <istarget+0x56>
 800050a:	2301      	movs	r3, #1
 800050c:	e02a      	b.n	8000564 <istarget+0xac>
		else if(target[1]==i1&&target[0]==j1)return 1;
 800050e:	4b18      	ldr	r3, [pc, #96]	; (8000570 <istarget+0xb8>)
 8000510:	785b      	ldrb	r3, [r3, #1]
 8000512:	b25a      	sxtb	r2, r3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	429a      	cmp	r2, r3
 8000518:	d107      	bne.n	800052a <istarget+0x72>
 800051a:	4b15      	ldr	r3, [pc, #84]	; (8000570 <istarget+0xb8>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	b25a      	sxtb	r2, r3
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	429a      	cmp	r2, r3
 8000524:	d101      	bne.n	800052a <istarget+0x72>
 8000526:	2301      	movs	r3, #1
 8000528:	e01c      	b.n	8000564 <istarget+0xac>
		else if(target[0]==i1&&target[1]==j1)return 1;
 800052a:	4b11      	ldr	r3, [pc, #68]	; (8000570 <istarget+0xb8>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	b25a      	sxtb	r2, r3
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	429a      	cmp	r2, r3
 8000534:	d107      	bne.n	8000546 <istarget+0x8e>
 8000536:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <istarget+0xb8>)
 8000538:	785b      	ldrb	r3, [r3, #1]
 800053a:	b25a      	sxtb	r2, r3
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	429a      	cmp	r2, r3
 8000540:	d101      	bne.n	8000546 <istarget+0x8e>
 8000542:	2301      	movs	r3, #1
 8000544:	e00e      	b.n	8000564 <istarget+0xac>
		else if(target[1]==i1&&target[1]==j1)return 1;
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <istarget+0xb8>)
 8000548:	785b      	ldrb	r3, [r3, #1]
 800054a:	b25a      	sxtb	r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	429a      	cmp	r2, r3
 8000550:	d107      	bne.n	8000562 <istarget+0xaa>
 8000552:	4b07      	ldr	r3, [pc, #28]	; (8000570 <istarget+0xb8>)
 8000554:	785b      	ldrb	r3, [r3, #1]
 8000556:	b25a      	sxtb	r2, r3
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	429a      	cmp	r2, r3
 800055c:	d101      	bne.n	8000562 <istarget+0xaa>
 800055e:	2301      	movs	r3, #1
 8000560:	e000      	b.n	8000564 <istarget+0xac>
		else return 0;
 8000562:	2300      	movs	r3, #0
	}
}
 8000564:	4618      	mov	r0, r3
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	20000008 	.word	0x20000008

08000574 <findPath>:
/****************************************************/
void findPath()
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
	int curx=x;
 800057a:	4b2e      	ldr	r3, [pc, #184]	; (8000634 <findPath+0xc0>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	b25b      	sxtb	r3, r3
 8000580:	60fb      	str	r3, [r7, #12]
	int cury=y;
 8000582:	4b2d      	ldr	r3, [pc, #180]	; (8000638 <findPath+0xc4>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	b25b      	sxtb	r3, r3
 8000588:	60bb      	str	r3, [r7, #8]
	int iter=0;
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
	int v;
	for (v=0; v<256; v++) path[v]=-1;
 800058e:	2300      	movs	r3, #0
 8000590:	603b      	str	r3, [r7, #0]
 8000592:	e007      	b.n	80005a4 <findPath+0x30>
 8000594:	4a29      	ldr	r2, [pc, #164]	; (800063c <findPath+0xc8>)
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	4413      	add	r3, r2
 800059a:	22ff      	movs	r2, #255	; 0xff
 800059c:	701a      	strb	r2, [r3, #0]
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	3301      	adds	r3, #1
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	2bff      	cmp	r3, #255	; 0xff
 80005a8:	ddf4      	ble.n	8000594 <findPath+0x20>
	while(1)
	{
		path[iter]=lowestNeighbourCell(curx, cury);
 80005aa:	68f8      	ldr	r0, [r7, #12]
 80005ac:	68b9      	ldr	r1, [r7, #8]
 80005ae:	f000 fc63 	bl	8000e78 <lowestNeighbourCell>
 80005b2:	4603      	mov	r3, r0
 80005b4:	461a      	mov	r2, r3
 80005b6:	4921      	ldr	r1, [pc, #132]	; (800063c <findPath+0xc8>)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	440b      	add	r3, r1
 80005bc:	701a      	strb	r2, [r3, #0]
                if( path[iter]==1) cury++;
 80005be:	4a1f      	ldr	r2, [pc, #124]	; (800063c <findPath+0xc8>)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4413      	add	r3, r2
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	b25b      	sxtb	r3, r3
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d103      	bne.n	80005d4 <findPath+0x60>
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	3301      	adds	r3, #1
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	e01f      	b.n	8000614 <findPath+0xa0>
                else if (path[iter]==2) curx++;
 80005d4:	4a19      	ldr	r2, [pc, #100]	; (800063c <findPath+0xc8>)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4413      	add	r3, r2
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b25b      	sxtb	r3, r3
 80005de:	2b02      	cmp	r3, #2
 80005e0:	d103      	bne.n	80005ea <findPath+0x76>
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	3301      	adds	r3, #1
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	e014      	b.n	8000614 <findPath+0xa0>
                else if (path[iter]==3) cury--;
 80005ea:	4a14      	ldr	r2, [pc, #80]	; (800063c <findPath+0xc8>)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4413      	add	r3, r2
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	b25b      	sxtb	r3, r3
 80005f4:	2b03      	cmp	r3, #3
 80005f6:	d103      	bne.n	8000600 <findPath+0x8c>
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	3b01      	subs	r3, #1
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	e009      	b.n	8000614 <findPath+0xa0>
                else if (path[iter]==4) curx--;
 8000600:	4a0e      	ldr	r2, [pc, #56]	; (800063c <findPath+0xc8>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4413      	add	r3, r2
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	b25b      	sxtb	r3, r3
 800060a:	2b04      	cmp	r3, #4
 800060c:	d102      	bne.n	8000614 <findPath+0xa0>
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	3b01      	subs	r3, #1
 8000612:	60fb      	str	r3, [r7, #12]
		if(istarget(curx,cury)==1) break;
 8000614:	68f8      	ldr	r0, [r7, #12]
 8000616:	68b9      	ldr	r1, [r7, #8]
 8000618:	f7ff ff4e 	bl	80004b8 <istarget>
 800061c:	4603      	mov	r3, r0
 800061e:	2b01      	cmp	r3, #1
 8000620:	d100      	bne.n	8000624 <findPath+0xb0>
 8000622:	e003      	b.n	800062c <findPath+0xb8>
		iter++;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	3301      	adds	r3, #1
 8000628:	607b      	str	r3, [r7, #4]
	}
 800062a:	e7be      	b.n	80005aa <findPath+0x36>
//	start=0;
}
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000005 	.word	0x20000005
 8000638:	20000006 	.word	0x20000006
 800063c:	20000118 	.word	0x20000118

08000640 <readPath>:
/****************************************************/
void readPath()
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
	int iter=0;
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
	while(1)
	{
		if (path[iter]>0)
 800064a:	4a11      	ldr	r2, [pc, #68]	; (8000690 <readPath+0x50>)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4413      	add	r3, r2
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	b25b      	sxtb	r3, r3
 8000654:	2b00      	cmp	r3, #0
 8000656:	dd0b      	ble.n	8000670 <readPath+0x30>
		{
			state=path[iter];
 8000658:	4a0d      	ldr	r2, [pc, #52]	; (8000690 <readPath+0x50>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4413      	add	r3, r2
 800065e:	781a      	ldrb	r2, [r3, #0]
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <readPath+0x54>)
 8000662:	701a      	strb	r2, [r3, #0]
			path[iter]=-1;
 8000664:	4a0a      	ldr	r2, [pc, #40]	; (8000690 <readPath+0x50>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	22ff      	movs	r2, #255	; 0xff
 800066c:	701a      	strb	r2, [r3, #0]
			break;
 800066e:	e00a      	b.n	8000686 <readPath+0x46>
		}
		iter++;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	3301      	adds	r3, #1
 8000674:	607b      	str	r3, [r7, #4]
		if (iter>255)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2bff      	cmp	r3, #255	; 0xff
 800067a:	dd03      	ble.n	8000684 <readPath+0x44>
		{
			state=-1;
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <readPath+0x54>)
 800067e:	22ff      	movs	r2, #255	; 0xff
 8000680:	701a      	strb	r2, [r3, #0]
			break;
 8000682:	e000      	b.n	8000686 <readPath+0x46>
		}
	}
 8000684:	e7e1      	b.n	800064a <readPath+0xa>
}
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	20000118 	.word	0x20000118
 8000694:	20000076 	.word	0x20000076

08000698 <set>:
/****************************************************/
void set()
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	if (state-ori==1 || state-ori==-3) rotary(VELR,90000/*+angle/2*/);
 800069c:	4b25      	ldr	r3, [pc, #148]	; (8000734 <set+0x9c>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b25a      	sxtb	r2, r3
 80006a2:	4b25      	ldr	r3, [pc, #148]	; (8000738 <set+0xa0>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	b25b      	sxtb	r3, r3
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d009      	beq.n	80006c2 <set+0x2a>
 80006ae:	4b21      	ldr	r3, [pc, #132]	; (8000734 <set+0x9c>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	b25a      	sxtb	r2, r3
 80006b4:	4b20      	ldr	r3, [pc, #128]	; (8000738 <set+0xa0>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	b25b      	sxtb	r3, r3
 80006ba:	1ad3      	subs	r3, r2, r3
 80006bc:	f113 0f03 	cmn.w	r3, #3
 80006c0:	d105      	bne.n	80006ce <set+0x36>
 80006c2:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80006c6:	491d      	ldr	r1, [pc, #116]	; (800073c <set+0xa4>)
 80006c8:	f7ff fd40 	bl	800014c <rotary>
 80006cc:	e030      	b.n	8000730 <set+0x98>
	else if (state-ori==2 || state-ori==-2) rotary(VELR,180000/*+angle/2*/);
 80006ce:	4b19      	ldr	r3, [pc, #100]	; (8000734 <set+0x9c>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	b25a      	sxtb	r2, r3
 80006d4:	4b18      	ldr	r3, [pc, #96]	; (8000738 <set+0xa0>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	b25b      	sxtb	r3, r3
 80006da:	1ad3      	subs	r3, r2, r3
 80006dc:	2b02      	cmp	r3, #2
 80006de:	d009      	beq.n	80006f4 <set+0x5c>
 80006e0:	4b14      	ldr	r3, [pc, #80]	; (8000734 <set+0x9c>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	b25a      	sxtb	r2, r3
 80006e6:	4b14      	ldr	r3, [pc, #80]	; (8000738 <set+0xa0>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	b25b      	sxtb	r3, r3
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	f113 0f02 	cmn.w	r3, #2
 80006f2:	d105      	bne.n	8000700 <set+0x68>
 80006f4:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80006f8:	4911      	ldr	r1, [pc, #68]	; (8000740 <set+0xa8>)
 80006fa:	f7ff fd27 	bl	800014c <rotary>
 80006fe:	e017      	b.n	8000730 <set+0x98>
	else if (state-ori==3 || state-ori==-1) rotary(VELR,-95000/*+angle/2*/);
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <set+0x9c>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	b25a      	sxtb	r2, r3
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <set+0xa0>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	b25b      	sxtb	r3, r3
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	2b03      	cmp	r3, #3
 8000710:	d009      	beq.n	8000726 <set+0x8e>
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <set+0x9c>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	b25a      	sxtb	r2, r3
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <set+0xa0>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	b25b      	sxtb	r3, r3
 800071e:	1ad3      	subs	r3, r2, r3
 8000720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000724:	d104      	bne.n	8000730 <set+0x98>
 8000726:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800072a:	4906      	ldr	r1, [pc, #24]	; (8000744 <set+0xac>)
 800072c:	f7ff fd0e 	bl	800014c <rotary>
}
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000076 	.word	0x20000076
 8000738:	20000007 	.word	0x20000007
 800073c:	00015f90 	.word	0x00015f90
 8000740:	0002bf20 	.word	0x0002bf20
 8000744:	fffe8ce8 	.word	0xfffe8ce8

08000748 <rstdrive>:
/****************************************************/
void rstdrive()
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
//	int8_t i1;
//    static int licznik=0;
    mapCell();
 800074c:	f000 f822 	bl	8000794 <mapCell>

	x=1;
 8000750:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <rstdrive+0x38>)
 8000752:	2201      	movs	r2, #1
 8000754:	701a      	strb	r2, [r3, #0]
	y=1;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <rstdrive+0x3c>)
 8000758:	2201      	movs	r2, #1
 800075a:	701a      	strb	r2, [r3, #0]
	ori=ORI_START;
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <rstdrive+0x40>)
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
        flood();
 8000762:	f000 fce9 	bl	8001138 <flood>
	findPath();
 8000766:	f7ff ff05 	bl	8000574 <findPath>
	Status=STOP_STATUS;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <rstdrive+0x44>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
//	while (Status==STOP_STATUS) HAL_Delay(50);

//	for(i1=0;i1<4;i1++) dys0[i1]=SensorTab[i1];
	HAL_Delay(1000);
 8000770:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000774:	f006 fe4e 	bl	8007414 <HAL_Delay>
	angle=0;
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <rstdrive+0x48>)
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]

}
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000005 	.word	0x20000005
 8000784:	20000006 	.word	0x20000006
 8000788:	20000007 	.word	0x20000007
 800078c:	20000060 	.word	0x20000060
 8000790:	20000064 	.word	0x20000064

08000794 <mapCell>:
/****************************************************/
void mapCell()
{
 8000794:	b4b0      	push	{r4, r5, r7}
 8000796:	b089      	sub	sp, #36	; 0x24
 8000798:	af00      	add	r7, sp, #0
	int8_t i;
	int32_t czujnik[6];

	for (i=0;i<6;i++) czujnik[i]=SensorTab[i][indexer]-dys0[i];
 800079a:	2300      	movs	r3, #0
 800079c:	77fb      	strb	r3, [r7, #31]
 800079e:	e01d      	b.n	80007dc <mapCell+0x48>
 80007a0:	f997 101f 	ldrsb.w	r1, [r7, #31]
 80007a4:	f997 201f 	ldrsb.w	r2, [r7, #31]
 80007a8:	4b99      	ldr	r3, [pc, #612]	; (8000a10 <mapCell+0x27c>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	b25c      	sxtb	r4, r3
 80007ae:	4899      	ldr	r0, [pc, #612]	; (8000a14 <mapCell+0x280>)
 80007b0:	4613      	mov	r3, r2
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	4413      	add	r3, r2
 80007b6:	4423      	add	r3, r4
 80007b8:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80007bc:	f997 001f 	ldrsb.w	r0, [r7, #31]
 80007c0:	4b95      	ldr	r3, [pc, #596]	; (8000a18 <mapCell+0x284>)
 80007c2:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	1ad2      	subs	r2, r2, r3
 80007ca:	008b      	lsls	r3, r1, #2
 80007cc:	f107 0120 	add.w	r1, r7, #32
 80007d0:	440b      	add	r3, r1
 80007d2:	f843 2c1c 	str.w	r2, [r3, #-28]
 80007d6:	7ffb      	ldrb	r3, [r7, #31]
 80007d8:	3301      	adds	r3, #1
 80007da:	77fb      	strb	r3, [r7, #31]
 80007dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80007e0:	2b05      	cmp	r3, #5
 80007e2:	dddd      	ble.n	80007a0 <mapCell+0xc>
	walls[x][y]=0;
 80007e4:	4b8d      	ldr	r3, [pc, #564]	; (8000a1c <mapCell+0x288>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	b25a      	sxtb	r2, r3
 80007ea:	4b8d      	ldr	r3, [pc, #564]	; (8000a20 <mapCell+0x28c>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	b258      	sxtb	r0, r3
 80007f0:	498c      	ldr	r1, [pc, #560]	; (8000a24 <mapCell+0x290>)
 80007f2:	4613      	mov	r3, r2
 80007f4:	00db      	lsls	r3, r3, #3
 80007f6:	4413      	add	r3, r2
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	4403      	add	r3, r0
 80007fc:	440b      	add	r3, r1
 80007fe:	2200      	movs	r2, #0
 8000800:	701a      	strb	r2, [r3, #0]
	if(ori==1)
 8000802:	4b89      	ldr	r3, [pc, #548]	; (8000a28 <mapCell+0x294>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	b25b      	sxtb	r3, r3
 8000808:	2b01      	cmp	r3, #1
 800080a:	d17d      	bne.n	8000908 <mapCell+0x174>
	{
		if (czujnik[2] > SL_Tresh && czujnik[0] > SL_Tresh) walls[x][y]+=8;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8000812:	db24      	blt.n	800085e <mapCell+0xca>
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	f113 0f95 	cmn.w	r3, #149	; 0x95
 800081a:	db20      	blt.n	800085e <mapCell+0xca>
 800081c:	4b7f      	ldr	r3, [pc, #508]	; (8000a1c <mapCell+0x288>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	b25a      	sxtb	r2, r3
 8000822:	4b7f      	ldr	r3, [pc, #508]	; (8000a20 <mapCell+0x28c>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	b25c      	sxtb	r4, r3
 8000828:	4b7c      	ldr	r3, [pc, #496]	; (8000a1c <mapCell+0x288>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	b259      	sxtb	r1, r3
 800082e:	4b7c      	ldr	r3, [pc, #496]	; (8000a20 <mapCell+0x28c>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	b25d      	sxtb	r5, r3
 8000834:	487b      	ldr	r0, [pc, #492]	; (8000a24 <mapCell+0x290>)
 8000836:	460b      	mov	r3, r1
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	440b      	add	r3, r1
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	442b      	add	r3, r5
 8000840:	4403      	add	r3, r0
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	3308      	adds	r3, #8
 8000848:	b2db      	uxtb	r3, r3
 800084a:	b2d9      	uxtb	r1, r3
 800084c:	4875      	ldr	r0, [pc, #468]	; (8000a24 <mapCell+0x290>)
 800084e:	4613      	mov	r3, r2
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	4413      	add	r3, r2
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	4423      	add	r3, r4
 8000858:	4403      	add	r3, r0
 800085a:	460a      	mov	r2, r1
 800085c:	701a      	strb	r2, [r3, #0]
		if (czujnik[4] > SF_Tresh && czujnik[5] > SF_Tresh) walls[x][y]+=1;
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	f113 0fc7 	cmn.w	r3, #199	; 0xc7
 8000864:	db24      	blt.n	80008b0 <mapCell+0x11c>
 8000866:	69bb      	ldr	r3, [r7, #24]
 8000868:	f113 0fc7 	cmn.w	r3, #199	; 0xc7
 800086c:	db20      	blt.n	80008b0 <mapCell+0x11c>
 800086e:	4b6b      	ldr	r3, [pc, #428]	; (8000a1c <mapCell+0x288>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	b25a      	sxtb	r2, r3
 8000874:	4b6a      	ldr	r3, [pc, #424]	; (8000a20 <mapCell+0x28c>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	b25c      	sxtb	r4, r3
 800087a:	4b68      	ldr	r3, [pc, #416]	; (8000a1c <mapCell+0x288>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	b259      	sxtb	r1, r3
 8000880:	4b67      	ldr	r3, [pc, #412]	; (8000a20 <mapCell+0x28c>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b25d      	sxtb	r5, r3
 8000886:	4867      	ldr	r0, [pc, #412]	; (8000a24 <mapCell+0x290>)
 8000888:	460b      	mov	r3, r1
 800088a:	00db      	lsls	r3, r3, #3
 800088c:	440b      	add	r3, r1
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	442b      	add	r3, r5
 8000892:	4403      	add	r3, r0
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	b2db      	uxtb	r3, r3
 8000898:	3301      	adds	r3, #1
 800089a:	b2db      	uxtb	r3, r3
 800089c:	b2d9      	uxtb	r1, r3
 800089e:	4861      	ldr	r0, [pc, #388]	; (8000a24 <mapCell+0x290>)
 80008a0:	4613      	mov	r3, r2
 80008a2:	00db      	lsls	r3, r3, #3
 80008a4:	4413      	add	r3, r2
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	4423      	add	r3, r4
 80008aa:	4403      	add	r3, r0
 80008ac:	460a      	mov	r2, r1
 80008ae:	701a      	strb	r2, [r3, #0]
		if (czujnik[3] > SR_Tresh && czujnik[1] > SR_Tresh) walls[x][y]+=2;
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	f113 0f95 	cmn.w	r3, #149	; 0x95
 80008b6:	f2c0 81bc 	blt.w	8000c32 <mapCell+0x49e>
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	f113 0f95 	cmn.w	r3, #149	; 0x95
 80008c0:	f2c0 81b7 	blt.w	8000c32 <mapCell+0x49e>
 80008c4:	4b55      	ldr	r3, [pc, #340]	; (8000a1c <mapCell+0x288>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	b25a      	sxtb	r2, r3
 80008ca:	4b55      	ldr	r3, [pc, #340]	; (8000a20 <mapCell+0x28c>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	b25c      	sxtb	r4, r3
 80008d0:	4b52      	ldr	r3, [pc, #328]	; (8000a1c <mapCell+0x288>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	b259      	sxtb	r1, r3
 80008d6:	4b52      	ldr	r3, [pc, #328]	; (8000a20 <mapCell+0x28c>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	b25d      	sxtb	r5, r3
 80008dc:	4851      	ldr	r0, [pc, #324]	; (8000a24 <mapCell+0x290>)
 80008de:	460b      	mov	r3, r1
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	440b      	add	r3, r1
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	442b      	add	r3, r5
 80008e8:	4403      	add	r3, r0
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	3302      	adds	r3, #2
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	b2d9      	uxtb	r1, r3
 80008f4:	484b      	ldr	r0, [pc, #300]	; (8000a24 <mapCell+0x290>)
 80008f6:	4613      	mov	r3, r2
 80008f8:	00db      	lsls	r3, r3, #3
 80008fa:	4413      	add	r3, r2
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	4423      	add	r3, r4
 8000900:	4403      	add	r3, r0
 8000902:	460a      	mov	r2, r1
 8000904:	701a      	strb	r2, [r3, #0]
 8000906:	e194      	b.n	8000c32 <mapCell+0x49e>
	}
	else if(ori==2)
 8000908:	4b47      	ldr	r3, [pc, #284]	; (8000a28 <mapCell+0x294>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	b25b      	sxtb	r3, r3
 800090e:	2b02      	cmp	r3, #2
 8000910:	f040 808c 	bne.w	8000a2c <mapCell+0x298>
	{
		if (czujnik[2] > SL_Tresh && czujnik[0] > SL_Tresh) walls[x][y]+=1;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	f113 0f95 	cmn.w	r3, #149	; 0x95
 800091a:	db24      	blt.n	8000966 <mapCell+0x1d2>
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8000922:	db20      	blt.n	8000966 <mapCell+0x1d2>
 8000924:	4b3d      	ldr	r3, [pc, #244]	; (8000a1c <mapCell+0x288>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	b25a      	sxtb	r2, r3
 800092a:	4b3d      	ldr	r3, [pc, #244]	; (8000a20 <mapCell+0x28c>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	b25c      	sxtb	r4, r3
 8000930:	4b3a      	ldr	r3, [pc, #232]	; (8000a1c <mapCell+0x288>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	b259      	sxtb	r1, r3
 8000936:	4b3a      	ldr	r3, [pc, #232]	; (8000a20 <mapCell+0x28c>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	b25d      	sxtb	r5, r3
 800093c:	4839      	ldr	r0, [pc, #228]	; (8000a24 <mapCell+0x290>)
 800093e:	460b      	mov	r3, r1
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	440b      	add	r3, r1
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	442b      	add	r3, r5
 8000948:	4403      	add	r3, r0
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	b2db      	uxtb	r3, r3
 800094e:	3301      	adds	r3, #1
 8000950:	b2db      	uxtb	r3, r3
 8000952:	b2d9      	uxtb	r1, r3
 8000954:	4833      	ldr	r0, [pc, #204]	; (8000a24 <mapCell+0x290>)
 8000956:	4613      	mov	r3, r2
 8000958:	00db      	lsls	r3, r3, #3
 800095a:	4413      	add	r3, r2
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	4423      	add	r3, r4
 8000960:	4403      	add	r3, r0
 8000962:	460a      	mov	r2, r1
 8000964:	701a      	strb	r2, [r3, #0]
		if (czujnik[4] > SF_Tresh && czujnik[5] > SF_Tresh) walls[x][y]+=2;
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	f113 0fc7 	cmn.w	r3, #199	; 0xc7
 800096c:	db24      	blt.n	80009b8 <mapCell+0x224>
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	f113 0fc7 	cmn.w	r3, #199	; 0xc7
 8000974:	db20      	blt.n	80009b8 <mapCell+0x224>
 8000976:	4b29      	ldr	r3, [pc, #164]	; (8000a1c <mapCell+0x288>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b25a      	sxtb	r2, r3
 800097c:	4b28      	ldr	r3, [pc, #160]	; (8000a20 <mapCell+0x28c>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	b25c      	sxtb	r4, r3
 8000982:	4b26      	ldr	r3, [pc, #152]	; (8000a1c <mapCell+0x288>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	b259      	sxtb	r1, r3
 8000988:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <mapCell+0x28c>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	b25d      	sxtb	r5, r3
 800098e:	4825      	ldr	r0, [pc, #148]	; (8000a24 <mapCell+0x290>)
 8000990:	460b      	mov	r3, r1
 8000992:	00db      	lsls	r3, r3, #3
 8000994:	440b      	add	r3, r1
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	442b      	add	r3, r5
 800099a:	4403      	add	r3, r0
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	3302      	adds	r3, #2
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	b2d9      	uxtb	r1, r3
 80009a6:	481f      	ldr	r0, [pc, #124]	; (8000a24 <mapCell+0x290>)
 80009a8:	4613      	mov	r3, r2
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	4413      	add	r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4423      	add	r3, r4
 80009b2:	4403      	add	r3, r0
 80009b4:	460a      	mov	r2, r1
 80009b6:	701a      	strb	r2, [r3, #0]
		if (czujnik[3] > SR_Tresh && czujnik[1] > SR_Tresh) walls[x][y]+=4;
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	f113 0f95 	cmn.w	r3, #149	; 0x95
 80009be:	f2c0 8138 	blt.w	8000c32 <mapCell+0x49e>
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	f113 0f95 	cmn.w	r3, #149	; 0x95
 80009c8:	f2c0 8133 	blt.w	8000c32 <mapCell+0x49e>
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <mapCell+0x288>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	b25a      	sxtb	r2, r3
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <mapCell+0x28c>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b25c      	sxtb	r4, r3
 80009d8:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <mapCell+0x288>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	b259      	sxtb	r1, r3
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <mapCell+0x28c>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	b25d      	sxtb	r5, r3
 80009e4:	480f      	ldr	r0, [pc, #60]	; (8000a24 <mapCell+0x290>)
 80009e6:	460b      	mov	r3, r1
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	440b      	add	r3, r1
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	442b      	add	r3, r5
 80009f0:	4403      	add	r3, r0
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	3304      	adds	r3, #4
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	b2d9      	uxtb	r1, r3
 80009fc:	4809      	ldr	r0, [pc, #36]	; (8000a24 <mapCell+0x290>)
 80009fe:	4613      	mov	r3, r2
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	4413      	add	r3, r2
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	4423      	add	r3, r4
 8000a08:	4403      	add	r3, r0
 8000a0a:	460a      	mov	r2, r1
 8000a0c:	701a      	strb	r2, [r3, #0]
 8000a0e:	e110      	b.n	8000c32 <mapCell+0x49e>
 8000a10:	20000074 	.word	0x20000074
 8000a14:	20000498 	.word	0x20000498
 8000a18:	20000050 	.word	0x20000050
 8000a1c:	20000005 	.word	0x20000005
 8000a20:	20000006 	.word	0x20000006
 8000a24:	20000698 	.word	0x20000698
 8000a28:	20000007 	.word	0x20000007
	}
	else if(ori==3)
 8000a2c:	4b83      	ldr	r3, [pc, #524]	; (8000c3c <mapCell+0x4a8>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	b25b      	sxtb	r3, r3
 8000a32:	2b03      	cmp	r3, #3
 8000a34:	d17d      	bne.n	8000b32 <mapCell+0x39e>
	{
		if (czujnik[2] > SL_Tresh && czujnik[0] > SL_Tresh) walls[x][y]+=2;
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8000a3c:	db24      	blt.n	8000a88 <mapCell+0x2f4>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8000a44:	db20      	blt.n	8000a88 <mapCell+0x2f4>
 8000a46:	4b7e      	ldr	r3, [pc, #504]	; (8000c40 <mapCell+0x4ac>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	b25a      	sxtb	r2, r3
 8000a4c:	4b7d      	ldr	r3, [pc, #500]	; (8000c44 <mapCell+0x4b0>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	b25c      	sxtb	r4, r3
 8000a52:	4b7b      	ldr	r3, [pc, #492]	; (8000c40 <mapCell+0x4ac>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	b259      	sxtb	r1, r3
 8000a58:	4b7a      	ldr	r3, [pc, #488]	; (8000c44 <mapCell+0x4b0>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	b25d      	sxtb	r5, r3
 8000a5e:	487a      	ldr	r0, [pc, #488]	; (8000c48 <mapCell+0x4b4>)
 8000a60:	460b      	mov	r3, r1
 8000a62:	00db      	lsls	r3, r3, #3
 8000a64:	440b      	add	r3, r1
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	442b      	add	r3, r5
 8000a6a:	4403      	add	r3, r0
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	3302      	adds	r3, #2
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	b2d9      	uxtb	r1, r3
 8000a76:	4874      	ldr	r0, [pc, #464]	; (8000c48 <mapCell+0x4b4>)
 8000a78:	4613      	mov	r3, r2
 8000a7a:	00db      	lsls	r3, r3, #3
 8000a7c:	4413      	add	r3, r2
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	4423      	add	r3, r4
 8000a82:	4403      	add	r3, r0
 8000a84:	460a      	mov	r2, r1
 8000a86:	701a      	strb	r2, [r3, #0]
		if (czujnik[4] > SF_Tresh && czujnik[5] > SF_Tresh) walls[x][y]+=4;
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	f113 0fc7 	cmn.w	r3, #199	; 0xc7
 8000a8e:	db24      	blt.n	8000ada <mapCell+0x346>
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	f113 0fc7 	cmn.w	r3, #199	; 0xc7
 8000a96:	db20      	blt.n	8000ada <mapCell+0x346>
 8000a98:	4b69      	ldr	r3, [pc, #420]	; (8000c40 <mapCell+0x4ac>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	b25a      	sxtb	r2, r3
 8000a9e:	4b69      	ldr	r3, [pc, #420]	; (8000c44 <mapCell+0x4b0>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	b25c      	sxtb	r4, r3
 8000aa4:	4b66      	ldr	r3, [pc, #408]	; (8000c40 <mapCell+0x4ac>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	b259      	sxtb	r1, r3
 8000aaa:	4b66      	ldr	r3, [pc, #408]	; (8000c44 <mapCell+0x4b0>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b25d      	sxtb	r5, r3
 8000ab0:	4865      	ldr	r0, [pc, #404]	; (8000c48 <mapCell+0x4b4>)
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	440b      	add	r3, r1
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	442b      	add	r3, r5
 8000abc:	4403      	add	r3, r0
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	3304      	adds	r3, #4
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	b2d9      	uxtb	r1, r3
 8000ac8:	485f      	ldr	r0, [pc, #380]	; (8000c48 <mapCell+0x4b4>)
 8000aca:	4613      	mov	r3, r2
 8000acc:	00db      	lsls	r3, r3, #3
 8000ace:	4413      	add	r3, r2
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	4423      	add	r3, r4
 8000ad4:	4403      	add	r3, r0
 8000ad6:	460a      	mov	r2, r1
 8000ad8:	701a      	strb	r2, [r3, #0]
		if (czujnik[3] > SR_Tresh && czujnik[1] > SR_Tresh) walls[x][y]+=8;
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8000ae0:	f2c0 80a7 	blt.w	8000c32 <mapCell+0x49e>
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8000aea:	f2c0 80a2 	blt.w	8000c32 <mapCell+0x49e>
 8000aee:	4b54      	ldr	r3, [pc, #336]	; (8000c40 <mapCell+0x4ac>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	b25a      	sxtb	r2, r3
 8000af4:	4b53      	ldr	r3, [pc, #332]	; (8000c44 <mapCell+0x4b0>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	b25c      	sxtb	r4, r3
 8000afa:	4b51      	ldr	r3, [pc, #324]	; (8000c40 <mapCell+0x4ac>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	b259      	sxtb	r1, r3
 8000b00:	4b50      	ldr	r3, [pc, #320]	; (8000c44 <mapCell+0x4b0>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	b25d      	sxtb	r5, r3
 8000b06:	4850      	ldr	r0, [pc, #320]	; (8000c48 <mapCell+0x4b4>)
 8000b08:	460b      	mov	r3, r1
 8000b0a:	00db      	lsls	r3, r3, #3
 8000b0c:	440b      	add	r3, r1
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	442b      	add	r3, r5
 8000b12:	4403      	add	r3, r0
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	3308      	adds	r3, #8
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	b2d9      	uxtb	r1, r3
 8000b1e:	484a      	ldr	r0, [pc, #296]	; (8000c48 <mapCell+0x4b4>)
 8000b20:	4613      	mov	r3, r2
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	4413      	add	r3, r2
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	4423      	add	r3, r4
 8000b2a:	4403      	add	r3, r0
 8000b2c:	460a      	mov	r2, r1
 8000b2e:	701a      	strb	r2, [r3, #0]
 8000b30:	e07f      	b.n	8000c32 <mapCell+0x49e>
	}
	else if(ori==4)
 8000b32:	4b42      	ldr	r3, [pc, #264]	; (8000c3c <mapCell+0x4a8>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	b25b      	sxtb	r3, r3
 8000b38:	2b04      	cmp	r3, #4
 8000b3a:	d17a      	bne.n	8000c32 <mapCell+0x49e>
	{
		if (czujnik[2] > SL_Tresh && czujnik[0] > SL_Tresh) walls[x][y]+=4;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8000b42:	db24      	blt.n	8000b8e <mapCell+0x3fa>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8000b4a:	db20      	blt.n	8000b8e <mapCell+0x3fa>
 8000b4c:	4b3c      	ldr	r3, [pc, #240]	; (8000c40 <mapCell+0x4ac>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	b25a      	sxtb	r2, r3
 8000b52:	4b3c      	ldr	r3, [pc, #240]	; (8000c44 <mapCell+0x4b0>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	b25c      	sxtb	r4, r3
 8000b58:	4b39      	ldr	r3, [pc, #228]	; (8000c40 <mapCell+0x4ac>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b259      	sxtb	r1, r3
 8000b5e:	4b39      	ldr	r3, [pc, #228]	; (8000c44 <mapCell+0x4b0>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	b25d      	sxtb	r5, r3
 8000b64:	4838      	ldr	r0, [pc, #224]	; (8000c48 <mapCell+0x4b4>)
 8000b66:	460b      	mov	r3, r1
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	440b      	add	r3, r1
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	442b      	add	r3, r5
 8000b70:	4403      	add	r3, r0
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	3304      	adds	r3, #4
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	b2d9      	uxtb	r1, r3
 8000b7c:	4832      	ldr	r0, [pc, #200]	; (8000c48 <mapCell+0x4b4>)
 8000b7e:	4613      	mov	r3, r2
 8000b80:	00db      	lsls	r3, r3, #3
 8000b82:	4413      	add	r3, r2
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	4423      	add	r3, r4
 8000b88:	4403      	add	r3, r0
 8000b8a:	460a      	mov	r2, r1
 8000b8c:	701a      	strb	r2, [r3, #0]
		if (czujnik[4] > SF_Tresh && czujnik[5] > SF_Tresh) walls[x][y]+=8;
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	f113 0fc7 	cmn.w	r3, #199	; 0xc7
 8000b94:	db24      	blt.n	8000be0 <mapCell+0x44c>
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	f113 0fc7 	cmn.w	r3, #199	; 0xc7
 8000b9c:	db20      	blt.n	8000be0 <mapCell+0x44c>
 8000b9e:	4b28      	ldr	r3, [pc, #160]	; (8000c40 <mapCell+0x4ac>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	b25a      	sxtb	r2, r3
 8000ba4:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <mapCell+0x4b0>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	b25c      	sxtb	r4, r3
 8000baa:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <mapCell+0x4ac>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	b259      	sxtb	r1, r3
 8000bb0:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <mapCell+0x4b0>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	b25d      	sxtb	r5, r3
 8000bb6:	4824      	ldr	r0, [pc, #144]	; (8000c48 <mapCell+0x4b4>)
 8000bb8:	460b      	mov	r3, r1
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	440b      	add	r3, r1
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	442b      	add	r3, r5
 8000bc2:	4403      	add	r3, r0
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	3308      	adds	r3, #8
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	b2d9      	uxtb	r1, r3
 8000bce:	481e      	ldr	r0, [pc, #120]	; (8000c48 <mapCell+0x4b4>)
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	00db      	lsls	r3, r3, #3
 8000bd4:	4413      	add	r3, r2
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	4423      	add	r3, r4
 8000bda:	4403      	add	r3, r0
 8000bdc:	460a      	mov	r2, r1
 8000bde:	701a      	strb	r2, [r3, #0]
		if (czujnik[3] > SR_Tresh && czujnik[1] > SR_Tresh) walls[x][y]+=1;
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8000be6:	db24      	blt.n	8000c32 <mapCell+0x49e>
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8000bee:	db20      	blt.n	8000c32 <mapCell+0x49e>
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <mapCell+0x4ac>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	b25a      	sxtb	r2, r3
 8000bf6:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <mapCell+0x4b0>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b25c      	sxtb	r4, r3
 8000bfc:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <mapCell+0x4ac>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	b259      	sxtb	r1, r3
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <mapCell+0x4b0>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	b25d      	sxtb	r5, r3
 8000c08:	480f      	ldr	r0, [pc, #60]	; (8000c48 <mapCell+0x4b4>)
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	440b      	add	r3, r1
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	442b      	add	r3, r5
 8000c14:	4403      	add	r3, r0
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	b2d9      	uxtb	r1, r3
 8000c20:	4809      	ldr	r0, [pc, #36]	; (8000c48 <mapCell+0x4b4>)
 8000c22:	4613      	mov	r3, r2
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	4413      	add	r3, r2
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	4423      	add	r3, r4
 8000c2c:	4403      	add	r3, r0
 8000c2e:	460a      	mov	r2, r1
 8000c30:	701a      	strb	r2, [r3, #0]
	}
}
 8000c32:	3724      	adds	r7, #36	; 0x24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bcb0      	pop	{r4, r5, r7}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000007 	.word	0x20000007
 8000c40:	20000005 	.word	0x20000005
 8000c44:	20000006 	.word	0x20000006
 8000c48:	20000698 	.word	0x20000698

08000c4c <highestNeighbourCell>:
/****************************************************/
int8_t highestNeighbourCell(int i1, int j1)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
   int a=-1;
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5a:	60fb      	str	r3, [r7, #12]
	if(walls[i1][j1]<8   || walls[i1][j1]==-1) if(cell[i1-1][j1] > a) a=cell[i1-1][j1];
 8000c5c:	4981      	ldr	r1, [pc, #516]	; (8000e64 <highestNeighbourCell+0x218>)
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	4613      	mov	r3, r2
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	4413      	add	r3, r2
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	683a      	ldr	r2, [r7, #0]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	440b      	add	r3, r1
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	b25b      	sxtb	r3, r3
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	dd0d      	ble.n	8000c92 <highestNeighbourCell+0x46>
 8000c76:	497b      	ldr	r1, [pc, #492]	; (8000e64 <highestNeighbourCell+0x218>)
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	4413      	add	r3, r2
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	683a      	ldr	r2, [r7, #0]
 8000c84:	4413      	add	r3, r2
 8000c86:	440b      	add	r3, r1
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	b25b      	sxtb	r3, r3
 8000c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c90:	d11b      	bne.n	8000cca <highestNeighbourCell+0x7e>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	1e5a      	subs	r2, r3, #1
 8000c96:	4974      	ldr	r1, [pc, #464]	; (8000e68 <highestNeighbourCell+0x21c>)
 8000c98:	4613      	mov	r3, r2
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	4413      	add	r3, r2
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	683a      	ldr	r2, [r7, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	b25a      	sxtb	r2, r3
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	dd0c      	ble.n	8000cca <highestNeighbourCell+0x7e>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	1e5a      	subs	r2, r3, #1
 8000cb4:	496c      	ldr	r1, [pc, #432]	; (8000e68 <highestNeighbourCell+0x21c>)
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	4413      	add	r3, r2
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	683a      	ldr	r2, [r7, #0]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	440b      	add	r3, r1
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	b25b      	sxtb	r3, r3
 8000cc8:	60fb      	str	r3, [r7, #12]
	if(walls[i1][j1]%2<1 || walls[i1][j1]==-1) if(cell[i1][j1+1] > a) a=cell[i1][j1+1];
 8000cca:	4966      	ldr	r1, [pc, #408]	; (8000e64 <highestNeighbourCell+0x218>)
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	4413      	add	r3, r2
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	683a      	ldr	r2, [r7, #0]
 8000cd8:	4413      	add	r3, r2
 8000cda:	440b      	add	r3, r1
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	b25a      	sxtb	r2, r3
 8000ce0:	4b62      	ldr	r3, [pc, #392]	; (8000e6c <highestNeighbourCell+0x220>)
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	da03      	bge.n	8000cf0 <highestNeighbourCell+0xa4>
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	f063 0301 	orn	r3, r3, #1
 8000cee:	3301      	adds	r3, #1
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	b25b      	sxtb	r3, r3
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	dd0d      	ble.n	8000d14 <highestNeighbourCell+0xc8>
 8000cf8:	495a      	ldr	r1, [pc, #360]	; (8000e64 <highestNeighbourCell+0x218>)
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	4413      	add	r3, r2
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	683a      	ldr	r2, [r7, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	440b      	add	r3, r1
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b25b      	sxtb	r3, r3
 8000d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d12:	d11b      	bne.n	8000d4c <highestNeighbourCell+0x100>
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	1c58      	adds	r0, r3, #1
 8000d18:	4953      	ldr	r1, [pc, #332]	; (8000e68 <highestNeighbourCell+0x21c>)
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	00db      	lsls	r3, r3, #3
 8000d20:	4413      	add	r3, r2
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	4403      	add	r3, r0
 8000d26:	440b      	add	r3, r1
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	b25a      	sxtb	r2, r3
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	dd0c      	ble.n	8000d4c <highestNeighbourCell+0x100>
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	1c58      	adds	r0, r3, #1
 8000d36:	494c      	ldr	r1, [pc, #304]	; (8000e68 <highestNeighbourCell+0x21c>)
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	4413      	add	r3, r2
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	4403      	add	r3, r0
 8000d44:	440b      	add	r3, r1
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b25b      	sxtb	r3, r3
 8000d4a:	60fb      	str	r3, [r7, #12]
	if(walls[i1][j1]%4<2 || walls[i1][j1]==-1) if(cell[i1+1][j1] > a) a=cell[i1+1][j1];
 8000d4c:	4945      	ldr	r1, [pc, #276]	; (8000e64 <highestNeighbourCell+0x218>)
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	4613      	mov	r3, r2
 8000d52:	00db      	lsls	r3, r3, #3
 8000d54:	4413      	add	r3, r2
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	683a      	ldr	r2, [r7, #0]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	b25a      	sxtb	r2, r3
 8000d62:	4b43      	ldr	r3, [pc, #268]	; (8000e70 <highestNeighbourCell+0x224>)
 8000d64:	4013      	ands	r3, r2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	da03      	bge.n	8000d72 <highestNeighbourCell+0x126>
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	f063 0303 	orn	r3, r3, #3
 8000d70:	3301      	adds	r3, #1
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	b25b      	sxtb	r3, r3
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	dd0d      	ble.n	8000d96 <highestNeighbourCell+0x14a>
 8000d7a:	493a      	ldr	r1, [pc, #232]	; (8000e64 <highestNeighbourCell+0x218>)
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	4413      	add	r3, r2
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	683a      	ldr	r2, [r7, #0]
 8000d88:	4413      	add	r3, r2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	b25b      	sxtb	r3, r3
 8000d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d94:	d11b      	bne.n	8000dce <highestNeighbourCell+0x182>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	1c5a      	adds	r2, r3, #1
 8000d9a:	4933      	ldr	r1, [pc, #204]	; (8000e68 <highestNeighbourCell+0x21c>)
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	00db      	lsls	r3, r3, #3
 8000da0:	4413      	add	r3, r2
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	683a      	ldr	r2, [r7, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	440b      	add	r3, r1
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	b25a      	sxtb	r2, r3
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	dd0c      	ble.n	8000dce <highestNeighbourCell+0x182>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	1c5a      	adds	r2, r3, #1
 8000db8:	492b      	ldr	r1, [pc, #172]	; (8000e68 <highestNeighbourCell+0x21c>)
 8000dba:	4613      	mov	r3, r2
 8000dbc:	00db      	lsls	r3, r3, #3
 8000dbe:	4413      	add	r3, r2
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	683a      	ldr	r2, [r7, #0]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	b25b      	sxtb	r3, r3
 8000dcc:	60fb      	str	r3, [r7, #12]
	if(walls[i1][j1]%8<4 || walls[i1][j1]==-1) if(cell[i1][j1-1] > a) a=cell[i1][j1-1];
 8000dce:	4925      	ldr	r1, [pc, #148]	; (8000e64 <highestNeighbourCell+0x218>)
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	4413      	add	r3, r2
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	683a      	ldr	r2, [r7, #0]
 8000ddc:	4413      	add	r3, r2
 8000dde:	440b      	add	r3, r1
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	b25a      	sxtb	r2, r3
 8000de4:	4b23      	ldr	r3, [pc, #140]	; (8000e74 <highestNeighbourCell+0x228>)
 8000de6:	4013      	ands	r3, r2
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	da03      	bge.n	8000df4 <highestNeighbourCell+0x1a8>
 8000dec:	3b01      	subs	r3, #1
 8000dee:	f063 0307 	orn	r3, r3, #7
 8000df2:	3301      	adds	r3, #1
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	b25b      	sxtb	r3, r3
 8000df8:	2b03      	cmp	r3, #3
 8000dfa:	dd0d      	ble.n	8000e18 <highestNeighbourCell+0x1cc>
 8000dfc:	4919      	ldr	r1, [pc, #100]	; (8000e64 <highestNeighbourCell+0x218>)
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	4613      	mov	r3, r2
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	4413      	add	r3, r2
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	683a      	ldr	r2, [r7, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b25b      	sxtb	r3, r3
 8000e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e16:	d11b      	bne.n	8000e50 <highestNeighbourCell+0x204>
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	1e58      	subs	r0, r3, #1
 8000e1c:	4912      	ldr	r1, [pc, #72]	; (8000e68 <highestNeighbourCell+0x21c>)
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	4613      	mov	r3, r2
 8000e22:	00db      	lsls	r3, r3, #3
 8000e24:	4413      	add	r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	4403      	add	r3, r0
 8000e2a:	440b      	add	r3, r1
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	b25a      	sxtb	r2, r3
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	dd0c      	ble.n	8000e50 <highestNeighbourCell+0x204>
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	1e58      	subs	r0, r3, #1
 8000e3a:	490b      	ldr	r1, [pc, #44]	; (8000e68 <highestNeighbourCell+0x21c>)
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	4413      	add	r3, r2
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	4403      	add	r3, r0
 8000e48:	440b      	add	r3, r1
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	b25b      	sxtb	r3, r3
 8000e4e:	60fb      	str	r3, [r7, #12]

	return a;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	b25b      	sxtb	r3, r3
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000698 	.word	0x20000698
 8000e68:	20000510 	.word	0x20000510
 8000e6c:	80000001 	.word	0x80000001
 8000e70:	80000003 	.word	0x80000003
 8000e74:	80000007 	.word	0x80000007

08000e78 <lowestNeighbourCell>:
/****************************************************/
int8_t lowestNeighbourCell(int i1, int j1)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
    int opt_direction=0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
	int a=cell[i1][j1];
 8000e86:	49a7      	ldr	r1, [pc, #668]	; (8001124 <lowestNeighbourCell+0x2ac>)
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	4413      	add	r3, r2
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	683a      	ldr	r2, [r7, #0]
 8000e94:	4413      	add	r3, r2
 8000e96:	440b      	add	r3, r1
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	b25b      	sxtb	r3, r3
 8000e9c:	60bb      	str	r3, [r7, #8]
	if(walls[i1][j1]<8 || walls[i1][j1]==-1) if(cell[i1-1][j1] < a && cell[i1-1][j1]  > -1)
 8000e9e:	49a2      	ldr	r1, [pc, #648]	; (8001128 <lowestNeighbourCell+0x2b0>)
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	4413      	add	r3, r2
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	683a      	ldr	r2, [r7, #0]
 8000eac:	4413      	add	r3, r2
 8000eae:	440b      	add	r3, r1
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	b25b      	sxtb	r3, r3
 8000eb4:	2b07      	cmp	r3, #7
 8000eb6:	dd0d      	ble.n	8000ed4 <lowestNeighbourCell+0x5c>
 8000eb8:	499b      	ldr	r1, [pc, #620]	; (8001128 <lowestNeighbourCell+0x2b0>)
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	4413      	add	r3, r2
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	683a      	ldr	r2, [r7, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	440b      	add	r3, r1
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	b25b      	sxtb	r3, r3
 8000ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed2:	d12b      	bne.n	8000f2c <lowestNeighbourCell+0xb4>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	1e5a      	subs	r2, r3, #1
 8000ed8:	4992      	ldr	r1, [pc, #584]	; (8001124 <lowestNeighbourCell+0x2ac>)
 8000eda:	4613      	mov	r3, r2
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	4413      	add	r3, r2
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	683a      	ldr	r2, [r7, #0]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	440b      	add	r3, r1
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	b25a      	sxtb	r2, r3
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	da1c      	bge.n	8000f2c <lowestNeighbourCell+0xb4>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	1e5a      	subs	r2, r3, #1
 8000ef6:	498b      	ldr	r1, [pc, #556]	; (8001124 <lowestNeighbourCell+0x2ac>)
 8000ef8:	4613      	mov	r3, r2
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	4413      	add	r3, r2
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	683a      	ldr	r2, [r7, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	440b      	add	r3, r1
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	b25b      	sxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	db0e      	blt.n	8000f2c <lowestNeighbourCell+0xb4>
                                                {
                                                  opt_direction=4;
 8000f0e:	2304      	movs	r3, #4
 8000f10:	60fb      	str	r3, [r7, #12]
                                                  a=cell[i1-1][j1];
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	1e5a      	subs	r2, r3, #1
 8000f16:	4983      	ldr	r1, [pc, #524]	; (8001124 <lowestNeighbourCell+0x2ac>)
 8000f18:	4613      	mov	r3, r2
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	4413      	add	r3, r2
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	683a      	ldr	r2, [r7, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	440b      	add	r3, r1
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	60bb      	str	r3, [r7, #8]
                                                }
	if(walls[i1][j1]%2<1 || walls[i1][j1]==-1) if(cell[i1][j1+1] < a && cell[i1][j1+1]  > -1)
 8000f2c:	497e      	ldr	r1, [pc, #504]	; (8001128 <lowestNeighbourCell+0x2b0>)
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	4613      	mov	r3, r2
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	4413      	add	r3, r2
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	683a      	ldr	r2, [r7, #0]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	b25a      	sxtb	r2, r3
 8000f42:	4b7a      	ldr	r3, [pc, #488]	; (800112c <lowestNeighbourCell+0x2b4>)
 8000f44:	4013      	ands	r3, r2
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	da03      	bge.n	8000f52 <lowestNeighbourCell+0xda>
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	f063 0301 	orn	r3, r3, #1
 8000f50:	3301      	adds	r3, #1
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	b25b      	sxtb	r3, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	dd0d      	ble.n	8000f76 <lowestNeighbourCell+0xfe>
 8000f5a:	4973      	ldr	r1, [pc, #460]	; (8001128 <lowestNeighbourCell+0x2b0>)
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	4413      	add	r3, r2
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	683a      	ldr	r2, [r7, #0]
 8000f68:	4413      	add	r3, r2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	b25b      	sxtb	r3, r3
 8000f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f74:	d12b      	bne.n	8000fce <lowestNeighbourCell+0x156>
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	1c58      	adds	r0, r3, #1
 8000f7a:	496a      	ldr	r1, [pc, #424]	; (8001124 <lowestNeighbourCell+0x2ac>)
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	4413      	add	r3, r2
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	4403      	add	r3, r0
 8000f88:	440b      	add	r3, r1
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b25a      	sxtb	r2, r3
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	da1c      	bge.n	8000fce <lowestNeighbourCell+0x156>
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	1c58      	adds	r0, r3, #1
 8000f98:	4962      	ldr	r1, [pc, #392]	; (8001124 <lowestNeighbourCell+0x2ac>)
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	4413      	add	r3, r2
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	4403      	add	r3, r0
 8000fa6:	440b      	add	r3, r1
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	b25b      	sxtb	r3, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	db0e      	blt.n	8000fce <lowestNeighbourCell+0x156>
                                                {
                                                  opt_direction=1;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
                                                  a=cell[i1][j1+1];
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	1c58      	adds	r0, r3, #1
 8000fb8:	495a      	ldr	r1, [pc, #360]	; (8001124 <lowestNeighbourCell+0x2ac>)
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	4413      	add	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	4403      	add	r3, r0
 8000fc6:	440b      	add	r3, r1
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	b25b      	sxtb	r3, r3
 8000fcc:	60bb      	str	r3, [r7, #8]
                                                }
	if(walls[i1][j1]%4<2 || walls[i1][j1]==-1) if(cell[i1+1][j1] < a && cell[i1+1][j1]  > -1)
 8000fce:	4956      	ldr	r1, [pc, #344]	; (8001128 <lowestNeighbourCell+0x2b0>)
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	00db      	lsls	r3, r3, #3
 8000fd6:	4413      	add	r3, r2
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	683a      	ldr	r2, [r7, #0]
 8000fdc:	4413      	add	r3, r2
 8000fde:	440b      	add	r3, r1
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	b25a      	sxtb	r2, r3
 8000fe4:	4b52      	ldr	r3, [pc, #328]	; (8001130 <lowestNeighbourCell+0x2b8>)
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	da03      	bge.n	8000ff4 <lowestNeighbourCell+0x17c>
 8000fec:	3b01      	subs	r3, #1
 8000fee:	f063 0303 	orn	r3, r3, #3
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	b25b      	sxtb	r3, r3
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	dd0d      	ble.n	8001018 <lowestNeighbourCell+0x1a0>
 8000ffc:	494a      	ldr	r1, [pc, #296]	; (8001128 <lowestNeighbourCell+0x2b0>)
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	4613      	mov	r3, r2
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	4413      	add	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	4413      	add	r3, r2
 800100c:	440b      	add	r3, r1
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b25b      	sxtb	r3, r3
 8001012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001016:	d12b      	bne.n	8001070 <lowestNeighbourCell+0x1f8>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	1c5a      	adds	r2, r3, #1
 800101c:	4941      	ldr	r1, [pc, #260]	; (8001124 <lowestNeighbourCell+0x2ac>)
 800101e:	4613      	mov	r3, r2
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	4413      	add	r3, r2
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	4413      	add	r3, r2
 800102a:	440b      	add	r3, r1
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	b25a      	sxtb	r2, r3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	429a      	cmp	r2, r3
 8001034:	da1c      	bge.n	8001070 <lowestNeighbourCell+0x1f8>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	1c5a      	adds	r2, r3, #1
 800103a:	493a      	ldr	r1, [pc, #232]	; (8001124 <lowestNeighbourCell+0x2ac>)
 800103c:	4613      	mov	r3, r2
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	4413      	add	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	4413      	add	r3, r2
 8001048:	440b      	add	r3, r1
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b25b      	sxtb	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	db0e      	blt.n	8001070 <lowestNeighbourCell+0x1f8>
                                                {
                                                  opt_direction=2;
 8001052:	2302      	movs	r3, #2
 8001054:	60fb      	str	r3, [r7, #12]
                                                  a=cell[i1+1][j1];
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	1c5a      	adds	r2, r3, #1
 800105a:	4932      	ldr	r1, [pc, #200]	; (8001124 <lowestNeighbourCell+0x2ac>)
 800105c:	4613      	mov	r3, r2
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	4413      	add	r3, r2
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	4413      	add	r3, r2
 8001068:	440b      	add	r3, r1
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	b25b      	sxtb	r3, r3
 800106e:	60bb      	str	r3, [r7, #8]
                                                }
	if(walls[i1][j1]%8<4 || walls[i1][j1]==-1) if(cell[i1][j1-1] < a && cell[i1][j1-1]  > -1)
 8001070:	492d      	ldr	r1, [pc, #180]	; (8001128 <lowestNeighbourCell+0x2b0>)
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	4613      	mov	r3, r2
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	4413      	add	r3, r2
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	4413      	add	r3, r2
 8001080:	440b      	add	r3, r1
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	b25a      	sxtb	r2, r3
 8001086:	4b2b      	ldr	r3, [pc, #172]	; (8001134 <lowestNeighbourCell+0x2bc>)
 8001088:	4013      	ands	r3, r2
 800108a:	2b00      	cmp	r3, #0
 800108c:	da03      	bge.n	8001096 <lowestNeighbourCell+0x21e>
 800108e:	3b01      	subs	r3, #1
 8001090:	f063 0307 	orn	r3, r3, #7
 8001094:	3301      	adds	r3, #1
 8001096:	b2db      	uxtb	r3, r3
 8001098:	b25b      	sxtb	r3, r3
 800109a:	2b03      	cmp	r3, #3
 800109c:	dd0d      	ble.n	80010ba <lowestNeighbourCell+0x242>
 800109e:	4922      	ldr	r1, [pc, #136]	; (8001128 <lowestNeighbourCell+0x2b0>)
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	4413      	add	r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	4413      	add	r3, r2
 80010ae:	440b      	add	r3, r1
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	b25b      	sxtb	r3, r3
 80010b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b8:	d12b      	bne.n	8001112 <lowestNeighbourCell+0x29a>
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	1e58      	subs	r0, r3, #1
 80010be:	4919      	ldr	r1, [pc, #100]	; (8001124 <lowestNeighbourCell+0x2ac>)
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	4613      	mov	r3, r2
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	4413      	add	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4403      	add	r3, r0
 80010cc:	440b      	add	r3, r1
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	b25a      	sxtb	r2, r3
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	da1c      	bge.n	8001112 <lowestNeighbourCell+0x29a>
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	1e58      	subs	r0, r3, #1
 80010dc:	4911      	ldr	r1, [pc, #68]	; (8001124 <lowestNeighbourCell+0x2ac>)
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	4613      	mov	r3, r2
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	4413      	add	r3, r2
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	4403      	add	r3, r0
 80010ea:	440b      	add	r3, r1
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	b25b      	sxtb	r3, r3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	db0e      	blt.n	8001112 <lowestNeighbourCell+0x29a>
                                                {
                                                  opt_direction=3;
 80010f4:	2303      	movs	r3, #3
 80010f6:	60fb      	str	r3, [r7, #12]
                                                  a=cell[i1][j1-1];
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	1e58      	subs	r0, r3, #1
 80010fc:	4909      	ldr	r1, [pc, #36]	; (8001124 <lowestNeighbourCell+0x2ac>)
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	4413      	add	r3, r2
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	4403      	add	r3, r0
 800110a:	440b      	add	r3, r1
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	b25b      	sxtb	r3, r3
 8001110:	60bb      	str	r3, [r7, #8]
                                                }
	return opt_direction;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	b2db      	uxtb	r3, r3
 8001116:	b25b      	sxtb	r3, r3
}
 8001118:	4618      	mov	r0, r3
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	20000510 	.word	0x20000510
 8001128:	20000698 	.word	0x20000698
 800112c:	80000001 	.word	0x80000001
 8001130:	80000003 	.word	0x80000003
 8001134:	80000007 	.word	0x80000007

08001138 <flood>:
/****************************************************/
void flood()
{
 8001138:	b5b0      	push	{r4, r5, r7, lr}
 800113a:	b0d2      	sub	sp, #328	; 0x148
 800113c:	af00      	add	r7, sp, #0
	int8_t cell_temp[XMAZE][YMAZE];
	int8_t PathDist = 1; // This is how far the 'water' has flowed
 800113e:	2301      	movs	r3, #1
 8001140:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	int8_t i2,j2;
	for(i2 = 0; i2 < XMAZE; i2++)  //Creating a loop which scans the whole maze
 8001144:	2300      	movs	r3, #0
 8001146:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
 800114a:	e02b      	b.n	80011a4 <flood+0x6c>
		for(j2 = 0; j2 < YMAZE; j2++)
 800114c:	2300      	movs	r3, #0
 800114e:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 8001152:	e01e      	b.n	8001192 <flood+0x5a>
                {
                  cell[i2][j2] = -1;
 8001154:	f997 2146 	ldrsb.w	r2, [r7, #326]	; 0x146
 8001158:	f997 0145 	ldrsb.w	r0, [r7, #325]	; 0x145
 800115c:	497e      	ldr	r1, [pc, #504]	; (8001358 <flood+0x220>)
 800115e:	4613      	mov	r3, r2
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	4413      	add	r3, r2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	4403      	add	r3, r0
 8001168:	440b      	add	r3, r1
 800116a:	22ff      	movs	r2, #255	; 0xff
 800116c:	701a      	strb	r2, [r3, #0]
                  cell_temp[i2][j2]=-1;
 800116e:	f997 2146 	ldrsb.w	r2, [r7, #326]	; 0x146
 8001172:	f997 0145 	ldrsb.w	r0, [r7, #325]	; 0x145
 8001176:	4639      	mov	r1, r7
 8001178:	4613      	mov	r3, r2
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	4413      	add	r3, r2
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	4403      	add	r3, r0
 8001182:	440b      	add	r3, r1
 8001184:	22ff      	movs	r2, #255	; 0xff
 8001186:	701a      	strb	r2, [r3, #0]
{
	int8_t cell_temp[XMAZE][YMAZE];
	int8_t PathDist = 1; // This is how far the 'water' has flowed
	int8_t i2,j2;
	for(i2 = 0; i2 < XMAZE; i2++)  //Creating a loop which scans the whole maze
		for(j2 = 0; j2 < YMAZE; j2++)
 8001188:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800118c:	3301      	adds	r3, #1
 800118e:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 8001192:	f997 3145 	ldrsb.w	r3, [r7, #325]	; 0x145
 8001196:	2b11      	cmp	r3, #17
 8001198:	dddc      	ble.n	8001154 <flood+0x1c>
void flood()
{
	int8_t cell_temp[XMAZE][YMAZE];
	int8_t PathDist = 1; // This is how far the 'water' has flowed
	int8_t i2,j2;
	for(i2 = 0; i2 < XMAZE; i2++)  //Creating a loop which scans the whole maze
 800119a:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 800119e:	3301      	adds	r3, #1
 80011a0:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
 80011a4:	f997 3146 	ldrsb.w	r3, [r7, #326]	; 0x146
 80011a8:	2b11      	cmp	r3, #17
 80011aa:	ddcf      	ble.n	800114c <flood+0x14>
		for(j2 = 0; j2 < YMAZE; j2++)
                {
                  cell[i2][j2] = -1;
                  cell_temp[i2][j2]=-1;
                }
	for(i2 = target[0]; i2<=target[1]; i2++)
 80011ac:	4b6b      	ldr	r3, [pc, #428]	; (800135c <flood+0x224>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
 80011b4:	e02f      	b.n	8001216 <flood+0xde>
		for(j2 = target[0]; j2<=target[1]; j2++)
 80011b6:	4b69      	ldr	r3, [pc, #420]	; (800135c <flood+0x224>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 80011be:	e01e      	b.n	80011fe <flood+0xc6>
                  {
                    cell[i2][j2] = 1;
 80011c0:	f997 2146 	ldrsb.w	r2, [r7, #326]	; 0x146
 80011c4:	f997 0145 	ldrsb.w	r0, [r7, #325]	; 0x145
 80011c8:	4963      	ldr	r1, [pc, #396]	; (8001358 <flood+0x220>)
 80011ca:	4613      	mov	r3, r2
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	4413      	add	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	4403      	add	r3, r0
 80011d4:	440b      	add	r3, r1
 80011d6:	2201      	movs	r2, #1
 80011d8:	701a      	strb	r2, [r3, #0]
                    cell_temp[i2][j2]=1;
 80011da:	f997 2146 	ldrsb.w	r2, [r7, #326]	; 0x146
 80011de:	f997 0145 	ldrsb.w	r0, [r7, #325]	; 0x145
 80011e2:	4639      	mov	r1, r7
 80011e4:	4613      	mov	r3, r2
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	4413      	add	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	4403      	add	r3, r0
 80011ee:	440b      	add	r3, r1
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
                {
                  cell[i2][j2] = -1;
                  cell_temp[i2][j2]=-1;
                }
	for(i2 = target[0]; i2<=target[1]; i2++)
		for(j2 = target[0]; j2<=target[1]; j2++)
 80011f4:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 80011f8:	3301      	adds	r3, #1
 80011fa:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 80011fe:	4b57      	ldr	r3, [pc, #348]	; (800135c <flood+0x224>)
 8001200:	785b      	ldrb	r3, [r3, #1]
 8001202:	f997 2145 	ldrsb.w	r2, [r7, #325]	; 0x145
 8001206:	b25b      	sxtb	r3, r3
 8001208:	429a      	cmp	r2, r3
 800120a:	ddd9      	ble.n	80011c0 <flood+0x88>
		for(j2 = 0; j2 < YMAZE; j2++)
                {
                  cell[i2][j2] = -1;
                  cell_temp[i2][j2]=-1;
                }
	for(i2 = target[0]; i2<=target[1]; i2++)
 800120c:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8001210:	3301      	adds	r3, #1
 8001212:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
 8001216:	4b51      	ldr	r3, [pc, #324]	; (800135c <flood+0x224>)
 8001218:	785b      	ldrb	r3, [r3, #1]
 800121a:	f997 2146 	ldrsb.w	r2, [r7, #326]	; 0x146
 800121e:	b25b      	sxtb	r3, r3
 8001220:	429a      	cmp	r2, r3
 8001222:	ddc8      	ble.n	80011b6 <flood+0x7e>
                  {
                    cell[i2][j2] = 1;
                    cell_temp[i2][j2]=1;
                  }

	while(PathDist>0)
 8001224:	e08f      	b.n	8001346 <flood+0x20e>
	{
		PathDist++;  //Increment the distance because we are scanning again.
 8001226:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800122a:	3301      	adds	r3, #1
 800122c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
		for(i2 = 1; i2 < XMAZE-1; i2++) { //Creating a loop which scans the whole maze
 8001230:	2301      	movs	r3, #1
 8001232:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
 8001236:	e03c      	b.n	80012b2 <flood+0x17a>
			for(j2 = 1; j2 < YMAZE-1; j2++) {
 8001238:	2301      	movs	r3, #1
 800123a:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800123e:	e02f      	b.n	80012a0 <flood+0x168>
				if(cell[i2][j2] != -1) //If the cell has already been reached, then continue to the next cell
 8001240:	f997 2146 	ldrsb.w	r2, [r7, #326]	; 0x146
 8001244:	f997 0145 	ldrsb.w	r0, [r7, #325]	; 0x145
 8001248:	4943      	ldr	r1, [pc, #268]	; (8001358 <flood+0x220>)
 800124a:	4613      	mov	r3, r2
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	4413      	add	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4403      	add	r3, r0
 8001254:	440b      	add	r3, r1
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	b25b      	sxtb	r3, r3
 800125a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800125e:	d000      	beq.n	8001262 <flood+0x12a>
					continue;
 8001260:	e019      	b.n	8001296 <flood+0x15e>
				if(highestNeighbourCell(i2,j2) != -1) //If there is a neighbouring cell which has been
 8001262:	f997 2146 	ldrsb.w	r2, [r7, #326]	; 0x146
 8001266:	f997 3145 	ldrsb.w	r3, [r7, #325]	; 0x145
 800126a:	4610      	mov	r0, r2
 800126c:	4619      	mov	r1, r3
 800126e:	f7ff fced 	bl	8000c4c <highestNeighbourCell>
 8001272:	4603      	mov	r3, r0
 8001274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001278:	d00d      	beq.n	8001296 <flood+0x15e>
					cell_temp[i2][j2] = PathDist;   //reached, then you have reached the current cell
 800127a:	f997 2146 	ldrsb.w	r2, [r7, #326]	; 0x146
 800127e:	f997 0145 	ldrsb.w	r0, [r7, #325]	; 0x145
 8001282:	4639      	mov	r1, r7
 8001284:	4613      	mov	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	4413      	add	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	4403      	add	r3, r0
 800128e:	440b      	add	r3, r1
 8001290:	f897 2147 	ldrb.w	r2, [r7, #327]	; 0x147
 8001294:	701a      	strb	r2, [r3, #0]

	while(PathDist>0)
	{
		PathDist++;  //Increment the distance because we are scanning again.
		for(i2 = 1; i2 < XMAZE-1; i2++) { //Creating a loop which scans the whole maze
			for(j2 = 1; j2 < YMAZE-1; j2++) {
 8001296:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800129a:	3301      	adds	r3, #1
 800129c:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 80012a0:	f997 3145 	ldrsb.w	r3, [r7, #325]	; 0x145
 80012a4:	2b10      	cmp	r3, #16
 80012a6:	ddcb      	ble.n	8001240 <flood+0x108>
                  }

	while(PathDist>0)
	{
		PathDist++;  //Increment the distance because we are scanning again.
		for(i2 = 1; i2 < XMAZE-1; i2++) { //Creating a loop which scans the whole maze
 80012a8:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 80012ac:	3301      	adds	r3, #1
 80012ae:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
 80012b2:	f997 3146 	ldrsb.w	r3, [r7, #326]	; 0x146
 80012b6:	2b10      	cmp	r3, #16
 80012b8:	ddbe      	ble.n	8001238 <flood+0x100>
					cell_temp[i2][j2] = PathDist;   //reached, then you have reached the current cell
											        //so give it a value
			}
		}

              for(i2 = 0; i2 < XMAZE; i2++)  //Creating a loop which scans the whole maze
 80012ba:	2300      	movs	r3, #0
 80012bc:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
 80012c0:	e02a      	b.n	8001318 <flood+0x1e0>
		  for(j2 = 0; j2 < YMAZE; j2++)
 80012c2:	2300      	movs	r3, #0
 80012c4:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 80012c8:	e01d      	b.n	8001306 <flood+0x1ce>
                    cell[i2][j2] =cell_temp[i2][j2];
 80012ca:	f997 2146 	ldrsb.w	r2, [r7, #326]	; 0x146
 80012ce:	f997 4145 	ldrsb.w	r4, [r7, #325]	; 0x145
 80012d2:	f997 1146 	ldrsb.w	r1, [r7, #326]	; 0x146
 80012d6:	f997 5145 	ldrsb.w	r5, [r7, #325]	; 0x145
 80012da:	4638      	mov	r0, r7
 80012dc:	460b      	mov	r3, r1
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	440b      	add	r3, r1
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	442b      	add	r3, r5
 80012e6:	4403      	add	r3, r0
 80012e8:	7819      	ldrb	r1, [r3, #0]
 80012ea:	481b      	ldr	r0, [pc, #108]	; (8001358 <flood+0x220>)
 80012ec:	4613      	mov	r3, r2
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	4413      	add	r3, r2
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	4423      	add	r3, r4
 80012f6:	4403      	add	r3, r0
 80012f8:	460a      	mov	r2, r1
 80012fa:	701a      	strb	r2, [r3, #0]
											        //so give it a value
			}
		}

              for(i2 = 0; i2 < XMAZE; i2++)  //Creating a loop which scans the whole maze
		  for(j2 = 0; j2 < YMAZE; j2++)
 80012fc:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 8001300:	3301      	adds	r3, #1
 8001302:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 8001306:	f997 3145 	ldrsb.w	r3, [r7, #325]	; 0x145
 800130a:	2b11      	cmp	r3, #17
 800130c:	dddd      	ble.n	80012ca <flood+0x192>
					cell_temp[i2][j2] = PathDist;   //reached, then you have reached the current cell
											        //so give it a value
			}
		}

              for(i2 = 0; i2 < XMAZE; i2++)  //Creating a loop which scans the whole maze
 800130e:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8001312:	3301      	adds	r3, #1
 8001314:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
 8001318:	f997 3146 	ldrsb.w	r3, [r7, #326]	; 0x146
 800131c:	2b11      	cmp	r3, #17
 800131e:	ddd0      	ble.n	80012c2 <flood+0x18a>
		  for(j2 = 0; j2 < YMAZE; j2++)
                    cell[i2][j2] =cell_temp[i2][j2];

		if(cell[x][y] != -1) break;
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <flood+0x228>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b25a      	sxtb	r2, r3
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <flood+0x22c>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b258      	sxtb	r0, r3
 800132c:	490a      	ldr	r1, [pc, #40]	; (8001358 <flood+0x220>)
 800132e:	4613      	mov	r3, r2
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	4413      	add	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4403      	add	r3, r0
 8001338:	440b      	add	r3, r1
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	b25b      	sxtb	r3, r3
 800133e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001342:	d000      	beq.n	8001346 <flood+0x20e>
 8001344:	e004      	b.n	8001350 <flood+0x218>
                  {
                    cell[i2][j2] = 1;
                    cell_temp[i2][j2]=1;
                  }

	while(PathDist>0)
 8001346:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800134a:	2b00      	cmp	r3, #0
 800134c:	f73f af6b 	bgt.w	8001226 <flood+0xee>
		  for(j2 = 0; j2 < YMAZE; j2++)
                    cell[i2][j2] =cell_temp[i2][j2];

		if(cell[x][y] != -1) break;
	}
}
 8001350:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8001354:	46bd      	mov	sp, r7
 8001356:	bdb0      	pop	{r4, r5, r7, pc}
 8001358:	20000510 	.word	0x20000510
 800135c:	20000008 	.word	0x20000008
 8001360:	20000005 	.word	0x20000005
 8001364:	20000006 	.word	0x20000006

08001368 <Send_Gyro>:
/****************************************************/
void Send_Gyro(uint8_t Register, uint8_t Value)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af02      	add	r7, sp, #8
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	71fa      	strb	r2, [r7, #7]
 8001374:	71bb      	strb	r3, [r7, #6]
	uint8_t ToSend[2]={Register,Value};
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	733b      	strb	r3, [r7, #12]
 800137a:	79bb      	ldrb	r3, [r7, #6]
 800137c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,0x6B<<1,ToSend,2,10);
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	220a      	movs	r2, #10
 8001384:	9200      	str	r2, [sp, #0]
 8001386:	4804      	ldr	r0, [pc, #16]	; (8001398 <Send_Gyro+0x30>)
 8001388:	21d6      	movs	r1, #214	; 0xd6
 800138a:	461a      	mov	r2, r3
 800138c:	2302      	movs	r3, #2
 800138e:	f004 f871 	bl	8005474 <HAL_I2C_Master_Transmit>
}
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000328 	.word	0x20000328

0800139c <Read_Gyro>:
/****************************************************/
int8_t Read_Gyro(uint8_t Register)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af02      	add	r7, sp, #8
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
	uint8_t Read=0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1,0x6B<<1,&Register,1,10);
 80013aa:	1dfb      	adds	r3, r7, #7
 80013ac:	220a      	movs	r2, #10
 80013ae:	9200      	str	r2, [sp, #0]
 80013b0:	480b      	ldr	r0, [pc, #44]	; (80013e0 <Read_Gyro+0x44>)
 80013b2:	21d6      	movs	r1, #214	; 0xd6
 80013b4:	461a      	mov	r2, r3
 80013b6:	2301      	movs	r3, #1
 80013b8:	f004 f85c 	bl	8005474 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,0x6B<<1,&Read,1,10);
 80013bc:	f107 030f 	add.w	r3, r7, #15
 80013c0:	220a      	movs	r2, #10
 80013c2:	9200      	str	r2, [sp, #0]
 80013c4:	4806      	ldr	r0, [pc, #24]	; (80013e0 <Read_Gyro+0x44>)
 80013c6:	21d6      	movs	r1, #214	; 0xd6
 80013c8:	461a      	mov	r2, r3
 80013ca:	2301      	movs	r3, #1
 80013cc:	f004 f906 	bl	80055dc <HAL_I2C_Master_Receive>

	return Read;
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	b25b      	sxtb	r3, r3
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000328 	.word	0x20000328

080013e4 <Read_AXIS>:
/****************************************************/
int16_t Read_AXIS(uint8_t Register)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
	int16_t Measurement=0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	81fb      	strh	r3, [r7, #14]
	int8_t LSB=0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	737b      	strb	r3, [r7, #13]
	int8_t MSB=0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	733b      	strb	r3, [r7, #12]

	LSB=Read_Gyro(Register);
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ffcd 	bl	800139c <Read_Gyro>
 8001402:	4603      	mov	r3, r0
 8001404:	737b      	strb	r3, [r7, #13]
	MSB=Read_Gyro(Register+1);
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	3301      	adds	r3, #1
 800140a:	b2db      	uxtb	r3, r3
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ffc5 	bl	800139c <Read_Gyro>
 8001412:	4603      	mov	r3, r0
 8001414:	733b      	strb	r3, [r7, #12]

	Measurement=(MSB<<8)+LSB;
 8001416:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800141a:	b29b      	uxth	r3, r3
 800141c:	021b      	lsls	r3, r3, #8
 800141e:	b29a      	uxth	r2, r3
 8001420:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001424:	b29b      	uxth	r3, r3
 8001426:	4413      	add	r3, r2
 8001428:	b29b      	uxth	r3, r3
 800142a:	81fb      	strh	r3, [r7, #14]
	return Measurement;
 800142c:	89fb      	ldrh	r3, [r7, #14]
 800142e:	b21b      	sxth	r3, r3
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <calibration>:
/****************************************************/
void calibration()
{
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
	int16_t pomoc=0;
 800143e:	2300      	movs	r3, #0
 8001440:	80fb      	strh	r3, [r7, #6]
	uint8_t i1;

	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,0);
 8001442:	487b      	ldr	r0, [pc, #492]	; (8001630 <calibration+0x1f8>)
 8001444:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001448:	2200      	movs	r2, #0
 800144a:	f004 fdfd 	bl	8006048 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,1);
 800144e:	4879      	ldr	r0, [pc, #484]	; (8001634 <calibration+0x1fc>)
 8001450:	2104      	movs	r1, #4
 8001452:	2201      	movs	r2, #1
 8001454:	f004 fdf8 	bl	8006048 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001458:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800145c:	f005 ffda 	bl	8007414 <HAL_Delay>

	Send_Gyro(0x20,0xDF);//4F
 8001460:	2020      	movs	r0, #32
 8001462:	21df      	movs	r1, #223	; 0xdf
 8001464:	f7ff ff80 	bl	8001368 <Send_Gyro>
	Send_Gyro(0x21,0x00);
 8001468:	2021      	movs	r0, #33	; 0x21
 800146a:	2100      	movs	r1, #0
 800146c:	f7ff ff7c 	bl	8001368 <Send_Gyro>
	Send_Gyro(0x22,0x00);
 8001470:	2022      	movs	r0, #34	; 0x22
 8001472:	2100      	movs	r1, #0
 8001474:	f7ff ff78 	bl	8001368 <Send_Gyro>
	Send_Gyro(0x23,0x20);// 0x00 - 250dps(8.75 mdps/digit); 0x10 - 500 dps(17.5 mdps/digit); 0x20 - 2000 dps(70 mdps/digit)
 8001478:	2023      	movs	r0, #35	; 0x23
 800147a:	2120      	movs	r1, #32
 800147c:	f7ff ff74 	bl	8001368 <Send_Gyro>
	Send_Gyro(0x24,0x00);
 8001480:	2024      	movs	r0, #36	; 0x24
 8001482:	2100      	movs	r1, #0
 8001484:	f7ff ff70 	bl	8001368 <Send_Gyro>

	for(i1=0;i1<100;i1++) pomoc+=((Read_AXIS(0x2C)-dryf)*700)/10000;
 8001488:	2300      	movs	r3, #0
 800148a:	717b      	strb	r3, [r7, #5]
 800148c:	e019      	b.n	80014c2 <calibration+0x8a>
 800148e:	202c      	movs	r0, #44	; 0x2c
 8001490:	f7ff ffa8 	bl	80013e4 <Read_AXIS>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	4b67      	ldr	r3, [pc, #412]	; (8001638 <calibration+0x200>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80014a2:	fb02 f303 	mul.w	r3, r2, r3
 80014a6:	4a65      	ldr	r2, [pc, #404]	; (800163c <calibration+0x204>)
 80014a8:	fb82 1203 	smull	r1, r2, r2, r3
 80014ac:	1312      	asrs	r2, r2, #12
 80014ae:	17db      	asrs	r3, r3, #31
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	88fb      	ldrh	r3, [r7, #6]
 80014b6:	4413      	add	r3, r2
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	80fb      	strh	r3, [r7, #6]
 80014bc:	797b      	ldrb	r3, [r7, #5]
 80014be:	3301      	adds	r3, #1
 80014c0:	717b      	strb	r3, [r7, #5]
 80014c2:	797b      	ldrb	r3, [r7, #5]
 80014c4:	2b63      	cmp	r3, #99	; 0x63
 80014c6:	d9e2      	bls.n	800148e <calibration+0x56>
	pomoc/=100;
 80014c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014cc:	4a5c      	ldr	r2, [pc, #368]	; (8001640 <calibration+0x208>)
 80014ce:	fb82 1203 	smull	r1, r2, r2, r3
 80014d2:	1152      	asrs	r2, r2, #5
 80014d4:	17db      	asrs	r3, r3, #31
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(1000);
 80014da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014de:	f005 ff99 	bl	8007414 <HAL_Delay>
  	while(pomoc>2 || pomoc<-2)
 80014e2:	e047      	b.n	8001574 <calibration+0x13c>
  	{
		 for(i1=0;i1<100;i1++)
 80014e4:	2300      	movs	r3, #0
 80014e6:	717b      	strb	r3, [r7, #5]
 80014e8:	e00c      	b.n	8001504 <calibration+0xcc>
		 {
			dryf += Read_AXIS(0x2C);
 80014ea:	202c      	movs	r0, #44	; 0x2c
 80014ec:	f7ff ff7a 	bl	80013e4 <Read_AXIS>
 80014f0:	4603      	mov	r3, r0
 80014f2:	461a      	mov	r2, r3
 80014f4:	4b50      	ldr	r3, [pc, #320]	; (8001638 <calibration+0x200>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	441a      	add	r2, r3
 80014fa:	4b4f      	ldr	r3, [pc, #316]	; (8001638 <calibration+0x200>)
 80014fc:	601a      	str	r2, [r3, #0]
	for(i1=0;i1<100;i1++) pomoc+=((Read_AXIS(0x2C)-dryf)*700)/10000;
	pomoc/=100;
	HAL_Delay(1000);
  	while(pomoc>2 || pomoc<-2)
  	{
		 for(i1=0;i1<100;i1++)
 80014fe:	797b      	ldrb	r3, [r7, #5]
 8001500:	3301      	adds	r3, #1
 8001502:	717b      	strb	r3, [r7, #5]
 8001504:	797b      	ldrb	r3, [r7, #5]
 8001506:	2b63      	cmp	r3, #99	; 0x63
 8001508:	d9ef      	bls.n	80014ea <calibration+0xb2>
		 {
			dryf += Read_AXIS(0x2C);
		 }
		 dryf/=100;
 800150a:	4b4b      	ldr	r3, [pc, #300]	; (8001638 <calibration+0x200>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a4c      	ldr	r2, [pc, #304]	; (8001640 <calibration+0x208>)
 8001510:	fb82 1203 	smull	r1, r2, r2, r3
 8001514:	1152      	asrs	r2, r2, #5
 8001516:	17db      	asrs	r3, r3, #31
 8001518:	1ad2      	subs	r2, r2, r3
 800151a:	4b47      	ldr	r3, [pc, #284]	; (8001638 <calibration+0x200>)
 800151c:	601a      	str	r2, [r3, #0]

		 pomoc=0;
 800151e:	2300      	movs	r3, #0
 8001520:	80fb      	strh	r3, [r7, #6]
		 for(i1=0;i1<100;i1++) pomoc+=((Read_AXIS(0x2C)-dryf)*700)/10000;
 8001522:	2300      	movs	r3, #0
 8001524:	717b      	strb	r3, [r7, #5]
 8001526:	e019      	b.n	800155c <calibration+0x124>
 8001528:	202c      	movs	r0, #44	; 0x2c
 800152a:	f7ff ff5b 	bl	80013e4 <Read_AXIS>
 800152e:	4603      	mov	r3, r0
 8001530:	461a      	mov	r2, r3
 8001532:	4b41      	ldr	r3, [pc, #260]	; (8001638 <calibration+0x200>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800153c:	fb02 f303 	mul.w	r3, r2, r3
 8001540:	4a3e      	ldr	r2, [pc, #248]	; (800163c <calibration+0x204>)
 8001542:	fb82 1203 	smull	r1, r2, r2, r3
 8001546:	1312      	asrs	r2, r2, #12
 8001548:	17db      	asrs	r3, r3, #31
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	b29a      	uxth	r2, r3
 800154e:	88fb      	ldrh	r3, [r7, #6]
 8001550:	4413      	add	r3, r2
 8001552:	b29b      	uxth	r3, r3
 8001554:	80fb      	strh	r3, [r7, #6]
 8001556:	797b      	ldrb	r3, [r7, #5]
 8001558:	3301      	adds	r3, #1
 800155a:	717b      	strb	r3, [r7, #5]
 800155c:	797b      	ldrb	r3, [r7, #5]
 800155e:	2b63      	cmp	r3, #99	; 0x63
 8001560:	d9e2      	bls.n	8001528 <calibration+0xf0>
		 pomoc/=100;
 8001562:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001566:	4a36      	ldr	r2, [pc, #216]	; (8001640 <calibration+0x208>)
 8001568:	fb82 1203 	smull	r1, r2, r2, r3
 800156c:	1152      	asrs	r2, r2, #5
 800156e:	17db      	asrs	r3, r3, #31
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	80fb      	strh	r3, [r7, #6]
	Send_Gyro(0x24,0x00);

	for(i1=0;i1<100;i1++) pomoc+=((Read_AXIS(0x2C)-dryf)*700)/10000;
	pomoc/=100;
	HAL_Delay(1000);
  	while(pomoc>2 || pomoc<-2)
 8001574:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001578:	2b02      	cmp	r3, #2
 800157a:	dcb3      	bgt.n	80014e4 <calibration+0xac>
 800157c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001580:	f113 0f02 	cmn.w	r3, #2
 8001584:	dbae      	blt.n	80014e4 <calibration+0xac>
		 pomoc=0;
		 for(i1=0;i1<100;i1++) pomoc+=((Read_AXIS(0x2C)-dryf)*700)/10000;
		 pomoc/=100;
  	}

	 TIM3->CNT=16384;
 8001586:	4b2f      	ldr	r3, [pc, #188]	; (8001644 <calibration+0x20c>)
 8001588:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800158c:	625a      	str	r2, [r3, #36]	; 0x24
	 TIM2->CNT=16384;
 800158e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001592:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001596:	625a      	str	r2, [r3, #36]	; 0x24

	 HAL_TIM_Base_Start_IT(&htim4);
 8001598:	482b      	ldr	r0, [pc, #172]	; (8001648 <calibration+0x210>)
 800159a:	f000 fe01 	bl	80021a0 <HAL_TIM_Base_Start_IT>
	 HAL_Delay(100);
 800159e:	2064      	movs	r0, #100	; 0x64
 80015a0:	f005 ff38 	bl	8007414 <HAL_Delay>

	 rotary(VELR,-95000);
 80015a4:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80015a8:	4928      	ldr	r1, [pc, #160]	; (800164c <calibration+0x214>)
 80015aa:	f7fe fdcf 	bl	800014c <rotary>
	 HAL_Delay(2000);
 80015ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015b2:	f005 ff2f 	bl	8007414 <HAL_Delay>
	 dys0[4]=SensorTab[4][indexer];
 80015b6:	4b26      	ldr	r3, [pc, #152]	; (8001650 <calibration+0x218>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	b25a      	sxtb	r2, r3
 80015bc:	4b25      	ldr	r3, [pc, #148]	; (8001654 <calibration+0x21c>)
 80015be:	3214      	adds	r2, #20
 80015c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	4b24      	ldr	r3, [pc, #144]	; (8001658 <calibration+0x220>)
 80015c8:	811a      	strh	r2, [r3, #8]
	 dys0[5]=SensorTab[5][indexer];
 80015ca:	4b21      	ldr	r3, [pc, #132]	; (8001650 <calibration+0x218>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	b25a      	sxtb	r2, r3
 80015d0:	4b20      	ldr	r3, [pc, #128]	; (8001654 <calibration+0x21c>)
 80015d2:	3219      	adds	r2, #25
 80015d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d8:	b29a      	uxth	r2, r3
 80015da:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <calibration+0x220>)
 80015dc:	815a      	strh	r2, [r3, #10]

	 rotary(VELR,90000);
 80015de:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80015e2:	491e      	ldr	r1, [pc, #120]	; (800165c <calibration+0x224>)
 80015e4:	f7fe fdb2 	bl	800014c <rotary>
	 HAL_Delay(100);
 80015e8:	2064      	movs	r0, #100	; 0x64
 80015ea:	f005 ff13 	bl	8007414 <HAL_Delay>
  	 for(i1=0;i1<4;i1++) dys0[i1]=SensorTab[i1][indexer];
 80015ee:	2300      	movs	r3, #0
 80015f0:	717b      	strb	r3, [r7, #5]
 80015f2:	e012      	b.n	800161a <calibration+0x1e2>
 80015f4:	7979      	ldrb	r1, [r7, #5]
 80015f6:	797a      	ldrb	r2, [r7, #5]
 80015f8:	4b15      	ldr	r3, [pc, #84]	; (8001650 <calibration+0x218>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	b25c      	sxtb	r4, r3
 80015fe:	4815      	ldr	r0, [pc, #84]	; (8001654 <calibration+0x21c>)
 8001600:	4613      	mov	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	4423      	add	r3, r4
 8001608:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800160c:	b29a      	uxth	r2, r3
 800160e:	4b12      	ldr	r3, [pc, #72]	; (8001658 <calibration+0x220>)
 8001610:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 8001614:	797b      	ldrb	r3, [r7, #5]
 8001616:	3301      	adds	r3, #1
 8001618:	717b      	strb	r3, [r7, #5]
 800161a:	797b      	ldrb	r3, [r7, #5]
 800161c:	2b03      	cmp	r3, #3
 800161e:	d9e9      	bls.n	80015f4 <calibration+0x1bc>


//  	rotary_new(VELR,90000);
//  	start=0;
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,0);
 8001620:	4804      	ldr	r0, [pc, #16]	; (8001634 <calibration+0x1fc>)
 8001622:	2104      	movs	r1, #4
 8001624:	2200      	movs	r2, #0
 8001626:	f004 fd0f 	bl	8006048 <HAL_GPIO_WritePin>
}
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bd90      	pop	{r4, r7, pc}
 8001630:	40011000 	.word	0x40011000
 8001634:	40011400 	.word	0x40011400
 8001638:	20000070 	.word	0x20000070
 800163c:	68db8bad 	.word	0x68db8bad
 8001640:	51eb851f 	.word	0x51eb851f
 8001644:	40000400 	.word	0x40000400
 8001648:	20000274 	.word	0x20000274
 800164c:	fffe8ce8 	.word	0xfffe8ce8
 8001650:	20000074 	.word	0x20000074
 8001654:	20000498 	.word	0x20000498
 8001658:	20000050 	.word	0x20000050
 800165c:	00015f90 	.word	0x00015f90

08001660 <HAL_UART_Init>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e03b      	b.n	80016ea <HAL_UART_Init+0x8a>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->State == HAL_UART_STATE_RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d106      	bne.n	800168c <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f006 fe7a 	bl	8008380 <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2202      	movs	r2, #2
 8001690:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	6812      	ldr	r2, [r2, #0]
 800169c:	68d2      	ldr	r2, [r2, #12]
 800169e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016a2:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 fbdf 	bl	8001e68 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6812      	ldr	r2, [r2, #0]
 80016b2:	6912      	ldr	r2, [r2, #16]
 80016b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80016b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6812      	ldr	r2, [r2, #0]
 80016c2:	6952      	ldr	r2, [r2, #20]
 80016c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80016c8:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	6812      	ldr	r2, [r2, #0]
 80016d2:	68d2      	ldr	r2, [r2, #12]
 80016d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80016d8:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop

080016f4 <HAL_UART_Transmit_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	4613      	mov	r3, r2
 8001700:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  uint32_t tmp_state = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]

  tmp_state = huart->State;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800170c:	b2db      	uxtb	r3, r3
 800170e:	617b      	str	r3, [r7, #20]
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d002      	beq.n	800171c <HAL_UART_Transmit_DMA+0x28>
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	2b22      	cmp	r3, #34	; 0x22
 800171a:	d15a      	bne.n	80017d2 <HAL_UART_Transmit_DMA+0xde>
  {
    if((pData == NULL ) || (Size == 0)) 
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d002      	beq.n	8001728 <HAL_UART_Transmit_DMA+0x34>
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_UART_Transmit_DMA+0x38>
    {
      return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e053      	b.n	80017d4 <HAL_UART_Transmit_DMA+0xe0>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001732:	2b01      	cmp	r3, #1
 8001734:	d101      	bne.n	800173a <HAL_UART_Transmit_DMA+0x46>
 8001736:	2302      	movs	r3, #2
 8001738:	e04c      	b.n	80017d4 <HAL_UART_Transmit_DMA+0xe0>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	88fa      	ldrh	r2, [r7, #6]
 800174c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	88fa      	ldrh	r2, [r7, #6]
 8001752:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2200      	movs	r2, #0
 8001758:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b22      	cmp	r3, #34	; 0x22
 8001764:	d104      	bne.n	8001770 <HAL_UART_Transmit_DMA+0x7c>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2232      	movs	r2, #50	; 0x32
 800176a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800176e:	e003      	b.n	8001778 <HAL_UART_Transmit_DMA+0x84>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2212      	movs	r2, #18
 8001774:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177c:	4a17      	ldr	r2, [pc, #92]	; (80017dc <HAL_UART_Transmit_DMA+0xe8>)
 800177e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001784:	4a16      	ldr	r2, [pc, #88]	; (80017e0 <HAL_UART_Transmit_DMA+0xec>)
 8001786:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178c:	4a15      	ldr	r2, [pc, #84]	; (80017e4 <HAL_UART_Transmit_DMA+0xf0>)
 800178e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t*)&pData;
 8001790:	f107 0308 	add.w	r3, r7, #8
 8001794:	613b      	str	r3, [r7, #16]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	6819      	ldr	r1, [r3, #0]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	3304      	adds	r3, #4
 80017a4:	461a      	mov	r2, r3
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	f004 fcd4 	bl	8006154 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80017b4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	6812      	ldr	r2, [r2, #0]
 80017be:	6952      	ldr	r2, [r2, #20]
 80017c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017c4:	615a      	str	r2, [r3, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80017ce:	2300      	movs	r3, #0
 80017d0:	e000      	b.n	80017d4 <HAL_UART_Transmit_DMA+0xe0>
  }
  else
  {
    return HAL_BUSY;
 80017d2:	2302      	movs	r3, #2
  }
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	08001b11 	.word	0x08001b11
 80017e0:	08001b61 	.word	0x08001b61
 80017e4:	08001bf5 	.word	0x08001bf5

080017e8 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain 
  *         the parity bit (MSB position)     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	4613      	mov	r3, r2
 80017f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  uint32_t tmp_state = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]

  tmp_state = huart->State;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001800:	b2db      	uxtb	r3, r3
 8001802:	617b      	str	r3, [r7, #20]
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d002      	beq.n	8001810 <HAL_UART_Receive_DMA+0x28>
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	2b12      	cmp	r3, #18
 800180e:	d152      	bne.n	80018b6 <HAL_UART_Receive_DMA+0xce>
  {
    if((pData == NULL ) || (Size == 0))
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d002      	beq.n	800181c <HAL_UART_Receive_DMA+0x34>
 8001816:	88fb      	ldrh	r3, [r7, #6]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_UART_Receive_DMA+0x38>
    {
      return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e04b      	b.n	80018b8 <HAL_UART_Receive_DMA+0xd0>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001826:	2b01      	cmp	r3, #1
 8001828:	d101      	bne.n	800182e <HAL_UART_Receive_DMA+0x46>
 800182a:	2302      	movs	r3, #2
 800182c:	e044      	b.n	80018b8 <HAL_UART_Receive_DMA+0xd0>
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	88fa      	ldrh	r2, [r7, #6]
 8001840:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2200      	movs	r2, #0
 8001846:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b12      	cmp	r3, #18
 8001852:	d104      	bne.n	800185e <HAL_UART_Receive_DMA+0x76>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2232      	movs	r2, #50	; 0x32
 8001858:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800185c:	e003      	b.n	8001866 <HAL_UART_Receive_DMA+0x7e>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2222      	movs	r2, #34	; 0x22
 8001862:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800186a:	4a15      	ldr	r2, [pc, #84]	; (80018c0 <HAL_UART_Receive_DMA+0xd8>)
 800186c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001872:	4a14      	ldr	r2, [pc, #80]	; (80018c4 <HAL_UART_Receive_DMA+0xdc>)
 8001874:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800187a:	4a13      	ldr	r2, [pc, #76]	; (80018c8 <HAL_UART_Receive_DMA+0xe0>)
 800187c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
 800187e:	f107 0308 	add.w	r3, r7, #8
 8001882:	613b      	str	r3, [r7, #16]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	3304      	adds	r3, #4
 800188e:	4619      	mov	r1, r3
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	f004 fc5d 	bl	8006154 <HAL_DMA_Start_IT>

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	6812      	ldr	r2, [r2, #0]
 80018a2:	6952      	ldr	r2, [r2, #20]
 80018a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018a8:	615a      	str	r2, [r3, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80018b2:	2300      	movs	r3, #0
 80018b4:	e000      	b.n	80018b8 <HAL_UART_Receive_DMA+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80018b6:	2302      	movs	r3, #2
  }
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	08001b7d 	.word	0x08001b7d
 80018c4:	08001bd9 	.word	0x08001bd9
 80018c8:	08001bf5 	.word	0x08001bf5

080018cc <HAL_UART_IRQHandler>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_flag = 0, tmp_it_source = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	2300      	movs	r3, #0
 80018da:	61bb      	str	r3, [r7, #24]

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	bf0c      	ite	eq
 80018ea:	2300      	moveq	r3, #0
 80018ec:	2301      	movne	r3, #1
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	61fb      	str	r3, [r7, #28]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fc:	61bb      	str	r3, [r7, #24]
  /* UART parity error interrupt occurred ------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d011      	beq.n	8001928 <HAL_UART_IRQHandler+0x5c>
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00e      	beq.n	8001928 <HAL_UART_IRQHandler+0x5c>
  { 
    __HAL_UART_CLEAR_PEFLAG(huart);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	697b      	ldr	r3, [r7, #20]
    
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001920:	f043 0201 	orr.w	r2, r3, #1
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	bf0c      	ite	eq
 8001936:	2300      	moveq	r3, #0
 8001938:	2301      	movne	r3, #1
 800193a:	b2db      	uxtb	r3, r3
 800193c:	61fb      	str	r3, [r7, #28]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	61bb      	str	r3, [r7, #24]
  /* UART frame error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d011      	beq.n	8001974 <HAL_UART_IRQHandler+0xa8>
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00e      	beq.n	8001974 <HAL_UART_IRQHandler+0xa8>
  { 
    __HAL_UART_CLEAR_FEFLAG(huart);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	693b      	ldr	r3, [r7, #16]
    
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800196c:	f043 0204 	orr.w	r2, r3, #4
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	2b00      	cmp	r3, #0
 8001980:	bf0c      	ite	eq
 8001982:	2300      	moveq	r3, #0
 8001984:	2301      	movne	r3, #1
 8001986:	b2db      	uxtb	r3, r3
 8001988:	61fb      	str	r3, [r7, #28]
  /* UART noise error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d011      	beq.n	80019b4 <HAL_UART_IRQHandler+0xe8>
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00e      	beq.n	80019b4 <HAL_UART_IRQHandler+0xe8>
  { 
    __HAL_UART_CLEAR_NEFLAG(huart);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]
    
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ac:	f043 0202 	orr.w	r2, r3, #2
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	2b00      	cmp	r3, #0
 80019c0:	bf0c      	ite	eq
 80019c2:	2300      	moveq	r3, #0
 80019c4:	2301      	movne	r3, #1
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	61fb      	str	r3, [r7, #28]
  /* UART Over-Run interrupt occurred ----------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d011      	beq.n	80019f4 <HAL_UART_IRQHandler+0x128>
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00e      	beq.n	80019f4 <HAL_UART_IRQHandler+0x128>
  { 
    __HAL_UART_CLEAR_OREFLAG(huart);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	68bb      	ldr	r3, [r7, #8]
    
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ec:	f043 0208 	orr.w	r2, r3, #8
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0320 	and.w	r3, r3, #32
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	bf0c      	ite	eq
 8001a02:	2300      	moveq	r3, #0
 8001a04:	2301      	movne	r3, #1
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	61fb      	str	r3, [r7, #28]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	f003 0320 	and.w	r3, r3, #32
 8001a14:	61bb      	str	r3, [r7, #24]
  /* UART in mode Receiver ---------------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <HAL_UART_IRQHandler+0x15c>
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d002      	beq.n	8001a28 <HAL_UART_IRQHandler+0x15c>
  { 
    UART_Receive_IT(huart);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f98c 	bl	8001d40 <UART_Receive_IT>
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	bf0c      	ite	eq
 8001a36:	2300      	moveq	r3, #0
 8001a38:	2301      	movne	r3, #1
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	61fb      	str	r3, [r7, #28]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a48:	61bb      	str	r3, [r7, #24]
  /* UART in mode Transmitter ------------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <HAL_UART_IRQHandler+0x190>
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d002      	beq.n	8001a5c <HAL_UART_IRQHandler+0x190>
  {
    UART_Transmit_IT(huart);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f8ea 	bl	8001c30 <UART_Transmit_IT>
  }

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	bf0c      	ite	eq
 8001a6a:	2300      	moveq	r3, #0
 8001a6c:	2301      	movne	r3, #1
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	61fb      	str	r3, [r7, #28]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a7c:	61bb      	str	r3, [r7, #24]
  /* UART in mode Transmitter end --------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d005      	beq.n	8001a90 <HAL_UART_IRQHandler+0x1c4>
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d002      	beq.n	8001a90 <HAL_UART_IRQHandler+0x1c4>
  {
    UART_EndTransmit_IT(huart);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f92c 	bl	8001ce8 <UART_EndTransmit_IT>
  }  

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d006      	beq.n	8001aa6 <HAL_UART_IRQHandler+0x1da>
  {
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    HAL_UART_ErrorCallback(huart);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f82b 	bl	8001afc <HAL_UART_ErrorCallback>
  }  
}
 8001aa6:	3720      	adds	r7, #32
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_UART_TxCpltCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback can be implemented in the user file
   */ 
}
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop

08001ac0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file
   */ 
}
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop

08001ad4 <HAL_UART_RxCpltCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback can be implemented in the user file
   */
}
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop

08001ae8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file
   */
}
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop

08001afc <HAL_UART_ErrorCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback can be implemented in the user file
   */ 
}
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop

08001b10 <UART_DMATransmitCplt>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0320 	and.w	r3, r3, #32
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d113      	bne.n	8001b54 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	6812      	ldr	r2, [r2, #0]
 8001b3a:	6952      	ldr	r2, [r2, #20]
 8001b3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b40:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */    
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	6812      	ldr	r2, [r2, #0]
 8001b4a:	68d2      	ldr	r2, [r2, #12]
 8001b4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	e002      	b.n	8001b5a <UART_DMATransmitCplt+0x4a>
  }
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f7ff ffa9 	bl	8001aac <HAL_UART_TxCpltCallback>
  }
}
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <UART_DMATxHalfCplt>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f7ff ffa6 	bl	8001ac0 <HAL_UART_TxHalfCpltCallback>
}
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop

08001b7c <UART_DMAReceiveCplt>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0320 	and.w	r3, r3, #32
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d119      	bne.n	8001bcc <UART_DMAReceiveCplt+0x50>
  {
    huart->RxXferCount = 0;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	85da      	strh	r2, [r3, #46]	; 0x2e
  
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	6952      	ldr	r2, [r2, #20]
 8001ba8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bac:	615a      	str	r2, [r3, #20]

    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b32      	cmp	r3, #50	; 0x32
 8001bb8:	d104      	bne.n	8001bc4 <UART_DMAReceiveCplt+0x48>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2212      	movs	r2, #18
 8001bbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001bc2:	e003      	b.n	8001bcc <UART_DMAReceiveCplt+0x50>
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }
  HAL_UART_RxCpltCallback(huart);
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f7ff ff81 	bl	8001ad4 <HAL_UART_RxCpltCallback>
}
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <UART_DMARxHalfCplt>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	60fb      	str	r3, [r7, #12]

  HAL_UART_RxHalfCpltCallback(huart); 
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f7ff ff7e 	bl	8001ae8 <HAL_UART_RxHalfCpltCallback>
}
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop

08001bf4 <UART_DMAError>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->State= HAL_UART_STATE_READY;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c1a:	f043 0210 	orr.w	r2, r3, #16
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f7ff ff6a 	bl	8001afc <HAL_UART_ErrorCallback>
}
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop

08001c30 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint32_t tmp_state = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
  
  tmp_state = huart->State;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	60fb      	str	r3, [r7, #12]
  if((tmp_state == HAL_UART_STATE_BUSY_TX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2b12      	cmp	r3, #18
 8001c4a:	d002      	beq.n	8001c52 <UART_Transmit_IT+0x22>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2b32      	cmp	r3, #50	; 0x32
 8001c50:	d143      	bne.n	8001cda <UART_Transmit_IT+0xaa>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c5a:	d119      	bne.n	8001c90 <UART_Transmit_IT+0x60>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	60bb      	str	r3, [r7, #8]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	8812      	ldrh	r2, [r2, #0]
 8001c6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c6e:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d105      	bne.n	8001c84 <UART_Transmit_IT+0x54>
      {
        huart->pTxBuffPtr += 2;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	1c9a      	adds	r2, r3, #2
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	621a      	str	r2, [r3, #32]
 8001c82:	e00e      	b.n	8001ca2 <UART_Transmit_IT+0x72>
      }
      else
      {
        huart->pTxBuffPtr += 1;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	1c5a      	adds	r2, r3, #1
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	621a      	str	r2, [r3, #32]
 8001c8e:	e008      	b.n	8001ca2 <UART_Transmit_IT+0x72>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	1c58      	adds	r0, r3, #1
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	6208      	str	r0, [r1, #32]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	84da      	strh	r2, [r3, #38]	; 0x26
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10f      	bne.n	8001cd6 <UART_Transmit_IT+0xa6>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6812      	ldr	r2, [r2, #0]
 8001cbe:	68d2      	ldr	r2, [r2, #12]
 8001cc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cc4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	68d2      	ldr	r2, [r2, #12]
 8001cd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cd4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e000      	b.n	8001cdc <UART_Transmit_IT+0xac>
  }
  else
  {
    return HAL_BUSY;
 8001cda:	2302      	movs	r3, #2
  }
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	68d2      	ldr	r2, [r2, #12]
 8001cfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cfe:	60da      	str	r2, [r3, #12]
  
  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b32      	cmp	r3, #50	; 0x32
 8001d0a:	d104      	bne.n	8001d16 <UART_EndTransmit_IT+0x2e>
  {
    huart->State = HAL_UART_STATE_BUSY_RX;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2222      	movs	r2, #34	; 0x22
 8001d10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001d14:	e00b      	b.n	8001d2e <UART_EndTransmit_IT+0x46>
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6812      	ldr	r2, [r2, #0]
 8001d1e:	6952      	ldr	r2, [r2, #20]
 8001d20:	f022 0201 	bic.w	r2, r2, #1
 8001d24:	615a      	str	r2, [r3, #20]

    huart->State = HAL_UART_STATE_READY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }
  
  HAL_UART_TxCpltCallback(huart);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff febc 	bl	8001aac <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop

08001d40 <UART_Receive_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint32_t tmp_state = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
  
  tmp_state = huart->State; 
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	60fb      	str	r3, [r7, #12]
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2b22      	cmp	r3, #34	; 0x22
 8001d5a:	d002      	beq.n	8001d62 <UART_Receive_IT+0x22>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2b32      	cmp	r3, #50	; 0x32
 8001d60:	d17c      	bne.n	8001e5c <UART_Receive_IT+0x11c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d6a:	d123      	bne.n	8001db4 <UART_Receive_IT+0x74>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d70:	60bb      	str	r3, [r7, #8]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10e      	bne.n	8001d98 <UART_Receive_IT+0x58>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d90:	1c9a      	adds	r2, r3, #2
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	629a      	str	r2, [r3, #40]	; 0x28
 8001d96:	e029      	b.n	8001dec <UART_Receive_IT+0xac>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dac:	1c5a      	adds	r2, r3, #1
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	629a      	str	r2, [r3, #40]	; 0x28
 8001db2:	e01b      	b.n	8001dec <UART_Receive_IT+0xac>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10a      	bne.n	8001dd2 <UART_Receive_IT+0x92>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc0:	1c59      	adds	r1, r3, #1
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6291      	str	r1, [r2, #40]	; 0x28
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6812      	ldr	r2, [r2, #0]
 8001dca:	6852      	ldr	r2, [r2, #4]
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	701a      	strb	r2, [r3, #0]
 8001dd0:	e00c      	b.n	8001dec <UART_Receive_IT+0xac>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd6:	1c59      	adds	r1, r3, #1
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6291      	str	r1, [r2, #40]	; 0x28
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	6852      	ldr	r2, [r2, #4]
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001df0:	3b01      	subs	r3, #1
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	85da      	strh	r2, [r3, #46]	; 0x2e
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d12b      	bne.n	8001e58 <UART_Receive_IT+0x118>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	68d2      	ldr	r2, [r2, #12]
 8001e0a:	f022 0220 	bic.w	r2, r2, #32
 8001e0e:	60da      	str	r2, [r3, #12]

      /* Check if a transmit process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b32      	cmp	r3, #50	; 0x32
 8001e1a:	d104      	bne.n	8001e26 <UART_Receive_IT+0xe6>
      {
        huart->State = HAL_UART_STATE_BUSY_TX;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2212      	movs	r2, #18
 8001e20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001e24:	e013      	b.n	8001e4e <UART_Receive_IT+0x10e>
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6812      	ldr	r2, [r2, #0]
 8001e2e:	68d2      	ldr	r2, [r2, #12]
 8001e30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e34:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6812      	ldr	r2, [r2, #0]
 8001e3e:	6952      	ldr	r2, [r2, #20]
 8001e40:	f022 0201 	bic.w	r2, r2, #1
 8001e44:	615a      	str	r2, [r3, #20]

        huart->State = HAL_UART_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      }
      HAL_UART_RxCpltCallback(huart);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff fe40 	bl	8001ad4 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	e002      	b.n	8001e5e <UART_Receive_IT+0x11e>
    }
    return HAL_OK;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	e000      	b.n	8001e5e <UART_Receive_IT+0x11e>
  }
  else
  {
    return HAL_BUSY; 
 8001e5c:	2302      	movs	r3, #2
  }
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop

08001e68 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	6812      	ldr	r2, [r2, #0]
 8001e7c:	6912      	ldr	r2, [r2, #16]
 8001e7e:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	68d2      	ldr	r2, [r2, #12]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	611a      	str	r2, [r3, #16]
  /*------- UART-associated USART registers setting : CR1 Configuration ------*/
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001eaa:	f023 030c 	bic.w	r3, r3, #12
 8001eae:	68f9      	ldr	r1, [r7, #12]
 8001eb0:	430b      	orrs	r3, r1
 8001eb2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	6952      	ldr	r2, [r2, #20]
 8001ebe:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6992      	ldr	r2, [r2, #24]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	615a      	str	r2, [r3, #20]
  
  /*------- UART-associated USART registers setting : BRR Configuration ------*/
  if((huart->Instance == USART1))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	4b44      	ldr	r3, [pc, #272]	; (8001fe0 <UART_SetConfig+0x178>)
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d141      	bne.n	8001f58 <UART_SetConfig+0xf0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681c      	ldr	r4, [r3, #0]
 8001ed8:	f003 fa0e 	bl	80052f8 <HAL_RCC_GetPCLK2Freq>
 8001edc:	4602      	mov	r2, r0
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	009a      	lsls	r2, r3, #2
 8001ee6:	441a      	add	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ef2:	4b3c      	ldr	r3, [pc, #240]	; (8001fe4 <UART_SetConfig+0x17c>)
 8001ef4:	fba3 1302 	umull	r1, r3, r3, r2
 8001ef8:	095b      	lsrs	r3, r3, #5
 8001efa:	011d      	lsls	r5, r3, #4
 8001efc:	f003 f9fc 	bl	80052f8 <HAL_RCC_GetPCLK2Freq>
 8001f00:	4602      	mov	r2, r0
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	009a      	lsls	r2, r3, #2
 8001f0a:	441a      	add	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	fbb2 f6f3 	udiv	r6, r2, r3
 8001f16:	f003 f9ef 	bl	80052f8 <HAL_RCC_GetPCLK2Freq>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	009a      	lsls	r2, r3, #2
 8001f24:	441a      	add	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f30:	4b2c      	ldr	r3, [pc, #176]	; (8001fe4 <UART_SetConfig+0x17c>)
 8001f32:	fba3 1302 	umull	r1, r3, r3, r2
 8001f36:	095b      	lsrs	r3, r3, #5
 8001f38:	2264      	movs	r2, #100	; 0x64
 8001f3a:	fb02 f303 	mul.w	r3, r2, r3
 8001f3e:	1af3      	subs	r3, r6, r3
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001f46:	4b27      	ldr	r3, [pc, #156]	; (8001fe4 <UART_SetConfig+0x17c>)
 8001f48:	fba3 1302 	umull	r1, r3, r3, r2
 8001f4c:	095b      	lsrs	r3, r3, #5
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	432b      	orrs	r3, r5
 8001f54:	60a3      	str	r3, [r4, #8]
 8001f56:	e040      	b.n	8001fda <UART_SetConfig+0x172>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681c      	ldr	r4, [r3, #0]
 8001f5c:	f003 f9aa 	bl	80052b4 <HAL_RCC_GetPCLK1Freq>
 8001f60:	4602      	mov	r2, r0
 8001f62:	4613      	mov	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	009a      	lsls	r2, r3, #2
 8001f6a:	441a      	add	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f76:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <UART_SetConfig+0x17c>)
 8001f78:	fba3 1302 	umull	r1, r3, r3, r2
 8001f7c:	095b      	lsrs	r3, r3, #5
 8001f7e:	011d      	lsls	r5, r3, #4
 8001f80:	f003 f998 	bl	80052b4 <HAL_RCC_GetPCLK1Freq>
 8001f84:	4602      	mov	r2, r0
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	009a      	lsls	r2, r3, #2
 8001f8e:	441a      	add	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	fbb2 f6f3 	udiv	r6, r2, r3
 8001f9a:	f003 f98b 	bl	80052b4 <HAL_RCC_GetPCLK1Freq>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	009a      	lsls	r2, r3, #2
 8001fa8:	441a      	add	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <UART_SetConfig+0x17c>)
 8001fb6:	fba3 1302 	umull	r1, r3, r3, r2
 8001fba:	095b      	lsrs	r3, r3, #5
 8001fbc:	2264      	movs	r2, #100	; 0x64
 8001fbe:	fb02 f303 	mul.w	r3, r2, r3
 8001fc2:	1af3      	subs	r3, r6, r3
 8001fc4:	011b      	lsls	r3, r3, #4
 8001fc6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <UART_SetConfig+0x17c>)
 8001fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8001fd0:	095b      	lsrs	r3, r3, #5
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	432b      	orrs	r3, r5
 8001fd8:	60a3      	str	r3, [r4, #8]
  }
}
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fe0:	40013800 	.word	0x40013800
 8001fe4:	51eb851f 	.word	0x51eb851f

08001fe8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d101      	bne.n	8002000 <HAL_TIMEx_ConfigBreakDeadTime+0x18>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	e027      	b.n	8002050 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2202      	movs	r2, #2
 800200c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	6811      	ldr	r1, [r2, #0]
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	6852      	ldr	r2, [r2, #4]

  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
 800201c:	4311      	orrs	r1, r2
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
                                   sBreakDeadTimeConfig->LockLevel        |
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	6892      	ldr	r2, [r2, #8]
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
 8002022:	4311      	orrs	r1, r2
                                   sBreakDeadTimeConfig->LockLevel        |
                                   sBreakDeadTimeConfig->DeadTime         |
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	68d2      	ldr	r2, [r2, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
                                   sBreakDeadTimeConfig->LockLevel        |
 8002028:	4311      	orrs	r1, r2
                                   sBreakDeadTimeConfig->DeadTime         |
                                   sBreakDeadTimeConfig->BreakState       |
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	6912      	ldr	r2, [r2, #16]
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
                                   sBreakDeadTimeConfig->LockLevel        |
                                   sBreakDeadTimeConfig->DeadTime         |
 800202e:	4311      	orrs	r1, r2
                                   sBreakDeadTimeConfig->BreakState       |
                                   sBreakDeadTimeConfig->BreakPolarity    |
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	6952      	ldr	r2, [r2, #20]
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
                                   sBreakDeadTimeConfig->LockLevel        |
                                   sBreakDeadTimeConfig->DeadTime         |
                                   sBreakDeadTimeConfig->BreakState       |
 8002034:	4311      	orrs	r1, r2
                                   sBreakDeadTimeConfig->BreakPolarity    |
                                   sBreakDeadTimeConfig->AutomaticOutput;
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	6992      	ldr	r2, [r2, #24]
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
                                   sBreakDeadTimeConfig->LockLevel        |
                                   sBreakDeadTimeConfig->DeadTime         |
                                   sBreakDeadTimeConfig->BreakState       |
                                   sBreakDeadTimeConfig->BreakPolarity    |
 800203a:	430a      	orrs	r2, r1

  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
 800203c:	645a      	str	r2, [r3, #68]	; 0x44
                                   sBreakDeadTimeConfig->BreakState       |
                                   sBreakDeadTimeConfig->BreakPolarity    |
                                   sBreakDeadTimeConfig->AutomaticOutput;


  htim->State = HAL_TIM_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800206c:	2b01      	cmp	r3, #1
 800206e:	d101      	bne.n	8002074 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002070:	2302      	movs	r3, #2
 8002072:	e032      	b.n	80020da <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2202      	movs	r2, #2
 8002080:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	6852      	ldr	r2, [r2, #4]
 800208e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002092:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	6851      	ldr	r1, [r2, #4]
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	6812      	ldr	r2, [r2, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	6892      	ldr	r2, [r2, #8]
 80020b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020b4:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6812      	ldr	r2, [r2, #0]
 80020be:	6891      	ldr	r1, [r2, #8]
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	6852      	ldr	r2, [r2, #4]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop

080020e8 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop

080020fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop

08002110 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e01d      	b.n	800215e <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d106      	bne.n	800213c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f006 f888 	bl	800824c <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2202      	movs	r2, #2
 8002140:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3304      	adds	r3, #4
 800214c:	4610      	mov	r0, r2
 800214e:	4619      	mov	r1, r3
 8002150:	f000 fc7c 	bl	8002a4c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop

08002168 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2202      	movs	r2, #2
 8002174:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	6812      	ldr	r2, [r2, #0]
 8002182:	f042 0201 	orr.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop

080021a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	68d2      	ldr	r2, [r2, #12]
 80021b2:	f042 0201 	orr.w	r2, r2, #1
 80021b6:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6812      	ldr	r2, [r2, #0]
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop

080021d8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	68d2      	ldr	r2, [r2, #12]
 80021ea:	f022 0201 	bic.w	r2, r2, #1
 80021ee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6a1a      	ldr	r2, [r3, #32]
 80021f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10f      	bne.n	8002220 <HAL_TIM_Base_Stop_IT+0x48>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6a1a      	ldr	r2, [r3, #32]
 8002206:	f240 4344 	movw	r3, #1092	; 0x444
 800220a:	4013      	ands	r3, r2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d107      	bne.n	8002220 <HAL_TIM_Base_Stop_IT+0x48>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	f022 0201 	bic.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop

08002230 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e01d      	b.n	800227e <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d106      	bne.n	800225c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f816 	bl	8002288 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2202      	movs	r2, #2
 8002260:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3304      	adds	r3, #4
 800226c:	4610      	mov	r0, r2
 800226e:	4619      	mov	r1, r3
 8002270:	f000 fbec 	bl	8002a4c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop

08002288 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop

0800229c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	6839      	ldr	r1, [r7, #0]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f000 fe70 	bl	8002f94 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_TIM_PWM_Start+0x4c>)
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d107      	bne.n	80022ce <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80022c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	6812      	ldr	r2, [r2, #0]
 80022d8:	f042 0201 	orr.w	r2, r2, #1
 80022dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40012c00 	.word	0x40012c00

080022ec <HAL_TIM_Encoder_Init>:
  * @param  htim : TIM Encoder Interface handle
  * @param  sConfig : TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]

  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_TIM_Encoder_Init+0x20>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e081      	b.n	8002410 <HAL_TIM_Encoder_Init+0x124>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	d106      	bne.n	8002326 <HAL_TIM_Encoder_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f005 ffdb 	bl	80082dc <HAL_TIM_Encoder_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2202      	movs	r2, #2
 800232a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6812      	ldr	r2, [r2, #0]
 8002336:	6892      	ldr	r2, [r2, #8]
 8002338:	f022 0207 	bic.w	r2, r2, #7
 800233c:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3304      	adds	r3, #4
 8002346:	4610      	mov	r0, r2
 8002348:	4619      	mov	r1, r3
 800234a:	f000 fb7f 	bl	8002a4c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	4313      	orrs	r3, r2
 800236e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002376:	f023 0303 	bic.w	r3, r3, #3
 800237a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	021b      	lsls	r3, r3, #8
 8002386:	4313      	orrs	r3, r2
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	613b      	str	r3, [r7, #16]

  /* Set the the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002394:	f023 030c 	bic.w	r3, r3, #12
 8002398:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	021b      	lsls	r3, r3, #8
 80023b0:	4313      	orrs	r3, r2
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	011a      	lsls	r2, r3, #4
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	031b      	lsls	r3, r3, #12
 80023c4:	4313      	orrs	r3, r2
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80023d2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80023da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	011b      	lsls	r3, r3, #4
 80023e6:	4313      	orrs	r3, r2
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d002      	beq.n	800242e <HAL_TIM_Encoder_Start+0x16>
 8002428:	2b04      	cmp	r3, #4
 800242a:	d008      	beq.n	800243e <HAL_TIM_Encoder_Start+0x26>
 800242c:	e00f      	b.n	800244e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	2100      	movs	r1, #0
 8002436:	2201      	movs	r2, #1
 8002438:	f000 fdac 	bl	8002f94 <TIM_CCxChannelCmd>
      break;
 800243c:	e016      	b.n	800246c <HAL_TIM_Encoder_Start+0x54>
  }
    case TIM_CHANNEL_2:
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	2104      	movs	r1, #4
 8002446:	2201      	movs	r2, #1
 8002448:	f000 fda4 	bl	8002f94 <TIM_CCxChannelCmd>
      break;
 800244c:	e00e      	b.n	800246c <HAL_TIM_Encoder_Start+0x54>
  }
    default :
  {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	2100      	movs	r1, #0
 8002456:	2201      	movs	r2, #1
 8002458:	f000 fd9c 	bl	8002f94 <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	2104      	movs	r1, #4
 8002464:	2201      	movs	r2, #1
 8002466:	f000 fd95 	bl	8002f94 <TIM_CCxChannelCmd>
     break;
 800246a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6812      	ldr	r2, [r2, #0]
 8002474:	6812      	ldr	r2, [r2, #0]
 8002476:	f042 0201 	orr.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop

08002488 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d022      	beq.n	80024e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d01b      	beq.n	80024e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f06f 0202 	mvn.w	r2, #2
 80024b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 faa0 	bl	8002a10 <HAL_TIM_IC_CaptureCallback>
 80024d0:	e005      	b.n	80024de <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 fa92 	bl	80029fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 faa3 	bl	8002a24 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d022      	beq.n	8002538 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d01b      	beq.n	8002538 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f06f 0204 	mvn.w	r2, #4
 8002508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2202      	movs	r2, #2
 800250e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 fa76 	bl	8002a10 <HAL_TIM_IC_CaptureCallback>
 8002524:	e005      	b.n	8002532 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 fa68 	bl	80029fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 fa79 	bl	8002a24 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d022      	beq.n	800258c <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	2b00      	cmp	r3, #0
 8002552:	d01b      	beq.n	800258c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f06f 0208 	mvn.w	r2, #8
 800255c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2204      	movs	r2, #4
 8002562:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 fa4c 	bl	8002a10 <HAL_TIM_IC_CaptureCallback>
 8002578:	e005      	b.n	8002586 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 fa3e 	bl	80029fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 fa4f 	bl	8002a24 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	2b00      	cmp	r3, #0
 8002598:	d022      	beq.n	80025e0 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d01b      	beq.n	80025e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f06f 0210 	mvn.w	r2, #16
 80025b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2208      	movs	r2, #8
 80025b6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 fa22 	bl	8002a10 <HAL_TIM_IC_CaptureCallback>
 80025cc:	e005      	b.n	80025da <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 fa14 	bl	80029fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 fa25 	bl	8002a24 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00e      	beq.n	800260c <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d007      	beq.n	800260c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f06f 0201 	mvn.w	r2, #1
 8002604:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f9ee 	bl	80029e8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00e      	beq.n	8002638 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002624:	2b00      	cmp	r3, #0
 8002626:	d007      	beq.n	8002638 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002630:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff fd62 	bl	80020fc <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00e      	beq.n	8002664 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002650:	2b00      	cmp	r3, #0
 8002652:	d007      	beq.n	8002664 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800265c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f9ea 	bl	8002a38 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	f003 0320 	and.w	r3, r3, #32
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00e      	beq.n	8002690 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f003 0320 	and.w	r3, r3, #32
 800267c:	2b00      	cmp	r3, #0
 800267e:	d007      	beq.n	8002690 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f06f 0220 	mvn.w	r2, #32
 8002688:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff fd2c 	bl	80020e8 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop

08002698 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e0b4      	b.n	800281c <HAL_TIM_PWM_ConfigChannel+0x184>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  assert_param(IS_TIM_OCN_POLARITY(sConfig->OCNPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  assert_param(IS_TIM_OCNIDLE_STATE(sConfig->OCNIdleState));
  assert_param(IS_TIM_OCIDLE_STATE(sConfig->OCIdleState));

  htim->State = HAL_TIM_STATE_BUSY;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2202      	movs	r2, #2
 80026be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  switch (Channel)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b0c      	cmp	r3, #12
 80026c6:	f200 809f 	bhi.w	8002808 <HAL_TIM_PWM_ConfigChannel+0x170>
 80026ca:	a201      	add	r2, pc, #4	; (adr r2, 80026d0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80026cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d0:	08002705 	.word	0x08002705
 80026d4:	08002809 	.word	0x08002809
 80026d8:	08002809 	.word	0x08002809
 80026dc:	08002809 	.word	0x08002809
 80026e0:	08002745 	.word	0x08002745
 80026e4:	08002809 	.word	0x08002809
 80026e8:	08002809 	.word	0x08002809
 80026ec:	08002809 	.word	0x08002809
 80026f0:	08002787 	.word	0x08002787
 80026f4:	08002809 	.word	0x08002809
 80026f8:	08002809 	.word	0x08002809
 80026fc:	08002809 	.word	0x08002809
 8002700:	080027c7 	.word	0x080027c7
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	68b9      	ldr	r1, [r7, #8]
 800270c:	f000 f9fc 	bl	8002b08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	6992      	ldr	r2, [r2, #24]
 800271a:	f042 0208 	orr.w	r2, r2, #8
 800271e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	6992      	ldr	r2, [r2, #24]
 800272a:	f022 0204 	bic.w	r2, r2, #4
 800272e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	6991      	ldr	r1, [r2, #24]
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	6912      	ldr	r2, [r2, #16]
 800273e:	430a      	orrs	r2, r1
 8002740:	619a      	str	r2, [r3, #24]
    }
    break;
 8002742:	e062      	b.n	800280a <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	68b9      	ldr	r1, [r7, #8]
 800274c:	f000 fa48 	bl	8002be0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	6992      	ldr	r2, [r2, #24]
 800275a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800275e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	6992      	ldr	r2, [r2, #24]
 800276a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800276e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	6991      	ldr	r1, [r2, #24]
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	6912      	ldr	r2, [r2, #16]
 800277e:	0212      	lsls	r2, r2, #8
 8002780:	430a      	orrs	r2, r1
 8002782:	619a      	str	r2, [r3, #24]
    }
    break;
 8002784:	e041      	b.n	800280a <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	f000 fa97 	bl	8002cc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	69d2      	ldr	r2, [r2, #28]
 800279c:	f042 0208 	orr.w	r2, r2, #8
 80027a0:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	69d2      	ldr	r2, [r2, #28]
 80027ac:	f022 0204 	bic.w	r2, r2, #4
 80027b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	6812      	ldr	r2, [r2, #0]
 80027ba:	69d1      	ldr	r1, [r2, #28]
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	6912      	ldr	r2, [r2, #16]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	61da      	str	r2, [r3, #28]
    }
    break;
 80027c4:	e021      	b.n	800280a <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	68b9      	ldr	r1, [r7, #8]
 80027ce:	f000 fae7 	bl	8002da0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	6812      	ldr	r2, [r2, #0]
 80027da:	69d2      	ldr	r2, [r2, #28]
 80027dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027e0:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	6812      	ldr	r2, [r2, #0]
 80027ea:	69d2      	ldr	r2, [r2, #28]
 80027ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	6812      	ldr	r2, [r2, #0]
 80027fa:	69d1      	ldr	r1, [r2, #28]
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	6912      	ldr	r2, [r2, #16]
 8002800:	0212      	lsls	r2, r2, #8
 8002802:	430a      	orrs	r2, r1
 8002804:	61da      	str	r2, [r3, #28]
    }
    break;
 8002806:	e000      	b.n	800280a <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 8002808:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0;
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_TIM_ConfigClockSource+0x1c>
 800283c:	2302      	movs	r3, #2
 800283e:	e0cf      	b.n	80029e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
  assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
  assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800285e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002866:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b40      	cmp	r3, #64	; 0x40
 8002876:	d07c      	beq.n	8002972 <HAL_TIM_ConfigClockSource+0x14e>
 8002878:	2b40      	cmp	r3, #64	; 0x40
 800287a:	d80f      	bhi.n	800289c <HAL_TIM_ConfigClockSource+0x78>
 800287c:	2b10      	cmp	r3, #16
 800287e:	f000 8091 	beq.w	80029a4 <HAL_TIM_ConfigClockSource+0x180>
 8002882:	2b10      	cmp	r3, #16
 8002884:	d803      	bhi.n	800288e <HAL_TIM_ConfigClockSource+0x6a>
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 8085 	beq.w	8002996 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 800288c:	e09f      	b.n	80029ce <HAL_TIM_ConfigClockSource+0x1aa>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 800288e:	2b20      	cmp	r3, #32
 8002890:	f000 808f 	beq.w	80029b2 <HAL_TIM_ConfigClockSource+0x18e>
 8002894:	2b30      	cmp	r3, #48	; 0x30
 8002896:	f000 8093 	beq.w	80029c0 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 800289a:	e098      	b.n	80029ce <HAL_TIM_ConfigClockSource+0x1aa>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 800289c:	2b70      	cmp	r3, #112	; 0x70
 800289e:	d016      	beq.n	80028ce <HAL_TIM_ConfigClockSource+0xaa>
 80028a0:	2b70      	cmp	r3, #112	; 0x70
 80028a2:	d804      	bhi.n	80028ae <HAL_TIM_ConfigClockSource+0x8a>
 80028a4:	2b50      	cmp	r3, #80	; 0x50
 80028a6:	d040      	beq.n	800292a <HAL_TIM_ConfigClockSource+0x106>
 80028a8:	2b60      	cmp	r3, #96	; 0x60
 80028aa:	d050      	beq.n	800294e <HAL_TIM_ConfigClockSource+0x12a>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 80028ac:	e08f      	b.n	80029ce <HAL_TIM_ConfigClockSource+0x1aa>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 80028ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028b2:	d003      	beq.n	80028bc <HAL_TIM_ConfigClockSource+0x98>
 80028b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028b8:	d024      	beq.n	8002904 <HAL_TIM_ConfigClockSource+0xe0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 80028ba:	e088      	b.n	80029ce <HAL_TIM_ConfigClockSource+0x1aa>
  {
  case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	6892      	ldr	r2, [r2, #8]
 80028c6:	f022 0207 	bic.w	r2, r2, #7
 80028ca:	609a      	str	r2, [r3, #8]
    }
    break;
 80028cc:	e07f      	b.n	80029ce <HAL_TIM_ConfigClockSource+0x1aa>
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	6899      	ldr	r1, [r3, #8]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f000 fb37 	bl	8002f50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	60fb      	str	r3, [r7, #12]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028f0:	60fb      	str	r3, [r7, #12]
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028f8:	60fb      	str	r3, [r7, #12]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	609a      	str	r2, [r3, #8]
    }
    break;
 8002902:	e064      	b.n	80029ce <HAL_TIM_ConfigClockSource+0x1aa>
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	6899      	ldr	r1, [r3, #8]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f000 fb1c 	bl	8002f50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	6892      	ldr	r2, [r2, #8]
 8002922:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002926:	609a      	str	r2, [r3, #8]
    }
    break;
 8002928:	e051      	b.n	80029ce <HAL_TIM_ConfigClockSource+0x1aa>
  case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6819      	ldr	r1, [r3, #0]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	4608      	mov	r0, r1
 8002938:	4611      	mov	r1, r2
 800293a:	461a      	mov	r2, r3
 800293c:	f000 fa84 	bl	8002e48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	2150      	movs	r1, #80	; 0x50
 8002948:	f000 fae4 	bl	8002f14 <TIM_ITRx_SetConfig>
    }
    break;
 800294c:	e03f      	b.n	80029ce <HAL_TIM_ConfigClockSource+0x1aa>
  case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6819      	ldr	r1, [r3, #0]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	4608      	mov	r0, r1
 800295c:	4611      	mov	r1, r2
 800295e:	461a      	mov	r2, r3
 8002960:	f000 faa4 	bl	8002eac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	2160      	movs	r1, #96	; 0x60
 800296c:	f000 fad2 	bl	8002f14 <TIM_ITRx_SetConfig>
    }
    break;
 8002970:	e02d      	b.n	80029ce <HAL_TIM_ConfigClockSource+0x1aa>
  case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6819      	ldr	r1, [r3, #0]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	4608      	mov	r0, r1
 8002980:	4611      	mov	r1, r2
 8002982:	461a      	mov	r2, r3
 8002984:	f000 fa60 	bl	8002e48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	2140      	movs	r1, #64	; 0x40
 8002990:	f000 fac0 	bl	8002f14 <TIM_ITRx_SetConfig>
    }
    break;
 8002994:	e01b      	b.n	80029ce <HAL_TIM_ConfigClockSource+0x1aa>
  case TIM_CLOCKSOURCE_ITR0:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	2100      	movs	r1, #0
 800299e:	f000 fab9 	bl	8002f14 <TIM_ITRx_SetConfig>
    }
    break;
 80029a2:	e014      	b.n	80029ce <HAL_TIM_ConfigClockSource+0x1aa>
  case TIM_CLOCKSOURCE_ITR1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	2110      	movs	r1, #16
 80029ac:	f000 fab2 	bl	8002f14 <TIM_ITRx_SetConfig>
    }
    break;
 80029b0:	e00d      	b.n	80029ce <HAL_TIM_ConfigClockSource+0x1aa>
  case TIM_CLOCKSOURCE_ITR2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	2120      	movs	r1, #32
 80029ba:	f000 faab 	bl	8002f14 <TIM_ITRx_SetConfig>
    }
    break;
 80029be:	e006      	b.n	80029ce <HAL_TIM_ConfigClockSource+0x1aa>
  case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	2130      	movs	r1, #48	; 0x30
 80029c8:	f000 faa4 	bl	8002f14 <TIM_ITRx_SetConfig>
    }
    break;
 80029cc:	bf00      	nop

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop

080029fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop

08002a10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop

08002a24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop

08002a38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop

08002a4c <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	4b26      	ldr	r3, [pc, #152]	; (8002afc <TIM_Base_SetConfig+0xb0>)
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d00b      	beq.n	8002a80 <TIM_Base_SetConfig+0x34>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a6e:	d007      	beq.n	8002a80 <TIM_Base_SetConfig+0x34>
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	4b23      	ldr	r3, [pc, #140]	; (8002b00 <TIM_Base_SetConfig+0xb4>)
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d003      	beq.n	8002a80 <TIM_Base_SetConfig+0x34>
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	4b22      	ldr	r3, [pc, #136]	; (8002b04 <TIM_Base_SetConfig+0xb8>)
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d108      	bne.n	8002a92 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	4b19      	ldr	r3, [pc, #100]	; (8002afc <TIM_Base_SetConfig+0xb0>)
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d00b      	beq.n	8002ab2 <TIM_Base_SetConfig+0x66>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa0:	d007      	beq.n	8002ab2 <TIM_Base_SetConfig+0x66>
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	4b16      	ldr	r3, [pc, #88]	; (8002b00 <TIM_Base_SetConfig+0xb4>)
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d003      	beq.n	8002ab2 <TIM_Base_SetConfig+0x66>
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	4b15      	ldr	r3, [pc, #84]	; (8002b04 <TIM_Base_SetConfig+0xb8>)
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d108      	bne.n	8002ac4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ab8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	4b07      	ldr	r3, [pc, #28]	; (8002afc <TIM_Base_SetConfig+0xb0>)
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d103      	bne.n	8002aea <TIM_Base_SetConfig+0x9e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	691a      	ldr	r2, [r3, #16]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	615a      	str	r2, [r3, #20]
}
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40012c00 	.word	0x40012c00
 8002b00:	40000400 	.word	0x40000400
 8002b04:	40000800 	.word	0x40000800

08002b08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	f023 0201 	bic.w	r2, r3, #1
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f023 0303 	bic.w	r3, r3, #3
 8002b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f023 0302 	bic.w	r3, r3, #2
 8002b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	4b1c      	ldr	r3, [pc, #112]	; (8002bdc <TIM_OC1_SetConfig+0xd4>)
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d10c      	bne.n	8002b8a <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f023 0308 	bic.w	r3, r3, #8
 8002b76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f023 0304 	bic.w	r3, r3, #4
 8002b88:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <TIM_OC1_SetConfig+0xd4>)
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d111      	bne.n	8002bb6 <TIM_OC1_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	621a      	str	r2, [r3, #32]
}
 8002bd0:	371c      	adds	r7, #28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40012c00 	.word	0x40012c00

08002be0 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b087      	sub	sp, #28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	f023 0210 	bic.w	r2, r3, #16
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	021b      	lsls	r3, r3, #8
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f023 0320 	bic.w	r3, r3, #32
 8002c36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	4b1d      	ldr	r3, [pc, #116]	; (8002cbc <TIM_OC2_SetConfig+0xdc>)
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d10d      	bne.n	8002c68 <TIM_OC2_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c66:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	4b14      	ldr	r3, [pc, #80]	; (8002cbc <TIM_OC2_SetConfig+0xdc>)
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d113      	bne.n	8002c98 <TIM_OC2_SetConfig+0xb8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	621a      	str	r2, [r3, #32]
}
 8002cb2:	371c      	adds	r7, #28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	40012c00 	.word	0x40012c00

08002cc0 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f023 0303 	bic.w	r3, r3, #3
 8002d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	021b      	lsls	r3, r3, #8
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <TIM_OC3_SetConfig+0xdc>)
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d10d      	bne.n	8002d46 <TIM_OC3_SetConfig+0x86>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	021b      	lsls	r3, r3, #8
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d44:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <TIM_OC3_SetConfig+0xdc>)
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d113      	bne.n	8002d76 <TIM_OC3_SetConfig+0xb6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	621a      	str	r2, [r3, #32]
}
 8002d90:	371c      	adds	r7, #28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40012c00 	.word	0x40012c00

08002da0 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8002daa:	2300      	movs	r3, #0
 8002dac:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 8002dae:	2300      	movs	r3, #0
 8002db0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0;
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dda:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de2:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	021b      	lsls	r3, r3, #8
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002df6:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	031b      	lsls	r3, r3, #12
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	4b0f      	ldr	r3, [pc, #60]	; (8002e44 <TIM_OC4_SetConfig+0xa4>)
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d109      	bne.n	8002e20 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	019b      	lsls	r3, r3, #6
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	621a      	str	r2, [r3, #32]
}
 8002e3a:	371c      	adds	r7, #28
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	40012c00 	.word	0x40012c00

08002e48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b087      	sub	sp, #28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	f023 0201 	bic.w	r2, r3, #1
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	f023 030a 	bic.w	r3, r3, #10
 8002e8c:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	621a      	str	r2, [r3, #32]
}
 8002ea2:	371c      	adds	r7, #28
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b087      	sub	sp, #28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	f023 0210 	bic.w	r2, r3, #16
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ede:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	031b      	lsls	r3, r3, #12
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ef0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4);
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	621a      	str	r2, [r3, #32]
}
 8002f08:	371c      	adds	r7, #28
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop

08002f14 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f30:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002f32:	887b      	ldrh	r3, [r7, #2]
 8002f34:	f043 0307 	orr.w	r3, r3, #7
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	609a      	str	r2, [r3, #8]
}
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	021a      	lsls	r2, r3, #8
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	431a      	orrs	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	609a      	str	r2, [r3, #8]
}
 8002f88:	371c      	adds	r7, #28
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop

08002f94 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a1a      	ldr	r2, [r3, #32]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	401a      	ands	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a1a      	ldr	r2, [r3, #32]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	621a      	str	r2, [r3, #32]
}
 8002fce:	371c      	adds	r7, #28
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e056      	b.n	8003098 <HAL_SPI_Init+0xc0>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));

  if(hspi->State == HAL_SPI_STATE_RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d102      	bne.n	8002ffc <HAL_SPI_Init+0x24>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f005 f8f0 	bl	80081dc <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6812      	ldr	r2, [r2, #0]
 800300c:	6812      	ldr	r2, [r2, #0]
 800300e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003012:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6851      	ldr	r1, [r2, #4]
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6892      	ldr	r2, [r2, #8]
 8003020:	4311      	orrs	r1, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	68d2      	ldr	r2, [r2, #12]
 8003026:	4311      	orrs	r1, r2
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6912      	ldr	r2, [r2, #16]
 800302c:	4311      	orrs	r1, r2
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6952      	ldr	r2, [r2, #20]
 8003032:	4311      	orrs	r1, r2
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6992      	ldr	r2, [r2, #24]
 8003038:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800303c:	4311      	orrs	r1, r2
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	69d2      	ldr	r2, [r2, #28]
 8003042:	4311      	orrs	r1, r2
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	6a12      	ldr	r2, [r2, #32]
 8003048:	4311      	orrs	r1, r2
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800304e:	430a      	orrs	r2, r1
 8003050:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6992      	ldr	r2, [r2, #24]
 800305a:	0c12      	lsrs	r2, r2, #16
 800305c:	f002 0104 	and.w	r1, r2, #4
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003064:	430a      	orrs	r2, r1
 8003066:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003070:	611a      	str	r2, [r3, #16]

#if defined (STM32F101x6) || defined (STM32F101xB) || defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F102x6) || defined (STM32F102xB) || defined (STM32F103x6) || defined (STM32F103xB) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F105xC) || defined (STM32F107xC)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6812      	ldr	r2, [r2, #0]
 800307a:	69d2      	ldr	r2, [r2, #28]
 800307c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003080:	61da      	str	r2, [r3, #28]
     Revision ID information is only available in Debug mode, so Workaround could not be implemented
     to distinguish Rev Z devices (issue present) from more recent version (issue fixed).
     So, in case of Revison Z F101 or F103 devices, below variable should be assigned to 1 */
  uCRCErrorWorkaroundCheck = 0;
#else
  uCRCErrorWorkaroundCheck = 0;
 8003082:	4b07      	ldr	r3, [pc, #28]	; (80030a0 <HAL_SPI_Init+0xc8>)
 8003084:	2200      	movs	r2, #0
 8003086:	701a      	strb	r2, [r3, #0]
#endif

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	20000028 	.word	0x20000028

080030a4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0;
 80030ac:	2300      	movs	r3, #0
 80030ae:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if(hrtc == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_RTC_Init+0x16>
  {
     return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e084      	b.n	80031c4 <HAL_RTC_Init+0x120>
  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	7c5b      	ldrb	r3, [r3, #17]
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d105      	bne.n	80030d0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	741a      	strb	r2, [r3, #16]
    
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f005 f856 	bl	800817c <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	745a      	strb	r2, [r3, #17]
       
  /* Waiting for synchro */
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f9c8 	bl	800346c <HAL_RTC_WaitForSynchro>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d004      	beq.n	80030ec <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2204      	movs	r2, #4
 80030e6:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e06b      	b.n	80031c4 <HAL_RTC_Init+0x120>
  } 

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 fa87 	bl	8003600 <RTC_EnterInitMode>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d004      	beq.n	8003102 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2204      	movs	r2, #4
 80030fc:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e060      	b.n	80031c4 <HAL_RTC_Init+0x120>
  } 
  else
  { 
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6812      	ldr	r2, [r2, #0]
 800310a:	6852      	ldr	r2, [r2, #4]
 800310c:	f022 0207 	bic.w	r2, r2, #7
 8003110:	605a      	str	r2, [r3, #4]
    
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d005      	beq.n	8003126 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800311a:	4b2c      	ldr	r3, [pc, #176]	; (80031cc <HAL_RTC_Init+0x128>)
 800311c:	4a2b      	ldr	r2, [pc, #172]	; (80031cc <HAL_RTC_Init+0x128>)
 800311e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003120:	f022 0201 	bic.w	r2, r2, #1
 8003124:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003126:	4b29      	ldr	r3, [pc, #164]	; (80031cc <HAL_RTC_Init+0x128>)
 8003128:	4a28      	ldr	r2, [pc, #160]	; (80031cc <HAL_RTC_Init+0x128>)
 800312a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800312c:	f422 7160 	bic.w	r1, r2, #896	; 0x380
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6892      	ldr	r2, [r2, #8]
 8003134:	430a      	orrs	r2, r1
 8003136:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003140:	d003      	beq.n	800314a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	e00e      	b.n	8003168 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800314a:	2001      	movs	r0, #1
 800314c:	f000 fc34 	bl	80039b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003150:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d104      	bne.n	8003162 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2204      	movs	r2, #4
 800315c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e030      	b.n	80031c4 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	3b01      	subs	r3, #1
 8003166:	60fb      	str	r3, [r7, #12]
      }
    }
    
    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6812      	ldr	r2, [r2, #0]
 8003170:	6892      	ldr	r2, [r2, #8]
 8003172:	f022 010f 	bic.w	r1, r2, #15
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	0c12      	lsrs	r2, r2, #16
 800317a:	430a      	orrs	r2, r1
 800317c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	0c1b      	lsrs	r3, r3, #16
 800318a:	041b      	lsls	r3, r3, #16
 800318c:	68f9      	ldr	r1, [r7, #12]
 800318e:	b289      	uxth	r1, r1
 8003190:	430b      	orrs	r3, r1
 8003192:	60d3      	str	r3, [r2, #12]
      
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 fa5b 	bl	8003650 <RTC_ExitInitMode>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d004      	beq.n	80031aa <HAL_RTC_Init+0x106>
    {       
      hrtc->State = HAL_RTC_STATE_ERROR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2204      	movs	r2, #4
 80031a4:	745a      	strb	r2, [r3, #17]
      
      return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e00c      	b.n	80031c4 <HAL_RTC_Init+0x120>
    }
    
    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	745a      	strb	r2, [r3, #17]
    
    return HAL_OK;
 80031c2:	2300      	movs	r3, #0
  }
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40006c00 	.word	0x40006c00

080031d0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80031d0:	b590      	push	{r4, r7, lr}
 80031d2:	b087      	sub	sp, #28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0, counter_alarm = 0;
 80031dc:	2300      	movs	r3, #0
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	2300      	movs	r3, #0
 80031e2:	613b      	str	r3, [r7, #16]
  
  /* Check input parameters */
  if((hrtc == NULL) || (sTime == NULL))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d002      	beq.n	80031f0 <HAL_RTC_SetTime+0x20>
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_RTC_SetTime+0x24>
  {
     return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e07e      	b.n	80032f2 <HAL_RTC_SetTime+0x122>
  
 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	7c1b      	ldrb	r3, [r3, #16]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_RTC_SetTime+0x30>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e078      	b.n	80032f2 <HAL_RTC_SetTime+0x122>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	741a      	strb	r2, [r3, #16]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2202      	movs	r2, #2
 800320a:	745a      	strb	r2, [r3, #17]
  
  if(Format == RTC_FORMAT_BIN)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d112      	bne.n	8003238 <HAL_RTC_SetTime+0x68>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600) + \
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800321a:	fb02 f103 	mul.w	r1, r2, r3
                        ((uint32_t)sTime->Minutes * 60) + \
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	785b      	ldrb	r3, [r3, #1]
 8003222:	461a      	mov	r2, r3
 8003224:	4613      	mov	r3, r2
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	009b      	lsls	r3, r3, #2
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600) + \
 800322c:	18ca      	adds	r2, r1, r3
                        ((uint32_t)sTime->Minutes * 60) + \
                        ((uint32_t)sTime->Seconds));  
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	789b      	ldrb	r3, [r3, #2]
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600) + \
 8003232:	4413      	add	r3, r2
 8003234:	617b      	str	r3, [r7, #20]
 8003236:	e01d      	b.n	8003274 <HAL_RTC_SetTime+0xa4>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600) + \
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fa2f 	bl	80036a0 <RTC_Bcd2ToByte>
 8003242:	4603      	mov	r3, r0
 8003244:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8003248:	fb02 f403 	mul.w	r4, r2, r3
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60) + \
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	785b      	ldrb	r3, [r3, #1]
 8003250:	4618      	mov	r0, r3
 8003252:	f000 fa25 	bl	80036a0 <RTC_Bcd2ToByte>
 8003256:	4603      	mov	r3, r0
 8003258:	461a      	mov	r2, r3
 800325a:	4613      	mov	r3, r2
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	1a9b      	subs	r3, r3, r2
 8003260:	009b      	lsls	r3, r3, #2
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600) + \
 8003262:	441c      	add	r4, r3
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60) + \
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));   
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	789b      	ldrb	r3, [r3, #2]
 8003268:	4618      	mov	r0, r3
 800326a:	f000 fa19 	bl	80036a0 <RTC_Bcd2ToByte>
 800326e:	4603      	mov	r3, r0
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600) + \
 8003270:	4423      	add	r3, r4
 8003272:	617b      	str	r3, [r7, #20]
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60) + \
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));   
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	6979      	ldr	r1, [r7, #20]
 8003278:	f000 f958 	bl	800352c <RTC_WriteTimeCounter>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d007      	beq.n	8003292 <HAL_RTC_SetTime+0xc2>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2204      	movs	r2, #4
 8003286:	745a      	strb	r2, [r3, #17]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	741a      	strb	r2, [r3, #16]
    
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e02f      	b.n	80032f2 <HAL_RTC_SetTime+0x122>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	6812      	ldr	r2, [r2, #0]
 800329a:	6852      	ldr	r2, [r2, #4]
 800329c:	f022 0205 	bic.w	r2, r2, #5
 80032a0:	605a      	str	r2, [r3, #4]
    
    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 f96a 	bl	800357c <RTC_ReadAlarmCounter>
 80032a8:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b0:	d018      	beq.n	80032e4 <HAL_RTC_SetTime+0x114>
    {
      if(counter_alarm < counter_time)
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d214      	bcs.n	80032e4 <HAL_RTC_SetTime+0x114>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24 * 3600);
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80032c0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80032c4:	613b      	str	r3, [r7, #16]
        
        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	6939      	ldr	r1, [r7, #16]
 80032ca:	f000 f971 	bl	80035b0 <RTC_WriteAlarmCounter>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d007      	beq.n	80032e4 <HAL_RTC_SetTime+0x114>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2204      	movs	r2, #4
 80032d8:	745a      	strb	r2, [r3, #17]
          
          /* Process Unlocked */ 
          __HAL_UNLOCK(hrtc);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	741a      	strb	r2, [r3, #16]
          
          return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e006      	b.n	80032f2 <HAL_RTC_SetTime+0x122>
        }
      }
    }
    
    hrtc->State = HAL_RTC_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2201      	movs	r2, #1
 80032e8:	745a      	strb	r2, [r3, #17]
  
   __HAL_UNLOCK(hrtc); 
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	741a      	strb	r2, [r3, #16]
     
   return HAL_OK;
 80032f0:	2300      	movs	r3, #0
  }
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	371c      	adds	r7, #28
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd90      	pop	{r4, r7, pc}
 80032fa:	bf00      	nop

080032fc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b088      	sub	sp, #32
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0, counter_alarm = 0, hours = 0;
 8003308:	2300      	movs	r3, #0
 800330a:	61fb      	str	r3, [r7, #28]
 800330c:	2300      	movs	r3, #0
 800330e:	61bb      	str	r3, [r7, #24]
 8003310:	2300      	movs	r3, #0
 8003312:	617b      	str	r3, [r7, #20]
  
  /* Check input parameters */
  if((hrtc == NULL) || (sDate == NULL))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <HAL_RTC_SetDate+0x24>
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_RTC_SetDate+0x28>
  {
     return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e099      	b.n	8003458 <HAL_RTC_SetDate+0x15c>
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
 /* Process Locked */ 
 __HAL_LOCK(hrtc);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	7c1b      	ldrb	r3, [r3, #16]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d101      	bne.n	8003330 <HAL_RTC_SetDate+0x34>
 800332c:	2302      	movs	r3, #2
 800332e:	e093      	b.n	8003458 <HAL_RTC_SetDate+0x15c>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2201      	movs	r2, #1
 8003334:	741a      	strb	r2, [r3, #16]
  
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2202      	movs	r2, #2
 800333a:	745a      	strb	r2, [r3, #17]
  
  if(Format == RTC_FORMAT_BIN)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10c      	bne.n	800335c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date)); 

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	78da      	ldrb	r2, [r3, #3]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	785a      	ldrb	r2, [r3, #1]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	789a      	ldrb	r2, [r3, #2]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	739a      	strb	r2, [r3, #14]
 800335a:	e01a      	b.n	8003392 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
    
    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	78db      	ldrb	r3, [r3, #3]
 8003360:	4618      	mov	r0, r3
 8003362:	f000 f99d 	bl	80036a0 <RTC_Bcd2ToByte>
 8003366:	4603      	mov	r3, r0
 8003368:	461a      	mov	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	785b      	ldrb	r3, [r3, #1]
 8003372:	4618      	mov	r0, r3
 8003374:	f000 f994 	bl	80036a0 <RTC_Bcd2ToByte>
 8003378:	4603      	mov	r3, r0
 800337a:	461a      	mov	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	789b      	ldrb	r3, [r3, #2]
 8003384:	4618      	mov	r0, r3
 8003386:	f000 f98b 	bl	80036a0 <RTC_Bcd2ToByte>
 800338a:	4603      	mov	r3, r0
 800338c:	461a      	mov	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	7bdb      	ldrb	r3, [r3, #15]
 8003396:	4619      	mov	r1, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	7b5a      	ldrb	r2, [r3, #13]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	7b9b      	ldrb	r3, [r3, #14]
 80033a0:	4608      	mov	r0, r1
 80033a2:	4611      	mov	r1, r2
 80033a4:	461a      	mov	r2, r3
 80033a6:	f000 f999 	bl	80036dc <RTC_WeekDayNum>
 80033aa:	4603      	mov	r3, r0
 80033ac:	461a      	mov	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	7b1a      	ldrb	r2, [r3, #12]
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 f884 	bl	80034c8 <RTC_ReadTimeCounter>
 80033c0:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600;
 80033c2:	69fa      	ldr	r2, [r7, #28]
 80033c4:	4b26      	ldr	r3, [pc, #152]	; (8003460 <HAL_RTC_SetDate+0x164>)
 80033c6:	fba3 1302 	umull	r1, r3, r3, r2
 80033ca:	0adb      	lsrs	r3, r3, #11
 80033cc:	617b      	str	r3, [r7, #20]
  if (hours > 24)
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2b18      	cmp	r3, #24
 80033d2:	d93a      	bls.n	800344a <HAL_RTC_SetDate+0x14e>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24) * 24 * 3600);
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	4b23      	ldr	r3, [pc, #140]	; (8003464 <HAL_RTC_SetDate+0x168>)
 80033d8:	fba3 1302 	umull	r1, r3, r3, r2
 80033dc:	091b      	lsrs	r3, r3, #4
 80033de:	4a22      	ldr	r2, [pc, #136]	; (8003468 <HAL_RTC_SetDate+0x16c>)
 80033e0:	fb02 f303 	mul.w	r3, r2, r3
 80033e4:	69fa      	ldr	r2, [r7, #28]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	69f9      	ldr	r1, [r7, #28]
 80033ee:	f000 f89d 	bl	800352c <RTC_WriteTimeCounter>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d007      	beq.n	8003408 <HAL_RTC_SetDate+0x10c>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2204      	movs	r2, #4
 80033fc:	745a      	strb	r2, [r3, #17]
      
      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	741a      	strb	r2, [r3, #16]
      
      return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e027      	b.n	8003458 <HAL_RTC_SetDate+0x15c>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 f8b7 	bl	800357c <RTC_ReadAlarmCounter>
 800340e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003416:	d018      	beq.n	800344a <HAL_RTC_SetDate+0x14e>
    {
      if(counter_alarm < counter_time)
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	429a      	cmp	r2, r3
 800341e:	d214      	bcs.n	800344a <HAL_RTC_SetDate+0x14e>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24 * 3600);
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003426:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800342a:	61bb      	str	r3, [r7, #24]
        
        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	69b9      	ldr	r1, [r7, #24]
 8003430:	f000 f8be 	bl	80035b0 <RTC_WriteAlarmCounter>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d007      	beq.n	800344a <HAL_RTC_SetDate+0x14e>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2204      	movs	r2, #4
 800343e:	745a      	strb	r2, [r3, #17]
          
          /* Process Unlocked */ 
          __HAL_UNLOCK(hrtc);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	741a      	strb	r2, [r3, #16]
          
          return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e006      	b.n	8003458 <HAL_RTC_SetDate+0x15c>
    }
    

  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2201      	movs	r2, #1
 800344e:	745a      	strb	r2, [r3, #17]
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	741a      	strb	r2, [r3, #16]
  
  return HAL_OK;    
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3720      	adds	r7, #32
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	91a2b3c5 	.word	0x91a2b3c5
 8003464:	aaaaaaab 	.word	0xaaaaaaab
 8003468:	00015180 	.word	0x00015180

0800346c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003474:	2300      	movs	r3, #0
 8003476:	60fb      	str	r3, [r7, #12]
  
  /* Check input parameters */
  if(hrtc == NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_RTC_WaitForSynchro+0x16>
  {
     return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e01d      	b.n	80034be <HAL_RTC_WaitForSynchro+0x52>
  }
  
  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6812      	ldr	r2, [r2, #0]
 800348a:	6852      	ldr	r2, [r2, #4]
 800348c:	f022 0208 	bic.w	r2, r2, #8
 8003490:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 8003492:	f003 ffb3 	bl	80073fc <HAL_GetTick>
 8003496:	60f8      	str	r0, [r7, #12]
  
  /* Wait the registers to be synchronised */
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003498:	e009      	b.n	80034ae <HAL_RTC_WaitForSynchro+0x42>
  {
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 800349a:	f003 ffaf 	bl	80073fc <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034a8:	d901      	bls.n	80034ae <HAL_RTC_WaitForSynchro+0x42>
    {       
      return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e007      	b.n	80034be <HAL_RTC_WaitForSynchro+0x52>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
  
  tickstart = HAL_GetTick();
  
  /* Wait the registers to be synchronised */
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0ee      	beq.n	800349a <HAL_RTC_WaitForSynchro+0x2e>
    {       
      return HAL_TIMEOUT;
    } 
  }
  
  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop

080034c8 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef* hrtc)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b087      	sub	sp, #28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0, high2 = 0, low = 0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	827b      	strh	r3, [r7, #18]
 80034d4:	2300      	movs	r3, #0
 80034d6:	823b      	strh	r3, [r7, #16]
 80034d8:	2300      	movs	r3, #0
 80034da:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0;
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80034f8:	8a7a      	ldrh	r2, [r7, #18]
 80034fa:	8a3b      	ldrh	r3, [r7, #16]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d008      	beq.n	8003512 <RTC_ReadTimeCounter+0x4a>
  { /* In this case the counter roll over during reading of CNTL and CNTH registers, 
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16 ) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003500:	8a3b      	ldrh	r3, [r7, #16]
 8003502:	041a      	lsls	r2, r3, #16
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	b29b      	uxth	r3, r3
 800350c:	4313      	orrs	r3, r2
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	e004      	b.n	800351c <RTC_ReadTimeCounter+0x54>
  }
  else
  { /* No counter roll over during reading of CNTL and CNTH registers, counter 
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16 ) | low);
 8003512:	8a7b      	ldrh	r3, [r7, #18]
 8003514:	041a      	lsls	r2, r3, #16
 8003516:	89fb      	ldrh	r3, [r7, #14]
 8003518:	4313      	orrs	r3, r2
 800351a:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800351c:	697b      	ldr	r3, [r7, #20]
}
 800351e:	4618      	mov	r0, r3
 8003520:	371c      	adds	r7, #28
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop

0800352c <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef* hrtc, uint32_t TimeCounter)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	73fb      	strb	r3, [r7, #15]
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f860 	bl	8003600 <RTC_EnterInitMode>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d002      	beq.n	800354c <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	73fb      	strb	r3, [r7, #15]
 800354a:	e011      	b.n	8003570 <RTC_WriteTimeCounter+0x44>
  } 
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	0c12      	lsrs	r2, r2, #16
 8003554:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	b292      	uxth	r2, r2
 800355e:	61da      	str	r2, [r3, #28]
    
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f875 	bl	8003650 <RTC_ExitInitMode>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <RTC_WriteTimeCounter+0x44>
    {       
      status = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003570:	7bfb      	ldrb	r3, [r7, #15]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop

0800357c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef* hrtc)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0, low = 0;
 8003584:	2300      	movs	r3, #0
 8003586:	81fb      	strh	r3, [r7, #14]
 8003588:	2300      	movs	r3, #0
 800358a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16 ) | low);
 800359c:	89fb      	ldrh	r3, [r7, #14]
 800359e:	041a      	lsls	r2, r3, #16
 80035a0:	89bb      	ldrh	r3, [r7, #12]
 80035a2:	4313      	orrs	r3, r2
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef* hrtc, uint32_t AlarmCounter)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035ba:	2300      	movs	r3, #0
 80035bc:	73fb      	strb	r3, [r7, #15]
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f81e 	bl	8003600 <RTC_EnterInitMode>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	73fb      	strb	r3, [r7, #15]
 80035ce:	e011      	b.n	80035f4 <RTC_WriteAlarmCounter+0x44>
  } 
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	0c12      	lsrs	r2, r2, #16
 80035d8:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	b292      	uxth	r2, r2
 80035e2:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f833 	bl	8003650 <RTC_ExitInitMode>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <RTC_WriteAlarmCounter+0x44>
    {       
      status = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop

08003600 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003608:	2300      	movs	r3, #0
 800360a:	60fb      	str	r3, [r7, #12]
  
  tickstart = HAL_GetTick();
 800360c:	f003 fef6 	bl	80073fc <HAL_GetTick>
 8003610:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003612:	e009      	b.n	8003628 <RTC_EnterInitMode+0x28>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003614:	f003 fef2 	bl	80073fc <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003622:	d901      	bls.n	8003628 <RTC_EnterInitMode+0x28>
    {       
      return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e00f      	b.n	8003648 <RTC_EnterInitMode+0x48>
{
  uint32_t tickstart = 0;
  
  tickstart = HAL_GetTick();
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f003 0320 	and.w	r3, r3, #32
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0ee      	beq.n	8003614 <RTC_EnterInitMode+0x14>
      return HAL_TIMEOUT;
    } 
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6812      	ldr	r2, [r2, #0]
 800363e:	6852      	ldr	r2, [r2, #4]
 8003640:	f042 0210 	orr.w	r2, r2, #16
 8003644:	605a      	str	r2, [r3, #4]
  
  
  return HAL_OK;  
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef* hrtc)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003658:	2300      	movs	r3, #0
 800365a:	60fb      	str	r3, [r7, #12]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	6852      	ldr	r2, [r2, #4]
 8003666:	f022 0210 	bic.w	r2, r2, #16
 800366a:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 800366c:	f003 fec6 	bl	80073fc <HAL_GetTick>
 8003670:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003672:	e009      	b.n	8003688 <RTC_ExitInitMode+0x38>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003674:	f003 fec2 	bl	80073fc <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003682:	d901      	bls.n	8003688 <RTC_ExitInitMode+0x38>
    {       
      return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e007      	b.n	8003698 <RTC_ExitInitMode+0x48>
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
  
  tickstart = HAL_GetTick();
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0ee      	beq.n	8003674 <RTC_ExitInitMode+0x24>
    {       
      return HAL_TIMEOUT;
    } 
  }
  
  return HAL_OK;  
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	4603      	mov	r3, r0
 80036a8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 80036aa:	2300      	movs	r3, #0
 80036ac:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80036ae:	79fb      	ldrb	r3, [r7, #7]
 80036b0:	091b      	lsrs	r3, r3, #4
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	461a      	mov	r2, r3
 80036b6:	4613      	mov	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80036c0:	79fb      	ldrb	r3, [r7, #7]
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	4413      	add	r3, r2
 80036ce:	b2db      	uxtb	r3, r3
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	460a      	mov	r2, r1
 80036e8:	70fa      	strb	r2, [r7, #3]
 80036ea:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0, weekday = 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	60bb      	str	r3, [r7, #8]
 80036f0:	2300      	movs	r3, #0
 80036f2:	60fb      	str	r3, [r7, #12]

  year = 2000 + nYear;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80036fa:	60bb      	str	r3, [r7, #8]
  
  if(nMonth < 3)
 80036fc:	78fb      	ldrb	r3, [r7, #3]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d830      	bhi.n	8003764 <RTC_WeekDayNum+0x88>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23 * nMonth)/9) + nDay + 4 + year + ((year-1)/4) - ((year-1)/100) + ((year-1)/400)) % 7;
 8003702:	78fa      	ldrb	r2, [r7, #3]
 8003704:	4613      	mov	r3, r2
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	4413      	add	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	4a30      	ldr	r2, [pc, #192]	; (80037d0 <RTC_WeekDayNum+0xf4>)
 8003710:	fb82 0203 	smull	r0, r2, r2, r3
 8003714:	1052      	asrs	r2, r2, #1
 8003716:	17db      	asrs	r3, r3, #31
 8003718:	1ad2      	subs	r2, r2, r3
 800371a:	78bb      	ldrb	r3, [r7, #2]
 800371c:	4413      	add	r3, r2
 800371e:	461a      	mov	r2, r3
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	441a      	add	r2, r3
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	3b01      	subs	r3, #1
 8003728:	089b      	lsrs	r3, r3, #2
 800372a:	441a      	add	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	1e59      	subs	r1, r3, #1
 8003730:	4b28      	ldr	r3, [pc, #160]	; (80037d4 <RTC_WeekDayNum+0xf8>)
 8003732:	fba3 0301 	umull	r0, r3, r3, r1
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	1ad2      	subs	r2, r2, r3
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	1e59      	subs	r1, r3, #1
 800373e:	4b25      	ldr	r3, [pc, #148]	; (80037d4 <RTC_WeekDayNum+0xf8>)
 8003740:	fba3 0301 	umull	r0, r3, r3, r1
 8003744:	09db      	lsrs	r3, r3, #7
 8003746:	4413      	add	r3, r2
 8003748:	1d1a      	adds	r2, r3, #4
 800374a:	4b23      	ldr	r3, [pc, #140]	; (80037d8 <RTC_WeekDayNum+0xfc>)
 800374c:	fba2 0103 	umull	r0, r1, r2, r3
 8003750:	1a53      	subs	r3, r2, r1
 8003752:	085b      	lsrs	r3, r3, #1
 8003754:	440b      	add	r3, r1
 8003756:	0899      	lsrs	r1, r3, #2
 8003758:	460b      	mov	r3, r1
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	1a5b      	subs	r3, r3, r1
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	e02c      	b.n	80037be <RTC_WeekDayNum+0xe2>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23 * nMonth)/9) + nDay + 4 + year + (year/4) - (year/100) + (year/400) - 2 ) % 7; 
 8003764:	78fa      	ldrb	r2, [r7, #3]
 8003766:	4613      	mov	r3, r2
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	4413      	add	r3, r2
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	1a9b      	subs	r3, r3, r2
 8003770:	4a17      	ldr	r2, [pc, #92]	; (80037d0 <RTC_WeekDayNum+0xf4>)
 8003772:	fb82 1203 	smull	r1, r2, r2, r3
 8003776:	1052      	asrs	r2, r2, #1
 8003778:	17db      	asrs	r3, r3, #31
 800377a:	1ad2      	subs	r2, r2, r3
 800377c:	78bb      	ldrb	r3, [r7, #2]
 800377e:	4413      	add	r3, r2
 8003780:	461a      	mov	r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	441a      	add	r2, r3
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	089b      	lsrs	r3, r3, #2
 800378a:	441a      	add	r2, r3
 800378c:	68b9      	ldr	r1, [r7, #8]
 800378e:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <RTC_WeekDayNum+0xf8>)
 8003790:	fba3 0301 	umull	r0, r3, r3, r1
 8003794:	095b      	lsrs	r3, r3, #5
 8003796:	1ad2      	subs	r2, r2, r3
 8003798:	68b9      	ldr	r1, [r7, #8]
 800379a:	4b0e      	ldr	r3, [pc, #56]	; (80037d4 <RTC_WeekDayNum+0xf8>)
 800379c:	fba3 0301 	umull	r0, r3, r3, r1
 80037a0:	09db      	lsrs	r3, r3, #7
 80037a2:	4413      	add	r3, r2
 80037a4:	1c9a      	adds	r2, r3, #2
 80037a6:	4b0c      	ldr	r3, [pc, #48]	; (80037d8 <RTC_WeekDayNum+0xfc>)
 80037a8:	fba2 0103 	umull	r0, r1, r2, r3
 80037ac:	1a53      	subs	r3, r2, r1
 80037ae:	085b      	lsrs	r3, r3, #1
 80037b0:	440b      	add	r3, r1
 80037b2:	0899      	lsrs	r1, r3, #2
 80037b4:	460b      	mov	r3, r1
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	1a5b      	subs	r3, r3, r1
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	b2db      	uxtb	r3, r3
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	38e38e39 	.word	0x38e38e39
 80037d4:	51eb851f 	.word	0x51eb851f
 80037d8:	24924925 	.word	0x24924925

080037dc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b090      	sub	sp, #64	; 0x40
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0, temp_reg = 0;
 80037e4:	2300      	movs	r3, #0
 80037e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037e8:	2300      	movs	r3, #0
 80037ea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 80b5 	beq.w	8003964 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80037fa:	4b6c      	ldr	r3, [pc, #432]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037fc:	4a6b      	ldr	r2, [pc, #428]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037fe:	69d2      	ldr	r2, [r2, #28]
 8003800:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003804:	61da      	str	r2, [r3, #28]
 8003806:	4b69      	ldr	r3, [pc, #420]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8003812:	4b67      	ldr	r3, [pc, #412]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003814:	4a66      	ldr	r2, [pc, #408]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003816:	6812      	ldr	r2, [r2, #0]
 8003818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800381c:	601a      	str	r2, [r3, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800381e:	f003 fded 	bl	80073fc <HAL_GetTick>
 8003822:	63f8      	str	r0, [r7, #60]	; 0x3c
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003824:	e008      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003826:	f003 fde9 	bl	80073fc <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b64      	cmp	r3, #100	; 0x64
 8003832:	d901      	bls.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x5c>
      {
        return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e0b4      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    SET_BIT(PWR->CR, PWR_CR_DBP);
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003838:	4b5d      	ldr	r3, [pc, #372]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f0      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x4a>
        return HAL_TIMEOUT;
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003844:	4b59      	ldr	r3, [pc, #356]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003846:	6a1a      	ldr	r2, [r3, #32]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	4053      	eors	r3, r2
 800384e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 8086 	beq.w	8003964 <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003858:	4b54      	ldr	r3, [pc, #336]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003860:	63bb      	str	r3, [r7, #56]	; 0x38
 8003862:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003866:	637b      	str	r3, [r7, #52]	; 0x34
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800386a:	fa93 f3a3 	rbit	r3, r3
 800386e:	633b      	str	r3, [r7, #48]	; 0x30
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003872:	fab3 f383 	clz	r3, r3
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	461a      	mov	r2, r3
 800387a:	4b4e      	ldr	r3, [pc, #312]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800387c:	4413      	add	r3, r2
 800387e:	2201      	movs	r2, #1
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003886:	62fb      	str	r3, [r7, #44]	; 0x2c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388a:	fa93 f3a3 	rbit	r3, r3
 800388e:	62bb      	str	r3, [r7, #40]	; 0x28
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003890:	6abb      	ldr	r3, [r7, #40]	; 0x28
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003892:	fab3 f383 	clz	r3, r3
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	461a      	mov	r2, r3
 800389a:	4b46      	ldr	r3, [pc, #280]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800389c:	4413      	add	r3, r2
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038a2:	4b42      	ldr	r3, [pc, #264]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038a6:	621a      	str	r2, [r3, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 80038a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d04f      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x176>
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 80038b2:	f003 fda3 	bl	80073fc <HAL_GetTick>
 80038b6:	63f8      	str	r0, [r7, #60]	; 0x3c
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b8:	e00a      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ba:	f003 fd9f 	bl	80073fc <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038c2:	1ad2      	subs	r2, r2, r3
 80038c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d901      	bls.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e068      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80038d0:	2302      	movs	r3, #2
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	fa93 f3a3 	rbit	r3, r3
 80038da:	623b      	str	r3, [r7, #32]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80038dc:	6a3b      	ldr	r3, [r7, #32]
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038de:	fab3 f383 	clz	r3, r3
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	095b      	lsrs	r3, r3, #5
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d102      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x11e>
 80038f4:	4b2d      	ldr	r3, [pc, #180]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	e016      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80038fa:	2302      	movs	r3, #2
 80038fc:	61fb      	str	r3, [r7, #28]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	fa93 f3a3 	rbit	r3, r3
 8003904:	61bb      	str	r3, [r7, #24]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	fab3 f383 	clz	r3, r3
 800390c:	b2db      	uxtb	r3, r3
 800390e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003912:	b2db      	uxtb	r3, r3
 8003914:	b2db      	uxtb	r3, r3
 8003916:	095b      	lsrs	r3, r3, #5
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d102      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800391e:	4b23      	ldr	r3, [pc, #140]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	e001      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003924:	4b21      	ldr	r3, [pc, #132]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	2202      	movs	r2, #2
 800392a:	617a      	str	r2, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	fa92 f2a2 	rbit	r2, r2
 8003932:	613a      	str	r2, [r7, #16]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	fab2 f282 	clz	r2, r2
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	f002 021f 	and.w	r2, r2, #31
 8003948:	40d3      	lsrs	r3, r2
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0b3      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xde>
          {
            return HAL_TIMEOUT;
          }      
        }  
      }
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003952:	4b16      	ldr	r3, [pc, #88]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003954:	4a15      	ldr	r2, [pc, #84]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003956:	6a12      	ldr	r2, [r2, #32]
 8003958:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6852      	ldr	r2, [r2, #4]
 8003960:	430a      	orrs	r2, r1
 8003962:	621a      	str	r2, [r3, #32]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d008      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003970:	4b0e      	ldr	r3, [pc, #56]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003972:	4a0e      	ldr	r2, [pc, #56]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003974:	6852      	ldr	r2, [r2, #4]
 8003976:	f422 4140 	bic.w	r1, r2, #49152	; 0xc000
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6892      	ldr	r2, [r2, #8]
 800397e:	430a      	orrs	r2, r1
 8003980:	605a      	str	r2, [r3, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0310 	and.w	r3, r3, #16
 800398a:	2b00      	cmp	r3, #0
 800398c:	d008      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800398e:	4b07      	ldr	r3, [pc, #28]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003990:	4a06      	ldr	r2, [pc, #24]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003992:	6852      	ldr	r2, [r2, #4]
 8003994:	f422 0180 	bic.w	r1, r2, #4194304	; 0x400000
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	68d2      	ldr	r2, [r2, #12]
 800399c:	430a      	orrs	r2, r1
 800399e:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3740      	adds	r7, #64	; 0x40
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40021000 	.word	0x40021000
 80039b0:	40007000 	.word	0x40007000
 80039b4:	42420400 	.word	0x42420400

080039b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S3 I2S3 peripheral clock (STM32F103xE, STM32F103xG, STM32F105xC & STM32F107xC)
  *            @arg RCC_PERIPHCLK_USB USB peripheral clock (STM32F102xx, STM32F103xx, STM32F105xC & STM32F107xC)
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80039b8:	b590      	push	{r4, r7, lr}
 80039ba:	b093      	sub	sp, #76	; 0x4c
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 || defined(STM32F105xC) || defined(STM32F107xC)
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 80039c0:	4b68      	ldr	r3, [pc, #416]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 80039c2:	f107 040c 	add.w	r4, r7, #12
 80039c6:	6818      	ldr	r0, [r3, #0]
 80039c8:	6859      	ldr	r1, [r3, #4]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 80039d0:	4a65      	ldr	r2, [pc, #404]	; (8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>)
 80039d2:	f107 0308 	add.w	r3, r7, #8
 80039d6:	8812      	ldrh	r2, [r2, #0]
 80039d8:	801a      	strh	r2, [r3, #0]
#endif
#endif
  uint32_t temp_reg = 0, frequency = 0;
 80039da:	2300      	movs	r3, #0
 80039dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039de:	2300      	movs	r3, #0
 80039e0:	647b      	str	r3, [r7, #68]	; 0x44
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t prediv1 = 0, pllclk = 0, pllmul = 0;
 80039e2:	2300      	movs	r3, #0
 80039e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80039e6:	2300      	movs	r3, #0
 80039e8:	643b      	str	r3, [r7, #64]	; 0x40
 80039ea:	2300      	movs	r3, #0
 80039ec:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	f000 8099 	beq.w	8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 80039f6:	2b10      	cmp	r3, #16
 80039f8:	d002      	beq.n	8003a00 <HAL_RCCEx_GetPeriphCLKFreq+0x48>
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d05e      	beq.n	8003abc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> POSITION_VAL(RCC_CFGR_ADCPRE_DIV4)) + 1) * 2);
      break;
    }
  default: 
    {
      break;
 80039fe:	e0ac      	b.n	8003b5a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8003a00:	4b5a      	ldr	r3, [pc, #360]	; (8003b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	63fb      	str	r3, [r7, #60]	; 0x3c
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8003a06:	4b59      	ldr	r3, [pc, #356]	; (8003b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d053      	beq.n	8003aba <HAL_RCCEx_GetPeriphCLKFreq+0x102>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8003a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a14:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a18:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8003a1c:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a20:	fa93 f3a3 	rbit	r3, r3
 8003a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a28:	fab3 f383 	clz	r3, r3
 8003a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a30:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003a34:	440b      	add	r3, r1
 8003a36:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8003a3a:	637b      	str	r3, [r7, #52]	; 0x34
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d023      	beq.n	8003a8e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8003a46:	4b49      	ldr	r3, [pc, #292]	; (8003b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8003a4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a52:	62bb      	str	r3, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a56:	fa93 f3a3 	rbit	r3, r3
 8003a5a:	627b      	str	r3, [r7, #36]	; 0x24
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	fab3 f383 	clz	r3, r3
 8003a62:	fa22 f303 	lsr.w	r3, r2, r3
 8003a66:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8003a70:	63bb      	str	r3, [r7, #56]	; 0x38
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> POSITION_VAL(RCC_CFGR_PLLMULL)])
          {
              pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00d      	beq.n	8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003a7c:	4a3c      	ldr	r2, [pc, #240]	; (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8003a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a86:	fb02 f303 	mul.w	r3, r2, r3
 8003a8a:	643b      	str	r3, [r7, #64]	; 0x40
 8003a8c:	e004      	b.n	8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a90:	4a38      	ldr	r2, [pc, #224]	; (8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8003a92:	fb02 f303 	mul.w	r3, r2, r3
 8003a96:	643b      	str	r3, [r7, #64]	; 0x40
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003a98:	4b34      	ldr	r3, [pc, #208]	; (8003b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8003aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aa6:	647b      	str	r3, [r7, #68]	; 0x44
 8003aa8:	e007      	b.n	8003aba <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
 8003aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aac:	005a      	lsls	r2, r3, #1
 8003aae:	4b32      	ldr	r3, [pc, #200]	; (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8003ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ab4:	085b      	lsrs	r3, r3, #1
 8003ab6:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
      }
      break;
 8003ab8:	e04f      	b.n	8003b5a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8003aba:	e04e      	b.n	8003b5a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
  case RCC_PERIPHCLK_RTC:  
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8003abc:	4b2b      	ldr	r3, [pc, #172]	; (8003b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	63fb      	str	r3, [r7, #60]	; 0x3c

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ac4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003acc:	d108      	bne.n	8003ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8003ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
      {
        frequency = LSE_VALUE;
 8003ad8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003adc:	647b      	str	r3, [r7, #68]	; 0x44
 8003ade:	e022      	b.n	8003b26 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aea:	d109      	bne.n	8003b00 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8003aec:	4b1f      	ldr	r3, [pc, #124]	; (8003b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      {
        frequency = LSI_VALUE;
 8003af8:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003afc:	647b      	str	r3, [r7, #68]	; 0x44
 8003afe:	e012      	b.n	8003b26 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b0a:	d109      	bne.n	8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8003b0c:	4b17      	ldr	r3, [pc, #92]	; (8003b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      {
        frequency = HSE_VALUE / 128;
 8003b18:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003b1c:	647b      	str	r3, [r7, #68]	; 0x44
 8003b1e:	e002      	b.n	8003b26 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
      /* Clock not enabled for RTC*/
      else
      {
        frequency = 0;
 8003b20:	2300      	movs	r3, #0
 8003b22:	647b      	str	r3, [r7, #68]	; 0x44
      }
      break;
 8003b24:	e019      	b.n	8003b5a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8003b26:	e018      	b.n	8003b5a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> POSITION_VAL(RCC_CFGR_ADCPRE_DIV4)) + 1) * 2);
 8003b28:	f001 fbe6 	bl	80052f8 <HAL_RCC_GetPCLK2Freq>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f403 4140 	and.w	r1, r3, #49152	; 0xc000
 8003b36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b3a:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	fa93 f3a3 	rbit	r3, r3
 8003b42:	61fb      	str	r3, [r7, #28]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	fab3 f383 	clz	r3, r3
 8003b4a:	fa21 f303 	lsr.w	r3, r1, r3
 8003b4e:	3301      	adds	r3, #1
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b56:	647b      	str	r3, [r7, #68]	; 0x44
      break;
 8003b58:	bf00      	nop
  default: 
    {
      break;
    }
  }
  return(frequency);
 8003b5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	374c      	adds	r7, #76	; 0x4c
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd90      	pop	{r4, r7, pc}
 8003b64:	08008d54 	.word	0x08008d54
 8003b68:	08008d64 	.word	0x08008d64
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	007a1200 	.word	0x007a1200
 8003b74:	003d0900 	.word	0x003d0900
 8003b78:	aaaaaaab 	.word	0xaaaaaaab

08003b7c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL is not disabled when USB OTG FS clock is enabled (specific to devices with USB FS)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b0f0      	sub	sp, #448	; 0x1c0
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	1d3b      	adds	r3, r7, #4
 8003b84:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0;
 8003b86:	2300      	movs	r3, #0
 8003b88:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b8c:	1d3b      	adds	r3, r7, #4
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f000 81e3 	beq.w	8003f62 <HAL_RCC_OscConfig+0x3e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003b9c:	4bb0      	ldr	r3, [pc, #704]	; (8003e60 <HAL_RCC_OscConfig+0x2e4>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f003 030c 	and.w	r3, r3, #12
 8003ba4:	2b04      	cmp	r3, #4
 8003ba6:	d00b      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x44>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ba8:	4bad      	ldr	r3, [pc, #692]	; (8003e60 <HAL_RCC_OscConfig+0x2e4>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 030c 	and.w	r3, r3, #12
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d15e      	bne.n	8003c72 <HAL_RCC_OscConfig+0xf6>
 8003bb4:	4baa      	ldr	r3, [pc, #680]	; (8003e60 <HAL_RCC_OscConfig+0x2e4>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d058      	beq.n	8003c72 <HAL_RCC_OscConfig+0xf6>
 8003bc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bc4:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8003bcc:	fa93 f3a3 	rbit	r3, r3
 8003bd0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003bd4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd8:	fab3 f383 	clz	r3, r3
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	f043 0320 	orr.w	r3, r3, #32
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d102      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x78>
 8003bee:	4b9c      	ldr	r3, [pc, #624]	; (8003e60 <HAL_RCC_OscConfig+0x2e4>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	e01b      	b.n	8003c2c <HAL_RCC_OscConfig+0xb0>
 8003bf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bf8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003c00:	fa93 f3a3 	rbit	r3, r3
 8003c04:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003c08:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003c0c:	fab3 f383 	clz	r3, r3
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	f043 0320 	orr.w	r3, r3, #32
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d102      	bne.n	8003c28 <HAL_RCC_OscConfig+0xac>
 8003c22:	4b8f      	ldr	r3, [pc, #572]	; (8003e60 <HAL_RCC_OscConfig+0x2e4>)
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	e001      	b.n	8003c2c <HAL_RCC_OscConfig+0xb0>
 8003c28:	4b8d      	ldr	r3, [pc, #564]	; (8003e60 <HAL_RCC_OscConfig+0x2e4>)
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c30:	f8c7 21a8 	str.w	r2, [r7, #424]	; 0x1a8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c34:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8003c38:	fa92 f2a2 	rbit	r2, r2
 8003c3c:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003c40:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003c44:	fab2 f282 	clz	r2, r2
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	f042 0220 	orr.w	r2, r2, #32
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	f002 021f 	and.w	r2, r2, #31
 8003c56:	40d3      	lsrs	r3, r2
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d007      	beq.n	8003c70 <HAL_RCC_OscConfig+0xf4>
 8003c60:	1d3b      	adds	r3, r7, #4
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d102      	bne.n	8003c70 <HAL_RCC_OscConfig+0xf4>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	f000 bf8b 	b.w	8004b86 <HAL_RCC_OscConfig+0x100a>
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c70:	e177      	b.n	8003f62 <HAL_RCC_OscConfig+0x3e6>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8003c72:	4b7b      	ldr	r3, [pc, #492]	; (8003e60 <HAL_RCC_OscConfig+0x2e4>)
 8003c74:	4a7a      	ldr	r2, [pc, #488]	; (8003e60 <HAL_RCC_OscConfig+0x2e4>)
 8003c76:	6812      	ldr	r2, [r2, #0]
 8003c78:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	4b78      	ldr	r3, [pc, #480]	; (8003e60 <HAL_RCC_OscConfig+0x2e4>)
 8003c80:	4a77      	ldr	r2, [pc, #476]	; (8003e60 <HAL_RCC_OscConfig+0x2e4>)
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c88:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c8a:	f003 fbb7 	bl	80073fc <HAL_GetTick>
 8003c8e:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c92:	e00c      	b.n	8003cae <HAL_RCC_OscConfig+0x132>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c94:	f003 fbb2 	bl	80073fc <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8003c9e:	1ad2      	subs	r2, r2, r3
 8003ca0:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d902      	bls.n	8003cae <HAL_RCC_OscConfig+0x132>
        {
          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	f000 bf6c 	b.w	8004b86 <HAL_RCC_OscConfig+0x100a>
 8003cae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cb2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003cba:	fa93 f3a3 	rbit	r3, r3
 8003cbe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003cc2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cc6:	fab3 f383 	clz	r3, r3
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	f043 0320 	orr.w	r3, r3, #32
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	095b      	lsrs	r3, r3, #5
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d102      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x166>
 8003cdc:	4b60      	ldr	r3, [pc, #384]	; (8003e60 <HAL_RCC_OscConfig+0x2e4>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	e01b      	b.n	8003d1a <HAL_RCC_OscConfig+0x19e>
 8003ce2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ce6:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cea:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8003cee:	fa93 f3a3 	rbit	r3, r3
 8003cf2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003cf6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003cfa:	fab3 f383 	clz	r3, r3
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	f043 0320 	orr.w	r3, r3, #32
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	095b      	lsrs	r3, r3, #5
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d102      	bne.n	8003d16 <HAL_RCC_OscConfig+0x19a>
 8003d10:	4b53      	ldr	r3, [pc, #332]	; (8003e60 <HAL_RCC_OscConfig+0x2e4>)
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	e001      	b.n	8003d1a <HAL_RCC_OscConfig+0x19e>
 8003d16:	4b52      	ldr	r3, [pc, #328]	; (8003e60 <HAL_RCC_OscConfig+0x2e4>)
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d1e:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d22:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8003d26:	fa92 f2a2 	rbit	r2, r2
 8003d2a:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003d2e:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8003d32:	fab2 f282 	clz	r2, r2
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	f042 0220 	orr.w	r2, r2, #32
 8003d3c:	b2d2      	uxtb	r2, r2
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	f002 021f 	and.w	r2, r2, #31
 8003d44:	40d3      	lsrs	r3, r2
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1a2      	bne.n	8003c94 <HAL_RCC_OscConfig+0x118>
          return HAL_TIMEOUT;
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d4e:	1d3b      	adds	r3, r7, #4
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d58:	d106      	bne.n	8003d68 <HAL_RCC_OscConfig+0x1ec>
 8003d5a:	4b41      	ldr	r3, [pc, #260]	; (8003e60 <HAL_RCC_OscConfig+0x2e4>)
 8003d5c:	4a40      	ldr	r2, [pc, #256]	; (8003e60 <HAL_RCC_OscConfig+0x2e4>)
 8003d5e:	6812      	ldr	r2, [r2, #0]
 8003d60:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	e030      	b.n	8003dca <HAL_RCC_OscConfig+0x24e>
 8003d68:	1d3b      	adds	r3, r7, #4
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10c      	bne.n	8003d8c <HAL_RCC_OscConfig+0x210>
 8003d72:	4b3b      	ldr	r3, [pc, #236]	; (8003e60 <HAL_RCC_OscConfig+0x2e4>)
 8003d74:	4a3a      	ldr	r2, [pc, #232]	; (8003e60 <HAL_RCC_OscConfig+0x2e4>)
 8003d76:	6812      	ldr	r2, [r2, #0]
 8003d78:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	4b38      	ldr	r3, [pc, #224]	; (8003e60 <HAL_RCC_OscConfig+0x2e4>)
 8003d80:	4a37      	ldr	r2, [pc, #220]	; (8003e60 <HAL_RCC_OscConfig+0x2e4>)
 8003d82:	6812      	ldr	r2, [r2, #0]
 8003d84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	e01e      	b.n	8003dca <HAL_RCC_OscConfig+0x24e>
 8003d8c:	1d3b      	adds	r3, r7, #4
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d96:	d10c      	bne.n	8003db2 <HAL_RCC_OscConfig+0x236>
 8003d98:	4b31      	ldr	r3, [pc, #196]	; (8003e60 <HAL_RCC_OscConfig+0x2e4>)
 8003d9a:	4a31      	ldr	r2, [pc, #196]	; (8003e60 <HAL_RCC_OscConfig+0x2e4>)
 8003d9c:	6812      	ldr	r2, [r2, #0]
 8003d9e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	4b2e      	ldr	r3, [pc, #184]	; (8003e60 <HAL_RCC_OscConfig+0x2e4>)
 8003da6:	4a2e      	ldr	r2, [pc, #184]	; (8003e60 <HAL_RCC_OscConfig+0x2e4>)
 8003da8:	6812      	ldr	r2, [r2, #0]
 8003daa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	e00b      	b.n	8003dca <HAL_RCC_OscConfig+0x24e>
 8003db2:	4b2b      	ldr	r3, [pc, #172]	; (8003e60 <HAL_RCC_OscConfig+0x2e4>)
 8003db4:	4a2a      	ldr	r2, [pc, #168]	; (8003e60 <HAL_RCC_OscConfig+0x2e4>)
 8003db6:	6812      	ldr	r2, [r2, #0]
 8003db8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	4b28      	ldr	r3, [pc, #160]	; (8003e60 <HAL_RCC_OscConfig+0x2e4>)
 8003dc0:	4a27      	ldr	r2, [pc, #156]	; (8003e60 <HAL_RCC_OscConfig+0x2e4>)
 8003dc2:	6812      	ldr	r2, [r2, #0]
 8003dc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003dc8:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dca:	1d3b      	adds	r3, r7, #4
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d064      	beq.n	8003e9e <HAL_RCC_OscConfig+0x322>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd4:	f003 fb12 	bl	80073fc <HAL_GetTick>
 8003dd8:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ddc:	e00c      	b.n	8003df8 <HAL_RCC_OscConfig+0x27c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dde:	f003 fb0d 	bl	80073fc <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8003de8:	1ad2      	subs	r2, r2, r3
 8003dea:	f241 3388 	movw	r3, #5000	; 0x1388
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d902      	bls.n	8003df8 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	f000 bec7 	b.w	8004b86 <HAL_RCC_OscConfig+0x100a>
 8003df8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dfc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e00:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003e04:	fa93 f3a3 	rbit	r3, r3
 8003e08:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003e0c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e10:	fab3 f383 	clz	r3, r3
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	f043 0320 	orr.w	r3, r3, #32
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	095b      	lsrs	r3, r3, #5
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d102      	bne.n	8003e2c <HAL_RCC_OscConfig+0x2b0>
 8003e26:	4b0e      	ldr	r3, [pc, #56]	; (8003e60 <HAL_RCC_OscConfig+0x2e4>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	e01d      	b.n	8003e68 <HAL_RCC_OscConfig+0x2ec>
 8003e2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e30:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e34:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003e38:	fa93 f3a3 	rbit	r3, r3
 8003e3c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003e40:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8003e44:	fab3 f383 	clz	r3, r3
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	f043 0320 	orr.w	r3, r3, #32
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	095b      	lsrs	r3, r3, #5
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d104      	bne.n	8003e64 <HAL_RCC_OscConfig+0x2e8>
 8003e5a:	4b01      	ldr	r3, [pc, #4]	; (8003e60 <HAL_RCC_OscConfig+0x2e4>)
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	e003      	b.n	8003e68 <HAL_RCC_OscConfig+0x2ec>
 8003e60:	40021000 	.word	0x40021000
 8003e64:	4bb1      	ldr	r3, [pc, #708]	; (800412c <HAL_RCC_OscConfig+0x5b0>)
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e6c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e70:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003e74:	fa92 f2a2 	rbit	r2, r2
 8003e78:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003e7c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003e80:	fab2 f282 	clz	r2, r2
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	f042 0220 	orr.w	r2, r2, #32
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	b2d2      	uxtb	r2, r2
 8003e8e:	f002 021f 	and.w	r2, r2, #31
 8003e92:	40d3      	lsrs	r3, r2
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0a0      	beq.n	8003dde <HAL_RCC_OscConfig+0x262>
 8003e9c:	e061      	b.n	8003f62 <HAL_RCC_OscConfig+0x3e6>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9e:	f003 faad 	bl	80073fc <HAL_GetTick>
 8003ea2:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ea6:	e00c      	b.n	8003ec2 <HAL_RCC_OscConfig+0x346>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ea8:	f003 faa8 	bl	80073fc <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8003eb2:	1ad2      	subs	r2, r2, r3
 8003eb4:	f241 3388 	movw	r3, #5000	; 0x1388
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d902      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x346>
          {
            return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	f000 be62 	b.w	8004b86 <HAL_RCC_OscConfig+0x100a>
 8003ec2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ec6:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eca:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003ece:	fa93 f3a3 	rbit	r3, r3
 8003ed2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003ed6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eda:	fab3 f383 	clz	r3, r3
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	f043 0320 	orr.w	r3, r3, #32
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	095b      	lsrs	r3, r3, #5
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d102      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x37a>
 8003ef0:	4b8e      	ldr	r3, [pc, #568]	; (800412c <HAL_RCC_OscConfig+0x5b0>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	e01b      	b.n	8003f2e <HAL_RCC_OscConfig+0x3b2>
 8003ef6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003efa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003f02:	fa93 f3a3 	rbit	r3, r3
 8003f06:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003f0a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003f0e:	fab3 f383 	clz	r3, r3
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	f043 0320 	orr.w	r3, r3, #32
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	095b      	lsrs	r3, r3, #5
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d102      	bne.n	8003f2a <HAL_RCC_OscConfig+0x3ae>
 8003f24:	4b81      	ldr	r3, [pc, #516]	; (800412c <HAL_RCC_OscConfig+0x5b0>)
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	e001      	b.n	8003f2e <HAL_RCC_OscConfig+0x3b2>
 8003f2a:	4b80      	ldr	r3, [pc, #512]	; (800412c <HAL_RCC_OscConfig+0x5b0>)
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f32:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f36:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8003f3a:	fa92 f2a2 	rbit	r2, r2
 8003f3e:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003f42:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8003f46:	fab2 f282 	clz	r2, r2
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	f042 0220 	orr.w	r2, r2, #32
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	f002 021f 	and.w	r2, r2, #31
 8003f58:	40d3      	lsrs	r3, r2
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1a2      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x32c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f62:	1d3b      	adds	r3, r7, #4
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 8185 	beq.w	800427c <HAL_RCC_OscConfig+0x700>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003f72:	4b6e      	ldr	r3, [pc, #440]	; (800412c <HAL_RCC_OscConfig+0x5b0>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f003 030c 	and.w	r3, r3, #12
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00b      	beq.n	8003f96 <HAL_RCC_OscConfig+0x41a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f7e:	4b6b      	ldr	r3, [pc, #428]	; (800412c <HAL_RCC_OscConfig+0x5b0>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f003 030c 	and.w	r3, r3, #12
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d174      	bne.n	8004074 <HAL_RCC_OscConfig+0x4f8>
 8003f8a:	4b68      	ldr	r3, [pc, #416]	; (800412c <HAL_RCC_OscConfig+0x5b0>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d16e      	bne.n	8004074 <HAL_RCC_OscConfig+0x4f8>
 8003f96:	2302      	movs	r3, #2
 8003f98:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003fa0:	fa93 f3a3 	rbit	r3, r3
 8003fa4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003fa8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fac:	fab3 f383 	clz	r3, r3
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	f043 0320 	orr.w	r3, r3, #32
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d102      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x44c>
 8003fc2:	4b5a      	ldr	r3, [pc, #360]	; (800412c <HAL_RCC_OscConfig+0x5b0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	e01a      	b.n	8003ffe <HAL_RCC_OscConfig+0x482>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fce:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003fd2:	fa93 f3a3 	rbit	r3, r3
 8003fd6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8003fda:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fde:	fab3 f383 	clz	r3, r3
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	f043 0320 	orr.w	r3, r3, #32
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	095b      	lsrs	r3, r3, #5
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d102      	bne.n	8003ffa <HAL_RCC_OscConfig+0x47e>
 8003ff4:	4b4d      	ldr	r3, [pc, #308]	; (800412c <HAL_RCC_OscConfig+0x5b0>)
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	e001      	b.n	8003ffe <HAL_RCC_OscConfig+0x482>
 8003ffa:	4b4c      	ldr	r3, [pc, #304]	; (800412c <HAL_RCC_OscConfig+0x5b0>)
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	2202      	movs	r2, #2
 8004000:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004004:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004008:	fa92 f2a2 	rbit	r2, r2
 800400c:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004010:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004014:	fab2 f282 	clz	r2, r2
 8004018:	b2d2      	uxtb	r2, r2
 800401a:	f042 0220 	orr.w	r2, r2, #32
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	f002 021f 	and.w	r2, r2, #31
 8004026:	40d3      	lsrs	r3, r2
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	d007      	beq.n	8004040 <HAL_RCC_OscConfig+0x4c4>
 8004030:	1d3b      	adds	r3, r7, #4
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d002      	beq.n	8004040 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	f000 bda3 	b.w	8004b86 <HAL_RCC_OscConfig+0x100a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004040:	4b3a      	ldr	r3, [pc, #232]	; (800412c <HAL_RCC_OscConfig+0x5b0>)
 8004042:	4a3a      	ldr	r2, [pc, #232]	; (800412c <HAL_RCC_OscConfig+0x5b0>)
 8004044:	6812      	ldr	r2, [r2, #0]
 8004046:	f022 01f8 	bic.w	r1, r2, #248	; 0xf8
 800404a:	1d3a      	adds	r2, r7, #4
 800404c:	6812      	ldr	r2, [r2, #0]
 800404e:	6950      	ldr	r0, [r2, #20]
 8004050:	22f8      	movs	r2, #248	; 0xf8
 8004052:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004056:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800405a:	fa92 f2a2 	rbit	r2, r2
 800405e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004062:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8004066:	fab2 f282 	clz	r2, r2
 800406a:	fa00 f202 	lsl.w	r2, r0, r2
 800406e:	430a      	orrs	r2, r1
 8004070:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004072:	e103      	b.n	800427c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004074:	1d3b      	adds	r3, r7, #4
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 808d 	beq.w	800419a <HAL_RCC_OscConfig+0x61e>
 8004080:	2301      	movs	r3, #1
 8004082:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004086:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800408a:	fa93 f3a3 	rbit	r3, r3
 800408e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004092:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004096:	fab3 f383 	clz	r3, r3
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80040a0:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80040a4:	2201      	movs	r2, #1
 80040a6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a8:	f003 f9a8 	bl	80073fc <HAL_GetTick>
 80040ac:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b0:	e00a      	b.n	80040c8 <HAL_RCC_OscConfig+0x54c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040b2:	f003 f9a3 	bl	80073fc <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b64      	cmp	r3, #100	; 0x64
 80040c0:	d902      	bls.n	80040c8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	f000 bd5f 	b.w	8004b86 <HAL_RCC_OscConfig+0x100a>
 80040c8:	2302      	movs	r3, #2
 80040ca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80040d2:	fa93 f3a3 	rbit	r3, r3
 80040d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80040da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040de:	fab3 f383 	clz	r3, r3
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	f043 0320 	orr.w	r3, r3, #32
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	095b      	lsrs	r3, r3, #5
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d102      	bne.n	80040fa <HAL_RCC_OscConfig+0x57e>
 80040f4:	4b0d      	ldr	r3, [pc, #52]	; (800412c <HAL_RCC_OscConfig+0x5b0>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	e01c      	b.n	8004134 <HAL_RCC_OscConfig+0x5b8>
 80040fa:	2302      	movs	r3, #2
 80040fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004100:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004104:	fa93 f3a3 	rbit	r3, r3
 8004108:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 800410c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004110:	fab3 f383 	clz	r3, r3
 8004114:	b2db      	uxtb	r3, r3
 8004116:	f043 0320 	orr.w	r3, r3, #32
 800411a:	b2db      	uxtb	r3, r3
 800411c:	b2db      	uxtb	r3, r3
 800411e:	095b      	lsrs	r3, r3, #5
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d104      	bne.n	8004130 <HAL_RCC_OscConfig+0x5b4>
 8004126:	4b01      	ldr	r3, [pc, #4]	; (800412c <HAL_RCC_OscConfig+0x5b0>)
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	e003      	b.n	8004134 <HAL_RCC_OscConfig+0x5b8>
 800412c:	40021000 	.word	0x40021000
 8004130:	4bbf      	ldr	r3, [pc, #764]	; (8004430 <HAL_RCC_OscConfig+0x8b4>)
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	2202      	movs	r2, #2
 8004136:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800413e:	fa92 f2a2 	rbit	r2, r2
 8004142:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004146:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800414a:	fab2 f282 	clz	r2, r2
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	f042 0220 	orr.w	r2, r2, #32
 8004154:	b2d2      	uxtb	r2, r2
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	f002 021f 	and.w	r2, r2, #31
 800415c:	40d3      	lsrs	r3, r2
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d0a5      	beq.n	80040b2 <HAL_RCC_OscConfig+0x536>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004166:	4bb2      	ldr	r3, [pc, #712]	; (8004430 <HAL_RCC_OscConfig+0x8b4>)
 8004168:	4ab1      	ldr	r2, [pc, #708]	; (8004430 <HAL_RCC_OscConfig+0x8b4>)
 800416a:	6812      	ldr	r2, [r2, #0]
 800416c:	f022 01f8 	bic.w	r1, r2, #248	; 0xf8
 8004170:	1d3a      	adds	r2, r7, #4
 8004172:	6812      	ldr	r2, [r2, #0]
 8004174:	6950      	ldr	r0, [r2, #20]
 8004176:	22f8      	movs	r2, #248	; 0xf8
 8004178:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004180:	fa92 f2a2 	rbit	r2, r2
 8004184:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004188:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800418c:	fab2 f282 	clz	r2, r2
 8004190:	fa00 f202 	lsl.w	r2, r0, r2
 8004194:	430a      	orrs	r2, r1
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	e070      	b.n	800427c <HAL_RCC_OscConfig+0x700>
 800419a:	2301      	movs	r3, #1
 800419c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80041a4:	fa93 f3a3 	rbit	r3, r3
 80041a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80041ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041b0:	fab3 f383 	clz	r3, r3
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80041ba:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c2:	f003 f91b 	bl	80073fc <HAL_GetTick>
 80041c6:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ca:	e00a      	b.n	80041e2 <HAL_RCC_OscConfig+0x666>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041cc:	f003 f916 	bl	80073fc <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b64      	cmp	r3, #100	; 0x64
 80041da:	d902      	bls.n	80041e2 <HAL_RCC_OscConfig+0x666>
          {
            return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	f000 bcd2 	b.w	8004b86 <HAL_RCC_OscConfig+0x100a>
 80041e2:	2302      	movs	r3, #2
 80041e4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80041ec:	fa93 f3a3 	rbit	r3, r3
 80041f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80041f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041f8:	fab3 f383 	clz	r3, r3
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	f043 0320 	orr.w	r3, r3, #32
 8004202:	b2db      	uxtb	r3, r3
 8004204:	b2db      	uxtb	r3, r3
 8004206:	095b      	lsrs	r3, r3, #5
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b01      	cmp	r3, #1
 800420c:	d102      	bne.n	8004214 <HAL_RCC_OscConfig+0x698>
 800420e:	4b88      	ldr	r3, [pc, #544]	; (8004430 <HAL_RCC_OscConfig+0x8b4>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	e01a      	b.n	800424a <HAL_RCC_OscConfig+0x6ce>
 8004214:	2302      	movs	r3, #2
 8004216:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800421e:	fa93 f3a3 	rbit	r3, r3
 8004222:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004226:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800422a:	fab3 f383 	clz	r3, r3
 800422e:	b2db      	uxtb	r3, r3
 8004230:	f043 0320 	orr.w	r3, r3, #32
 8004234:	b2db      	uxtb	r3, r3
 8004236:	b2db      	uxtb	r3, r3
 8004238:	095b      	lsrs	r3, r3, #5
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d102      	bne.n	8004246 <HAL_RCC_OscConfig+0x6ca>
 8004240:	4b7b      	ldr	r3, [pc, #492]	; (8004430 <HAL_RCC_OscConfig+0x8b4>)
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	e001      	b.n	800424a <HAL_RCC_OscConfig+0x6ce>
 8004246:	4b7a      	ldr	r3, [pc, #488]	; (8004430 <HAL_RCC_OscConfig+0x8b4>)
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	2202      	movs	r2, #2
 800424c:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004250:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8004254:	fa92 f2a2 	rbit	r2, r2
 8004258:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 800425c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004260:	fab2 f282 	clz	r2, r2
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	f042 0220 	orr.w	r2, r2, #32
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	b2d2      	uxtb	r2, r2
 800426e:	f002 021f 	and.w	r2, r2, #31
 8004272:	40d3      	lsrs	r3, r2
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1a7      	bne.n	80041cc <HAL_RCC_OscConfig+0x650>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800427c:	1d3b      	adds	r3, r7, #4
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 80f5 	beq.w	8004476 <HAL_RCC_OscConfig+0x8fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800428c:	1d3b      	adds	r3, r7, #4
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d073      	beq.n	800437e <HAL_RCC_OscConfig+0x802>
 8004296:	2301      	movs	r3, #1
 8004298:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80042a0:	fa93 f3a3 	rbit	r3, r3
 80042a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80042a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ac:	fab3 f383 	clz	r3, r3
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	461a      	mov	r2, r3
 80042b4:	4b5f      	ldr	r3, [pc, #380]	; (8004434 <HAL_RCC_OscConfig+0x8b8>)
 80042b6:	4413      	add	r3, r2
 80042b8:	2201      	movs	r2, #1
 80042ba:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042bc:	f003 f89e 	bl	80073fc <HAL_GetTick>
 80042c0:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042c4:	e00a      	b.n	80042dc <HAL_RCC_OscConfig+0x760>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042c6:	f003 f899 	bl	80073fc <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b64      	cmp	r3, #100	; 0x64
 80042d4:	d902      	bls.n	80042dc <HAL_RCC_OscConfig+0x760>
        {
          return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	f000 bc55 	b.w	8004b86 <HAL_RCC_OscConfig+0x100a>
 80042dc:	2302      	movs	r3, #2
 80042de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80042e6:	fa93 f3a3 	rbit	r3, r3
 80042ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80042ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042f2:	fab3 f383 	clz	r3, r3
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	095b      	lsrs	r3, r3, #5
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b01      	cmp	r3, #1
 8004306:	d102      	bne.n	800430e <HAL_RCC_OscConfig+0x792>
 8004308:	4b49      	ldr	r3, [pc, #292]	; (8004430 <HAL_RCC_OscConfig+0x8b4>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	e01a      	b.n	8004344 <HAL_RCC_OscConfig+0x7c8>
 800430e:	2302      	movs	r3, #2
 8004310:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004318:	fa93 f3a3 	rbit	r3, r3
 800431c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004320:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004324:	fab3 f383 	clz	r3, r3
 8004328:	b2db      	uxtb	r3, r3
 800432a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800432e:	b2db      	uxtb	r3, r3
 8004330:	b2db      	uxtb	r3, r3
 8004332:	095b      	lsrs	r3, r3, #5
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d102      	bne.n	8004340 <HAL_RCC_OscConfig+0x7c4>
 800433a:	4b3d      	ldr	r3, [pc, #244]	; (8004430 <HAL_RCC_OscConfig+0x8b4>)
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	e001      	b.n	8004344 <HAL_RCC_OscConfig+0x7c8>
 8004340:	4b3b      	ldr	r3, [pc, #236]	; (8004430 <HAL_RCC_OscConfig+0x8b4>)
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	2202      	movs	r2, #2
 8004346:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800434e:	fa92 f2a2 	rbit	r2, r2
 8004352:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004356:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800435a:	fab2 f282 	clz	r2, r2
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004364:	b2d2      	uxtb	r2, r2
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	f002 021f 	and.w	r2, r2, #31
 800436c:	40d3      	lsrs	r3, r2
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0a7      	beq.n	80042c6 <HAL_RCC_OscConfig+0x74a>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software temporization of 1ms 
          should be added.*/
      HAL_Delay(1);
 8004376:	2001      	movs	r0, #1
 8004378:	f003 f84c 	bl	8007414 <HAL_Delay>
 800437c:	e07b      	b.n	8004476 <HAL_RCC_OscConfig+0x8fa>
 800437e:	2301      	movs	r3, #1
 8004380:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004384:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004388:	fa93 f3a3 	rbit	r3, r3
 800438c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004390:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004394:	fab3 f383 	clz	r3, r3
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	461a      	mov	r2, r3
 800439c:	4b25      	ldr	r3, [pc, #148]	; (8004434 <HAL_RCC_OscConfig+0x8b8>)
 800439e:	4413      	add	r3, r2
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043a4:	f003 f82a 	bl	80073fc <HAL_GetTick>
 80043a8:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ac:	e009      	b.n	80043c2 <HAL_RCC_OscConfig+0x846>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ae:	f003 f825 	bl	80073fc <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b64      	cmp	r3, #100	; 0x64
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x846>
        {
          return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e3e1      	b.n	8004b86 <HAL_RCC_OscConfig+0x100a>
 80043c2:	2302      	movs	r3, #2
 80043c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80043cc:	fa93 f3a3 	rbit	r3, r3
 80043d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80043d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d8:	fab3 f383 	clz	r3, r3
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	095b      	lsrs	r3, r3, #5
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d102      	bne.n	80043f4 <HAL_RCC_OscConfig+0x878>
 80043ee:	4b10      	ldr	r3, [pc, #64]	; (8004430 <HAL_RCC_OscConfig+0x8b4>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	e023      	b.n	800443c <HAL_RCC_OscConfig+0x8c0>
 80043f4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80043f8:	2202      	movs	r2, #2
 80043fa:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	fa93 f2a3 	rbit	r2, r3
 8004406:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800440a:	601a      	str	r2, [r3, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 800440c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	fab3 f383 	clz	r3, r3
 8004416:	b2db      	uxtb	r3, r3
 8004418:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800441c:	b2db      	uxtb	r3, r3
 800441e:	b2db      	uxtb	r3, r3
 8004420:	095b      	lsrs	r3, r3, #5
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d107      	bne.n	8004438 <HAL_RCC_OscConfig+0x8bc>
 8004428:	4b01      	ldr	r3, [pc, #4]	; (8004430 <HAL_RCC_OscConfig+0x8b4>)
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	e006      	b.n	800443c <HAL_RCC_OscConfig+0x8c0>
 800442e:	bf00      	nop
 8004430:	40021000 	.word	0x40021000
 8004434:	42420480 	.word	0x42420480
 8004438:	4ba9      	ldr	r3, [pc, #676]	; (80046e0 <HAL_RCC_OscConfig+0xb64>)
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8004440:	2102      	movs	r1, #2
 8004442:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004444:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8004448:	6812      	ldr	r2, [r2, #0]
 800444a:	fa92 f1a2 	rbit	r1, r2
 800444e:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8004452:	6011      	str	r1, [r2, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004454:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8004458:	6812      	ldr	r2, [r2, #0]
 800445a:	fab2 f282 	clz	r2, r2
 800445e:	b2d2      	uxtb	r2, r2
 8004460:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	f002 021f 	and.w	r2, r2, #31
 800446c:	40d3      	lsrs	r3, r2
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b00      	cmp	r3, #0
 8004474:	d19b      	bne.n	80043ae <HAL_RCC_OscConfig+0x832>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004476:	1d3b      	adds	r3, r7, #4
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 81bb 	beq.w	80047fc <HAL_RCC_OscConfig+0xc80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004486:	4b96      	ldr	r3, [pc, #600]	; (80046e0 <HAL_RCC_OscConfig+0xb64>)
 8004488:	4a95      	ldr	r2, [pc, #596]	; (80046e0 <HAL_RCC_OscConfig+0xb64>)
 800448a:	69d2      	ldr	r2, [r2, #28]
 800448c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004490:	61da      	str	r2, [r3, #28]
 8004492:	4b93      	ldr	r3, [pc, #588]	; (80046e0 <HAL_RCC_OscConfig+0xb64>)
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800449a:	f107 0308 	add.w	r3, r7, #8
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	f107 0308 	add.w	r3, r7, #8
 80044a4:	681b      	ldr	r3, [r3, #0]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80044a6:	4b8f      	ldr	r3, [pc, #572]	; (80046e4 <HAL_RCC_OscConfig+0xb68>)
 80044a8:	4a8e      	ldr	r2, [pc, #568]	; (80046e4 <HAL_RCC_OscConfig+0xb68>)
 80044aa:	6812      	ldr	r2, [r2, #0]
 80044ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044b0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044b2:	f002 ffa3 	bl	80073fc <HAL_GetTick>
 80044b6:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044ba:	e009      	b.n	80044d0 <HAL_RCC_OscConfig+0x954>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044bc:	f002 ff9e 	bl	80073fc <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b64      	cmp	r3, #100	; 0x64
 80044ca:	d901      	bls.n	80044d0 <HAL_RCC_OscConfig+0x954>
      {
        return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e35a      	b.n	8004b86 <HAL_RCC_OscConfig+0x100a>
    SET_BIT(PWR->CR, PWR_CR_DBP);

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044d0:	4b84      	ldr	r3, [pc, #528]	; (80046e4 <HAL_RCC_OscConfig+0xb68>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0ef      	beq.n	80044bc <HAL_RCC_OscConfig+0x940>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80044dc:	4b80      	ldr	r3, [pc, #512]	; (80046e0 <HAL_RCC_OscConfig+0xb64>)
 80044de:	4a80      	ldr	r2, [pc, #512]	; (80046e0 <HAL_RCC_OscConfig+0xb64>)
 80044e0:	6a12      	ldr	r2, [r2, #32]
 80044e2:	f022 0201 	bic.w	r2, r2, #1
 80044e6:	621a      	str	r2, [r3, #32]
 80044e8:	4b7d      	ldr	r3, [pc, #500]	; (80046e0 <HAL_RCC_OscConfig+0xb64>)
 80044ea:	4a7d      	ldr	r2, [pc, #500]	; (80046e0 <HAL_RCC_OscConfig+0xb64>)
 80044ec:	6a12      	ldr	r2, [r2, #32]
 80044ee:	f022 0204 	bic.w	r2, r2, #4
 80044f2:	621a      	str	r2, [r3, #32]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044f4:	f002 ff82 	bl	80073fc <HAL_GetTick>
 80044f8:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
    
    /* Wait till LSE is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044fc:	e00b      	b.n	8004516 <HAL_RCC_OscConfig+0x99a>
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044fe:	f002 ff7d 	bl	80073fc <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8004508:	1ad2      	subs	r2, r2, r3
 800450a:	f241 3388 	movw	r3, #5000	; 0x1388
 800450e:	429a      	cmp	r2, r3
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x99a>
      {
        return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e337      	b.n	8004b86 <HAL_RCC_OscConfig+0x100a>
 8004516:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800451a:	2202      	movs	r2, #2
 800451c:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	fa93 f2a3 	rbit	r2, r3
 8004528:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800452c:	601a      	str	r2, [r3, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 800452e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004532:	681b      	ldr	r3, [r3, #0]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004534:	fab3 f383 	clz	r3, r3
 8004538:	b2db      	uxtb	r3, r3
 800453a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800453e:	b2db      	uxtb	r3, r3
 8004540:	b2db      	uxtb	r3, r3
 8004542:	095b      	lsrs	r3, r3, #5
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b01      	cmp	r3, #1
 8004548:	d102      	bne.n	8004550 <HAL_RCC_OscConfig+0x9d4>
 800454a:	4b65      	ldr	r3, [pc, #404]	; (80046e0 <HAL_RCC_OscConfig+0xb64>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	e01e      	b.n	800458e <HAL_RCC_OscConfig+0xa12>
 8004550:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004554:	2202      	movs	r2, #2
 8004556:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004558:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	fa93 f2a3 	rbit	r2, r3
 8004562:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004566:	601a      	str	r2, [r3, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004568:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	fab3 f383 	clz	r3, r3
 8004572:	b2db      	uxtb	r3, r3
 8004574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004578:	b2db      	uxtb	r3, r3
 800457a:	b2db      	uxtb	r3, r3
 800457c:	095b      	lsrs	r3, r3, #5
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d102      	bne.n	800458a <HAL_RCC_OscConfig+0xa0e>
 8004584:	4b56      	ldr	r3, [pc, #344]	; (80046e0 <HAL_RCC_OscConfig+0xb64>)
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	e001      	b.n	800458e <HAL_RCC_OscConfig+0xa12>
 800458a:	4b55      	ldr	r3, [pc, #340]	; (80046e0 <HAL_RCC_OscConfig+0xb64>)
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8004592:	2102      	movs	r1, #2
 8004594:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004596:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800459a:	6812      	ldr	r2, [r2, #0]
 800459c:	fa92 f1a2 	rbit	r1, r2
 80045a0:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80045a4:	6011      	str	r1, [r2, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80045a6:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80045aa:	6812      	ldr	r2, [r2, #0]
 80045ac:	fab2 f282 	clz	r2, r2
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	b2d2      	uxtb	r2, r2
 80045ba:	f002 021f 	and.w	r2, r2, #31
 80045be:	40d3      	lsrs	r3, r2
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d19a      	bne.n	80044fe <HAL_RCC_OscConfig+0x982>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045c8:	1d3b      	adds	r3, r7, #4
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d106      	bne.n	80045e0 <HAL_RCC_OscConfig+0xa64>
 80045d2:	4b43      	ldr	r3, [pc, #268]	; (80046e0 <HAL_RCC_OscConfig+0xb64>)
 80045d4:	4a42      	ldr	r2, [pc, #264]	; (80046e0 <HAL_RCC_OscConfig+0xb64>)
 80045d6:	6a12      	ldr	r2, [r2, #32]
 80045d8:	f042 0201 	orr.w	r2, r2, #1
 80045dc:	621a      	str	r2, [r3, #32]
 80045de:	e02f      	b.n	8004640 <HAL_RCC_OscConfig+0xac4>
 80045e0:	1d3b      	adds	r3, r7, #4
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10c      	bne.n	8004604 <HAL_RCC_OscConfig+0xa88>
 80045ea:	4b3d      	ldr	r3, [pc, #244]	; (80046e0 <HAL_RCC_OscConfig+0xb64>)
 80045ec:	4a3c      	ldr	r2, [pc, #240]	; (80046e0 <HAL_RCC_OscConfig+0xb64>)
 80045ee:	6a12      	ldr	r2, [r2, #32]
 80045f0:	f022 0201 	bic.w	r2, r2, #1
 80045f4:	621a      	str	r2, [r3, #32]
 80045f6:	4b3a      	ldr	r3, [pc, #232]	; (80046e0 <HAL_RCC_OscConfig+0xb64>)
 80045f8:	4a39      	ldr	r2, [pc, #228]	; (80046e0 <HAL_RCC_OscConfig+0xb64>)
 80045fa:	6a12      	ldr	r2, [r2, #32]
 80045fc:	f022 0204 	bic.w	r2, r2, #4
 8004600:	621a      	str	r2, [r3, #32]
 8004602:	e01d      	b.n	8004640 <HAL_RCC_OscConfig+0xac4>
 8004604:	1d3b      	adds	r3, r7, #4
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	2b05      	cmp	r3, #5
 800460c:	d10c      	bne.n	8004628 <HAL_RCC_OscConfig+0xaac>
 800460e:	4b34      	ldr	r3, [pc, #208]	; (80046e0 <HAL_RCC_OscConfig+0xb64>)
 8004610:	4a33      	ldr	r2, [pc, #204]	; (80046e0 <HAL_RCC_OscConfig+0xb64>)
 8004612:	6a12      	ldr	r2, [r2, #32]
 8004614:	f042 0204 	orr.w	r2, r2, #4
 8004618:	621a      	str	r2, [r3, #32]
 800461a:	4b31      	ldr	r3, [pc, #196]	; (80046e0 <HAL_RCC_OscConfig+0xb64>)
 800461c:	4a30      	ldr	r2, [pc, #192]	; (80046e0 <HAL_RCC_OscConfig+0xb64>)
 800461e:	6a12      	ldr	r2, [r2, #32]
 8004620:	f042 0201 	orr.w	r2, r2, #1
 8004624:	621a      	str	r2, [r3, #32]
 8004626:	e00b      	b.n	8004640 <HAL_RCC_OscConfig+0xac4>
 8004628:	4b2d      	ldr	r3, [pc, #180]	; (80046e0 <HAL_RCC_OscConfig+0xb64>)
 800462a:	4a2d      	ldr	r2, [pc, #180]	; (80046e0 <HAL_RCC_OscConfig+0xb64>)
 800462c:	6a12      	ldr	r2, [r2, #32]
 800462e:	f022 0201 	bic.w	r2, r2, #1
 8004632:	621a      	str	r2, [r3, #32]
 8004634:	4b2a      	ldr	r3, [pc, #168]	; (80046e0 <HAL_RCC_OscConfig+0xb64>)
 8004636:	4a2a      	ldr	r2, [pc, #168]	; (80046e0 <HAL_RCC_OscConfig+0xb64>)
 8004638:	6a12      	ldr	r2, [r2, #32]
 800463a:	f022 0204 	bic.w	r2, r2, #4
 800463e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004640:	1d3b      	adds	r3, r7, #4
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d06e      	beq.n	8004728 <HAL_RCC_OscConfig+0xbac>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800464a:	f002 fed7 	bl	80073fc <HAL_GetTick>
 800464e:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004652:	e00b      	b.n	800466c <HAL_RCC_OscConfig+0xaf0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004654:	f002 fed2 	bl	80073fc <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800465e:	1ad2      	subs	r2, r2, r3
 8004660:	f241 3388 	movw	r3, #5000	; 0x1388
 8004664:	429a      	cmp	r2, r3
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0xaf0>
        {
          return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e28c      	b.n	8004b86 <HAL_RCC_OscConfig+0x100a>
 800466c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004670:	2202      	movs	r2, #2
 8004672:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004674:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	fa93 f2a3 	rbit	r2, r3
 800467e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004682:	601a      	str	r2, [r3, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004684:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004688:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800468a:	fab3 f383 	clz	r3, r3
 800468e:	b2db      	uxtb	r3, r3
 8004690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004694:	b2db      	uxtb	r3, r3
 8004696:	b2db      	uxtb	r3, r3
 8004698:	095b      	lsrs	r3, r3, #5
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b01      	cmp	r3, #1
 800469e:	d102      	bne.n	80046a6 <HAL_RCC_OscConfig+0xb2a>
 80046a0:	4b0f      	ldr	r3, [pc, #60]	; (80046e0 <HAL_RCC_OscConfig+0xb64>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	e022      	b.n	80046ec <HAL_RCC_OscConfig+0xb70>
 80046a6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80046aa:	2202      	movs	r2, #2
 80046ac:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	fa93 f2a3 	rbit	r2, r3
 80046b8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80046bc:	601a      	str	r2, [r3, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80046be:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	fab3 f383 	clz	r3, r3
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	095b      	lsrs	r3, r3, #5
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d106      	bne.n	80046e8 <HAL_RCC_OscConfig+0xb6c>
 80046da:	4b01      	ldr	r3, [pc, #4]	; (80046e0 <HAL_RCC_OscConfig+0xb64>)
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	e005      	b.n	80046ec <HAL_RCC_OscConfig+0xb70>
 80046e0:	40021000 	.word	0x40021000
 80046e4:	40007000 	.word	0x40007000
 80046e8:	4bb3      	ldr	r3, [pc, #716]	; (80049b8 <HAL_RCC_OscConfig+0xe3c>)
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80046f0:	2102      	movs	r1, #2
 80046f2:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80046f8:	6812      	ldr	r2, [r2, #0]
 80046fa:	fa92 f1a2 	rbit	r1, r2
 80046fe:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004702:	6011      	str	r1, [r2, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004704:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004708:	6812      	ldr	r2, [r2, #0]
 800470a:	fab2 f282 	clz	r2, r2
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	f002 021f 	and.w	r2, r2, #31
 800471c:	40d3      	lsrs	r3, r2
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d096      	beq.n	8004654 <HAL_RCC_OscConfig+0xad8>
 8004726:	e069      	b.n	80047fc <HAL_RCC_OscConfig+0xc80>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004728:	f002 fe68 	bl	80073fc <HAL_GetTick>
 800472c:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004730:	e00b      	b.n	800474a <HAL_RCC_OscConfig+0xbce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004732:	f002 fe63 	bl	80073fc <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800473c:	1ad2      	subs	r2, r2, r3
 800473e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004742:	429a      	cmp	r2, r3
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0xbce>
        {
          return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e21d      	b.n	8004b86 <HAL_RCC_OscConfig+0x100a>
 800474a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800474e:	2202      	movs	r2, #2
 8004750:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004752:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	fa93 f2a3 	rbit	r2, r3
 800475c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004760:	601a      	str	r2, [r3, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004762:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004766:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004768:	fab3 f383 	clz	r3, r3
 800476c:	b2db      	uxtb	r3, r3
 800476e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004772:	b2db      	uxtb	r3, r3
 8004774:	b2db      	uxtb	r3, r3
 8004776:	095b      	lsrs	r3, r3, #5
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b01      	cmp	r3, #1
 800477c:	d102      	bne.n	8004784 <HAL_RCC_OscConfig+0xc08>
 800477e:	4b8e      	ldr	r3, [pc, #568]	; (80049b8 <HAL_RCC_OscConfig+0xe3c>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	e01e      	b.n	80047c2 <HAL_RCC_OscConfig+0xc46>
 8004784:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004788:	2202      	movs	r2, #2
 800478a:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	fa93 f2a3 	rbit	r2, r3
 8004796:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800479a:	601a      	str	r2, [r3, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 800479c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	fab3 f383 	clz	r3, r3
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	095b      	lsrs	r3, r3, #5
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d102      	bne.n	80047be <HAL_RCC_OscConfig+0xc42>
 80047b8:	4b7f      	ldr	r3, [pc, #508]	; (80049b8 <HAL_RCC_OscConfig+0xe3c>)
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	e001      	b.n	80047c2 <HAL_RCC_OscConfig+0xc46>
 80047be:	4b7e      	ldr	r3, [pc, #504]	; (80049b8 <HAL_RCC_OscConfig+0xe3c>)
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80047c6:	2102      	movs	r1, #2
 80047c8:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ca:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80047ce:	6812      	ldr	r2, [r2, #0]
 80047d0:	fa92 f1a2 	rbit	r1, r2
 80047d4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80047d8:	6011      	str	r1, [r2, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80047da:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80047de:	6812      	ldr	r2, [r2, #0]
 80047e0:	fab2 f282 	clz	r2, r2
 80047e4:	b2d2      	uxtb	r2, r2
 80047e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	b2d2      	uxtb	r2, r2
 80047ee:	f002 021f 	and.w	r2, r2, #31
 80047f2:	40d3      	lsrs	r3, r2
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d19a      	bne.n	8004732 <HAL_RCC_OscConfig+0xbb6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047fc:	1d3b      	adds	r3, r7, #4
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 81be 	beq.w	8004b84 <HAL_RCC_OscConfig+0x1008>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004808:	4b6b      	ldr	r3, [pc, #428]	; (80049b8 <HAL_RCC_OscConfig+0xe3c>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f003 030c 	and.w	r3, r3, #12
 8004810:	2b08      	cmp	r3, #8
 8004812:	f000 81b5 	beq.w	8004b80 <HAL_RCC_OscConfig+0x1004>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004816:	1d3b      	adds	r3, r7, #4
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	2b02      	cmp	r3, #2
 800481e:	f040 812a 	bne.w	8004a76 <HAL_RCC_OscConfig+0xefa>
 8004822:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004826:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800482a:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	fa93 f2a3 	rbit	r2, r3
 8004836:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800483a:	601a      	str	r2, [r3, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 800483c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004840:	681b      	ldr	r3, [r3, #0]
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004842:	fab3 f383 	clz	r3, r3
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800484c:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004854:	f002 fdd2 	bl	80073fc <HAL_GetTick>
 8004858:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800485c:	e009      	b.n	8004872 <HAL_RCC_OscConfig+0xcf6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800485e:	f002 fdcd 	bl	80073fc <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b64      	cmp	r3, #100	; 0x64
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0xcf6>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e189      	b.n	8004b86 <HAL_RCC_OscConfig+0x100a>
 8004872:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004876:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800487a:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	fa93 f2a3 	rbit	r2, r3
 8004886:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800488a:	601a      	str	r2, [r3, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 800488c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004890:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004892:	fab3 f383 	clz	r3, r3
 8004896:	b2db      	uxtb	r3, r3
 8004898:	f043 0320 	orr.w	r3, r3, #32
 800489c:	b2db      	uxtb	r3, r3
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	095b      	lsrs	r3, r3, #5
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d102      	bne.n	80048ae <HAL_RCC_OscConfig+0xd32>
 80048a8:	4b43      	ldr	r3, [pc, #268]	; (80049b8 <HAL_RCC_OscConfig+0xe3c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	e01f      	b.n	80048ee <HAL_RCC_OscConfig+0xd72>
 80048ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80048b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048b6:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	fa93 f2a3 	rbit	r2, r3
 80048c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80048c6:	601a      	str	r2, [r3, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80048c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	fab3 f383 	clz	r3, r3
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	f043 0320 	orr.w	r3, r3, #32
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	095b      	lsrs	r3, r3, #5
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d102      	bne.n	80048ea <HAL_RCC_OscConfig+0xd6e>
 80048e4:	4b34      	ldr	r3, [pc, #208]	; (80049b8 <HAL_RCC_OscConfig+0xe3c>)
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	e001      	b.n	80048ee <HAL_RCC_OscConfig+0xd72>
 80048ea:	4b33      	ldr	r3, [pc, #204]	; (80049b8 <HAL_RCC_OscConfig+0xe3c>)
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80048f2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80048f6:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80048fc:	6812      	ldr	r2, [r2, #0]
 80048fe:	fa92 f1a2 	rbit	r1, r2
 8004902:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004906:	6011      	str	r1, [r2, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004908:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800490c:	6812      	ldr	r2, [r2, #0]
 800490e:	fab2 f282 	clz	r2, r2
 8004912:	b2d2      	uxtb	r2, r2
 8004914:	f042 0220 	orr.w	r2, r2, #32
 8004918:	b2d2      	uxtb	r2, r2
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	f002 021f 	and.w	r2, r2, #31
 8004920:	40d3      	lsrs	r3, r2
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d199      	bne.n	800485e <HAL_RCC_OscConfig+0xce2>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800492a:	1d3b      	adds	r3, r7, #4
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004934:	d109      	bne.n	800494a <HAL_RCC_OscConfig+0xdce>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004936:	4b20      	ldr	r3, [pc, #128]	; (80049b8 <HAL_RCC_OscConfig+0xe3c>)
 8004938:	4a1f      	ldr	r2, [pc, #124]	; (80049b8 <HAL_RCC_OscConfig+0xe3c>)
 800493a:	6852      	ldr	r2, [r2, #4]
 800493c:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8004940:	1d3a      	adds	r2, r7, #4
 8004942:	6812      	ldr	r2, [r2, #0]
 8004944:	6892      	ldr	r2, [r2, #8]
 8004946:	430a      	orrs	r2, r1
 8004948:	605a      	str	r2, [r3, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800494a:	4b1b      	ldr	r3, [pc, #108]	; (80049b8 <HAL_RCC_OscConfig+0xe3c>)
 800494c:	4a1a      	ldr	r2, [pc, #104]	; (80049b8 <HAL_RCC_OscConfig+0xe3c>)
 800494e:	6852      	ldr	r2, [r2, #4]
 8004950:	f422 1174 	bic.w	r1, r2, #3997696	; 0x3d0000
 8004954:	1d3a      	adds	r2, r7, #4
 8004956:	6812      	ldr	r2, [r2, #0]
 8004958:	6a10      	ldr	r0, [r2, #32]
 800495a:	1d3a      	adds	r2, r7, #4
 800495c:	6812      	ldr	r2, [r2, #0]
 800495e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004960:	4302      	orrs	r2, r0
 8004962:	430a      	orrs	r2, r1
 8004964:	605a      	str	r2, [r3, #4]
 8004966:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800496a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800496e:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004970:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	fa93 f2a3 	rbit	r2, r3
 800497a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800497e:	601a      	str	r2, [r3, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004980:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004984:	681b      	ldr	r3, [r3, #0]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004986:	fab3 f383 	clz	r3, r3
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8004990:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8004994:	2201      	movs	r2, #1
 8004996:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004998:	f002 fd30 	bl	80073fc <HAL_GetTick>
 800499c:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049a0:	e00c      	b.n	80049bc <HAL_RCC_OscConfig+0xe40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049a2:	f002 fd2b 	bl	80073fc <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b64      	cmp	r3, #100	; 0x64
 80049b0:	d904      	bls.n	80049bc <HAL_RCC_OscConfig+0xe40>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e0e7      	b.n	8004b86 <HAL_RCC_OscConfig+0x100a>
 80049b6:	bf00      	nop
 80049b8:	40021000 	.word	0x40021000
 80049bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80049c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049c4:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	fa93 f2a3 	rbit	r2, r3
 80049d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80049d4:	601a      	str	r2, [r3, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80049d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80049da:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049dc:	fab3 f383 	clz	r3, r3
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	f043 0320 	orr.w	r3, r3, #32
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	095b      	lsrs	r3, r3, #5
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d102      	bne.n	80049f8 <HAL_RCC_OscConfig+0xe7c>
 80049f2:	4b67      	ldr	r3, [pc, #412]	; (8004b90 <HAL_RCC_OscConfig+0x1014>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	e01f      	b.n	8004a38 <HAL_RCC_OscConfig+0xebc>
 80049f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80049fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a00:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a02:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	fa93 f2a3 	rbit	r2, r3
 8004a0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004a10:	601a      	str	r2, [r3, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004a12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	fab3 f383 	clz	r3, r3
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	f043 0320 	orr.w	r3, r3, #32
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	095b      	lsrs	r3, r3, #5
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d102      	bne.n	8004a34 <HAL_RCC_OscConfig+0xeb8>
 8004a2e:	4b58      	ldr	r3, [pc, #352]	; (8004b90 <HAL_RCC_OscConfig+0x1014>)
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	e001      	b.n	8004a38 <HAL_RCC_OscConfig+0xebc>
 8004a34:	4b56      	ldr	r3, [pc, #344]	; (8004b90 <HAL_RCC_OscConfig+0x1014>)
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004a3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004a40:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a42:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004a46:	6812      	ldr	r2, [r2, #0]
 8004a48:	fa92 f1a2 	rbit	r1, r2
 8004a4c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004a50:	6011      	str	r1, [r2, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004a52:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004a56:	6812      	ldr	r2, [r2, #0]
 8004a58:	fab2 f282 	clz	r2, r2
 8004a5c:	b2d2      	uxtb	r2, r2
 8004a5e:	f042 0220 	orr.w	r2, r2, #32
 8004a62:	b2d2      	uxtb	r2, r2
 8004a64:	b2d2      	uxtb	r2, r2
 8004a66:	f002 021f 	and.w	r2, r2, #31
 8004a6a:	40d3      	lsrs	r3, r2
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d096      	beq.n	80049a2 <HAL_RCC_OscConfig+0xe26>
 8004a74:	e086      	b.n	8004b84 <HAL_RCC_OscConfig+0x1008>
 8004a76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a7a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a7e:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	fa93 f2a3 	rbit	r2, r3
 8004a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a8e:	601a      	str	r2, [r3, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a94:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a96:	fab3 f383 	clz	r3, r3
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8004aa0:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa8:	f002 fca8 	bl	80073fc <HAL_GetTick>
 8004aac:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ab0:	e009      	b.n	8004ac6 <HAL_RCC_OscConfig+0xf4a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab2:	f002 fca3 	bl	80073fc <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b64      	cmp	r3, #100	; 0x64
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0xf4a>
          {
            return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e05f      	b.n	8004b86 <HAL_RCC_OscConfig+0x100a>
 8004ac6:	f107 0320 	add.w	r3, r7, #32
 8004aca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ace:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad0:	f107 0320 	add.w	r3, r7, #32
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	fa93 f2a3 	rbit	r2, r3
 8004ada:	f107 031c 	add.w	r3, r7, #28
 8004ade:	601a      	str	r2, [r3, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004ae0:	f107 031c 	add.w	r3, r7, #28
 8004ae4:	681b      	ldr	r3, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ae6:	fab3 f383 	clz	r3, r3
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	f043 0320 	orr.w	r3, r3, #32
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	095b      	lsrs	r3, r3, #5
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d102      	bne.n	8004b02 <HAL_RCC_OscConfig+0xf86>
 8004afc:	4b24      	ldr	r3, [pc, #144]	; (8004b90 <HAL_RCC_OscConfig+0x1014>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	e01f      	b.n	8004b42 <HAL_RCC_OscConfig+0xfc6>
 8004b02:	f107 0318 	add.w	r3, r7, #24
 8004b06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b0a:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0c:	f107 0318 	add.w	r3, r7, #24
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	fa93 f2a3 	rbit	r2, r3
 8004b16:	f107 0314 	add.w	r3, r7, #20
 8004b1a:	601a      	str	r2, [r3, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004b1c:	f107 0314 	add.w	r3, r7, #20
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	fab3 f383 	clz	r3, r3
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	f043 0320 	orr.w	r3, r3, #32
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	095b      	lsrs	r3, r3, #5
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d102      	bne.n	8004b3e <HAL_RCC_OscConfig+0xfc2>
 8004b38:	4b15      	ldr	r3, [pc, #84]	; (8004b90 <HAL_RCC_OscConfig+0x1014>)
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	e001      	b.n	8004b42 <HAL_RCC_OscConfig+0xfc6>
 8004b3e:	4b14      	ldr	r3, [pc, #80]	; (8004b90 <HAL_RCC_OscConfig+0x1014>)
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	f107 0210 	add.w	r2, r7, #16
 8004b46:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004b4a:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b4c:	f107 0210 	add.w	r2, r7, #16
 8004b50:	6812      	ldr	r2, [r2, #0]
 8004b52:	fa92 f1a2 	rbit	r1, r2
 8004b56:	f107 020c 	add.w	r2, r7, #12
 8004b5a:	6011      	str	r1, [r2, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004b5c:	f107 020c 	add.w	r2, r7, #12
 8004b60:	6812      	ldr	r2, [r2, #0]
 8004b62:	fab2 f282 	clz	r2, r2
 8004b66:	b2d2      	uxtb	r2, r2
 8004b68:	f042 0220 	orr.w	r2, r2, #32
 8004b6c:	b2d2      	uxtb	r2, r2
 8004b6e:	b2d2      	uxtb	r2, r2
 8004b70:	f002 021f 	and.w	r2, r2, #31
 8004b74:	40d3      	lsrs	r3, r2
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d199      	bne.n	8004ab2 <HAL_RCC_OscConfig+0xf36>
 8004b7e:	e001      	b.n	8004b84 <HAL_RCC_OscConfig+0x1008>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e000      	b.n	8004b86 <HAL_RCC_OscConfig+0x100a>
    }
  }
  
  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	40021000 	.word	0x40021000

08004b94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b0a8      	sub	sp, #160	; 0xa0
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004ba4:	4baf      	ldr	r3, [pc, #700]	; (8004e64 <HAL_RCC_ClockConfig+0x2d0>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0207 	and.w	r2, r3, #7
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	f080 8163 	bcs.w	8004e7a <HAL_RCC_ClockConfig+0x2e6>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb4:	4bab      	ldr	r3, [pc, #684]	; (8004e64 <HAL_RCC_ClockConfig+0x2d0>)
 8004bb6:	4aab      	ldr	r2, [pc, #684]	; (8004e64 <HAL_RCC_ClockConfig+0x2d0>)
 8004bb8:	6812      	ldr	r2, [r2, #0]
 8004bba:	f022 0107 	bic.w	r1, r2, #7
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004bc4:	4ba7      	ldr	r3, [pc, #668]	; (8004e64 <HAL_RCC_ClockConfig+0x2d0>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0207 	and.w	r2, r3, #7
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d001      	beq.n	8004bd6 <HAL_RCC_ClockConfig+0x42>
    {
      return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e2c6      	b.n	8005164 <HAL_RCC_ClockConfig+0x5d0>
    }
    
#endif /* FLASH_ACR_LATENCY */
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d008      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x60>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004be2:	4ba1      	ldr	r3, [pc, #644]	; (8004e68 <HAL_RCC_ClockConfig+0x2d4>)
 8004be4:	4aa0      	ldr	r2, [pc, #640]	; (8004e68 <HAL_RCC_ClockConfig+0x2d4>)
 8004be6:	6852      	ldr	r2, [r2, #4]
 8004be8:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	6892      	ldr	r2, [r2, #8]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	605a      	str	r2, [r3, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 828e 	beq.w	800511e <HAL_RCC_ClockConfig+0x58a>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d152      	bne.n	8004cb0 <HAL_RCC_ClockConfig+0x11c>
 8004c0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c16:	fa93 f3a3 	rbit	r3, r3
 8004c1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004c1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c22:	fab3 f383 	clz	r3, r3
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	f043 0320 	orr.w	r3, r3, #32
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	095b      	lsrs	r3, r3, #5
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d102      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xaa>
 8004c38:	4b8b      	ldr	r3, [pc, #556]	; (8004e68 <HAL_RCC_ClockConfig+0x2d4>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	e01b      	b.n	8004c76 <HAL_RCC_ClockConfig+0xe2>
 8004c3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c4a:	fa93 f3a3 	rbit	r3, r3
 8004c4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004c52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c56:	fab3 f383 	clz	r3, r3
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	f043 0320 	orr.w	r3, r3, #32
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	095b      	lsrs	r3, r3, #5
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d102      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xde>
 8004c6c:	4b7e      	ldr	r3, [pc, #504]	; (8004e68 <HAL_RCC_ClockConfig+0x2d4>)
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	e001      	b.n	8004c76 <HAL_RCC_ClockConfig+0xe2>
 8004c72:	4b7d      	ldr	r3, [pc, #500]	; (8004e68 <HAL_RCC_ClockConfig+0x2d4>)
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c7a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c7e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004c82:	fa92 f2a2 	rbit	r2, r2
 8004c86:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004c8a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004c8e:	fab2 f282 	clz	r2, r2
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	f042 0220 	orr.w	r2, r2, #32
 8004c98:	b2d2      	uxtb	r2, r2
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	f002 021f 	and.w	r2, r2, #31
 8004ca0:	40d3      	lsrs	r3, r2
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f040 8091 	bne.w	8004dce <HAL_RCC_ClockConfig+0x23a>
        {
          return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e259      	b.n	8005164 <HAL_RCC_ClockConfig+0x5d0>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d147      	bne.n	8004d48 <HAL_RCC_ClockConfig+0x1b4>
 8004cb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004cc4:	fa93 f3a3 	rbit	r3, r3
 8004cc8:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004cca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ccc:	fab3 f383 	clz	r3, r3
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	f043 0320 	orr.w	r3, r3, #32
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	095b      	lsrs	r3, r3, #5
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d102      	bne.n	8004ce8 <HAL_RCC_ClockConfig+0x154>
 8004ce2:	4b61      	ldr	r3, [pc, #388]	; (8004e68 <HAL_RCC_ClockConfig+0x2d4>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	e017      	b.n	8004d18 <HAL_RCC_ClockConfig+0x184>
 8004ce8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cec:	67bb      	str	r3, [r7, #120]	; 0x78
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cf0:	fa93 f3a3 	rbit	r3, r3
 8004cf4:	677b      	str	r3, [r7, #116]	; 0x74
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004cf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cf8:	fab3 f383 	clz	r3, r3
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	f043 0320 	orr.w	r3, r3, #32
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	095b      	lsrs	r3, r3, #5
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d102      	bne.n	8004d14 <HAL_RCC_ClockConfig+0x180>
 8004d0e:	4b56      	ldr	r3, [pc, #344]	; (8004e68 <HAL_RCC_ClockConfig+0x2d4>)
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	e001      	b.n	8004d18 <HAL_RCC_ClockConfig+0x184>
 8004d14:	4b54      	ldr	r3, [pc, #336]	; (8004e68 <HAL_RCC_ClockConfig+0x2d4>)
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d1c:	673a      	str	r2, [r7, #112]	; 0x70
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004d20:	fa92 f2a2 	rbit	r2, r2
 8004d24:	66fa      	str	r2, [r7, #108]	; 0x6c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004d26:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d28:	fab2 f282 	clz	r2, r2
 8004d2c:	b2d2      	uxtb	r2, r2
 8004d2e:	f042 0220 	orr.w	r2, r2, #32
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	b2d2      	uxtb	r2, r2
 8004d36:	f002 021f 	and.w	r2, r2, #31
 8004d3a:	40d3      	lsrs	r3, r2
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d144      	bne.n	8004dce <HAL_RCC_ClockConfig+0x23a>
        {
          return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e20d      	b.n	8005164 <HAL_RCC_ClockConfig+0x5d0>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	66bb      	str	r3, [r7, #104]	; 0x68
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d4e:	fa93 f3a3 	rbit	r3, r3
 8004d52:	667b      	str	r3, [r7, #100]	; 0x64
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004d54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d56:	fab3 f383 	clz	r3, r3
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	f043 0320 	orr.w	r3, r3, #32
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	095b      	lsrs	r3, r3, #5
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d102      	bne.n	8004d72 <HAL_RCC_ClockConfig+0x1de>
 8004d6c:	4b3e      	ldr	r3, [pc, #248]	; (8004e68 <HAL_RCC_ClockConfig+0x2d4>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	e016      	b.n	8004da0 <HAL_RCC_ClockConfig+0x20c>
 8004d72:	2302      	movs	r3, #2
 8004d74:	663b      	str	r3, [r7, #96]	; 0x60
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d78:	fa93 f3a3 	rbit	r3, r3
 8004d7c:	65fb      	str	r3, [r7, #92]	; 0x5c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004d7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d80:	fab3 f383 	clz	r3, r3
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	f043 0320 	orr.w	r3, r3, #32
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	095b      	lsrs	r3, r3, #5
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d102      	bne.n	8004d9c <HAL_RCC_ClockConfig+0x208>
 8004d96:	4b34      	ldr	r3, [pc, #208]	; (8004e68 <HAL_RCC_ClockConfig+0x2d4>)
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	e001      	b.n	8004da0 <HAL_RCC_ClockConfig+0x20c>
 8004d9c:	4b32      	ldr	r3, [pc, #200]	; (8004e68 <HAL_RCC_ClockConfig+0x2d4>)
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	2202      	movs	r2, #2
 8004da2:	65ba      	str	r2, [r7, #88]	; 0x58
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004da6:	fa92 f2a2 	rbit	r2, r2
 8004daa:	657a      	str	r2, [r7, #84]	; 0x54
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004dac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004dae:	fab2 f282 	clz	r2, r2
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	f042 0220 	orr.w	r2, r2, #32
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	b2d2      	uxtb	r2, r2
 8004dbc:	f002 021f 	and.w	r2, r2, #31
 8004dc0:	40d3      	lsrs	r3, r2
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_RCC_ClockConfig+0x23a>
        {
          return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e1ca      	b.n	8005164 <HAL_RCC_ClockConfig+0x5d0>
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dce:	4b26      	ldr	r3, [pc, #152]	; (8004e68 <HAL_RCC_ClockConfig+0x2d4>)
 8004dd0:	4a25      	ldr	r2, [pc, #148]	; (8004e68 <HAL_RCC_ClockConfig+0x2d4>)
 8004dd2:	6852      	ldr	r2, [r2, #4]
 8004dd4:	f022 0103 	bic.w	r1, r2, #3
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6852      	ldr	r2, [r2, #4]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	605a      	str	r2, [r3, #4]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004de0:	f002 fb0c 	bl	80073fc <HAL_GetTick>
 8004de4:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d113      	bne.n	8004e18 <HAL_RCC_ClockConfig+0x284>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004df0:	e00b      	b.n	8004e0a <HAL_RCC_ClockConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004df2:	f002 fb03 	bl	80073fc <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004dfc:	1ad2      	subs	r2, r2, r3
 8004dfe:	f241 3388 	movw	r3, #5000	; 0x1388
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e1ac      	b.n	8005164 <HAL_RCC_ClockConfig+0x5d0>
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e0a:	4b17      	ldr	r3, [pc, #92]	; (8004e68 <HAL_RCC_ClockConfig+0x2d4>)
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f003 030c 	and.w	r3, r3, #12
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d1ed      	bne.n	8004df2 <HAL_RCC_ClockConfig+0x25e>
 8004e16:	e182      	b.n	800511e <HAL_RCC_ClockConfig+0x58a>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d113      	bne.n	8004e48 <HAL_RCC_ClockConfig+0x2b4>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e20:	e00b      	b.n	8004e3a <HAL_RCC_ClockConfig+0x2a6>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e22:	f002 faeb 	bl	80073fc <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e2c:	1ad2      	subs	r2, r2, r3
 8004e2e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e194      	b.n	8005164 <HAL_RCC_ClockConfig+0x5d0>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e3a:	4b0b      	ldr	r3, [pc, #44]	; (8004e68 <HAL_RCC_ClockConfig+0x2d4>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f003 030c 	and.w	r3, r3, #12
 8004e42:	2b08      	cmp	r3, #8
 8004e44:	d1ed      	bne.n	8004e22 <HAL_RCC_ClockConfig+0x28e>
 8004e46:	e16a      	b.n	800511e <HAL_RCC_ClockConfig+0x58a>
          }
        }
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e48:	e010      	b.n	8004e6c <HAL_RCC_ClockConfig+0x2d8>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e4a:	f002 fad7 	bl	80073fc <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e54:	1ad2      	subs	r2, r2, r3
 8004e56:	f241 3388 	movw	r3, #5000	; 0x1388
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d906      	bls.n	8004e6c <HAL_RCC_ClockConfig+0x2d8>
          {
            return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e180      	b.n	8005164 <HAL_RCC_ClockConfig+0x5d0>
 8004e62:	bf00      	nop
 8004e64:	40022000 	.word	0x40022000
 8004e68:	40021000 	.word	0x40021000
          }
        }
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e6c:	4b9f      	ldr	r3, [pc, #636]	; (80050ec <HAL_RCC_ClockConfig+0x558>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f003 030c 	and.w	r3, r3, #12
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1e8      	bne.n	8004e4a <HAL_RCC_ClockConfig+0x2b6>
 8004e78:	e151      	b.n	800511e <HAL_RCC_ClockConfig+0x58a>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d008      	beq.n	8004e98 <HAL_RCC_ClockConfig+0x304>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e86:	4b99      	ldr	r3, [pc, #612]	; (80050ec <HAL_RCC_ClockConfig+0x558>)
 8004e88:	4a98      	ldr	r2, [pc, #608]	; (80050ec <HAL_RCC_ClockConfig+0x558>)
 8004e8a:	6852      	ldr	r2, [r2, #4]
 8004e8c:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6892      	ldr	r2, [r2, #8]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	605a      	str	r2, [r3, #4]
    }
    
    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 812b 	beq.w	80050fc <HAL_RCC_ClockConfig+0x568>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d146      	bne.n	8004f3c <HAL_RCC_ClockConfig+0x3a8>
 8004eae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004eb2:	653b      	str	r3, [r7, #80]	; 0x50
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eb6:	fa93 f3a3 	rbit	r3, r3
 8004eba:	64fb      	str	r3, [r7, #76]	; 0x4c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ebe:	fab3 f383 	clz	r3, r3
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	f043 0320 	orr.w	r3, r3, #32
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	095b      	lsrs	r3, r3, #5
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d102      	bne.n	8004eda <HAL_RCC_ClockConfig+0x346>
 8004ed4:	4b85      	ldr	r3, [pc, #532]	; (80050ec <HAL_RCC_ClockConfig+0x558>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	e017      	b.n	8004f0a <HAL_RCC_ClockConfig+0x376>
 8004eda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ede:	64bb      	str	r3, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ee2:	fa93 f3a3 	rbit	r3, r3
 8004ee6:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eea:	fab3 f383 	clz	r3, r3
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	f043 0320 	orr.w	r3, r3, #32
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	095b      	lsrs	r3, r3, #5
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d102      	bne.n	8004f06 <HAL_RCC_ClockConfig+0x372>
 8004f00:	4b7a      	ldr	r3, [pc, #488]	; (80050ec <HAL_RCC_ClockConfig+0x558>)
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	e001      	b.n	8004f0a <HAL_RCC_ClockConfig+0x376>
 8004f06:	4b79      	ldr	r3, [pc, #484]	; (80050ec <HAL_RCC_ClockConfig+0x558>)
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f0e:	643a      	str	r2, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f12:	fa92 f2a2 	rbit	r2, r2
 8004f16:	63fa      	str	r2, [r7, #60]	; 0x3c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004f18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f1a:	fab2 f282 	clz	r2, r2
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	f042 0220 	orr.w	r2, r2, #32
 8004f24:	b2d2      	uxtb	r2, r2
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	f002 021f 	and.w	r2, r2, #31
 8004f2c:	40d3      	lsrs	r3, r2
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f040 808f 	bne.w	8005056 <HAL_RCC_ClockConfig+0x4c2>
        {
          return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e113      	b.n	8005164 <HAL_RCC_ClockConfig+0x5d0>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d145      	bne.n	8004fd0 <HAL_RCC_ClockConfig+0x43c>
 8004f44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f48:	63bb      	str	r3, [r7, #56]	; 0x38
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4c:	fa93 f3a3 	rbit	r3, r3
 8004f50:	637b      	str	r3, [r7, #52]	; 0x34
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f54:	fab3 f383 	clz	r3, r3
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	f043 0320 	orr.w	r3, r3, #32
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	095b      	lsrs	r3, r3, #5
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d102      	bne.n	8004f70 <HAL_RCC_ClockConfig+0x3dc>
 8004f6a:	4b60      	ldr	r3, [pc, #384]	; (80050ec <HAL_RCC_ClockConfig+0x558>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	e017      	b.n	8004fa0 <HAL_RCC_ClockConfig+0x40c>
 8004f70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f74:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f78:	fa93 f3a3 	rbit	r3, r3
 8004f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f80:	fab3 f383 	clz	r3, r3
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	f043 0320 	orr.w	r3, r3, #32
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	095b      	lsrs	r3, r3, #5
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d102      	bne.n	8004f9c <HAL_RCC_ClockConfig+0x408>
 8004f96:	4b55      	ldr	r3, [pc, #340]	; (80050ec <HAL_RCC_ClockConfig+0x558>)
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	e001      	b.n	8004fa0 <HAL_RCC_ClockConfig+0x40c>
 8004f9c:	4b53      	ldr	r3, [pc, #332]	; (80050ec <HAL_RCC_ClockConfig+0x558>)
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fa4:	62ba      	str	r2, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fa8:	fa92 f2a2 	rbit	r2, r2
 8004fac:	627a      	str	r2, [r7, #36]	; 0x24
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb0:	fab2 f282 	clz	r2, r2
 8004fb4:	b2d2      	uxtb	r2, r2
 8004fb6:	f042 0220 	orr.w	r2, r2, #32
 8004fba:	b2d2      	uxtb	r2, r2
 8004fbc:	b2d2      	uxtb	r2, r2
 8004fbe:	f002 021f 	and.w	r2, r2, #31
 8004fc2:	40d3      	lsrs	r3, r2
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d144      	bne.n	8005056 <HAL_RCC_ClockConfig+0x4c2>
        {
          return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e0c9      	b.n	8005164 <HAL_RCC_ClockConfig+0x5d0>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	fa93 f3a3 	rbit	r3, r3
 8004fda:	61fb      	str	r3, [r7, #28]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004fdc:	69fb      	ldr	r3, [r7, #28]
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fde:	fab3 f383 	clz	r3, r3
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	f043 0320 	orr.w	r3, r3, #32
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	095b      	lsrs	r3, r3, #5
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d102      	bne.n	8004ffa <HAL_RCC_ClockConfig+0x466>
 8004ff4:	4b3d      	ldr	r3, [pc, #244]	; (80050ec <HAL_RCC_ClockConfig+0x558>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	e016      	b.n	8005028 <HAL_RCC_ClockConfig+0x494>
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	61bb      	str	r3, [r7, #24]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	fa93 f3a3 	rbit	r3, r3
 8005004:	617b      	str	r3, [r7, #20]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	fab3 f383 	clz	r3, r3
 800500c:	b2db      	uxtb	r3, r3
 800500e:	f043 0320 	orr.w	r3, r3, #32
 8005012:	b2db      	uxtb	r3, r3
 8005014:	b2db      	uxtb	r3, r3
 8005016:	095b      	lsrs	r3, r3, #5
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d102      	bne.n	8005024 <HAL_RCC_ClockConfig+0x490>
 800501e:	4b33      	ldr	r3, [pc, #204]	; (80050ec <HAL_RCC_ClockConfig+0x558>)
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	e001      	b.n	8005028 <HAL_RCC_ClockConfig+0x494>
 8005024:	4b31      	ldr	r3, [pc, #196]	; (80050ec <HAL_RCC_ClockConfig+0x558>)
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	2202      	movs	r2, #2
 800502a:	613a      	str	r2, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	fa92 f2a2 	rbit	r2, r2
 8005032:	60fa      	str	r2, [r7, #12]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	fab2 f282 	clz	r2, r2
 800503a:	b2d2      	uxtb	r2, r2
 800503c:	f042 0220 	orr.w	r2, r2, #32
 8005040:	b2d2      	uxtb	r2, r2
 8005042:	b2d2      	uxtb	r2, r2
 8005044:	f002 021f 	and.w	r2, r2, #31
 8005048:	40d3      	lsrs	r3, r2
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_RCC_ClockConfig+0x4c2>
        {
          return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e086      	b.n	8005164 <HAL_RCC_ClockConfig+0x5d0>
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005056:	4b25      	ldr	r3, [pc, #148]	; (80050ec <HAL_RCC_ClockConfig+0x558>)
 8005058:	4a24      	ldr	r2, [pc, #144]	; (80050ec <HAL_RCC_ClockConfig+0x558>)
 800505a:	6852      	ldr	r2, [r2, #4]
 800505c:	f022 0103 	bic.w	r1, r2, #3
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6852      	ldr	r2, [r2, #4]
 8005064:	430a      	orrs	r2, r1
 8005066:	605a      	str	r2, [r3, #4]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005068:	f002 f9c8 	bl	80073fc <HAL_GetTick>
 800506c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d113      	bne.n	80050a0 <HAL_RCC_ClockConfig+0x50c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005078:	e00b      	b.n	8005092 <HAL_RCC_ClockConfig+0x4fe>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800507a:	f002 f9bf 	bl	80073fc <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005084:	1ad2      	subs	r2, r2, r3
 8005086:	f241 3388 	movw	r3, #5000	; 0x1388
 800508a:	429a      	cmp	r2, r3
 800508c:	d901      	bls.n	8005092 <HAL_RCC_ClockConfig+0x4fe>
          {
            return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e068      	b.n	8005164 <HAL_RCC_ClockConfig+0x5d0>
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005092:	4b16      	ldr	r3, [pc, #88]	; (80050ec <HAL_RCC_ClockConfig+0x558>)
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f003 030c 	and.w	r3, r3, #12
 800509a:	2b04      	cmp	r3, #4
 800509c:	d1ed      	bne.n	800507a <HAL_RCC_ClockConfig+0x4e6>
 800509e:	e02d      	b.n	80050fc <HAL_RCC_ClockConfig+0x568>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d113      	bne.n	80050d0 <HAL_RCC_ClockConfig+0x53c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050a8:	e00b      	b.n	80050c2 <HAL_RCC_ClockConfig+0x52e>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050aa:	f002 f9a7 	bl	80073fc <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050b4:	1ad2      	subs	r2, r2, r3
 80050b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_ClockConfig+0x52e>
          {
            return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e050      	b.n	8005164 <HAL_RCC_ClockConfig+0x5d0>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050c2:	4b0a      	ldr	r3, [pc, #40]	; (80050ec <HAL_RCC_ClockConfig+0x558>)
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f003 030c 	and.w	r3, r3, #12
 80050ca:	2b08      	cmp	r3, #8
 80050cc:	d1ed      	bne.n	80050aa <HAL_RCC_ClockConfig+0x516>
 80050ce:	e015      	b.n	80050fc <HAL_RCC_ClockConfig+0x568>
          }
        }
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80050d0:	e00e      	b.n	80050f0 <HAL_RCC_ClockConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050d2:	f002 f993 	bl	80073fc <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050dc:	1ad2      	subs	r2, r2, r3
 80050de:	f241 3388 	movw	r3, #5000	; 0x1388
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d904      	bls.n	80050f0 <HAL_RCC_ClockConfig+0x55c>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e03c      	b.n	8005164 <HAL_RCC_ClockConfig+0x5d0>
 80050ea:	bf00      	nop
 80050ec:	40021000 	.word	0x40021000
          }
        }
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80050f0:	4b1e      	ldr	r3, [pc, #120]	; (800516c <HAL_RCC_ClockConfig+0x5d8>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f003 030c 	and.w	r3, r3, #12
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1ea      	bne.n	80050d2 <HAL_RCC_ClockConfig+0x53e>
        }
      }      
    } 
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050fc:	4b1c      	ldr	r3, [pc, #112]	; (8005170 <HAL_RCC_ClockConfig+0x5dc>)
 80050fe:	4a1c      	ldr	r2, [pc, #112]	; (8005170 <HAL_RCC_ClockConfig+0x5dc>)
 8005100:	6812      	ldr	r2, [r2, #0]
 8005102:	f022 0107 	bic.w	r1, r2, #7
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	430a      	orrs	r2, r1
 800510a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800510c:	4b18      	ldr	r3, [pc, #96]	; (8005170 <HAL_RCC_ClockConfig+0x5dc>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0207 	and.w	r2, r3, #7
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	429a      	cmp	r2, r3
 8005118:	d001      	beq.n	800511e <HAL_RCC_ClockConfig+0x58a>
    {
      return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e022      	b.n	8005164 <HAL_RCC_ClockConfig+0x5d0>
    }
  }
#endif /* FLASH_ACR_LATENCY */
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0304 	and.w	r3, r3, #4
 8005126:	2b00      	cmp	r3, #0
 8005128:	d008      	beq.n	800513c <HAL_RCC_ClockConfig+0x5a8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800512a:	4b10      	ldr	r3, [pc, #64]	; (800516c <HAL_RCC_ClockConfig+0x5d8>)
 800512c:	4a0f      	ldr	r2, [pc, #60]	; (800516c <HAL_RCC_ClockConfig+0x5d8>)
 800512e:	6852      	ldr	r2, [r2, #4]
 8005130:	f422 61e0 	bic.w	r1, r2, #1792	; 0x700
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	68d2      	ldr	r2, [r2, #12]
 8005138:	430a      	orrs	r2, r1
 800513a:	605a      	str	r2, [r3, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0308 	and.w	r3, r3, #8
 8005144:	2b00      	cmp	r3, #0
 8005146:	d009      	beq.n	800515c <HAL_RCC_ClockConfig+0x5c8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005148:	4b08      	ldr	r3, [pc, #32]	; (800516c <HAL_RCC_ClockConfig+0x5d8>)
 800514a:	4a08      	ldr	r2, [pc, #32]	; (800516c <HAL_RCC_ClockConfig+0x5d8>)
 800514c:	6852      	ldr	r2, [r2, #4]
 800514e:	f422 5160 	bic.w	r1, r2, #14336	; 0x3800
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6912      	ldr	r2, [r2, #16]
 8005156:	00d2      	lsls	r2, r2, #3
 8005158:	430a      	orrs	r2, r1
 800515a:	605a      	str	r2, [r3, #4]
  }
 
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800515c:	2000      	movs	r0, #0
 800515e:	f002 f923 	bl	80073a8 <HAL_InitTick>
  
  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	37a0      	adds	r7, #160	; 0xa0
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	40021000 	.word	0x40021000
 8005170:	40022000 	.word	0x40022000

08005174 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005174:	b490      	push	{r4, r7}
 8005176:	b08e      	sub	sp, #56	; 0x38
 8005178:	af00      	add	r7, sp, #0
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 800517a:	4b36      	ldr	r3, [pc, #216]	; (8005254 <HAL_RCC_GetSysClockFreq+0xe0>)
 800517c:	1d3c      	adds	r4, r7, #4
 800517e:	6818      	ldr	r0, [r3, #0]
 8005180:	6859      	ldr	r1, [r3, #4]
 8005182:	689a      	ldr	r2, [r3, #8]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8005188:	4a33      	ldr	r2, [pc, #204]	; (8005258 <HAL_RCC_GetSysClockFreq+0xe4>)
 800518a:	463b      	mov	r3, r7
 800518c:	8812      	ldrh	r2, [r2, #0]
 800518e:	801a      	strh	r2, [r3, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 8005190:	2300      	movs	r3, #0
 8005192:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005194:	2300      	movs	r3, #0
 8005196:	62bb      	str	r3, [r7, #40]	; 0x28
 8005198:	2300      	movs	r3, #0
 800519a:	637b      	str	r3, [r7, #52]	; 0x34
 800519c:	2300      	movs	r3, #0
 800519e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0;
 80051a0:	2300      	movs	r3, #0
 80051a2:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 80051a4:	4b2d      	ldr	r3, [pc, #180]	; (800525c <HAL_RCC_GetSysClockFreq+0xe8>)
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80051aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ac:	f003 030c 	and.w	r3, r3, #12
 80051b0:	2b04      	cmp	r3, #4
 80051b2:	d002      	beq.n	80051ba <HAL_RCC_GetSysClockFreq+0x46>
 80051b4:	2b08      	cmp	r3, #8
 80051b6:	d003      	beq.n	80051c0 <HAL_RCC_GetSysClockFreq+0x4c>
 80051b8:	e043      	b.n	8005242 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80051ba:	4b29      	ldr	r3, [pc, #164]	; (8005260 <HAL_RCC_GetSysClockFreq+0xec>)
 80051bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80051be:	e043      	b.n	8005248 <HAL_RCC_GetSysClockFreq+0xd4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 80051c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80051c6:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80051ca:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	fa93 f3a3 	rbit	r3, r3
 80051d2:	61fb      	str	r3, [r7, #28]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	fab3 f383 	clz	r3, r3
 80051da:	fa22 f303 	lsr.w	r3, r2, r3
 80051de:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80051e2:	4413      	add	r3, r2
 80051e4:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80051e8:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80051ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d01e      	beq.n	8005232 <HAL_RCC_GetSysClockFreq+0xbe>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 80051f4:	4b19      	ldr	r3, [pc, #100]	; (800525c <HAL_RCC_GetSysClockFreq+0xe8>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 80051fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005200:	61bb      	str	r3, [r7, #24]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	fa93 f3a3 	rbit	r3, r3
 8005208:	617b      	str	r3, [r7, #20]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	fab3 f383 	clz	r3, r3
 8005210:	fa22 f303 	lsr.w	r3, r2, r3
 8005214:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005218:	4413      	add	r3, r2
 800521a:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 800521e:	62bb      	str	r3, [r7, #40]	; 0x28
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8005220:	4a0f      	ldr	r2, [pc, #60]	; (8005260 <HAL_RCC_GetSysClockFreq+0xec>)
 8005222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005224:	fbb2 f3f3 	udiv	r3, r2, r3
 8005228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800522a:	fb02 f303 	mul.w	r3, r2, r3
 800522e:	637b      	str	r3, [r7, #52]	; 0x34
 8005230:	e004      	b.n	800523c <HAL_RCC_GetSysClockFreq+0xc8>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	4a0b      	ldr	r2, [pc, #44]	; (8005264 <HAL_RCC_GetSysClockFreq+0xf0>)
 8005236:	fb02 f303 	mul.w	r3, r2, r3
 800523a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 800523c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800523e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005240:	e002      	b.n	8005248 <HAL_RCC_GetSysClockFreq+0xd4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005242:	4b07      	ldr	r3, [pc, #28]	; (8005260 <HAL_RCC_GetSysClockFreq+0xec>)
 8005244:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005246:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800524a:	4618      	mov	r0, r3
 800524c:	3738      	adds	r7, #56	; 0x38
 800524e:	46bd      	mov	sp, r7
 8005250:	bc90      	pop	{r4, r7}
 8005252:	4770      	bx	lr
 8005254:	08008d68 	.word	0x08008d68
 8005258:	08008d78 	.word	0x08008d78
 800525c:	40021000 	.word	0x40021000
 8005260:	007a1200 	.word	0x007a1200
 8005264:	003d0900 	.word	0x003d0900

08005268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800526e:	f7ff ff81 	bl	8005174 <HAL_RCC_GetSysClockFreq>
 8005272:	4602      	mov	r2, r0
 8005274:	4b0c      	ldr	r3, [pc, #48]	; (80052a8 <HAL_RCC_GetHCLKFreq+0x40>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 800527c:	23f0      	movs	r3, #240	; 0xf0
 800527e:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	fa93 f3a3 	rbit	r3, r3
 8005286:	603b      	str	r3, [r7, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	fab3 f383 	clz	r3, r3
 800528e:	fa21 f303 	lsr.w	r3, r1, r3
 8005292:	4906      	ldr	r1, [pc, #24]	; (80052ac <HAL_RCC_GetHCLKFreq+0x44>)
 8005294:	5ccb      	ldrb	r3, [r1, r3]
 8005296:	40da      	lsrs	r2, r3
 8005298:	4b05      	ldr	r3, [pc, #20]	; (80052b0 <HAL_RCC_GetHCLKFreq+0x48>)
 800529a:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 800529c:	4b04      	ldr	r3, [pc, #16]	; (80052b0 <HAL_RCC_GetHCLKFreq+0x48>)
 800529e:	681b      	ldr	r3, [r3, #0]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	40021000 	.word	0x40021000
 80052ac:	08008d7c 	.word	0x08008d7c
 80052b0:	20000000 	.word	0x20000000

080052b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80052ba:	f7ff ffd5 	bl	8005268 <HAL_RCC_GetHCLKFreq>
 80052be:	4602      	mov	r2, r0
 80052c0:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
 80052c8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80052cc:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	fa93 f3a3 	rbit	r3, r3
 80052d4:	603b      	str	r3, [r7, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	fab3 f383 	clz	r3, r3
 80052dc:	fa21 f303 	lsr.w	r3, r1, r3
 80052e0:	4904      	ldr	r1, [pc, #16]	; (80052f4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80052e2:	5ccb      	ldrb	r3, [r1, r3]
 80052e4:	fa22 f303 	lsr.w	r3, r2, r3
}    
 80052e8:	4618      	mov	r0, r3
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	40021000 	.word	0x40021000
 80052f4:	08008d7c 	.word	0x08008d7c

080052f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80052fe:	f7ff ffb3 	bl	8005268 <HAL_RCC_GetHCLKFreq>
 8005302:	4602      	mov	r2, r0
 8005304:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f403 5160 	and.w	r1, r3, #14336	; 0x3800
 800530c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005310:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	fa93 f3a3 	rbit	r3, r3
 8005318:	603b      	str	r3, [r7, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	fab3 f383 	clz	r3, r3
 8005320:	fa21 f303 	lsr.w	r3, r1, r3
 8005324:	4904      	ldr	r1, [pc, #16]	; (8005338 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005326:	5ccb      	ldrb	r3, [r1, r3]
 8005328:	fa22 f303 	lsr.w	r3, r2, r3
} 
 800532c:	4618      	mov	r0, r3
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	40021000 	.word	0x40021000
 8005338:	08008d7c 	.word	0x08008d7c

0800533c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005346:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	fa93 f3a3 	rbit	r3, r3
 800534e:	603b      	str	r3, [r7, #0]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8005350:	683b      	ldr	r3, [r7, #0]
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005352:	fab3 f383 	clz	r3, r3
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800535c:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 8005360:	2201      	movs	r2, #1
 8005362:	601a      	str	r2, [r3, #0]
}
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop

08005370 <HAL_I2C_Init>:
  * @param  hi2c : Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005370:	b590      	push	{r4, r7, lr}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0;
 8005378:	2300      	movs	r3, #0
 800537a:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0;
 800537c:	2300      	movs	r3, #0
 800537e:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e06a      	b.n	8005460 <HAL_I2C_Init+0xf0>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d106      	bne.n	80053a4 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f002 feb8 	bl	8008114 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	6812      	ldr	r2, [r2, #0]
 80053b4:	6812      	ldr	r2, [r2, #0]
 80053b6:	f022 0201 	bic.w	r2, r2, #1
 80053ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80053bc:	f7ff ff7a 	bl	80052b4 <HAL_RCC_GetPCLK1Freq>
 80053c0:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQ_RANGE(pclk1);
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	4b28      	ldr	r3, [pc, #160]	; (8005468 <HAL_I2C_Init+0xf8>)
 80053c6:	fba3 0302 	umull	r0, r3, r3, r2
 80053ca:	0c9b      	lsrs	r3, r3, #18
 80053cc:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6859      	ldr	r1, [r3, #4]
 80053de:	4b23      	ldr	r3, [pc, #140]	; (800546c <HAL_I2C_Init+0xfc>)
 80053e0:	4299      	cmp	r1, r3
 80053e2:	d802      	bhi.n	80053ea <HAL_I2C_Init+0x7a>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	3301      	adds	r3, #1
 80053e8:	e009      	b.n	80053fe <HAL_I2C_Init+0x8e>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80053f0:	fb01 f103 	mul.w	r1, r1, r3
 80053f4:	4b1e      	ldr	r3, [pc, #120]	; (8005470 <HAL_I2C_Init+0x100>)
 80053f6:	fba3 0301 	umull	r0, r3, r3, r1
 80053fa:	099b      	lsrs	r3, r3, #6
 80053fc:	3301      	adds	r3, #1
 80053fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_Configure_Speed(hi2c, pclk1);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681c      	ldr	r4, [r3, #0]
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	68b9      	ldr	r1, [r7, #8]
 8005408:	f000 fb7a 	bl	8005b00 <I2C_Configure_Speed>
 800540c:	4603      	mov	r3, r0
 800540e:	61e3      	str	r3, [r4, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	69d1      	ldr	r1, [r2, #28]
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6a12      	ldr	r2, [r2, #32]
 800541c:	430a      	orrs	r2, r1
 800541e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	6911      	ldr	r1, [r2, #16]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	68d2      	ldr	r2, [r2, #12]
 800542c:	430a      	orrs	r2, r1
 800542e:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6951      	ldr	r1, [r2, #20]
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6992      	ldr	r2, [r2, #24]
 800543c:	430a      	orrs	r2, r1
 800543e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	6812      	ldr	r2, [r2, #0]
 8005448:	6812      	ldr	r2, [r2, #0]
 800544a:	f042 0201 	orr.w	r2, r2, #1
 800544e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->State = HAL_I2C_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	bd90      	pop	{r4, r7, pc}
 8005468:	431bde83 	.word	0x431bde83
 800546c:	000186a0 	.word	0x000186a0
 8005470:	10624dd3 	.word	0x10624dd3

08005474 <HAL_I2C_Master_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	607a      	str	r2, [r7, #4]
 800547e:	460a      	mov	r2, r1
 8005480:	817a      	strh	r2, [r7, #10]
 8005482:	813b      	strh	r3, [r7, #8]
  if(hi2c->State == HAL_I2C_STATE_READY)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b01      	cmp	r3, #1
 800548e:	f040 809a 	bne.w	80055c6 <HAL_I2C_Master_Transmit+0x152>
  {
    if((pData == NULL) || (Size == 0))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <HAL_I2C_Master_Transmit+0x2a>
 8005498:	893b      	ldrh	r3, [r7, #8]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_I2C_Master_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e092      	b.n	80055c8 <HAL_I2C_Master_Transmit+0x154>
    }

    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG) != HAL_OK)
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	494a      	ldr	r1, [pc, #296]	; (80055d0 <HAL_I2C_Master_Transmit+0x15c>)
 80054a6:	2201      	movs	r2, #1
 80054a8:	f242 7310 	movw	r3, #10000	; 0x2710
 80054ac:	f000 fb76 	bl	8005b9c <I2C_WaitOnFlagUntilTimeout>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 80054b6:	2302      	movs	r3, #2
 80054b8:	e086      	b.n	80055c8 <HAL_I2C_Master_Transmit+0x154>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d101      	bne.n	80054c8 <HAL_I2C_Master_Transmit+0x54>
 80054c4:	2302      	movs	r3, #2
 80054c6:	e07f      	b.n	80055c8 <HAL_I2C_Master_Transmit+0x154>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	6812      	ldr	r2, [r2, #0]
 80054d8:	6812      	ldr	r2, [r2, #0]
 80054da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY_TX;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2212      	movs	r2, #18
 80054e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout) != HAL_OK)
 80054ee:	897b      	ldrh	r3, [r7, #10]
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	4619      	mov	r1, r3
 80054f4:	6a3a      	ldr	r2, [r7, #32]
 80054f6:	f000 f9ff 	bl	80058f8 <I2C_MasterRequestWrite>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00f      	beq.n	8005520 <HAL_I2C_Master_Transmit+0xac>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005504:	2b04      	cmp	r3, #4
 8005506:	d105      	bne.n	8005514 <HAL_I2C_Master_Transmit+0xa0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e059      	b.n	80055c8 <HAL_I2C_Master_Transmit+0x154>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e053      	b.n	80055c8 <HAL_I2C_Master_Transmit+0x154>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	697b      	ldr	r3, [r7, #20]

    while(Size > 0)
 8005532:	e028      	b.n	8005586 <HAL_I2C_Master_Transmit+0x112>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	4927      	ldr	r1, [pc, #156]	; (80055d4 <HAL_I2C_Master_Transmit+0x160>)
 8005538:	2200      	movs	r2, #0
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	f000 fb2e 	bl	8005b9c <I2C_WaitOnFlagUntilTimeout>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <HAL_I2C_Master_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e03e      	b.n	80055c8 <HAL_I2C_Master_Transmit+0x154>
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*pData++);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	1c59      	adds	r1, r3, #1
 8005552:	6079      	str	r1, [r7, #4]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	6113      	str	r3, [r2, #16]
      Size--;
 8005558:	893b      	ldrh	r3, [r7, #8]
 800555a:	3b01      	subs	r3, #1
 800555c:	813b      	strh	r3, [r7, #8]

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	f003 0304 	and.w	r3, r3, #4
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00c      	beq.n	8005586 <HAL_I2C_Master_Transmit+0x112>
 800556c:	893b      	ldrh	r3, [r7, #8]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d009      	beq.n	8005586 <HAL_I2C_Master_Transmit+0x112>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*pData++);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	1c59      	adds	r1, r3, #1
 800557a:	6079      	str	r1, [r7, #4]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	6113      	str	r3, [r2, #16]
        Size--;
 8005580:	893b      	ldrh	r3, [r7, #8]
 8005582:	3b01      	subs	r3, #1
 8005584:	813b      	strh	r3, [r7, #8]
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    while(Size > 0)
 8005586:	893b      	ldrh	r3, [r7, #8]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1d3      	bne.n	8005534 <HAL_I2C_Master_Transmit+0xc0>
        Size--;
      }
    }

    /* Wait until TXE flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout) != HAL_OK)
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	4912      	ldr	r1, [pc, #72]	; (80055d8 <HAL_I2C_Master_Transmit+0x164>)
 8005590:	2200      	movs	r2, #0
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	f000 fb02 	bl	8005b9c <I2C_WaitOnFlagUntilTimeout>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <HAL_I2C_Master_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e012      	b.n	80055c8 <HAL_I2C_Master_Transmit+0x154>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	6812      	ldr	r2, [r2, #0]
 80055aa:	6812      	ldr	r2, [r2, #0]
 80055ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	e000      	b.n	80055c8 <HAL_I2C_Master_Transmit+0x154>
  }
  else
  {
    return HAL_BUSY;
 80055c6:	2302      	movs	r3, #2
  }
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3718      	adds	r7, #24
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	00100002 	.word	0x00100002
 80055d4:	00010080 	.word	0x00010080
 80055d8:	00010004 	.word	0x00010004

080055dc <HAL_I2C_Master_Receive>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b088      	sub	sp, #32
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	607a      	str	r2, [r7, #4]
 80055e6:	460a      	mov	r2, r1
 80055e8:	817a      	strh	r2, [r7, #10]
 80055ea:	813b      	strh	r3, [r7, #8]
  if(hi2c->State == HAL_I2C_STATE_READY)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	f040 8177 	bne.w	80058e8 <HAL_I2C_Master_Receive+0x30c>
  {
    if((pData == NULL) || (Size == 0))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d002      	beq.n	8005606 <HAL_I2C_Master_Receive+0x2a>
 8005600:	893b      	ldrh	r3, [r7, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_I2C_Master_Receive+0x2e>
    {
      return  HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e16f      	b.n	80058ea <HAL_I2C_Master_Receive+0x30e>
    }

    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG) != HAL_OK)
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	4992      	ldr	r1, [pc, #584]	; (8005858 <HAL_I2C_Master_Receive+0x27c>)
 800560e:	2201      	movs	r2, #1
 8005610:	f242 7310 	movw	r3, #10000	; 0x2710
 8005614:	f000 fac2 	bl	8005b9c <I2C_WaitOnFlagUntilTimeout>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800561e:	2302      	movs	r3, #2
 8005620:	e163      	b.n	80058ea <HAL_I2C_Master_Receive+0x30e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005628:	2b01      	cmp	r3, #1
 800562a:	d101      	bne.n	8005630 <HAL_I2C_Master_Receive+0x54>
 800562c:	2302      	movs	r3, #2
 800562e:	e15c      	b.n	80058ea <HAL_I2C_Master_Receive+0x30e>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	6812      	ldr	r2, [r2, #0]
 8005640:	6812      	ldr	r2, [r2, #0]
 8005642:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005646:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY_RX;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2222      	movs	r2, #34	; 0x22
 800564c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	639a      	str	r2, [r3, #56]	; 0x38

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout) != HAL_OK)
 8005656:	897b      	ldrh	r3, [r7, #10]
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	4619      	mov	r1, r3
 800565c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800565e:	f000 f9ad 	bl	80059bc <I2C_MasterRequestRead>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00f      	beq.n	8005688 <HAL_I2C_Master_Receive+0xac>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566c:	2b04      	cmp	r3, #4
 800566e:	d105      	bne.n	800567c <HAL_I2C_Master_Receive+0xa0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e136      	b.n	80058ea <HAL_I2C_Master_Receive+0x30e>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e130      	b.n	80058ea <HAL_I2C_Master_Receive+0x30e>
      }
    }

    if(Size == 1)
 8005688:	893b      	ldrh	r3, [r7, #8]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d11b      	bne.n	80056c6 <HAL_I2C_Master_Receive+0xea>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	6812      	ldr	r2, [r2, #0]
 8005696:	6812      	ldr	r2, [r2, #0]
 8005698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800569c:	601a      	str	r2, [r3, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800569e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	61fb      	str	r3, [r7, #28]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	61fb      	str	r3, [r7, #28]
 80056b0:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	6812      	ldr	r2, [r2, #0]
 80056ba:	6812      	ldr	r2, [r2, #0]
 80056bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056c0:	601a      	str	r2, [r3, #0]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80056c2:	b662      	cpsie	i
 80056c4:	e030      	b.n	8005728 <HAL_I2C_Master_Receive+0x14c>
	  
      /* Re-enable IRQs */
      __enable_irq(); 
    }
    else if(Size == 2)
 80056c6:	893b      	ldrh	r3, [r7, #8]
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d11b      	bne.n	8005704 <HAL_I2C_Master_Receive+0x128>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	6812      	ldr	r2, [r2, #0]
 80056d4:	6812      	ldr	r2, [r2, #0]
 80056d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056da:	601a      	str	r2, [r3, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80056dc:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	61bb      	str	r3, [r7, #24]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	61bb      	str	r3, [r7, #24]
 80056ee:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	6812      	ldr	r2, [r2, #0]
 80056f8:	6812      	ldr	r2, [r2, #0]
 80056fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056fe:	601a      	str	r2, [r3, #0]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8005700:	b662      	cpsie	i
 8005702:	e011      	b.n	8005728 <HAL_I2C_Master_Receive+0x14c>
       __enable_irq(); 
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	6812      	ldr	r2, [r2, #0]
 800570c:	6812      	ldr	r2, [r2, #0]
 800570e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005712:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	617b      	str	r3, [r7, #20]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	617b      	str	r3, [r7, #20]
 8005724:	697b      	ldr	r3, [r7, #20]
    }

    while(Size > 0)
 8005726:	e0d1      	b.n	80058cc <HAL_I2C_Master_Receive+0x2f0>
 8005728:	e0d0      	b.n	80058cc <HAL_I2C_Master_Receive+0x2f0>
    {
      if(Size <= 3)
 800572a:	893b      	ldrh	r3, [r7, #8]
 800572c:	2b03      	cmp	r3, #3
 800572e:	f200 80a5 	bhi.w	800587c <HAL_I2C_Master_Receive+0x2a0>
      {
        /* One byte */
        if(Size == 1)
 8005732:	893b      	ldrh	r3, [r7, #8]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d116      	bne.n	8005766 <HAL_I2C_Master_Receive+0x18a>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	4948      	ldr	r1, [pc, #288]	; (800585c <HAL_I2C_Master_Receive+0x280>)
 800573c:	2200      	movs	r2, #0
 800573e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005740:	f000 fa2c 	bl	8005b9c <I2C_WaitOnFlagUntilTimeout>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <HAL_I2C_Master_Receive+0x172>
          {
            return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e0cd      	b.n	80058ea <HAL_I2C_Master_Receive+0x30e>
          }

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	607a      	str	r2, [r7, #4]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	6812      	ldr	r2, [r2, #0]
 8005758:	6912      	ldr	r2, [r2, #16]
 800575a:	b2d2      	uxtb	r2, r2
 800575c:	701a      	strb	r2, [r3, #0]
          Size--;
 800575e:	893b      	ldrh	r3, [r7, #8]
 8005760:	3b01      	subs	r3, #1
 8005762:	813b      	strh	r3, [r7, #8]
 8005764:	e0b2      	b.n	80058cc <HAL_I2C_Master_Receive+0x2f0>
        }
        /* Two bytes */
        else if(Size == 2)
 8005766:	893b      	ldrh	r3, [r7, #8]
 8005768:	2b02      	cmp	r3, #2
 800576a:	d12b      	bne.n	80057c4 <HAL_I2C_Master_Receive+0x1e8>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout) != HAL_OK)
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	493c      	ldr	r1, [pc, #240]	; (8005860 <HAL_I2C_Master_Receive+0x284>)
 8005770:	2200      	movs	r2, #0
 8005772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005774:	f000 fa12 	bl	8005b9c <I2C_WaitOnFlagUntilTimeout>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <HAL_I2C_Master_Receive+0x1a6>
          {
            return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e0b3      	b.n	80058ea <HAL_I2C_Master_Receive+0x30e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005782:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
           __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	6812      	ldr	r2, [r2, #0]
 800578c:	6812      	ldr	r2, [r2, #0]
 800578e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005792:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	1c5a      	adds	r2, r3, #1
 8005798:	607a      	str	r2, [r7, #4]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	6812      	ldr	r2, [r2, #0]
 800579e:	6912      	ldr	r2, [r2, #16]
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	701a      	strb	r2, [r3, #0]
          Size--;
 80057a4:	893b      	ldrh	r3, [r7, #8]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	813b      	strh	r3, [r7, #8]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80057aa:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	1c5a      	adds	r2, r3, #1
 80057b0:	607a      	str	r2, [r7, #4]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	6812      	ldr	r2, [r2, #0]
 80057b6:	6912      	ldr	r2, [r2, #16]
 80057b8:	b2d2      	uxtb	r2, r2
 80057ba:	701a      	strb	r2, [r3, #0]
          Size--;
 80057bc:	893b      	ldrh	r3, [r7, #8]
 80057be:	3b01      	subs	r3, #1
 80057c0:	813b      	strh	r3, [r7, #8]
 80057c2:	e083      	b.n	80058cc <HAL_I2C_Master_Receive+0x2f0>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout) != HAL_OK)
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	4926      	ldr	r1, [pc, #152]	; (8005860 <HAL_I2C_Master_Receive+0x284>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057cc:	f000 f9e6 	bl	8005b9c <I2C_WaitOnFlagUntilTimeout>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d001      	beq.n	80057da <HAL_I2C_Master_Receive+0x1fe>
          {
            return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e087      	b.n	80058ea <HAL_I2C_Master_Receive+0x30e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	6812      	ldr	r2, [r2, #0]
 80057e2:	6812      	ldr	r2, [r2, #0]
 80057e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057e8:	601a      	str	r2, [r3, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80057ea:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	1c5a      	adds	r2, r3, #1
 80057f0:	607a      	str	r2, [r7, #4]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	6812      	ldr	r2, [r2, #0]
 80057f6:	6912      	ldr	r2, [r2, #16]
 80057f8:	b2d2      	uxtb	r2, r2
 80057fa:	701a      	strb	r2, [r3, #0]
          Size--;
 80057fc:	893b      	ldrh	r3, [r7, #8]
 80057fe:	3b01      	subs	r3, #1
 8005800:	813b      	strh	r3, [r7, #8]

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout) != HAL_OK)
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	4916      	ldr	r1, [pc, #88]	; (8005860 <HAL_I2C_Master_Receive+0x284>)
 8005806:	2200      	movs	r2, #0
 8005808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580a:	f000 f9c7 	bl	8005b9c <I2C_WaitOnFlagUntilTimeout>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d001      	beq.n	8005818 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e068      	b.n	80058ea <HAL_I2C_Master_Receive+0x30e>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	6812      	ldr	r2, [r2, #0]
 8005820:	6812      	ldr	r2, [r2, #0]
 8005822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005826:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	1c5a      	adds	r2, r3, #1
 800582c:	607a      	str	r2, [r7, #4]
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	6812      	ldr	r2, [r2, #0]
 8005832:	6912      	ldr	r2, [r2, #16]
 8005834:	b2d2      	uxtb	r2, r2
 8005836:	701a      	strb	r2, [r3, #0]
          Size--;
 8005838:	893b      	ldrh	r3, [r7, #8]
 800583a:	3b01      	subs	r3, #1
 800583c:	813b      	strh	r3, [r7, #8]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800583e:	b662      	cpsie	i
	  
          /* Re-enable IRQs */
          __enable_irq(); 

          /* Wait until RXNE flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	4906      	ldr	r1, [pc, #24]	; (800585c <HAL_I2C_Master_Receive+0x280>)
 8005844:	2200      	movs	r2, #0
 8005846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005848:	f000 f9a8 	bl	8005b9c <I2C_WaitOnFlagUntilTimeout>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d008      	beq.n	8005864 <HAL_I2C_Master_Receive+0x288>
          {
            return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e049      	b.n	80058ea <HAL_I2C_Master_Receive+0x30e>
 8005856:	bf00      	nop
 8005858:	00100002 	.word	0x00100002
 800585c:	00010040 	.word	0x00010040
 8005860:	00010004 	.word	0x00010004
          }

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	607a      	str	r2, [r7, #4]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	6812      	ldr	r2, [r2, #0]
 800586e:	6912      	ldr	r2, [r2, #16]
 8005870:	b2d2      	uxtb	r2, r2
 8005872:	701a      	strb	r2, [r3, #0]
          Size--;
 8005874:	893b      	ldrh	r3, [r7, #8]
 8005876:	3b01      	subs	r3, #1
 8005878:	813b      	strh	r3, [r7, #8]
 800587a:	e027      	b.n	80058cc <HAL_I2C_Master_Receive+0x2f0>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	491d      	ldr	r1, [pc, #116]	; (80058f4 <HAL_I2C_Master_Receive+0x318>)
 8005880:	2200      	movs	r2, #0
 8005882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005884:	f000 f98a 	bl	8005b9c <I2C_WaitOnFlagUntilTimeout>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <HAL_I2C_Master_Receive+0x2b6>
        {
          return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e02b      	b.n	80058ea <HAL_I2C_Master_Receive+0x30e>
        }

        /* Read data from DR */
        (*pData++) = hi2c->Instance->DR;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	1c5a      	adds	r2, r3, #1
 8005896:	607a      	str	r2, [r7, #4]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	6812      	ldr	r2, [r2, #0]
 800589c:	6912      	ldr	r2, [r2, #16]
 800589e:	b2d2      	uxtb	r2, r2
 80058a0:	701a      	strb	r2, [r3, #0]
        Size--;
 80058a2:	893b      	ldrh	r3, [r7, #8]
 80058a4:	3b01      	subs	r3, #1
 80058a6:	813b      	strh	r3, [r7, #8]

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	f003 0304 	and.w	r3, r3, #4
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00a      	beq.n	80058cc <HAL_I2C_Master_Receive+0x2f0>
        {
          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	1c5a      	adds	r2, r3, #1
 80058ba:	607a      	str	r2, [r7, #4]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	6812      	ldr	r2, [r2, #0]
 80058c0:	6912      	ldr	r2, [r2, #16]
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	701a      	strb	r2, [r3, #0]
          Size--;
 80058c6:	893b      	ldrh	r3, [r7, #8]
 80058c8:	3b01      	subs	r3, #1
 80058ca:	813b      	strh	r3, [r7, #8]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
    }

    while(Size > 0)
 80058cc:	893b      	ldrh	r3, [r7, #8]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f47f af2b 	bne.w	800572a <HAL_I2C_Master_Receive+0x14e>
          Size--;
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80058e4:	2300      	movs	r3, #0
 80058e6:	e000      	b.n	80058ea <HAL_I2C_Master_Receive+0x30e>
  }
  else
  {
    return HAL_BUSY;
 80058e8:	2302      	movs	r3, #2
  }
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3720      	adds	r7, #32
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	00010040 	.word	0x00010040

080058f8 <I2C_MasterRequestWrite>:
  * @param  DevAddress: Target device address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	460b      	mov	r3, r1
 8005902:	607a      	str	r2, [r7, #4]
 8005904:	817b      	strh	r3, [r7, #10]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	6812      	ldr	r2, [r2, #0]
 800590e:	6812      	ldr	r2, [r2, #0]
 8005910:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005914:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800591c:	2200      	movs	r2, #0
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f000 f93c 	bl	8005b9c <I2C_WaitOnFlagUntilTimeout>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <I2C_MasterRequestWrite+0x36>
  {
    return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e03d      	b.n	80059aa <I2C_MasterRequestWrite+0xb2>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005936:	d107      	bne.n	8005948 <I2C_MasterRequestWrite+0x50>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	897a      	ldrh	r2, [r7, #10]
 800593e:	b2d2      	uxtb	r2, r2
 8005940:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005944:	611a      	str	r2, [r3, #16]
 8005946:	e01f      	b.n	8005988 <I2C_MasterRequestWrite+0x90>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	897a      	ldrh	r2, [r7, #10]
 800594e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005952:	11d2      	asrs	r2, r2, #7
 8005954:	b2d2      	uxtb	r2, r2
 8005956:	f062 020f 	orn	r2, r2, #15
 800595a:	b2d2      	uxtb	r2, r2
 800595c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout) != HAL_OK)
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	4914      	ldr	r1, [pc, #80]	; (80059b4 <I2C_MasterRequestWrite+0xbc>)
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	f000 f9a4 	bl	8005cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d007      	beq.n	800597e <I2C_MasterRequestWrite+0x86>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005972:	2b04      	cmp	r3, #4
 8005974:	d101      	bne.n	800597a <I2C_MasterRequestWrite+0x82>
      {
        return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e017      	b.n	80059aa <I2C_MasterRequestWrite+0xb2>
      }
      else
      {
        return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e015      	b.n	80059aa <I2C_MasterRequestWrite+0xb2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	897a      	ldrh	r2, [r7, #10]
 8005984:	b2d2      	uxtb	r2, r2
 8005986:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout) != HAL_OK)
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	490b      	ldr	r1, [pc, #44]	; (80059b8 <I2C_MasterRequestWrite+0xc0>)
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	f000 f98f 	bl	8005cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d007      	beq.n	80059a8 <I2C_MasterRequestWrite+0xb0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599c:	2b04      	cmp	r3, #4
 800599e:	d101      	bne.n	80059a4 <I2C_MasterRequestWrite+0xac>
    {
      return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e002      	b.n	80059aa <I2C_MasterRequestWrite+0xb2>
    }
    else
    {
      return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e000      	b.n	80059aa <I2C_MasterRequestWrite+0xb2>
    }
  }

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	00010008 	.word	0x00010008
 80059b8:	00010002 	.word	0x00010002

080059bc <I2C_MasterRequestRead>:
  * @param  DevAddress: Target device address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	460b      	mov	r3, r1
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	817b      	strh	r3, [r7, #10]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	6812      	ldr	r2, [r2, #0]
 80059d2:	6812      	ldr	r2, [r2, #0]
 80059d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	6812      	ldr	r2, [r2, #0]
 80059e2:	6812      	ldr	r2, [r2, #0]
 80059e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059f0:	2200      	movs	r2, #0
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f000 f8d2 	bl	8005b9c <I2C_WaitOnFlagUntilTimeout>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <I2C_MasterRequestRead+0x46>
  {
    return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e076      	b.n	8005af0 <I2C_MasterRequestRead+0x134>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a0a:	d108      	bne.n	8005a1e <I2C_MasterRequestRead+0x62>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	897a      	ldrh	r2, [r7, #10]
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	f042 0201 	orr.w	r2, r2, #1
 8005a18:	b2d2      	uxtb	r2, r2
 8005a1a:	611a      	str	r2, [r3, #16]
 8005a1c:	e057      	b.n	8005ace <I2C_MasterRequestRead+0x112>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	897a      	ldrh	r2, [r7, #10]
 8005a24:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005a28:	11d2      	asrs	r2, r2, #7
 8005a2a:	b2d2      	uxtb	r2, r2
 8005a2c:	f062 020f 	orn	r2, r2, #15
 8005a30:	b2d2      	uxtb	r2, r2
 8005a32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout) != HAL_OK)
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	4930      	ldr	r1, [pc, #192]	; (8005af8 <I2C_MasterRequestRead+0x13c>)
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	f000 f939 	bl	8005cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d007      	beq.n	8005a54 <I2C_MasterRequestRead+0x98>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a48:	2b04      	cmp	r3, #4
 8005a4a:	d101      	bne.n	8005a50 <I2C_MasterRequestRead+0x94>
      {
        return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e04f      	b.n	8005af0 <I2C_MasterRequestRead+0x134>
      }
      else
      {
        return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e04d      	b.n	8005af0 <I2C_MasterRequestRead+0x134>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	897a      	ldrh	r2, [r7, #10]
 8005a5a:	b2d2      	uxtb	r2, r2
 8005a5c:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout) != HAL_OK)
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	4926      	ldr	r1, [pc, #152]	; (8005afc <I2C_MasterRequestRead+0x140>)
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	f000 f924 	bl	8005cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d007      	beq.n	8005a7e <I2C_MasterRequestRead+0xc2>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	d101      	bne.n	8005a7a <I2C_MasterRequestRead+0xbe>
      {
        return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e03a      	b.n	8005af0 <I2C_MasterRequestRead+0x134>
      }
      else
      {
        return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e038      	b.n	8005af0 <I2C_MasterRequestRead+0x134>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	617b      	str	r3, [r7, #20]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	697b      	ldr	r3, [r7, #20]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	6812      	ldr	r2, [r2, #0]
 8005a98:	6812      	ldr	r2, [r2, #0]
 8005a9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a9e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f000 f877 	bl	8005b9c <I2C_WaitOnFlagUntilTimeout>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d001      	beq.n	8005ab8 <I2C_MasterRequestRead+0xfc>
    {
      return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e01b      	b.n	8005af0 <I2C_MasterRequestRead+0x134>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	897a      	ldrh	r2, [r7, #10]
 8005abe:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005ac2:	11d2      	asrs	r2, r2, #7
 8005ac4:	b2d2      	uxtb	r2, r2
 8005ac6:	f062 020e 	orn	r2, r2, #14
 8005aca:	b2d2      	uxtb	r2, r2
 8005acc:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout) != HAL_OK)
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	490a      	ldr	r1, [pc, #40]	; (8005afc <I2C_MasterRequestRead+0x140>)
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	f000 f8ec 	bl	8005cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d007      	beq.n	8005aee <I2C_MasterRequestRead+0x132>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae2:	2b04      	cmp	r3, #4
 8005ae4:	d101      	bne.n	8005aea <I2C_MasterRequestRead+0x12e>
    {
      return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e002      	b.n	8005af0 <I2C_MasterRequestRead+0x134>
    }
    else
    {
      return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e000      	b.n	8005af0 <I2C_MasterRequestRead+0x134>
    }
  }

  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3718      	adds	r7, #24
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	00010008 	.word	0x00010008
 8005afc:	00010002 	.word	0x00010002

08005b00 <I2C_Configure_Speed>:
  *                the configuration information for the specified I2C.
  * @param  I2CClkSrcFreq: PCLK frequency from RCC.
  * @retval CCR Speed: Speed to set in I2C CCR Register
  */
static uint32_t I2C_Configure_Speed(I2C_HandleTypeDef *hi2c, uint32_t I2CClkSrcFreq)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60fb      	str	r3, [r7, #12]
  
  /* Clock Standard Mode */
  if(hi2c->Init.ClockSpeed <= I2C_STANDARD_MODE_MAX_CLK)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	4b21      	ldr	r3, [pc, #132]	; (8005b98 <I2C_Configure_Speed+0x98>)
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d80f      	bhi.n	8005b38 <I2C_Configure_Speed+0x38>
  {
    /* Calculate Value to be set in CCR register */
    tmp1 = (I2CClkSrcFreq/(hi2c->Init.ClockSpeed << 1));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b24:	60fb      	str	r3, [r7, #12]
    
    /* The minimum allowed value set in CCR register is 0x04 for Standard Mode */
    if( (tmp1 & I2C_CCR_CCR) < 4 )
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b2c:	2b03      	cmp	r3, #3
 8005b2e:	d801      	bhi.n	8005b34 <I2C_Configure_Speed+0x34>
    {
      return 4;
 8005b30:	2304      	movs	r3, #4
 8005b32:	e02b      	b.n	8005b8c <I2C_Configure_Speed+0x8c>
    }
    else
    {
      return tmp1;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	e029      	b.n	8005b8c <I2C_Configure_Speed+0x8c>
    }
  }
  else
  {
    /* Clock Fast Mode */
    tmp1 = I2C_CCR_FS;
 8005b38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b3c:	60fb      	str	r3, [r7, #12]
    
    /* Duty Cylce tLow/tHigh = 2 */
    if(hi2c->Init.DutyCycle == I2C_DUTYCYCLE_2)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d10b      	bne.n	8005b5e <I2C_Configure_Speed+0x5e>
    {
      tmp1 |= (I2CClkSrcFreq/(hi2c->Init.ClockSpeed * 3)) | I2C_DUTYCYCLE_2; 
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	4413      	add	r3, r2
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	e00e      	b.n	8005b7c <I2C_Configure_Speed+0x7c>
    }
    else /* Duty Cylce tLow/tHigh = 16/9 */
    {
      tmp1 |= (I2CClkSrcFreq/(hi2c->Init.ClockSpeed * 25)) | I2C_DUTYCYCLE_16_9;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	4613      	mov	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	009a      	lsls	r2, r3, #2
 8005b6a:	4413      	add	r3, r2
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b7a:	60fb      	str	r3, [r7, #12]
    }

    /* The minimum allowed value set in CCR register is 0x01 for Fast Mode */
    if( (tmp1 & I2C_CCR_CCR) < 1 )
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <I2C_Configure_Speed+0x8a>
    {
      return 1;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e000      	b.n	8005b8c <I2C_Configure_Speed+0x8c>
    }
    else
    {
      return tmp1;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
    }
  }
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr
 8005b98:	000186a0 	.word	0x000186a0

08005b9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	603b      	str	r3, [r7, #0]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = 0;
 8005bac:	2300      	movs	r3, #0
 8005bae:	617b      	str	r3, [r7, #20]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005bb0:	f001 fc24 	bl	80073fc <HAL_GetTick>
 8005bb4:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 8005bb6:	79fb      	ldrb	r3, [r7, #7]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d13a      	bne.n	8005c32 <I2C_WaitOnFlagUntilTimeout+0x96>
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005bbc:	e018      	b.n	8005bf0 <I2C_WaitOnFlagUntilTimeout+0x54>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc4:	d014      	beq.n	8005bf0 <I2C_WaitOnFlagUntilTimeout+0x54>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d007      	beq.n	8005bdc <I2C_WaitOnFlagUntilTimeout+0x40>
 8005bcc:	f001 fc16 	bl	80073fc <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	1ad2      	subs	r2, r2, r3
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d909      	bls.n	8005bf0 <I2C_WaitOnFlagUntilTimeout+0x54>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e05b      	b.n	8005ca8 <I2C_WaitOnFlagUntilTimeout+0x10c>
  tickstart = HAL_GetTick();

  /* Wait until flag is set */
  if(Status == RESET)
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	0c1b      	lsrs	r3, r3, #16
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d10c      	bne.n	8005c14 <I2C_WaitOnFlagUntilTimeout+0x78>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	43da      	mvns	r2, r3
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	4013      	ands	r3, r2
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	bf0c      	ite	eq
 8005c0c:	2300      	moveq	r3, #0
 8005c0e:	2301      	movne	r3, #1
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	e00b      	b.n	8005c2c <I2C_WaitOnFlagUntilTimeout+0x90>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	43da      	mvns	r2, r3
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	4013      	ands	r3, r2
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	bf0c      	ite	eq
 8005c26:	2300      	moveq	r3, #0
 8005c28:	2301      	movne	r3, #1
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1c6      	bne.n	8005bbe <I2C_WaitOnFlagUntilTimeout+0x22>
 8005c30:	e039      	b.n	8005ca6 <I2C_WaitOnFlagUntilTimeout+0x10a>
      }
    }
  }
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8005c32:	e018      	b.n	8005c66 <I2C_WaitOnFlagUntilTimeout+0xca>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3a:	d014      	beq.n	8005c66 <I2C_WaitOnFlagUntilTimeout+0xca>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d007      	beq.n	8005c52 <I2C_WaitOnFlagUntilTimeout+0xb6>
 8005c42:	f001 fbdb 	bl	80073fc <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	1ad2      	subs	r2, r2, r3
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d909      	bls.n	8005c66 <I2C_WaitOnFlagUntilTimeout+0xca>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e020      	b.n	8005ca8 <I2C_WaitOnFlagUntilTimeout+0x10c>
      }
    }
  }
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	0c1b      	lsrs	r3, r3, #16
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d10c      	bne.n	8005c8a <I2C_WaitOnFlagUntilTimeout+0xee>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	43da      	mvns	r2, r3
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	bf14      	ite	ne
 8005c82:	2300      	movne	r3, #0
 8005c84:	2301      	moveq	r3, #1
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	e00b      	b.n	8005ca2 <I2C_WaitOnFlagUntilTimeout+0x106>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	43da      	mvns	r2, r3
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	4013      	ands	r3, r2
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	bf14      	ite	ne
 8005c9c:	2300      	movne	r3, #0
 8005c9e:	2301      	moveq	r3, #1
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1c6      	bne.n	8005c34 <I2C_WaitOnFlagUntilTimeout+0x98>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3718      	adds	r7, #24
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Flag: specifies the I2C flag to check.
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	617b      	str	r3, [r7, #20]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005cc0:	f001 fb9c 	bl	80073fc <HAL_GetTick>
 8005cc4:	6178      	str	r0, [r7, #20]

  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005cc6:	e03c      	b.n	8005d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d01c      	beq.n	8005d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	6812      	ldr	r2, [r2, #0]
 8005cde:	6812      	ldr	r2, [r2, #0]
 8005ce0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ce4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	6812      	ldr	r2, [r2, #0]
 8005cee:	6952      	ldr	r2, [r2, #20]
 8005cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cf4:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2204      	movs	r2, #4
 8005cfa:	639a      	str	r2, [r3, #56]	; 0x38
      hi2c->State= HAL_I2C_STATE_READY;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e039      	b.n	8005d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d16:	d014      	beq.n	8005d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d007      	beq.n	8005d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x7e>
 8005d1e:	f001 fb6d 	bl	80073fc <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	1ad2      	subs	r2, r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d909      	bls.n	8005d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->State= HAL_I2C_STATE_READY;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e020      	b.n	8005d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  uint32_t tickstart = 0;

  /* Get tick */
  tickstart = HAL_GetTick();

  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	0c1b      	lsrs	r3, r3, #16
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d10c      	bne.n	8005d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	43da      	mvns	r2, r3
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	4013      	ands	r3, r2
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	bf0c      	ite	eq
 8005d5e:	2300      	moveq	r3, #0
 8005d60:	2301      	movne	r3, #1
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	e00b      	b.n	8005d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	43da      	mvns	r2, r3
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	4013      	ands	r3, r2
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	bf0c      	ite	eq
 8005d78:	2300      	moveq	r3, #0
 8005d7a:	2301      	movne	r3, #1
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1a2      	bne.n	8005cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x18>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3718      	adds	r7, #24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b08b      	sub	sp, #44	; 0x2c
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005d96:	2300      	movs	r3, #0
 8005d98:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00;
 8005da2:	2300      	movs	r3, #0
 8005da4:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8005da6:	2300      	movs	r3, #0
 8005da8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005daa:	2300      	movs	r3, #0
 8005dac:	627b      	str	r3, [r7, #36]	; 0x24
 8005dae:	e128      	b.n	8006002 <HAL_GPIO_Init+0x276>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	2201      	movs	r2, #1
 8005db4:	fa02 f303 	lsl.w	r3, r2, r3
 8005db8:	61fb      	str	r3, [r7, #28]
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	f040 8117 	bne.w	8005ffc <HAL_GPIO_Init+0x270>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	2b12      	cmp	r3, #18
 8005dd4:	d034      	beq.n	8005e40 <HAL_GPIO_Init+0xb4>
 8005dd6:	2b12      	cmp	r3, #18
 8005dd8:	d80d      	bhi.n	8005df6 <HAL_GPIO_Init+0x6a>
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d02b      	beq.n	8005e36 <HAL_GPIO_Init+0xaa>
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d804      	bhi.n	8005dec <HAL_GPIO_Init+0x60>
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d031      	beq.n	8005e4a <HAL_GPIO_Init+0xbe>
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d01c      	beq.n	8005e24 <HAL_GPIO_Init+0x98>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 8005dea:	e049      	b.n	8005e80 <HAL_GPIO_Init+0xf4>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005dec:	2b03      	cmp	r3, #3
 8005dee:	d044      	beq.n	8005e7a <HAL_GPIO_Init+0xee>
 8005df0:	2b11      	cmp	r3, #17
 8005df2:	d01b      	beq.n	8005e2c <HAL_GPIO_Init+0xa0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 8005df4:	e044      	b.n	8005e80 <HAL_GPIO_Init+0xf4>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005df6:	4a87      	ldr	r2, [pc, #540]	; (8006014 <HAL_GPIO_Init+0x288>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d026      	beq.n	8005e4a <HAL_GPIO_Init+0xbe>
 8005dfc:	4a85      	ldr	r2, [pc, #532]	; (8006014 <HAL_GPIO_Init+0x288>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d806      	bhi.n	8005e10 <HAL_GPIO_Init+0x84>
 8005e02:	4a85      	ldr	r2, [pc, #532]	; (8006018 <HAL_GPIO_Init+0x28c>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d020      	beq.n	8005e4a <HAL_GPIO_Init+0xbe>
 8005e08:	4a84      	ldr	r2, [pc, #528]	; (800601c <HAL_GPIO_Init+0x290>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d01d      	beq.n	8005e4a <HAL_GPIO_Init+0xbe>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 8005e0e:	e037      	b.n	8005e80 <HAL_GPIO_Init+0xf4>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005e10:	4a83      	ldr	r2, [pc, #524]	; (8006020 <HAL_GPIO_Init+0x294>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d019      	beq.n	8005e4a <HAL_GPIO_Init+0xbe>
 8005e16:	4a83      	ldr	r2, [pc, #524]	; (8006024 <HAL_GPIO_Init+0x298>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d016      	beq.n	8005e4a <HAL_GPIO_Init+0xbe>
 8005e1c:	4a82      	ldr	r2, [pc, #520]	; (8006028 <HAL_GPIO_Init+0x29c>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d013      	beq.n	8005e4a <HAL_GPIO_Init+0xbe>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 8005e22:	e02d      	b.n	8005e80 <HAL_GPIO_Init+0xf4>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	623b      	str	r3, [r7, #32]
          break;
 8005e2a:	e029      	b.n	8005e80 <HAL_GPIO_Init+0xf4>
          
        /* If we are configuring the pin in OUTPUT open-drain mode */
        case GPIO_MODE_OUTPUT_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	3304      	adds	r3, #4
 8005e32:	623b      	str	r3, [r7, #32]
          break;
 8005e34:	e024      	b.n	8005e80 <HAL_GPIO_Init+0xf4>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
        case GPIO_MODE_AF_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	3308      	adds	r3, #8
 8005e3c:	623b      	str	r3, [r7, #32]
          break;
 8005e3e:	e01f      	b.n	8005e80 <HAL_GPIO_Init+0xf4>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
        case GPIO_MODE_AF_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	330c      	adds	r3, #12
 8005e46:	623b      	str	r3, [r7, #32]
          break;
 8005e48:	e01a      	b.n	8005e80 <HAL_GPIO_Init+0xf4>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d102      	bne.n	8005e58 <HAL_GPIO_Init+0xcc>
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005e52:	2304      	movs	r3, #4
 8005e54:	623b      	str	r3, [r7, #32]
 8005e56:	e00f      	b.n	8005e78 <HAL_GPIO_Init+0xec>
          }
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d105      	bne.n	8005e6c <HAL_GPIO_Init+0xe0>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005e60:	2308      	movs	r3, #8
 8005e62:	623b      	str	r3, [r7, #32]
            
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	69fa      	ldr	r2, [r7, #28]
 8005e68:	611a      	str	r2, [r3, #16]
 8005e6a:	e005      	b.n	8005e78 <HAL_GPIO_Init+0xec>
          }
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005e6c:	2308      	movs	r3, #8
 8005e6e:	623b      	str	r3, [r7, #32]
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	615a      	str	r2, [r3, #20]
          }
          break; 
 8005e76:	e003      	b.n	8005e80 <HAL_GPIO_Init+0xf4>
 8005e78:	e002      	b.n	8005e80 <HAL_GPIO_Init+0xf4>
          
        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	623b      	str	r3, [r7, #32]
          break;
 8005e7e:	bf00      	nop
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	2bff      	cmp	r3, #255	; 0xff
 8005e84:	d801      	bhi.n	8005e8a <HAL_GPIO_Init+0xfe>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	e001      	b.n	8005e8e <HAL_GPIO_Init+0x102>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	2bff      	cmp	r3, #255	; 0xff
 8005e94:	d802      	bhi.n	8005e9c <HAL_GPIO_Init+0x110>
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	e002      	b.n	8005ea2 <HAL_GPIO_Init+0x116>
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	3b08      	subs	r3, #8
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	613b      	str	r3, [r7, #16]
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	210f      	movs	r1, #15
 8005eac:	fa01 f303 	lsl.w	r3, r1, r3
 8005eb0:	43db      	mvns	r3, r3
 8005eb2:	401a      	ands	r2, r3
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	6a39      	ldr	r1, [r7, #32]
 8005eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ebc:	431a      	orrs	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	601a      	str	r2, [r3, #0]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 8096 	beq.w	8005ffc <HAL_GPIO_Init+0x270>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005ed0:	4b56      	ldr	r3, [pc, #344]	; (800602c <HAL_GPIO_Init+0x2a0>)
 8005ed2:	4a56      	ldr	r2, [pc, #344]	; (800602c <HAL_GPIO_Init+0x2a0>)
 8005ed4:	6992      	ldr	r2, [r2, #24]
 8005ed6:	f042 0201 	orr.w	r2, r2, #1
 8005eda:	619a      	str	r2, [r3, #24]
 8005edc:	4b53      	ldr	r3, [pc, #332]	; (800602c <HAL_GPIO_Init+0x2a0>)
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	60bb      	str	r3, [r7, #8]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2];
 8005ee8:	4b51      	ldr	r3, [pc, #324]	; (8006030 <HAL_GPIO_Init+0x2a4>)
 8005eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eec:	0892      	lsrs	r2, r2, #2
 8005eee:	3202      	adds	r2, #2
 8005ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef4:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	f003 0303 	and.w	r3, r3, #3
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	220f      	movs	r2, #15
 8005f00:	fa02 f303 	lsl.w	r3, r2, r3
 8005f04:	43db      	mvns	r3, r3
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	4013      	ands	r3, r2
 8005f0a:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	4b49      	ldr	r3, [pc, #292]	; (8006034 <HAL_GPIO_Init+0x2a8>)
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d013      	beq.n	8005f3c <HAL_GPIO_Init+0x1b0>
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	4b48      	ldr	r3, [pc, #288]	; (8006038 <HAL_GPIO_Init+0x2ac>)
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d00d      	beq.n	8005f38 <HAL_GPIO_Init+0x1ac>
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	4b47      	ldr	r3, [pc, #284]	; (800603c <HAL_GPIO_Init+0x2b0>)
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d007      	beq.n	8005f34 <HAL_GPIO_Init+0x1a8>
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	4b46      	ldr	r3, [pc, #280]	; (8006040 <HAL_GPIO_Init+0x2b4>)
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d101      	bne.n	8005f30 <HAL_GPIO_Init+0x1a4>
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e006      	b.n	8005f3e <HAL_GPIO_Init+0x1b2>
 8005f30:	2304      	movs	r3, #4
 8005f32:	e004      	b.n	8005f3e <HAL_GPIO_Init+0x1b2>
 8005f34:	2302      	movs	r3, #2
 8005f36:	e002      	b.n	8005f3e <HAL_GPIO_Init+0x1b2>
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e000      	b.n	8005f3e <HAL_GPIO_Init+0x1b2>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f40:	f002 0203 	and.w	r2, r2, #3
 8005f44:	0092      	lsls	r2, r2, #2
 8005f46:	4093      	lsls	r3, r2
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2] = temp;
 8005f4e:	4b38      	ldr	r3, [pc, #224]	; (8006030 <HAL_GPIO_Init+0x2a4>)
 8005f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f52:	0892      	lsrs	r2, r2, #2
 8005f54:	3202      	adds	r2, #2
 8005f56:	6979      	ldr	r1, [r7, #20]
 8005f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d006      	beq.n	8005f76 <HAL_GPIO_Init+0x1ea>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8005f68:	4b36      	ldr	r3, [pc, #216]	; (8006044 <HAL_GPIO_Init+0x2b8>)
 8005f6a:	4a36      	ldr	r2, [pc, #216]	; (8006044 <HAL_GPIO_Init+0x2b8>)
 8005f6c:	6811      	ldr	r1, [r2, #0]
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	430a      	orrs	r2, r1
 8005f72:	601a      	str	r2, [r3, #0]
 8005f74:	e006      	b.n	8005f84 <HAL_GPIO_Init+0x1f8>
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8005f76:	4b33      	ldr	r3, [pc, #204]	; (8006044 <HAL_GPIO_Init+0x2b8>)
 8005f78:	4a32      	ldr	r2, [pc, #200]	; (8006044 <HAL_GPIO_Init+0x2b8>)
 8005f7a:	6811      	ldr	r1, [r2, #0]
 8005f7c:	69ba      	ldr	r2, [r7, #24]
 8005f7e:	43d2      	mvns	r2, r2
 8005f80:	400a      	ands	r2, r1
 8005f82:	601a      	str	r2, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d006      	beq.n	8005f9e <HAL_GPIO_Init+0x212>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8005f90:	4b2c      	ldr	r3, [pc, #176]	; (8006044 <HAL_GPIO_Init+0x2b8>)
 8005f92:	4a2c      	ldr	r2, [pc, #176]	; (8006044 <HAL_GPIO_Init+0x2b8>)
 8005f94:	6851      	ldr	r1, [r2, #4]
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	605a      	str	r2, [r3, #4]
 8005f9c:	e006      	b.n	8005fac <HAL_GPIO_Init+0x220>
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8005f9e:	4b29      	ldr	r3, [pc, #164]	; (8006044 <HAL_GPIO_Init+0x2b8>)
 8005fa0:	4a28      	ldr	r2, [pc, #160]	; (8006044 <HAL_GPIO_Init+0x2b8>)
 8005fa2:	6851      	ldr	r1, [r2, #4]
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	43d2      	mvns	r2, r2
 8005fa8:	400a      	ands	r2, r1
 8005faa:	605a      	str	r2, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d006      	beq.n	8005fc6 <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8005fb8:	4b22      	ldr	r3, [pc, #136]	; (8006044 <HAL_GPIO_Init+0x2b8>)
 8005fba:	4a22      	ldr	r2, [pc, #136]	; (8006044 <HAL_GPIO_Init+0x2b8>)
 8005fbc:	6891      	ldr	r1, [r2, #8]
 8005fbe:	69ba      	ldr	r2, [r7, #24]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	609a      	str	r2, [r3, #8]
 8005fc4:	e006      	b.n	8005fd4 <HAL_GPIO_Init+0x248>
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8005fc6:	4b1f      	ldr	r3, [pc, #124]	; (8006044 <HAL_GPIO_Init+0x2b8>)
 8005fc8:	4a1e      	ldr	r2, [pc, #120]	; (8006044 <HAL_GPIO_Init+0x2b8>)
 8005fca:	6891      	ldr	r1, [r2, #8]
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	43d2      	mvns	r2, r2
 8005fd0:	400a      	ands	r2, r1
 8005fd2:	609a      	str	r2, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d006      	beq.n	8005fee <HAL_GPIO_Init+0x262>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8005fe0:	4b18      	ldr	r3, [pc, #96]	; (8006044 <HAL_GPIO_Init+0x2b8>)
 8005fe2:	4a18      	ldr	r2, [pc, #96]	; (8006044 <HAL_GPIO_Init+0x2b8>)
 8005fe4:	68d1      	ldr	r1, [r2, #12]
 8005fe6:	69ba      	ldr	r2, [r7, #24]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	60da      	str	r2, [r3, #12]
 8005fec:	e006      	b.n	8005ffc <HAL_GPIO_Init+0x270>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8005fee:	4b15      	ldr	r3, [pc, #84]	; (8006044 <HAL_GPIO_Init+0x2b8>)
 8005ff0:	4a14      	ldr	r2, [pc, #80]	; (8006044 <HAL_GPIO_Init+0x2b8>)
 8005ff2:	68d1      	ldr	r1, [r2, #12]
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	43d2      	mvns	r2, r2
 8005ff8:	400a      	ands	r2, r1
 8005ffa:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	3301      	adds	r3, #1
 8006000:	627b      	str	r3, [r7, #36]	; 0x24
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	2b0f      	cmp	r3, #15
 8006006:	f67f aed3 	bls.w	8005db0 <HAL_GPIO_Init+0x24>
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
        }
      }
    }
  }
}
 800600a:	372c      	adds	r7, #44	; 0x2c
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	10210000 	.word	0x10210000
 8006018:	10110000 	.word	0x10110000
 800601c:	10120000 	.word	0x10120000
 8006020:	10310000 	.word	0x10310000
 8006024:	10320000 	.word	0x10320000
 8006028:	10220000 	.word	0x10220000
 800602c:	40021000 	.word	0x40021000
 8006030:	40010000 	.word	0x40010000
 8006034:	40010800 	.word	0x40010800
 8006038:	40010c00 	.word	0x40010c00
 800603c:	40011000 	.word	0x40011000
 8006040:	40011400 	.word	0x40011400
 8006044:	40010400 	.word	0x40010400

08006048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_BIT_RESET: to clear the port pin
  *            @arg GPIO_BIT_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	4613      	mov	r3, r2
 8006052:	460a      	mov	r2, r1
 8006054:	807a      	strh	r2, [r7, #2]
 8006056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006058:	787b      	ldrb	r3, [r7, #1]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d003      	beq.n	8006066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800605e:	887a      	ldrh	r2, [r7, #2]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	611a      	str	r2, [r3, #16]
 8006064:	e003      	b.n	800606e <HAL_GPIO_WritePin+0x26>
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006066:	887b      	ldrh	r3, [r7, #2]
 8006068:	041a      	lsls	r2, r3, #16
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	611a      	str	r2, [r3, #16]
  }
}
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief This function handles EXTI interrupt request.
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	4603      	mov	r3, r0
 8006080:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8006082:	4b08      	ldr	r3, [pc, #32]	; (80060a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006084:	695a      	ldr	r2, [r3, #20]
 8006086:	88fb      	ldrh	r3, [r7, #6]
 8006088:	4013      	ands	r3, r2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d006      	beq.n	800609c <HAL_GPIO_EXTI_IRQHandler+0x24>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800608e:	4b05      	ldr	r3, [pc, #20]	; (80060a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006090:	88fa      	ldrh	r2, [r7, #6]
 8006092:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006094:	88fb      	ldrh	r3, [r7, #6]
 8006096:	4618      	mov	r0, r3
 8006098:	f000 f806 	bl	80060a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800609c:	3708      	adds	r7, #8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	40010400 	.word	0x40010400

080060a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	4603      	mov	r3, r0
 80060b0:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80060c4:	2300      	movs	r3, #0
 80060c6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e039      	b.n	8006146 <HAL_DMA_Init+0x8a>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  if(hdma->State == HAL_DMA_STATE_RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d103      	bne.n	80060e4 <HAL_DMA_Init+0x28>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 2020 	strb.w	r2, [r3, #32]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2202      	movs	r2, #2
 80060e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80060fa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80060fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689b      	ldr	r3, [r3, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006108:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	691b      	ldr	r3, [r3, #16]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006114:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	699b      	ldr	r3, [r3, #24]
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006120:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	4313      	orrs	r3, r2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	4313      	orrs	r3, r2
 800612c:	60fb      	str	r3, [r7, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	601a      	str	r2, [r3, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop

08006154 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
 8006160:	603b      	str	r3, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdma);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d101      	bne.n	8006170 <HAL_DMA_Start_IT+0x1c>
 800616c:	2302      	movs	r3, #2
 800616e:	e036      	b.n	80061de <HAL_DMA_Start_IT+0x8a>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2020 	strb.w	r2, [r3, #32]

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2202      	movs	r2, #2
 800617c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	6812      	ldr	r2, [r2, #0]
 8006188:	6812      	ldr	r2, [r2, #0]
 800618a:	f022 0201 	bic.w	r2, r2, #1
 800618e:	601a      	str	r2, [r3, #0]
  
  /* Configure the source, destination address and the data length */
  DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	68b9      	ldr	r1, [r7, #8]
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	f000 fa14 	bl	80065c4 <DMA_SetConfig>
  
  /* Enable the transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	6812      	ldr	r2, [r2, #0]
 80061a4:	6812      	ldr	r2, [r2, #0]
 80061a6:	f042 0202 	orr.w	r2, r2, #2
 80061aa:	601a      	str	r2, [r3, #0]

  /* Enable the Half transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	6812      	ldr	r2, [r2, #0]
 80061b4:	6812      	ldr	r2, [r2, #0]
 80061b6:	f042 0204 	orr.w	r2, r2, #4
 80061ba:	601a      	str	r2, [r3, #0]

  /* Enable the transfer Error interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	6812      	ldr	r2, [r2, #0]
 80061c4:	6812      	ldr	r2, [r2, #0]
 80061c6:	f042 0208 	orr.w	r2, r2, #8
 80061ca:	601a      	str	r2, [r3, #0]
  
   /* Enable the Peripheral */
  __HAL_DMA_ENABLE(hdma);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	6812      	ldr	r2, [r2, #0]
 80061d4:	6812      	ldr	r2, [r2, #0]
 80061d6:	f042 0201 	orr.w	r2, r2, #1
 80061da:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
} 
 80061de:	4618      	mov	r0, r3
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop

080061e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80061f0:	4b8f      	ldr	r3, [pc, #572]	; (8006430 <HAL_DMA_IRQHandler+0x248>)
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4619      	mov	r1, r3
 80061fa:	4b8e      	ldr	r3, [pc, #568]	; (8006434 <HAL_DMA_IRQHandler+0x24c>)
 80061fc:	4299      	cmp	r1, r3
 80061fe:	d02e      	beq.n	800625e <HAL_DMA_IRQHandler+0x76>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4619      	mov	r1, r3
 8006206:	4b8c      	ldr	r3, [pc, #560]	; (8006438 <HAL_DMA_IRQHandler+0x250>)
 8006208:	4299      	cmp	r1, r3
 800620a:	d026      	beq.n	800625a <HAL_DMA_IRQHandler+0x72>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4619      	mov	r1, r3
 8006212:	4b8a      	ldr	r3, [pc, #552]	; (800643c <HAL_DMA_IRQHandler+0x254>)
 8006214:	4299      	cmp	r1, r3
 8006216:	d01d      	beq.n	8006254 <HAL_DMA_IRQHandler+0x6c>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4619      	mov	r1, r3
 800621e:	4b88      	ldr	r3, [pc, #544]	; (8006440 <HAL_DMA_IRQHandler+0x258>)
 8006220:	4299      	cmp	r1, r3
 8006222:	d014      	beq.n	800624e <HAL_DMA_IRQHandler+0x66>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4619      	mov	r1, r3
 800622a:	4b86      	ldr	r3, [pc, #536]	; (8006444 <HAL_DMA_IRQHandler+0x25c>)
 800622c:	4299      	cmp	r1, r3
 800622e:	d00b      	beq.n	8006248 <HAL_DMA_IRQHandler+0x60>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4619      	mov	r1, r3
 8006236:	4b84      	ldr	r3, [pc, #528]	; (8006448 <HAL_DMA_IRQHandler+0x260>)
 8006238:	4299      	cmp	r1, r3
 800623a:	d102      	bne.n	8006242 <HAL_DMA_IRQHandler+0x5a>
 800623c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006240:	e00e      	b.n	8006260 <HAL_DMA_IRQHandler+0x78>
 8006242:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006246:	e00b      	b.n	8006260 <HAL_DMA_IRQHandler+0x78>
 8006248:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800624c:	e008      	b.n	8006260 <HAL_DMA_IRQHandler+0x78>
 800624e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006252:	e005      	b.n	8006260 <HAL_DMA_IRQHandler+0x78>
 8006254:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006258:	e002      	b.n	8006260 <HAL_DMA_IRQHandler+0x78>
 800625a:	2380      	movs	r3, #128	; 0x80
 800625c:	e000      	b.n	8006260 <HAL_DMA_IRQHandler+0x78>
 800625e:	2308      	movs	r3, #8
 8006260:	4013      	ands	r3, r2
 8006262:	2b00      	cmp	r3, #0
 8006264:	d05c      	beq.n	8006320 <HAL_DMA_IRQHandler+0x138>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0308 	and.w	r3, r3, #8
 8006270:	2b00      	cmp	r3, #0
 8006272:	d055      	beq.n	8006320 <HAL_DMA_IRQHandler+0x138>
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	6812      	ldr	r2, [r2, #0]
 800627c:	6812      	ldr	r2, [r2, #0]
 800627e:	f022 0208 	bic.w	r2, r2, #8
 8006282:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006284:	4a6a      	ldr	r2, [pc, #424]	; (8006430 <HAL_DMA_IRQHandler+0x248>)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4619      	mov	r1, r3
 800628c:	4b69      	ldr	r3, [pc, #420]	; (8006434 <HAL_DMA_IRQHandler+0x24c>)
 800628e:	4299      	cmp	r1, r3
 8006290:	d02e      	beq.n	80062f0 <HAL_DMA_IRQHandler+0x108>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4619      	mov	r1, r3
 8006298:	4b67      	ldr	r3, [pc, #412]	; (8006438 <HAL_DMA_IRQHandler+0x250>)
 800629a:	4299      	cmp	r1, r3
 800629c:	d026      	beq.n	80062ec <HAL_DMA_IRQHandler+0x104>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4619      	mov	r1, r3
 80062a4:	4b65      	ldr	r3, [pc, #404]	; (800643c <HAL_DMA_IRQHandler+0x254>)
 80062a6:	4299      	cmp	r1, r3
 80062a8:	d01d      	beq.n	80062e6 <HAL_DMA_IRQHandler+0xfe>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4619      	mov	r1, r3
 80062b0:	4b63      	ldr	r3, [pc, #396]	; (8006440 <HAL_DMA_IRQHandler+0x258>)
 80062b2:	4299      	cmp	r1, r3
 80062b4:	d014      	beq.n	80062e0 <HAL_DMA_IRQHandler+0xf8>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4619      	mov	r1, r3
 80062bc:	4b61      	ldr	r3, [pc, #388]	; (8006444 <HAL_DMA_IRQHandler+0x25c>)
 80062be:	4299      	cmp	r1, r3
 80062c0:	d00b      	beq.n	80062da <HAL_DMA_IRQHandler+0xf2>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4619      	mov	r1, r3
 80062c8:	4b5f      	ldr	r3, [pc, #380]	; (8006448 <HAL_DMA_IRQHandler+0x260>)
 80062ca:	4299      	cmp	r1, r3
 80062cc:	d102      	bne.n	80062d4 <HAL_DMA_IRQHandler+0xec>
 80062ce:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80062d2:	e00e      	b.n	80062f2 <HAL_DMA_IRQHandler+0x10a>
 80062d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80062d8:	e00b      	b.n	80062f2 <HAL_DMA_IRQHandler+0x10a>
 80062da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80062de:	e008      	b.n	80062f2 <HAL_DMA_IRQHandler+0x10a>
 80062e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062e4:	e005      	b.n	80062f2 <HAL_DMA_IRQHandler+0x10a>
 80062e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062ea:	e002      	b.n	80062f2 <HAL_DMA_IRQHandler+0x10a>
 80062ec:	2380      	movs	r3, #128	; 0x80
 80062ee:	e000      	b.n	80062f2 <HAL_DMA_IRQHandler+0x10a>
 80062f0:	2308      	movs	r3, #8
 80062f2:	6053      	str	r3, [r2, #4]
      
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f8:	f043 0201 	orr.w	r2, r3, #1
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2204      	movs	r2, #4
 8006304:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      
      /* Process Unlocked */
      __HAL_UNLOCK(hdma); 
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2020 	strb.w	r2, [r3, #32]
      
      if (hdma->XferErrorCallback != NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006314:	2b00      	cmp	r3, #0
 8006316:	d003      	beq.n	8006320 <HAL_DMA_IRQHandler+0x138>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	4798      	blx	r3
      }
    }
  }

  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8006320:	4b43      	ldr	r3, [pc, #268]	; (8006430 <HAL_DMA_IRQHandler+0x248>)
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4619      	mov	r1, r3
 800632a:	4b42      	ldr	r3, [pc, #264]	; (8006434 <HAL_DMA_IRQHandler+0x24c>)
 800632c:	4299      	cmp	r1, r3
 800632e:	d02e      	beq.n	800638e <HAL_DMA_IRQHandler+0x1a6>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4619      	mov	r1, r3
 8006336:	4b40      	ldr	r3, [pc, #256]	; (8006438 <HAL_DMA_IRQHandler+0x250>)
 8006338:	4299      	cmp	r1, r3
 800633a:	d026      	beq.n	800638a <HAL_DMA_IRQHandler+0x1a2>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4619      	mov	r1, r3
 8006342:	4b3e      	ldr	r3, [pc, #248]	; (800643c <HAL_DMA_IRQHandler+0x254>)
 8006344:	4299      	cmp	r1, r3
 8006346:	d01d      	beq.n	8006384 <HAL_DMA_IRQHandler+0x19c>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4619      	mov	r1, r3
 800634e:	4b3c      	ldr	r3, [pc, #240]	; (8006440 <HAL_DMA_IRQHandler+0x258>)
 8006350:	4299      	cmp	r1, r3
 8006352:	d014      	beq.n	800637e <HAL_DMA_IRQHandler+0x196>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4619      	mov	r1, r3
 800635a:	4b3a      	ldr	r3, [pc, #232]	; (8006444 <HAL_DMA_IRQHandler+0x25c>)
 800635c:	4299      	cmp	r1, r3
 800635e:	d00b      	beq.n	8006378 <HAL_DMA_IRQHandler+0x190>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4619      	mov	r1, r3
 8006366:	4b38      	ldr	r3, [pc, #224]	; (8006448 <HAL_DMA_IRQHandler+0x260>)
 8006368:	4299      	cmp	r1, r3
 800636a:	d102      	bne.n	8006372 <HAL_DMA_IRQHandler+0x18a>
 800636c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006370:	e00e      	b.n	8006390 <HAL_DMA_IRQHandler+0x1a8>
 8006372:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006376:	e00b      	b.n	8006390 <HAL_DMA_IRQHandler+0x1a8>
 8006378:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800637c:	e008      	b.n	8006390 <HAL_DMA_IRQHandler+0x1a8>
 800637e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006382:	e005      	b.n	8006390 <HAL_DMA_IRQHandler+0x1a8>
 8006384:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006388:	e002      	b.n	8006390 <HAL_DMA_IRQHandler+0x1a8>
 800638a:	2340      	movs	r3, #64	; 0x40
 800638c:	e000      	b.n	8006390 <HAL_DMA_IRQHandler+0x1a8>
 800638e:	2304      	movs	r3, #4
 8006390:	4013      	ands	r3, r2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d068      	beq.n	8006468 <HAL_DMA_IRQHandler+0x280>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0304 	and.w	r3, r3, #4
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d061      	beq.n	8006468 <HAL_DMA_IRQHandler+0x280>
    { 
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0320 	and.w	r3, r3, #32
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d107      	bne.n	80063c2 <HAL_DMA_IRQHandler+0x1da>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	6812      	ldr	r2, [r2, #0]
 80063ba:	6812      	ldr	r2, [r2, #0]
 80063bc:	f022 0204 	bic.w	r2, r2, #4
 80063c0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80063c2:	4a1b      	ldr	r2, [pc, #108]	; (8006430 <HAL_DMA_IRQHandler+0x248>)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4619      	mov	r1, r3
 80063ca:	4b1a      	ldr	r3, [pc, #104]	; (8006434 <HAL_DMA_IRQHandler+0x24c>)
 80063cc:	4299      	cmp	r1, r3
 80063ce:	d03d      	beq.n	800644c <HAL_DMA_IRQHandler+0x264>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4619      	mov	r1, r3
 80063d6:	4b18      	ldr	r3, [pc, #96]	; (8006438 <HAL_DMA_IRQHandler+0x250>)
 80063d8:	4299      	cmp	r1, r3
 80063da:	d026      	beq.n	800642a <HAL_DMA_IRQHandler+0x242>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4619      	mov	r1, r3
 80063e2:	4b16      	ldr	r3, [pc, #88]	; (800643c <HAL_DMA_IRQHandler+0x254>)
 80063e4:	4299      	cmp	r1, r3
 80063e6:	d01d      	beq.n	8006424 <HAL_DMA_IRQHandler+0x23c>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4619      	mov	r1, r3
 80063ee:	4b14      	ldr	r3, [pc, #80]	; (8006440 <HAL_DMA_IRQHandler+0x258>)
 80063f0:	4299      	cmp	r1, r3
 80063f2:	d014      	beq.n	800641e <HAL_DMA_IRQHandler+0x236>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4619      	mov	r1, r3
 80063fa:	4b12      	ldr	r3, [pc, #72]	; (8006444 <HAL_DMA_IRQHandler+0x25c>)
 80063fc:	4299      	cmp	r1, r3
 80063fe:	d00b      	beq.n	8006418 <HAL_DMA_IRQHandler+0x230>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4619      	mov	r1, r3
 8006406:	4b10      	ldr	r3, [pc, #64]	; (8006448 <HAL_DMA_IRQHandler+0x260>)
 8006408:	4299      	cmp	r1, r3
 800640a:	d102      	bne.n	8006412 <HAL_DMA_IRQHandler+0x22a>
 800640c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006410:	e01d      	b.n	800644e <HAL_DMA_IRQHandler+0x266>
 8006412:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006416:	e01a      	b.n	800644e <HAL_DMA_IRQHandler+0x266>
 8006418:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800641c:	e017      	b.n	800644e <HAL_DMA_IRQHandler+0x266>
 800641e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006422:	e014      	b.n	800644e <HAL_DMA_IRQHandler+0x266>
 8006424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006428:	e011      	b.n	800644e <HAL_DMA_IRQHandler+0x266>
 800642a:	2340      	movs	r3, #64	; 0x40
 800642c:	e00f      	b.n	800644e <HAL_DMA_IRQHandler+0x266>
 800642e:	bf00      	nop
 8006430:	40020000 	.word	0x40020000
 8006434:	40020008 	.word	0x40020008
 8006438:	4002001c 	.word	0x4002001c
 800643c:	40020030 	.word	0x40020030
 8006440:	40020044 	.word	0x40020044
 8006444:	40020058 	.word	0x40020058
 8006448:	4002006c 	.word	0x4002006c
 800644c:	2304      	movs	r3, #4
 800644e:	6053      	str	r3, [r2, #4]

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2211      	movs	r2, #17
 8006454:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      if(hdma->XferHalfCpltCallback != NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645c:	2b00      	cmp	r3, #0
 800645e:	d003      	beq.n	8006468 <HAL_DMA_IRQHandler+0x280>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	4798      	blx	r3
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8006468:	4b4f      	ldr	r3, [pc, #316]	; (80065a8 <HAL_DMA_IRQHandler+0x3c0>)
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4619      	mov	r1, r3
 8006472:	4b4e      	ldr	r3, [pc, #312]	; (80065ac <HAL_DMA_IRQHandler+0x3c4>)
 8006474:	4299      	cmp	r1, r3
 8006476:	d02e      	beq.n	80064d6 <HAL_DMA_IRQHandler+0x2ee>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4619      	mov	r1, r3
 800647e:	4b4c      	ldr	r3, [pc, #304]	; (80065b0 <HAL_DMA_IRQHandler+0x3c8>)
 8006480:	4299      	cmp	r1, r3
 8006482:	d026      	beq.n	80064d2 <HAL_DMA_IRQHandler+0x2ea>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4619      	mov	r1, r3
 800648a:	4b4a      	ldr	r3, [pc, #296]	; (80065b4 <HAL_DMA_IRQHandler+0x3cc>)
 800648c:	4299      	cmp	r1, r3
 800648e:	d01d      	beq.n	80064cc <HAL_DMA_IRQHandler+0x2e4>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4619      	mov	r1, r3
 8006496:	4b48      	ldr	r3, [pc, #288]	; (80065b8 <HAL_DMA_IRQHandler+0x3d0>)
 8006498:	4299      	cmp	r1, r3
 800649a:	d014      	beq.n	80064c6 <HAL_DMA_IRQHandler+0x2de>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4619      	mov	r1, r3
 80064a2:	4b46      	ldr	r3, [pc, #280]	; (80065bc <HAL_DMA_IRQHandler+0x3d4>)
 80064a4:	4299      	cmp	r1, r3
 80064a6:	d00b      	beq.n	80064c0 <HAL_DMA_IRQHandler+0x2d8>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4619      	mov	r1, r3
 80064ae:	4b44      	ldr	r3, [pc, #272]	; (80065c0 <HAL_DMA_IRQHandler+0x3d8>)
 80064b0:	4299      	cmp	r1, r3
 80064b2:	d102      	bne.n	80064ba <HAL_DMA_IRQHandler+0x2d2>
 80064b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80064b8:	e00e      	b.n	80064d8 <HAL_DMA_IRQHandler+0x2f0>
 80064ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064be:	e00b      	b.n	80064d8 <HAL_DMA_IRQHandler+0x2f0>
 80064c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064c4:	e008      	b.n	80064d8 <HAL_DMA_IRQHandler+0x2f0>
 80064c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064ca:	e005      	b.n	80064d8 <HAL_DMA_IRQHandler+0x2f0>
 80064cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064d0:	e002      	b.n	80064d8 <HAL_DMA_IRQHandler+0x2f0>
 80064d2:	2320      	movs	r3, #32
 80064d4:	e000      	b.n	80064d8 <HAL_DMA_IRQHandler+0x2f0>
 80064d6:	2302      	movs	r3, #2
 80064d8:	4013      	ands	r3, r2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d061      	beq.n	80065a2 <HAL_DMA_IRQHandler+0x3ba>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d05a      	beq.n	80065a2 <HAL_DMA_IRQHandler+0x3ba>
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0320 	and.w	r3, r3, #32
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d107      	bne.n	800650a <HAL_DMA_IRQHandler+0x322>
      {
        /* Disable the transfer complete interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	6812      	ldr	r2, [r2, #0]
 8006502:	6812      	ldr	r2, [r2, #0]
 8006504:	f022 0202 	bic.w	r2, r2, #2
 8006508:	601a      	str	r2, [r3, #0]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800650a:	4a27      	ldr	r2, [pc, #156]	; (80065a8 <HAL_DMA_IRQHandler+0x3c0>)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4619      	mov	r1, r3
 8006512:	4b26      	ldr	r3, [pc, #152]	; (80065ac <HAL_DMA_IRQHandler+0x3c4>)
 8006514:	4299      	cmp	r1, r3
 8006516:	d02e      	beq.n	8006576 <HAL_DMA_IRQHandler+0x38e>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4619      	mov	r1, r3
 800651e:	4b24      	ldr	r3, [pc, #144]	; (80065b0 <HAL_DMA_IRQHandler+0x3c8>)
 8006520:	4299      	cmp	r1, r3
 8006522:	d026      	beq.n	8006572 <HAL_DMA_IRQHandler+0x38a>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4619      	mov	r1, r3
 800652a:	4b22      	ldr	r3, [pc, #136]	; (80065b4 <HAL_DMA_IRQHandler+0x3cc>)
 800652c:	4299      	cmp	r1, r3
 800652e:	d01d      	beq.n	800656c <HAL_DMA_IRQHandler+0x384>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4619      	mov	r1, r3
 8006536:	4b20      	ldr	r3, [pc, #128]	; (80065b8 <HAL_DMA_IRQHandler+0x3d0>)
 8006538:	4299      	cmp	r1, r3
 800653a:	d014      	beq.n	8006566 <HAL_DMA_IRQHandler+0x37e>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4619      	mov	r1, r3
 8006542:	4b1e      	ldr	r3, [pc, #120]	; (80065bc <HAL_DMA_IRQHandler+0x3d4>)
 8006544:	4299      	cmp	r1, r3
 8006546:	d00b      	beq.n	8006560 <HAL_DMA_IRQHandler+0x378>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4619      	mov	r1, r3
 800654e:	4b1c      	ldr	r3, [pc, #112]	; (80065c0 <HAL_DMA_IRQHandler+0x3d8>)
 8006550:	4299      	cmp	r1, r3
 8006552:	d102      	bne.n	800655a <HAL_DMA_IRQHandler+0x372>
 8006554:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006558:	e00e      	b.n	8006578 <HAL_DMA_IRQHandler+0x390>
 800655a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800655e:	e00b      	b.n	8006578 <HAL_DMA_IRQHandler+0x390>
 8006560:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006564:	e008      	b.n	8006578 <HAL_DMA_IRQHandler+0x390>
 8006566:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800656a:	e005      	b.n	8006578 <HAL_DMA_IRQHandler+0x390>
 800656c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006570:	e002      	b.n	8006578 <HAL_DMA_IRQHandler+0x390>
 8006572:	2320      	movs	r3, #32
 8006574:	e000      	b.n	8006578 <HAL_DMA_IRQHandler+0x390>
 8006576:	2302      	movs	r3, #2
 8006578:	6053      	str	r3, [r2, #4]
    
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	635a      	str	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2020 	strb.w	r2, [r3, #32]
    
      if(hdma->XferCpltCallback != NULL)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <HAL_DMA_IRQHandler+0x3ba>
      {       
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	4798      	blx	r3
      }
    }
  }
}
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	40020000 	.word	0x40020000
 80065ac:	40020008 	.word	0x40020008
 80065b0:	4002001c 	.word	0x4002001c
 80065b4:	40020030 	.word	0x40020030
 80065b8:	40020044 	.word	0x40020044
 80065bc:	40020058 	.word	0x40020058
 80065c0:	4002006c 	.word	0x4002006c

080065c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
 80065d0:	603b      	str	r3, [r7, #0]
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	683a      	ldr	r2, [r7, #0]
 80065d8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	2b10      	cmp	r3, #16
 80065e0:	d108      	bne.n	80065f4 <DMA_SetConfig+0x30>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	60da      	str	r2, [r3, #12]
 80065f2:	e007      	b.n	8006604 <DMA_SetConfig+0x40>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	60da      	str	r2, [r3, #12]
  }
}
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop

08006610 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f003 0307 	and.w	r3, r3, #7
 800661e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006620:	4b0c      	ldr	r3, [pc, #48]	; (8006654 <NVIC_SetPriorityGrouping+0x44>)
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800662c:	4013      	ands	r3, r2
 800662e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8006638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800663c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006640:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8006642:	4b04      	ldr	r3, [pc, #16]	; (8006654 <NVIC_SetPriorityGrouping+0x44>)
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	60da      	str	r2, [r3, #12]
}
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	e000ed00 	.word	0xe000ed00

08006658 <NVIC_GetPriorityGrouping>:
  The function reads the priority grouping field from the NVIC Interrupt Controller.

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8006658:	b480      	push	{r7}
 800665a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800665c:	4b04      	ldr	r3, [pc, #16]	; (8006670 <NVIC_GetPriorityGrouping+0x18>)
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006664:	0a1b      	lsrs	r3, r3, #8
}
 8006666:	4618      	mov	r0, r3
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	e000ed00 	.word	0xe000ed00

08006674 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	4603      	mov	r3, r0
 800667c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800667e:	4b08      	ldr	r3, [pc, #32]	; (80066a0 <NVIC_EnableIRQ+0x2c>)
 8006680:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8006684:	0952      	lsrs	r2, r2, #5
 8006686:	79f9      	ldrb	r1, [r7, #7]
 8006688:	f001 011f 	and.w	r1, r1, #31
 800668c:	2001      	movs	r0, #1
 800668e:	fa00 f101 	lsl.w	r1, r0, r1
 8006692:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	e000e100 	.word	0xe000e100

080066a4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	4603      	mov	r3, r0
 80066ac:	6039      	str	r1, [r7, #0]
 80066ae:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 80066b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	da0b      	bge.n	80066d0 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066b8:	490d      	ldr	r1, [pc, #52]	; (80066f0 <NVIC_SetPriority+0x4c>)
 80066ba:	79fb      	ldrb	r3, [r7, #7]
 80066bc:	f003 030f 	and.w	r3, r3, #15
 80066c0:	3b04      	subs	r3, #4
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	b2d2      	uxtb	r2, r2
 80066c6:	0112      	lsls	r2, r2, #4
 80066c8:	b2d2      	uxtb	r2, r2
 80066ca:	440b      	add	r3, r1
 80066cc:	761a      	strb	r2, [r3, #24]
 80066ce:	e009      	b.n	80066e4 <NVIC_SetPriority+0x40>
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066d0:	4908      	ldr	r1, [pc, #32]	; (80066f4 <NVIC_SetPriority+0x50>)
 80066d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	b2d2      	uxtb	r2, r2
 80066da:	0112      	lsls	r2, r2, #4
 80066dc:	b2d2      	uxtb	r2, r2
 80066de:	440b      	add	r3, r1
 80066e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	e000ed00 	.word	0xe000ed00
 80066f4:	e000e100 	.word	0xe000e100

080066f8 <NVIC_EncodePriority>:
    \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
    \param [in]       SubPriority  Subpriority value (starting from 0).
    \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b089      	sub	sp, #36	; 0x24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f003 0307 	and.w	r3, r3, #7
 800670a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	f1c3 0307 	rsb	r3, r3, #7
 8006712:	2b04      	cmp	r3, #4
 8006714:	bf28      	it	cs
 8006716:	2304      	movcs	r3, #4
 8006718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	3304      	adds	r3, #4
 800671e:	2b06      	cmp	r3, #6
 8006720:	d902      	bls.n	8006728 <NVIC_EncodePriority+0x30>
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	3b03      	subs	r3, #3
 8006726:	e000      	b.n	800672a <NVIC_EncodePriority+0x32>
 8006728:	2300      	movs	r3, #0
 800672a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	2201      	movs	r2, #1
 8006730:	fa02 f303 	lsl.w	r3, r2, r3
 8006734:	1e5a      	subs	r2, r3, #1
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	401a      	ands	r2, r3
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	2101      	movs	r1, #1
 8006742:	fa01 f303 	lsl.w	r3, r1, r3
 8006746:	1e59      	subs	r1, r3, #1
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800674c:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800674e:	4618      	mov	r0, r3
 8006750:	3724      	adds	r7, #36	; 0x24
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop

0800675c <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	3b01      	subs	r3, #1
 8006768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800676c:	d301      	bcc.n	8006772 <SysTick_Config+0x16>
 800676e:	2301      	movs	r3, #1
 8006770:	e00f      	b.n	8006792 <SysTick_Config+0x36>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006772:	4b0a      	ldr	r3, [pc, #40]	; (800679c <SysTick_Config+0x40>)
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	3a01      	subs	r2, #1
 8006778:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800677a:	f04f 30ff 	mov.w	r0, #4294967295
 800677e:	210f      	movs	r1, #15
 8006780:	f7ff ff90 	bl	80066a4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006784:	4b05      	ldr	r3, [pc, #20]	; (800679c <SysTick_Config+0x40>)
 8006786:	2200      	movs	r2, #0
 8006788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800678a:	4b04      	ldr	r3, [pc, #16]	; (800679c <SysTick_Config+0x40>)
 800678c:	2207      	movs	r2, #7
 800678e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3708      	adds	r7, #8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	e000e010 	.word	0xe000e010

080067a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f7ff ff31 	bl	8006610 <NVIC_SetPriorityGrouping>
}
 80067ae:	3708      	adds	r7, #8
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b086      	sub	sp, #24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	4603      	mov	r3, r0
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
 80067c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80067c2:	2300      	movs	r3, #0
 80067c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80067c6:	f7ff ff47 	bl	8006658 <NVIC_GetPriorityGrouping>
 80067ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067cc:	6978      	ldr	r0, [r7, #20]
 80067ce:	68b9      	ldr	r1, [r7, #8]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	f7ff ff91 	bl	80066f8 <NVIC_EncodePriority>
 80067d6:	4603      	mov	r3, r0
 80067d8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80067dc:	4610      	mov	r0, r2
 80067de:	4619      	mov	r1, r3
 80067e0:	f7ff ff60 	bl	80066a4 <NVIC_SetPriority>
}
 80067e4:	3718      	adds	r7, #24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop

080067ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	4603      	mov	r3, r0
 80067f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80067f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7ff ff3a 	bl	8006674 <NVIC_EnableIRQ>
}
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop

08006808 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f7ff ffa3 	bl	800675c <SysTick_Config>
 8006816:	4603      	mov	r3, r0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b04      	cmp	r3, #4
 800682c:	d106      	bne.n	800683c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800682e:	4b09      	ldr	r3, [pc, #36]	; (8006854 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8006830:	4a08      	ldr	r2, [pc, #32]	; (8006854 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8006832:	6812      	ldr	r2, [r2, #0]
 8006834:	f042 0204 	orr.w	r2, r2, #4
 8006838:	601a      	str	r2, [r3, #0]
 800683a:	e005      	b.n	8006848 <HAL_SYSTICK_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800683c:	4b05      	ldr	r3, [pc, #20]	; (8006854 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800683e:	4a05      	ldr	r2, [pc, #20]	; (8006854 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8006840:	6812      	ldr	r2, [r2, #0]
 8006842:	f022 0204 	bic.w	r2, r2, #4
 8006846:	601a      	str	r2, [r3, #0]
  }
}
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	e000e010 	.word	0xe000e010

08006858 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800685c:	f000 f802 	bl	8006864 <HAL_SYSTICK_Callback>
}
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop

08006864 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8006864:	b480      	push	{r7}
 8006866:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8006870:	b590      	push	{r4, r7, lr}
 8006872:	b087      	sub	sp, #28
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006878:	2300      	movs	r3, #0
 800687a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0;
 800687c:	2300      	movs	r3, #0
 800687e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006886:	2b01      	cmp	r3, #1
 8006888:	d101      	bne.n	800688e <HAL_ADCEx_Calibration_Start+0x1e>
 800688a:	2302      	movs	r3, #2
 800688c:	e086      	b.n	800699c <HAL_ADCEx_Calibration_Start+0x12c>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 fcd0 	bl	800723c <ADC_ConversionStop_Disable>
 800689c:	4603      	mov	r3, r0
 800689e:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80068a0:	7dfb      	ldrb	r3, [r7, #23]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d175      	bne.n	8006992 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80068ae:	f023 0302 	bic.w	r3, r3, #2
 80068b2:	f043 0202 	orr.w	r2, r3, #2
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80068ba:	4b3a      	ldr	r3, [pc, #232]	; (80069a4 <HAL_ADCEx_Calibration_Start+0x134>)
 80068bc:	681c      	ldr	r4, [r3, #0]
 80068be:	2002      	movs	r0, #2
 80068c0:	f7fd f87a 	bl	80039b8 <HAL_RCCEx_GetPeriphCLKFreq>
 80068c4:	4603      	mov	r3, r0
 80068c6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80068ca:	005b      	lsls	r3, r3, #1
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
 80068cc:	60fb      	str	r3, [r7, #12]
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );

    while(wait_loop_index != 0)
 80068ce:	e002      	b.n	80068d6 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	3b01      	subs	r3, #1
 80068d4:	60fb      	str	r3, [r7, #12]
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );

    while(wait_loop_index != 0)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1f9      	bne.n	80068d0 <HAL_ADCEx_Calibration_Start+0x60>
    {
      wait_loop_index--;
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fc5b 	bl	8007198 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	6812      	ldr	r2, [r2, #0]
 80068ea:	6892      	ldr	r2, [r2, #8]
 80068ec:	f042 0208 	orr.w	r2, r2, #8
 80068f0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80068f2:	f000 fd83 	bl	80073fc <HAL_GetTick>
 80068f6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80068f8:	e014      	b.n	8006924 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80068fa:	f000 fd7f 	bl	80073fc <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	2b0a      	cmp	r3, #10
 8006906:	d90d      	bls.n	8006924 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690c:	f023 0312 	bic.w	r3, r3, #18
 8006910:	f043 0210 	orr.w	r2, r3, #16
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e03b      	b.n	800699c <HAL_ADCEx_Calibration_Start+0x12c>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
    
    tickstart = HAL_GetTick();  

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f003 0308 	and.w	r3, r3, #8
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1e3      	bne.n	80068fa <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	6812      	ldr	r2, [r2, #0]
 800693a:	6892      	ldr	r2, [r2, #8]
 800693c:	f042 0204 	orr.w	r2, r2, #4
 8006940:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8006942:	f000 fd5b 	bl	80073fc <HAL_GetTick>
 8006946:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8006948:	e014      	b.n	8006974 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800694a:	f000 fd57 	bl	80073fc <HAL_GetTick>
 800694e:	4602      	mov	r2, r0
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	2b0a      	cmp	r3, #10
 8006956:	d90d      	bls.n	8006974 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695c:	f023 0312 	bic.w	r3, r3, #18
 8006960:	f043 0210 	orr.w	r2, r3, #16
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e013      	b.n	800699c <HAL_ADCEx_Calibration_Start+0x12c>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
    
    tickstart = HAL_GetTick();  

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f003 0304 	and.w	r3, r3, #4
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1e3      	bne.n	800694a <HAL_ADCEx_Calibration_Start+0xda>
        return HAL_ERROR;
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006986:	f023 0303 	bic.w	r3, r3, #3
 800698a:	f043 0201 	orr.w	r2, r3, #1
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800699a:	7dfb      	ldrb	r3, [r7, #23]
}
 800699c:	4618      	mov	r0, r3
 800699e:	371c      	adds	r7, #28
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd90      	pop	{r4, r7, pc}
 80069a4:	20000000 	.word	0x20000000

080069a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b08c      	sub	sp, #48	; 0x30
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80069b0:	2300      	movs	r3, #0
 80069b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint32_t tmp_cr1 = 0;
 80069b6:	2300      	movs	r3, #0
 80069b8:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t tmp_cr2 = 0;
 80069ba:	2300      	movs	r3, #0
 80069bc:	623b      	str	r3, [r7, #32]
  uint32_t tmp_sqr1 = 0;
 80069be:	2300      	movs	r3, #0
 80069c0:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check ADC handle */
  if(hadc == NULL)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d101      	bne.n	80069cc <HAL_ADC_Init+0x24>
  {
    return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e0db      	b.n	8006b84 <HAL_ADC_Init+0x1dc>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d109      	bne.n	80069e8 <HAL_ADC_Init+0x40>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f001 fb2e 	bl	8008044 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 fc27 	bl	800723c <ADC_ConversionStop_Disable>
 80069ee:	4603      	mov	r3, r0
 80069f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f8:	f003 0310 	and.w	r3, r3, #16
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f040 80b6 	bne.w	8006b6e <HAL_ADC_Init+0x1c6>
 8006a02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f040 80b1 	bne.w	8006b6e <HAL_ADC_Init+0x1c6>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a10:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006a14:	f023 0302 	bic.w	r3, r3, #2
 8006a18:	f043 0202 	orr.w	r2, r3, #2
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	69db      	ldr	r3, [r3, #28]
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8006a28:	431a      	orrs	r2, r3
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68d9      	ldr	r1, [r3, #12]
 8006a2e:	2302      	movs	r3, #2
 8006a30:	61fb      	str	r3, [r7, #28]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	fa93 f3a3 	rbit	r3, r3
 8006a38:	61bb      	str	r3, [r7, #24]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	fab3 f383 	clz	r3, r3
 8006a40:	fa01 f303 	lsl.w	r3, r1, r3
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8006a44:	4313      	orrs	r3, r2
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8006a46:	6a3a      	ldr	r2, [r7, #32]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	623b      	str	r3, [r7, #32]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a54:	d003      	beq.n	8006a5e <HAL_ADC_Init+0xb6>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d102      	bne.n	8006a64 <HAL_ADC_Init+0xbc>
 8006a5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a62:	e000      	b.n	8006a66 <HAL_ADC_Init+0xbe>
 8006a64:	2300      	movs	r3, #0
 8006a66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d123      	bne.n	8006abc <HAL_ADC_Init+0x114>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d113      	bne.n	8006aa4 <HAL_ADC_Init+0xfc>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	699b      	ldr	r3, [r3, #24]
 8006a80:	1e5a      	subs	r2, r3, #1
 8006a82:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006a86:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	fa93 f3a3 	rbit	r3, r3
 8006a8e:	613b      	str	r3, [r7, #16]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	fab3 f383 	clz	r3, r3
 8006a96:	409a      	lsls	r2, r3
 8006a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aa2:	e00b      	b.n	8006abc <HAL_ADC_Init+0x114>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa8:	f043 0220 	orr.w	r2, r3, #32
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab4:	f043 0201 	orr.w	r2, r3, #1
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	6812      	ldr	r2, [r2, #0]
 8006ac4:	6852      	ldr	r2, [r2, #4]
 8006ac6:	f422 4169 	bic.w	r1, r2, #59648	; 0xe900
 8006aca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006acc:	430a      	orrs	r2, r1
 8006ace:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6899      	ldr	r1, [r3, #8]
 8006ada:	4b2c      	ldr	r3, [pc, #176]	; (8006b8c <HAL_ADC_Init+0x1e4>)
 8006adc:	400b      	ands	r3, r1
 8006ade:	6a39      	ldr	r1, [r7, #32]
 8006ae0:	430b      	orrs	r3, r1
 8006ae2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aec:	d10f      	bne.n	8006b0e <HAL_ADC_Init+0x166>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	1e5a      	subs	r2, r3, #1
 8006af4:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
 8006af8:	60fb      	str	r3, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	fa93 f3a3 	rbit	r3, r3
 8006b00:	60bb      	str	r3, [r7, #8]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	fab3 f383 	clz	r3, r3
 8006b08:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0c:	627b      	str	r3, [r7, #36]	; 0x24
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	6812      	ldr	r2, [r2, #0]
 8006b16:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006b18:	f422 0170 	bic.w	r1, r2, #15728640	; 0xf00000
 8006b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b1e:	430a      	orrs	r2, r1
 8006b20:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	689a      	ldr	r2, [r3, #8]
 8006b28:	4b19      	ldr	r3, [pc, #100]	; (8006b90 <HAL_ADC_Init+0x1e8>)
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	6a3a      	ldr	r2, [r7, #32]
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d10b      	bne.n	8006b4a <HAL_ADC_Init+0x1a2>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3c:	f023 0303 	bic.w	r3, r3, #3
 8006b40:	f043 0201 	orr.w	r2, r3, #1
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	629a      	str	r2, [r3, #40]	; 0x28
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006b48:	e01a      	b.n	8006b80 <HAL_ADC_Init+0x1d8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4e:	f023 0312 	bic.w	r3, r3, #18
 8006b52:	f043 0210 	orr.w	r2, r3, #16
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5e:	f043 0201 	orr.w	r2, r3, #1
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006b6c:	e008      	b.n	8006b80 <HAL_ADC_Init+0x1d8>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b72:	f043 0210 	orr.w	r2, r3, #16
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006b80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3730      	adds	r7, #48	; 0x30
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	ffe1f7fd 	.word	0xffe1f7fd
 8006b90:	ff1f0efe 	.word	0xff1f0efe

08006b94 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d101      	bne.n	8006bae <HAL_ADC_Start+0x1a>
 8006baa:	2302      	movs	r3, #2
 8006bac:	e099      	b.n	8006ce2 <HAL_ADC_Start+0x14e>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 faee 	bl	8007198 <ADC_Enable>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8006bc0:	7bfb      	ldrb	r3, [r7, #15]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f040 8088 	bne.w	8006cd8 <HAL_ADC_Start+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bd0:	f023 0301 	bic.w	r3, r3, #1
 8006bd4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	4b42      	ldr	r3, [pc, #264]	; (8006cec <HAL_ADC_Start+0x158>)
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d105      	bne.n	8006bf2 <HAL_ADC_Start+0x5e>
 8006be6:	4b42      	ldr	r3, [pc, #264]	; (8006cf0 <HAL_ADC_Start+0x15c>)
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d116      	bne.n	8006c20 <HAL_ADC_Start+0x8c>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d008      	beq.n	8006c1e <HAL_ADC_Start+0x8a>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c10:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006c14:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006c1c:	e01e      	b.n	8006c5c <HAL_ADC_Start+0xc8>
 8006c1e:	e01d      	b.n	8006c5c <HAL_ADC_Start+0xc8>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c24:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	4b2f      	ldr	r3, [pc, #188]	; (8006cf0 <HAL_ADC_Start+0x15c>)
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d004      	beq.n	8006c40 <HAL_ADC_Start+0xac>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	4b2c      	ldr	r3, [pc, #176]	; (8006cec <HAL_ADC_Start+0x158>)
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d10d      	bne.n	8006c5c <HAL_ADC_Start+0xc8>
 8006c40:	4b2b      	ldr	r3, [pc, #172]	; (8006cf0 <HAL_ADC_Start+0x15c>)
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d007      	beq.n	8006c5c <HAL_ADC_Start+0xc8>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006c54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d006      	beq.n	8006c76 <HAL_ADC_Start+0xe2>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6c:	f023 0206 	bic.w	r2, r3, #6
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	62da      	str	r2, [r3, #44]	; 0x2c
 8006c74:	e002      	b.n	8006c7c <HAL_ADC_Start+0xe8>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f06f 0202 	mvn.w	r2, #2
 8006c8c:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006c98:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006c9c:	d113      	bne.n	8006cc6 <HAL_ADC_Start+0x132>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681a      	ldr	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8006ca2:	4b12      	ldr	r3, [pc, #72]	; (8006cec <HAL_ADC_Start+0x158>)
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d105      	bne.n	8006cb4 <HAL_ADC_Start+0x120>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8006ca8:	4b11      	ldr	r3, [pc, #68]	; (8006cf0 <HAL_ADC_Start+0x15c>)
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d108      	bne.n	8006cc6 <HAL_ADC_Start+0x132>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	6812      	ldr	r2, [r2, #0]
 8006cbc:	6892      	ldr	r2, [r2, #8]
 8006cbe:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8006cc2:	609a      	str	r2, [r3, #8]
 8006cc4:	e00c      	b.n	8006ce0 <HAL_ADC_Start+0x14c>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	6812      	ldr	r2, [r2, #0]
 8006cce:	6892      	ldr	r2, [r2, #8]
 8006cd0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006cd4:	609a      	str	r2, [r3, #8]
 8006cd6:	e003      	b.n	8006ce0 <HAL_ADC_Start+0x14c>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8006ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	40012800 	.word	0x40012800
 8006cf0:	40012400 	.word	0x40012400

08006cf4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d00:	2300      	movs	r3, #0
 8006d02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	4b66      	ldr	r3, [pc, #408]	; (8006ea4 <HAL_ADC_Start_DMA+0x1b0>)
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d004      	beq.n	8006d18 <HAL_ADC_Start_DMA+0x24>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	4b65      	ldr	r3, [pc, #404]	; (8006ea8 <HAL_ADC_Start_DMA+0x1b4>)
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d106      	bne.n	8006d26 <HAL_ADC_Start_DMA+0x32>
 8006d18:	4b62      	ldr	r3, [pc, #392]	; (8006ea4 <HAL_ADC_Start_DMA+0x1b0>)
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f040 80b7 	bne.w	8006e94 <HAL_ADC_Start_DMA+0x1a0>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d101      	bne.n	8006d34 <HAL_ADC_Start_DMA+0x40>
 8006d30:	2302      	movs	r3, #2
 8006d32:	e0b2      	b.n	8006e9a <HAL_ADC_Start_DMA+0x1a6>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f000 fa2b 	bl	8007198 <ADC_Enable>
 8006d42:	4603      	mov	r3, r0
 8006d44:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006d46:	7dfb      	ldrb	r3, [r7, #23]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f040 809e 	bne.w	8006e8a <HAL_ADC_Start_DMA+0x196>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d52:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006d56:	f023 0301 	bic.w	r3, r3, #1
 8006d5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	4b50      	ldr	r3, [pc, #320]	; (8006ea8 <HAL_ADC_Start_DMA+0x1b4>)
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d105      	bne.n	8006d78 <HAL_ADC_Start_DMA+0x84>
 8006d6c:	4b4d      	ldr	r3, [pc, #308]	; (8006ea4 <HAL_ADC_Start_DMA+0x1b0>)
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d116      	bne.n	8006da6 <HAL_ADC_Start_DMA+0xb2>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d008      	beq.n	8006da4 <HAL_ADC_Start_DMA+0xb0>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006d9a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	629a      	str	r2, [r3, #40]	; 0x28
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006da2:	e01e      	b.n	8006de2 <HAL_ADC_Start_DMA+0xee>
 8006da4:	e01d      	b.n	8006de2 <HAL_ADC_Start_DMA+0xee>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006daa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	4b3b      	ldr	r3, [pc, #236]	; (8006ea4 <HAL_ADC_Start_DMA+0x1b0>)
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d004      	beq.n	8006dc6 <HAL_ADC_Start_DMA+0xd2>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	4b39      	ldr	r3, [pc, #228]	; (8006ea8 <HAL_ADC_Start_DMA+0x1b4>)
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d10d      	bne.n	8006de2 <HAL_ADC_Start_DMA+0xee>
 8006dc6:	4b37      	ldr	r3, [pc, #220]	; (8006ea4 <HAL_ADC_Start_DMA+0x1b0>)
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d007      	beq.n	8006de2 <HAL_ADC_Start_DMA+0xee>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006dda:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d006      	beq.n	8006dfc <HAL_ADC_Start_DMA+0x108>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df2:	f023 0206 	bic.w	r2, r3, #6
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	62da      	str	r2, [r3, #44]	; 0x2c
 8006dfa:	e002      	b.n	8006e02 <HAL_ADC_Start_DMA+0x10e>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	4a27      	ldr	r2, [pc, #156]	; (8006eac <HAL_ADC_Start_DMA+0x1b8>)
 8006e10:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	4a26      	ldr	r2, [pc, #152]	; (8006eb0 <HAL_ADC_Start_DMA+0x1bc>)
 8006e18:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	4a25      	ldr	r2, [pc, #148]	; (8006eb4 <HAL_ADC_Start_DMA+0x1c0>)
 8006e20:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f06f 0202 	mvn.w	r2, #2
 8006e2a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	6812      	ldr	r2, [r2, #0]
 8006e34:	6892      	ldr	r2, [r2, #8]
 8006e36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e3a:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6a19      	ldr	r1, [r3, #32]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	334c      	adds	r3, #76	; 0x4c
 8006e46:	461a      	mov	r2, r3
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	4608      	mov	r0, r1
 8006e4c:	4611      	mov	r1, r2
 8006e4e:	461a      	mov	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f7ff f97f 	bl	8006154 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006e60:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006e64:	d108      	bne.n	8006e78 <HAL_ADC_Start_DMA+0x184>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	6812      	ldr	r2, [r2, #0]
 8006e6e:	6892      	ldr	r2, [r2, #8]
 8006e70:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8006e74:	609a      	str	r2, [r3, #8]
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006e76:	e00f      	b.n	8006e98 <HAL_ADC_Start_DMA+0x1a4>
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	6812      	ldr	r2, [r2, #0]
 8006e80:	6892      	ldr	r2, [r2, #8]
 8006e82:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006e86:	609a      	str	r2, [r3, #8]
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006e88:	e006      	b.n	8006e98 <HAL_ADC_Start_DMA+0x1a4>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006e92:	e001      	b.n	8006e98 <HAL_ADC_Start_DMA+0x1a4>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3718      	adds	r7, #24
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	40012400 	.word	0x40012400
 8006ea8:	40012800 	.word	0x40012800
 8006eac:	080072b1 	.word	0x080072b1
 8006eb0:	0800732d 	.word	0x0800732d
 8006eb4:	08007349 	.word	0x08007349

08006eb8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop

08006ecc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006ed4:	370c      	adds	r7, #12
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop

08006ee0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006ee8:	370c      	adds	r7, #12
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop

08006ef4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8006ef4:	b490      	push	{r4, r7}
 8006ef6:	b098      	sub	sp, #96	; 0x60
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006efe:	2300      	movs	r3, #0
 8006f00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  __IO uint32_t wait_loop_index = 0;
 8006f04:	2300      	movs	r3, #0
 8006f06:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d101      	bne.n	8006f16 <HAL_ADC_ConfigChannel+0x22>
 8006f12:	2302      	movs	r3, #2
 8006f14:	e134      	b.n	8007180 <HAL_ADC_ConfigChannel+0x28c>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	2b06      	cmp	r3, #6
 8006f24:	d82e      	bhi.n	8006f84 <HAL_ADC_ConfigChannel+0x90>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	6812      	ldr	r2, [r2, #0]
 8006f2e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8006f30:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8006f34:	65ba      	str	r2, [r7, #88]	; 0x58
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f38:	fa92 f2a2 	rbit	r2, r2
 8006f3c:	657a      	str	r2, [r7, #84]	; 0x54
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8006f3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f40:	fab2 f282 	clz	r2, r2
 8006f44:	6838      	ldr	r0, [r7, #0]
 8006f46:	6840      	ldr	r0, [r0, #4]
 8006f48:	3801      	subs	r0, #1
 8006f4a:	fb00 f202 	mul.w	r2, r0, r2
 8006f4e:	201f      	movs	r0, #31
 8006f50:	fa00 f202 	lsl.w	r2, r0, r2
 8006f54:	43d2      	mvns	r2, r2
 8006f56:	4011      	ands	r1, r2
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	6810      	ldr	r0, [r2, #0]
 8006f5c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8006f60:	653a      	str	r2, [r7, #80]	; 0x50
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006f64:	fa92 f2a2 	rbit	r2, r2
 8006f68:	64fa      	str	r2, [r7, #76]	; 0x4c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8006f6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f6c:	fab2 f282 	clz	r2, r2
 8006f70:	683c      	ldr	r4, [r7, #0]
 8006f72:	6864      	ldr	r4, [r4, #4]
 8006f74:	3c01      	subs	r4, #1
 8006f76:	fb04 f202 	mul.w	r2, r4, r2
 8006f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	635a      	str	r2, [r3, #52]	; 0x34
 8006f82:	e060      	b.n	8007046 <HAL_ADC_ConfigChannel+0x152>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	2b0c      	cmp	r3, #12
 8006f8a:	d82e      	bhi.n	8006fea <HAL_ADC_ConfigChannel+0xf6>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	6812      	ldr	r2, [r2, #0]
 8006f94:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006f96:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8006f9a:	64ba      	str	r2, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f9e:	fa92 f2a2 	rbit	r2, r2
 8006fa2:	647a      	str	r2, [r7, #68]	; 0x44
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8006fa4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fa6:	fab2 f282 	clz	r2, r2
 8006faa:	6838      	ldr	r0, [r7, #0]
 8006fac:	6840      	ldr	r0, [r0, #4]
 8006fae:	3807      	subs	r0, #7
 8006fb0:	fb00 f202 	mul.w	r2, r0, r2
 8006fb4:	201f      	movs	r0, #31
 8006fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8006fba:	43d2      	mvns	r2, r2
 8006fbc:	4011      	ands	r1, r2
 8006fbe:	683a      	ldr	r2, [r7, #0]
 8006fc0:	6810      	ldr	r0, [r2, #0]
 8006fc2:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8006fc6:	643a      	str	r2, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fca:	fa92 f2a2 	rbit	r2, r2
 8006fce:	63fa      	str	r2, [r7, #60]	; 0x3c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8006fd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006fd2:	fab2 f282 	clz	r2, r2
 8006fd6:	683c      	ldr	r4, [r7, #0]
 8006fd8:	6864      	ldr	r4, [r4, #4]
 8006fda:	3c07      	subs	r4, #7
 8006fdc:	fb04 f202 	mul.w	r2, r4, r2
 8006fe0:	fa00 f202 	lsl.w	r2, r0, r2
 8006fe4:	430a      	orrs	r2, r1
 8006fe6:	631a      	str	r2, [r3, #48]	; 0x30
 8006fe8:	e02d      	b.n	8007046 <HAL_ADC_ConfigChannel+0x152>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	6812      	ldr	r2, [r2, #0]
 8006ff2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006ff4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8006ff8:	63ba      	str	r2, [r7, #56]	; 0x38
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ffa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ffc:	fa92 f2a2 	rbit	r2, r2
 8007000:	637a      	str	r2, [r7, #52]	; 0x34
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8007002:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007004:	fab2 f282 	clz	r2, r2
 8007008:	6838      	ldr	r0, [r7, #0]
 800700a:	6840      	ldr	r0, [r0, #4]
 800700c:	380d      	subs	r0, #13
 800700e:	fb00 f202 	mul.w	r2, r0, r2
 8007012:	201f      	movs	r0, #31
 8007014:	fa00 f202 	lsl.w	r2, r0, r2
 8007018:	43d2      	mvns	r2, r2
 800701a:	4011      	ands	r1, r2
 800701c:	683a      	ldr	r2, [r7, #0]
 800701e:	6810      	ldr	r0, [r2, #0]
 8007020:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8007024:	633a      	str	r2, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007028:	fa92 f2a2 	rbit	r2, r2
 800702c:	62fa      	str	r2, [r7, #44]	; 0x2c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 800702e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007030:	fab2 f282 	clz	r2, r2
 8007034:	683c      	ldr	r4, [r7, #0]
 8007036:	6864      	ldr	r4, [r4, #4]
 8007038:	3c0d      	subs	r4, #13
 800703a:	fb04 f202 	mul.w	r2, r4, r2
 800703e:	fa00 f202 	lsl.w	r2, r0, r2
 8007042:	430a      	orrs	r2, r1
 8007044:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2b09      	cmp	r3, #9
 800704c:	d92c      	bls.n	80070a8 <HAL_ADC_ConfigChannel+0x1b4>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	6812      	ldr	r2, [r2, #0]
 8007056:	68d1      	ldr	r1, [r2, #12]
 8007058:	2238      	movs	r2, #56	; 0x38
 800705a:	62ba      	str	r2, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800705c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800705e:	fa92 f2a2 	rbit	r2, r2
 8007062:	627a      	str	r2, [r7, #36]	; 0x24
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8007064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007066:	fab2 f282 	clz	r2, r2
 800706a:	6838      	ldr	r0, [r7, #0]
 800706c:	6800      	ldr	r0, [r0, #0]
 800706e:	380a      	subs	r0, #10
 8007070:	fb00 f202 	mul.w	r2, r0, r2
 8007074:	2007      	movs	r0, #7
 8007076:	fa00 f202 	lsl.w	r2, r0, r2
 800707a:	43d2      	mvns	r2, r2
 800707c:	4011      	ands	r1, r2
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	6890      	ldr	r0, [r2, #8]
 8007082:	2238      	movs	r2, #56	; 0x38
 8007084:	623a      	str	r2, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007086:	6a3a      	ldr	r2, [r7, #32]
 8007088:	fa92 f2a2 	rbit	r2, r2
 800708c:	61fa      	str	r2, [r7, #28]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 800708e:	69fa      	ldr	r2, [r7, #28]
 8007090:	fab2 f282 	clz	r2, r2
 8007094:	683c      	ldr	r4, [r7, #0]
 8007096:	6824      	ldr	r4, [r4, #0]
 8007098:	3c0a      	subs	r4, #10
 800709a:	fb04 f202 	mul.w	r2, r4, r2
 800709e:	fa00 f202 	lsl.w	r2, r0, r2
 80070a2:	430a      	orrs	r2, r1
 80070a4:	60da      	str	r2, [r3, #12]
 80070a6:	e029      	b.n	80070fc <HAL_ADC_ConfigChannel+0x208>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	6812      	ldr	r2, [r2, #0]
 80070b0:	6911      	ldr	r1, [r2, #16]
 80070b2:	2238      	movs	r2, #56	; 0x38
 80070b4:	61ba      	str	r2, [r7, #24]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070b6:	69ba      	ldr	r2, [r7, #24]
 80070b8:	fa92 f2a2 	rbit	r2, r2
 80070bc:	617a      	str	r2, [r7, #20]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80070be:	697a      	ldr	r2, [r7, #20]
 80070c0:	fab2 f282 	clz	r2, r2
 80070c4:	6838      	ldr	r0, [r7, #0]
 80070c6:	6800      	ldr	r0, [r0, #0]
 80070c8:	fb00 f202 	mul.w	r2, r0, r2
 80070cc:	2007      	movs	r0, #7
 80070ce:	fa00 f202 	lsl.w	r2, r0, r2
 80070d2:	43d2      	mvns	r2, r2
 80070d4:	4011      	ands	r1, r2
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	6890      	ldr	r0, [r2, #8]
 80070da:	2238      	movs	r2, #56	; 0x38
 80070dc:	613a      	str	r2, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	fa92 f2a2 	rbit	r2, r2
 80070e4:	60fa      	str	r2, [r7, #12]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	fab2 f282 	clz	r2, r2
 80070ec:	683c      	ldr	r4, [r7, #0]
 80070ee:	6824      	ldr	r4, [r4, #0]
 80070f0:	fb04 f202 	mul.w	r2, r4, r2
 80070f4:	fa00 f202 	lsl.w	r2, r0, r2
 80070f8:	430a      	orrs	r2, r1
 80070fa:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2b10      	cmp	r3, #16
 8007102:	d003      	beq.n	800710c <HAL_ADC_ConfigChannel+0x218>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007108:	2b11      	cmp	r3, #17
 800710a:	d133      	bne.n	8007174 <HAL_ADC_ConfigChannel+0x280>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	4b1e      	ldr	r3, [pc, #120]	; (800718c <HAL_ADC_ConfigChannel+0x298>)
 8007112:	429a      	cmp	r2, r3
 8007114:	d125      	bne.n	8007162 <HAL_ADC_ConfigChannel+0x26e>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d127      	bne.n	8007174 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	6812      	ldr	r2, [r2, #0]
 800712c:	6892      	ldr	r2, [r2, #8]
 800712e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007132:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b10      	cmp	r3, #16
 800713a:	d11b      	bne.n	8007174 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800713c:	4b14      	ldr	r3, [pc, #80]	; (8007190 <HAL_ADC_ConfigChannel+0x29c>)
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	4b14      	ldr	r3, [pc, #80]	; (8007194 <HAL_ADC_ConfigChannel+0x2a0>)
 8007142:	fba3 1302 	umull	r1, r3, r3, r2
 8007146:	0c9a      	lsrs	r2, r3, #18
 8007148:	4613      	mov	r3, r2
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	4413      	add	r3, r2
 800714e:	005b      	lsls	r3, r3, #1
 8007150:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8007152:	e002      	b.n	800715a <HAL_ADC_ConfigChannel+0x266>
          {
            wait_loop_index--;
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	3b01      	subs	r3, #1
 8007158:	60bb      	str	r3, [r7, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
          while(wait_loop_index != 0)
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1f9      	bne.n	8007154 <HAL_ADC_ConfigChannel+0x260>
 8007160:	e008      	b.n	8007174 <HAL_ADC_ConfigChannel+0x280>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007166:	f043 0220 	orr.w	r2, r3, #32
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800717c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007180:	4618      	mov	r0, r3
 8007182:	3760      	adds	r7, #96	; 0x60
 8007184:	46bd      	mov	sp, r7
 8007186:	bc90      	pop	{r4, r7}
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	40012400 	.word	0x40012400
 8007190:	20000000 	.word	0x20000000
 8007194:	431bde83 	.word	0x431bde83

08007198 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80071a0:	2300      	movs	r3, #0
 80071a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 80071a4:	2300      	movs	r3, #0
 80071a6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f003 0301 	and.w	r3, r3, #1
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d139      	bne.n	800722a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	6812      	ldr	r2, [r2, #0]
 80071be:	6892      	ldr	r2, [r2, #8]
 80071c0:	f042 0201 	orr.w	r2, r2, #1
 80071c4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80071c6:	4b1b      	ldr	r3, [pc, #108]	; (8007234 <ADC_Enable+0x9c>)
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	4b1b      	ldr	r3, [pc, #108]	; (8007238 <ADC_Enable+0xa0>)
 80071cc:	fba3 1302 	umull	r1, r3, r3, r2
 80071d0:	0c9b      	lsrs	r3, r3, #18
 80071d2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80071d4:	e002      	b.n	80071dc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	3b01      	subs	r3, #1
 80071da:	60bb      	str	r3, [r7, #8]
    __HAL_ADC_ENABLE(hadc);
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
    while(wait_loop_index != 0)
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1f9      	bne.n	80071d6 <ADC_Enable+0x3e>
    {
      wait_loop_index--;
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80071e2:	f000 f90b 	bl	80073fc <HAL_GetTick>
 80071e6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80071e8:	e018      	b.n	800721c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80071ea:	f000 f907 	bl	80073fc <HAL_GetTick>
 80071ee:	4602      	mov	r2, r0
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d911      	bls.n	800721c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fc:	f043 0210 	orr.w	r2, r3, #16
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007208:	f043 0201 	orr.w	r2, r3, #1
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e007      	b.n	800722c <ADC_Enable+0x94>
    
    /* Get tick count */
    tickstart = HAL_GetTick();

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f003 0301 	and.w	r3, r3, #1
 8007226:	2b00      	cmp	r3, #0
 8007228:	d0df      	beq.n	80071ea <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	20000000 	.word	0x20000000
 8007238:	431bde83 	.word	0x431bde83

0800723c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007244:	2300      	movs	r3, #0
 8007246:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	2b00      	cmp	r3, #0
 8007254:	d027      	beq.n	80072a6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	6812      	ldr	r2, [r2, #0]
 800725e:	6892      	ldr	r2, [r2, #8]
 8007260:	f022 0201 	bic.w	r2, r2, #1
 8007264:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007266:	f000 f8c9 	bl	80073fc <HAL_GetTick>
 800726a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800726c:	e014      	b.n	8007298 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800726e:	f000 f8c5 	bl	80073fc <HAL_GetTick>
 8007272:	4602      	mov	r2, r0
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	2b02      	cmp	r3, #2
 800727a:	d90d      	bls.n	8007298 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007280:	f043 0210 	orr.w	r2, r3, #16
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728c:	f043 0201 	orr.w	r2, r3, #1
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e007      	b.n	80072a8 <ADC_ConversionStop_Disable+0x6c>
     
    /* Get tick count */
    tickstart = HAL_GetTick();
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f003 0301 	and.w	r3, r3, #1
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1e3      	bne.n	800726e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072bc:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d127      	bne.n	800731a <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80072e0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80072e4:	d115      	bne.n	8007312 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	68db      	ldr	r3, [r3, #12]
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d111      	bne.n	8007312 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d105      	bne.n	8007312 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730a:	f043 0201 	orr.w	r2, r3, #1
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f7ff fdd0 	bl	8006eb8 <HAL_ADC_ConvCpltCallback>
 8007318:	e004      	b.n	8007324 <ADC_DMAConvCplt+0x74>
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	4798      	blx	r3
  }
}
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop

0800732c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007338:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800733a:	68f8      	ldr	r0, [r7, #12]
 800733c:	f7ff fdc6 	bl	8006ecc <HAL_ADC_ConvHalfCpltCallback>
}
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop

08007348 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007354:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007366:	f043 0204 	orr.w	r2, r3, #4
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f7ff fdb6 	bl	8006ee0 <HAL_ADC_ErrorCallback>
}
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop

0800737c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007380:	4b08      	ldr	r3, [pc, #32]	; (80073a4 <HAL_Init+0x28>)
 8007382:	4a08      	ldr	r2, [pc, #32]	; (80073a4 <HAL_Init+0x28>)
 8007384:	6812      	ldr	r2, [r2, #0]
 8007386:	f042 0210 	orr.w	r2, r2, #16
 800738a:	601a      	str	r2, [r3, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800738c:	2003      	movs	r0, #3
 800738e:	f7ff fa07 	bl	80067a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007392:	2000      	movs	r0, #0
 8007394:	f000 f808 	bl	80073a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007398:	f000 fe2c 	bl	8007ff4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	40022000 	.word	0x40022000

080073a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80073b0:	f7fd ff5a 	bl	8005268 <HAL_RCC_GetHCLKFreq>
 80073b4:	4602      	mov	r2, r0
 80073b6:	4b09      	ldr	r3, [pc, #36]	; (80073dc <HAL_InitTick+0x34>)
 80073b8:	fba3 1302 	umull	r1, r3, r3, r2
 80073bc:	099b      	lsrs	r3, r3, #6
 80073be:	4618      	mov	r0, r3
 80073c0:	f7ff fa22 	bl	8006808 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80073c4:	f04f 30ff 	mov.w	r0, #4294967295
 80073c8:	6879      	ldr	r1, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f7ff f9f2 	bl	80067b4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	10624dd3 	.word	0x10624dd3

080073e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80073e0:	b480      	push	{r7}
 80073e2:	af00      	add	r7, sp, #0
  uwTick++;
 80073e4:	4b04      	ldr	r3, [pc, #16]	; (80073f8 <HAL_IncTick+0x18>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	1c5a      	adds	r2, r3, #1
 80073ea:	4b03      	ldr	r3, [pc, #12]	; (80073f8 <HAL_IncTick+0x18>)
 80073ec:	601a      	str	r2, [r3, #0]
}
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	2000002c 	.word	0x2000002c

080073fc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80073fc:	b480      	push	{r7}
 80073fe:	af00      	add	r7, sp, #0
  return uwTick;
 8007400:	4b03      	ldr	r3, [pc, #12]	; (8007410 <HAL_GetTick+0x14>)
 8007402:	681b      	ldr	r3, [r3, #0]
}
 8007404:	4618      	mov	r0, r3
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	2000002c 	.word	0x2000002c

08007414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800741c:	2300      	movs	r3, #0
 800741e:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 8007420:	f7ff ffec 	bl	80073fc <HAL_GetTick>
 8007424:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8007426:	bf00      	nop
 8007428:	f7ff ffe8 	bl	80073fc <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	1ad2      	subs	r2, r2, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	429a      	cmp	r2, r3
 8007436:	d3f7      	bcc.n	8007428 <HAL_Delay+0x14>
  {
  }
}
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop

08007440 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007440:	b480      	push	{r7}
 8007442:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007444:	4b15      	ldr	r3, [pc, #84]	; (800749c <SystemInit+0x5c>)
 8007446:	4a15      	ldr	r2, [pc, #84]	; (800749c <SystemInit+0x5c>)
 8007448:	6812      	ldr	r2, [r2, #0]
 800744a:	f042 0201 	orr.w	r2, r2, #1
 800744e:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8007450:	4a12      	ldr	r2, [pc, #72]	; (800749c <SystemInit+0x5c>)
 8007452:	4b12      	ldr	r3, [pc, #72]	; (800749c <SystemInit+0x5c>)
 8007454:	6859      	ldr	r1, [r3, #4]
 8007456:	4b12      	ldr	r3, [pc, #72]	; (80074a0 <SystemInit+0x60>)
 8007458:	400b      	ands	r3, r1
 800745a:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800745c:	4a0f      	ldr	r2, [pc, #60]	; (800749c <SystemInit+0x5c>)
 800745e:	4b0f      	ldr	r3, [pc, #60]	; (800749c <SystemInit+0x5c>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800746a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800746c:	4b0b      	ldr	r3, [pc, #44]	; (800749c <SystemInit+0x5c>)
 800746e:	4a0b      	ldr	r2, [pc, #44]	; (800749c <SystemInit+0x5c>)
 8007470:	6812      	ldr	r2, [r2, #0]
 8007472:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007476:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8007478:	4b08      	ldr	r3, [pc, #32]	; (800749c <SystemInit+0x5c>)
 800747a:	4a08      	ldr	r2, [pc, #32]	; (800749c <SystemInit+0x5c>)
 800747c:	6852      	ldr	r2, [r2, #4]
 800747e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8007482:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8007484:	4b05      	ldr	r3, [pc, #20]	; (800749c <SystemInit+0x5c>)
 8007486:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800748a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800748c:	4b05      	ldr	r3, [pc, #20]	; (80074a4 <SystemInit+0x64>)
 800748e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007492:	609a      	str	r2, [r3, #8]
#endif 
}
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	40021000 	.word	0x40021000
 80074a0:	f8ff0000 	.word	0xf8ff0000
 80074a4:	e000ed00 	.word	0xe000ed00

080074a8 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 80074a8:	b480      	push	{r7}
 80074aa:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80074ac:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80074b0:	4a05      	ldr	r2, [pc, #20]	; (80074c8 <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80074b2:	4b05      	ldr	r3, [pc, #20]	; (80074c8 <NVIC_SystemReset+0x20>)
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80074ba:	4b04      	ldr	r3, [pc, #16]	; (80074cc <NVIC_SystemReset+0x24>)
 80074bc:	430b      	orrs	r3, r1
 80074be:	60d3      	str	r3, [r2, #12]
 80074c0:	f3bf 8f4f 	dsb	sy

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80074c4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */
  while(1) { __NOP(); }                                             /* wait until reset */
 80074c6:	e7fd      	b.n	80074c4 <NVIC_SystemReset+0x1c>
 80074c8:	e000ed00 	.word	0xe000ed00
 80074cc:	05fa0004 	.word	0x05fa0004

080074d0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
if(HAL_GetTick()%100==0 && Status!=STOP_STATUS && Transmit==1) HAL_UART_Transmit_DMA(&huart3,(uint8_t*)TxBuffer,34);
 80074d4:	f7ff ff92 	bl	80073fc <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	4b0e      	ldr	r3, [pc, #56]	; (8007514 <SysTick_Handler+0x44>)
 80074dc:	fba3 1302 	umull	r1, r3, r3, r2
 80074e0:	095b      	lsrs	r3, r3, #5
 80074e2:	2164      	movs	r1, #100	; 0x64
 80074e4:	fb01 f303 	mul.w	r3, r1, r3
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10d      	bne.n	800750a <SysTick_Handler+0x3a>
 80074ee:	4b0a      	ldr	r3, [pc, #40]	; (8007518 <SysTick_Handler+0x48>)
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d009      	beq.n	800750a <SysTick_Handler+0x3a>
 80074f6:	4b09      	ldr	r3, [pc, #36]	; (800751c <SysTick_Handler+0x4c>)
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d104      	bne.n	800750a <SysTick_Handler+0x3a>
 8007500:	4807      	ldr	r0, [pc, #28]	; (8007520 <SysTick_Handler+0x50>)
 8007502:	4908      	ldr	r1, [pc, #32]	; (8007524 <SysTick_Handler+0x54>)
 8007504:	2222      	movs	r2, #34	; 0x22
 8007506:	f7fa f8f5 	bl	80016f4 <HAL_UART_Transmit_DMA>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800750a:	f7ff ff69 	bl	80073e0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800750e:	f7ff f9a3 	bl	8006858 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007512:	bd80      	pop	{r7, pc}
 8007514:	51eb851f 	.word	0x51eb851f
 8007518:	20000060 	.word	0x20000060
 800751c:	20000088 	.word	0x20000088
 8007520:	200002e8 	.word	0x200002e8
 8007524:	200000c0 	.word	0x200000c0

08007528 <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel1 global interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	uint8_t i;
//	counter++;

		for(i=0;i<6;i++)
 800752e:	2300      	movs	r3, #0
 8007530:	71fb      	strb	r3, [r7, #7]
 8007532:	e02c      	b.n	800758e <DMA1_Channel1_IRQHandler+0x66>
		{
			test=adcData[i];
 8007534:	79fa      	ldrb	r2, [r7, #7]
 8007536:	4b1a      	ldr	r3, [pc, #104]	; (80075a0 <DMA1_Channel1_IRQHandler+0x78>)
 8007538:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800753c:	b29b      	uxth	r3, r3
 800753e:	461a      	mov	r2, r3
 8007540:	4b18      	ldr	r3, [pc, #96]	; (80075a4 <DMA1_Channel1_IRQHandler+0x7c>)
 8007542:	601a      	str	r2, [r3, #0]
			if(test>Max3[i]) Max3[i]=test;
 8007544:	79fa      	ldrb	r2, [r7, #7]
 8007546:	4b18      	ldr	r3, [pc, #96]	; (80075a8 <DMA1_Channel1_IRQHandler+0x80>)
 8007548:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800754c:	b29b      	uxth	r3, r3
 800754e:	461a      	mov	r2, r3
 8007550:	4b14      	ldr	r3, [pc, #80]	; (80075a4 <DMA1_Channel1_IRQHandler+0x7c>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	429a      	cmp	r2, r3
 8007556:	d206      	bcs.n	8007566 <DMA1_Channel1_IRQHandler+0x3e>
 8007558:	79fa      	ldrb	r2, [r7, #7]
 800755a:	4b12      	ldr	r3, [pc, #72]	; (80075a4 <DMA1_Channel1_IRQHandler+0x7c>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	b299      	uxth	r1, r3
 8007560:	4b11      	ldr	r3, [pc, #68]	; (80075a8 <DMA1_Channel1_IRQHandler+0x80>)
 8007562:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			if(test<Min3[i]) Min3[i]=test;
 8007566:	79fa      	ldrb	r2, [r7, #7]
 8007568:	4b10      	ldr	r3, [pc, #64]	; (80075ac <DMA1_Channel1_IRQHandler+0x84>)
 800756a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800756e:	b29b      	uxth	r3, r3
 8007570:	461a      	mov	r2, r3
 8007572:	4b0c      	ldr	r3, [pc, #48]	; (80075a4 <DMA1_Channel1_IRQHandler+0x7c>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	429a      	cmp	r2, r3
 8007578:	d906      	bls.n	8007588 <DMA1_Channel1_IRQHandler+0x60>
 800757a:	79fa      	ldrb	r2, [r7, #7]
 800757c:	4b09      	ldr	r3, [pc, #36]	; (80075a4 <DMA1_Channel1_IRQHandler+0x7c>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	b299      	uxth	r1, r3
 8007582:	4b0a      	ldr	r3, [pc, #40]	; (80075ac <DMA1_Channel1_IRQHandler+0x84>)
 8007584:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	uint8_t i;
//	counter++;

		for(i=0;i<6;i++)
 8007588:	79fb      	ldrb	r3, [r7, #7]
 800758a:	3301      	adds	r3, #1
 800758c:	71fb      	strb	r3, [r7, #7]
 800758e:	79fb      	ldrb	r3, [r7, #7]
 8007590:	2b05      	cmp	r3, #5
 8007592:	d9cf      	bls.n	8007534 <DMA1_Channel1_IRQHandler+0xc>
			if(test>Max3[i]) Max3[i]=test;
			if(test<Min3[i]) Min3[i]=test;
		}

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007594:	4806      	ldr	r0, [pc, #24]	; (80075b0 <DMA1_Channel1_IRQHandler+0x88>)
 8007596:	f7fe fe27 	bl	80061e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	20000108 	.word	0x20000108
 80075a4:	20000090 	.word	0x20000090
 80075a8:	200000ac 	.word	0x200000ac
 80075ac:	2000007c 	.word	0x2000007c
 80075b0:	20000410 	.word	0x20000410

080075b4 <DMA1_Channel2_IRQHandler>:

/**
* @brief This function handles DMA1 channel2 global interrupt.
*/
void DMA1_Channel2_IRQHandler(void)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
	int32_t pom;

	TxBuffer[0]='#';
 80075ba:	4b78      	ldr	r3, [pc, #480]	; (800779c <DMA1_Channel2_IRQHandler+0x1e8>)
 80075bc:	2223      	movs	r2, #35	; 0x23
 80075be:	701a      	strb	r2, [r3, #0]
	for (i=0;i<8;i++)
 80075c0:	4b77      	ldr	r3, [pc, #476]	; (80077a0 <DMA1_Channel2_IRQHandler+0x1ec>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	701a      	strb	r2, [r3, #0]
 80075c6:	e0d8      	b.n	800777a <DMA1_Channel2_IRQHandler+0x1c6>
	{
		if (i<6) pom=SensorTab[i][indexer]-dys0[i];
 80075c8:	4b75      	ldr	r3, [pc, #468]	; (80077a0 <DMA1_Channel2_IRQHandler+0x1ec>)
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	b25b      	sxtb	r3, r3
 80075ce:	2b05      	cmp	r3, #5
 80075d0:	dc15      	bgt.n	80075fe <DMA1_Channel2_IRQHandler+0x4a>
 80075d2:	4b73      	ldr	r3, [pc, #460]	; (80077a0 <DMA1_Channel2_IRQHandler+0x1ec>)
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	b25a      	sxtb	r2, r3
 80075d8:	4b72      	ldr	r3, [pc, #456]	; (80077a4 <DMA1_Channel2_IRQHandler+0x1f0>)
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	b258      	sxtb	r0, r3
 80075de:	4972      	ldr	r1, [pc, #456]	; (80077a8 <DMA1_Channel2_IRQHandler+0x1f4>)
 80075e0:	4613      	mov	r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4413      	add	r3, r2
 80075e6:	4403      	add	r3, r0
 80075e8:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80075ec:	4b6c      	ldr	r3, [pc, #432]	; (80077a0 <DMA1_Channel2_IRQHandler+0x1ec>)
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	b259      	sxtb	r1, r3
 80075f2:	4b6e      	ldr	r3, [pc, #440]	; (80077ac <DMA1_Channel2_IRQHandler+0x1f8>)
 80075f4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	607b      	str	r3, [r7, #4]
		if(i==6) pom=angle/1000;
 80075fe:	4b68      	ldr	r3, [pc, #416]	; (80077a0 <DMA1_Channel2_IRQHandler+0x1ec>)
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	b25b      	sxtb	r3, r3
 8007604:	2b06      	cmp	r3, #6
 8007606:	d108      	bne.n	800761a <DMA1_Channel2_IRQHandler+0x66>
 8007608:	4b69      	ldr	r3, [pc, #420]	; (80077b0 <DMA1_Channel2_IRQHandler+0x1fc>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a69      	ldr	r2, [pc, #420]	; (80077b4 <DMA1_Channel2_IRQHandler+0x200>)
 800760e:	fb82 0203 	smull	r0, r2, r2, r3
 8007612:	1192      	asrs	r2, r2, #6
 8007614:	17db      	asrs	r3, r3, #31
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	607b      	str	r3, [r7, #4]
		if(i==7) pom=distance/1000;
 800761a:	4b61      	ldr	r3, [pc, #388]	; (80077a0 <DMA1_Channel2_IRQHandler+0x1ec>)
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	b25b      	sxtb	r3, r3
 8007620:	2b07      	cmp	r3, #7
 8007622:	d108      	bne.n	8007636 <DMA1_Channel2_IRQHandler+0x82>
 8007624:	4b64      	ldr	r3, [pc, #400]	; (80077b8 <DMA1_Channel2_IRQHandler+0x204>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a62      	ldr	r2, [pc, #392]	; (80077b4 <DMA1_Channel2_IRQHandler+0x200>)
 800762a:	fb82 1203 	smull	r1, r2, r2, r3
 800762e:	1192      	asrs	r2, r2, #6
 8007630:	17db      	asrs	r3, r3, #31
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	607b      	str	r3, [r7, #4]
		if (pom>0)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	dd4a      	ble.n	80076d2 <DMA1_Channel2_IRQHandler+0x11e>
		{
			TxBuffer[i*4+1]='+';
 800763c:	4b58      	ldr	r3, [pc, #352]	; (80077a0 <DMA1_Channel2_IRQHandler+0x1ec>)
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	b25b      	sxtb	r3, r3
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	3301      	adds	r3, #1
 8007646:	4a55      	ldr	r2, [pc, #340]	; (800779c <DMA1_Channel2_IRQHandler+0x1e8>)
 8007648:	212b      	movs	r1, #43	; 0x2b
 800764a:	54d1      	strb	r1, [r2, r3]
			TxBuffer[i*4+2]=(uint8_t)( pom/100+48);
 800764c:	4b54      	ldr	r3, [pc, #336]	; (80077a0 <DMA1_Channel2_IRQHandler+0x1ec>)
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	b25b      	sxtb	r3, r3
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	1c9a      	adds	r2, r3, #2
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4958      	ldr	r1, [pc, #352]	; (80077bc <DMA1_Channel2_IRQHandler+0x208>)
 800765a:	fb81 0103 	smull	r0, r1, r1, r3
 800765e:	1149      	asrs	r1, r1, #5
 8007660:	17db      	asrs	r3, r3, #31
 8007662:	1acb      	subs	r3, r1, r3
 8007664:	b2db      	uxtb	r3, r3
 8007666:	3330      	adds	r3, #48	; 0x30
 8007668:	b2d9      	uxtb	r1, r3
 800766a:	4b4c      	ldr	r3, [pc, #304]	; (800779c <DMA1_Channel2_IRQHandler+0x1e8>)
 800766c:	5499      	strb	r1, [r3, r2]
			TxBuffer[i*4+3]=(uint8_t)((pom%100)/10+48);
 800766e:	4b4c      	ldr	r3, [pc, #304]	; (80077a0 <DMA1_Channel2_IRQHandler+0x1ec>)
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	b25b      	sxtb	r3, r3
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	1cd9      	adds	r1, r3, #3
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	4b50      	ldr	r3, [pc, #320]	; (80077bc <DMA1_Channel2_IRQHandler+0x208>)
 800767c:	fb83 0302 	smull	r0, r3, r3, r2
 8007680:	1158      	asrs	r0, r3, #5
 8007682:	17d3      	asrs	r3, r2, #31
 8007684:	1ac3      	subs	r3, r0, r3
 8007686:	2064      	movs	r0, #100	; 0x64
 8007688:	fb00 f303 	mul.w	r3, r0, r3
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	4a4c      	ldr	r2, [pc, #304]	; (80077c0 <DMA1_Channel2_IRQHandler+0x20c>)
 8007690:	fb82 0203 	smull	r0, r2, r2, r3
 8007694:	1092      	asrs	r2, r2, #2
 8007696:	17db      	asrs	r3, r3, #31
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	b2db      	uxtb	r3, r3
 800769c:	3330      	adds	r3, #48	; 0x30
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	4b3e      	ldr	r3, [pc, #248]	; (800779c <DMA1_Channel2_IRQHandler+0x1e8>)
 80076a2:	545a      	strb	r2, [r3, r1]
			TxBuffer[i*4+4]=(uint8_t)( pom%10+48);
 80076a4:	4b3e      	ldr	r3, [pc, #248]	; (80077a0 <DMA1_Channel2_IRQHandler+0x1ec>)
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	b25b      	sxtb	r3, r3
 80076aa:	3301      	adds	r3, #1
 80076ac:	0098      	lsls	r0, r3, #2
 80076ae:	6879      	ldr	r1, [r7, #4]
 80076b0:	4b43      	ldr	r3, [pc, #268]	; (80077c0 <DMA1_Channel2_IRQHandler+0x20c>)
 80076b2:	fb83 2301 	smull	r2, r3, r3, r1
 80076b6:	109a      	asrs	r2, r3, #2
 80076b8:	17cb      	asrs	r3, r1, #31
 80076ba:	1ad2      	subs	r2, r2, r3
 80076bc:	4613      	mov	r3, r2
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	4413      	add	r3, r2
 80076c2:	005b      	lsls	r3, r3, #1
 80076c4:	1aca      	subs	r2, r1, r3
 80076c6:	b2d3      	uxtb	r3, r2
 80076c8:	3330      	adds	r3, #48	; 0x30
 80076ca:	b2da      	uxtb	r2, r3
 80076cc:	4b33      	ldr	r3, [pc, #204]	; (800779c <DMA1_Channel2_IRQHandler+0x1e8>)
 80076ce:	541a      	strb	r2, [r3, r0]
 80076d0:	e04c      	b.n	800776c <DMA1_Channel2_IRQHandler+0x1b8>
		}
		else
		{
			TxBuffer[i*4+1]='-';
 80076d2:	4b33      	ldr	r3, [pc, #204]	; (80077a0 <DMA1_Channel2_IRQHandler+0x1ec>)
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	b25b      	sxtb	r3, r3
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	3301      	adds	r3, #1
 80076dc:	4a2f      	ldr	r2, [pc, #188]	; (800779c <DMA1_Channel2_IRQHandler+0x1e8>)
 80076de:	212d      	movs	r1, #45	; 0x2d
 80076e0:	54d1      	strb	r1, [r2, r3]
			TxBuffer[i*4+2]=(uint8_t)( (  pom*(-1) )/100+48);
 80076e2:	4b2f      	ldr	r3, [pc, #188]	; (80077a0 <DMA1_Channel2_IRQHandler+0x1ec>)
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	b25b      	sxtb	r3, r3
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	1c9a      	adds	r2, r3, #2
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	425b      	negs	r3, r3
 80076f0:	4932      	ldr	r1, [pc, #200]	; (80077bc <DMA1_Channel2_IRQHandler+0x208>)
 80076f2:	fb81 0103 	smull	r0, r1, r1, r3
 80076f6:	1149      	asrs	r1, r1, #5
 80076f8:	17db      	asrs	r3, r3, #31
 80076fa:	1acb      	subs	r3, r1, r3
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	3330      	adds	r3, #48	; 0x30
 8007700:	b2d9      	uxtb	r1, r3
 8007702:	4b26      	ldr	r3, [pc, #152]	; (800779c <DMA1_Channel2_IRQHandler+0x1e8>)
 8007704:	5499      	strb	r1, [r3, r2]
			TxBuffer[i*4+3]=(uint8_t)( ( (pom*(-1) )%100)/10+48);
 8007706:	4b26      	ldr	r3, [pc, #152]	; (80077a0 <DMA1_Channel2_IRQHandler+0x1ec>)
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	b25b      	sxtb	r3, r3
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	1cd9      	adds	r1, r3, #3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	425a      	negs	r2, r3
 8007714:	4b29      	ldr	r3, [pc, #164]	; (80077bc <DMA1_Channel2_IRQHandler+0x208>)
 8007716:	fb83 0302 	smull	r0, r3, r3, r2
 800771a:	1158      	asrs	r0, r3, #5
 800771c:	17d3      	asrs	r3, r2, #31
 800771e:	1ac3      	subs	r3, r0, r3
 8007720:	2064      	movs	r0, #100	; 0x64
 8007722:	fb00 f303 	mul.w	r3, r0, r3
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	4a25      	ldr	r2, [pc, #148]	; (80077c0 <DMA1_Channel2_IRQHandler+0x20c>)
 800772a:	fb82 0203 	smull	r0, r2, r2, r3
 800772e:	1092      	asrs	r2, r2, #2
 8007730:	17db      	asrs	r3, r3, #31
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	b2db      	uxtb	r3, r3
 8007736:	3330      	adds	r3, #48	; 0x30
 8007738:	b2da      	uxtb	r2, r3
 800773a:	4b18      	ldr	r3, [pc, #96]	; (800779c <DMA1_Channel2_IRQHandler+0x1e8>)
 800773c:	545a      	strb	r2, [r3, r1]
			TxBuffer[i*4+4]=(uint8_t)( (  pom*(-1))%10+48);
 800773e:	4b18      	ldr	r3, [pc, #96]	; (80077a0 <DMA1_Channel2_IRQHandler+0x1ec>)
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	b25b      	sxtb	r3, r3
 8007744:	3301      	adds	r3, #1
 8007746:	0098      	lsls	r0, r3, #2
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4259      	negs	r1, r3
 800774c:	4b1c      	ldr	r3, [pc, #112]	; (80077c0 <DMA1_Channel2_IRQHandler+0x20c>)
 800774e:	fb83 2301 	smull	r2, r3, r3, r1
 8007752:	109a      	asrs	r2, r3, #2
 8007754:	17cb      	asrs	r3, r1, #31
 8007756:	1ad2      	subs	r2, r2, r3
 8007758:	4613      	mov	r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4413      	add	r3, r2
 800775e:	005b      	lsls	r3, r3, #1
 8007760:	1aca      	subs	r2, r1, r3
 8007762:	b2d3      	uxtb	r3, r2
 8007764:	3330      	adds	r3, #48	; 0x30
 8007766:	b2da      	uxtb	r2, r3
 8007768:	4b0c      	ldr	r3, [pc, #48]	; (800779c <DMA1_Channel2_IRQHandler+0x1e8>)
 800776a:	541a      	strb	r2, [r3, r0]
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
	int32_t pom;

	TxBuffer[0]='#';
	for (i=0;i<8;i++)
 800776c:	4b0c      	ldr	r3, [pc, #48]	; (80077a0 <DMA1_Channel2_IRQHandler+0x1ec>)
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	b2db      	uxtb	r3, r3
 8007772:	3301      	adds	r3, #1
 8007774:	b2da      	uxtb	r2, r3
 8007776:	4b0a      	ldr	r3, [pc, #40]	; (80077a0 <DMA1_Channel2_IRQHandler+0x1ec>)
 8007778:	701a      	strb	r2, [r3, #0]
 800777a:	4b09      	ldr	r3, [pc, #36]	; (80077a0 <DMA1_Channel2_IRQHandler+0x1ec>)
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	b25b      	sxtb	r3, r3
 8007780:	2b07      	cmp	r3, #7
 8007782:	f77f af21 	ble.w	80075c8 <DMA1_Channel2_IRQHandler+0x14>
			TxBuffer[i*4+2]=(uint8_t)( (  pom*(-1) )/100+48);
			TxBuffer[i*4+3]=(uint8_t)( ( (pom*(-1) )%100)/10+48);
			TxBuffer[i*4+4]=(uint8_t)( (  pom*(-1))%10+48);
		}
	}
	TxBuffer[33]='~';
 8007786:	4b05      	ldr	r3, [pc, #20]	; (800779c <DMA1_Channel2_IRQHandler+0x1e8>)
 8007788:	227e      	movs	r2, #126	; 0x7e
 800778a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800778e:	480d      	ldr	r0, [pc, #52]	; (80077c4 <DMA1_Channel2_IRQHandler+0x210>)
 8007790:	f7fe fd2a 	bl	80061e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	200000c0 	.word	0x200000c0
 80077a0:	2000040d 	.word	0x2000040d
 80077a4:	20000074 	.word	0x20000074
 80077a8:	20000498 	.word	0x20000498
 80077ac:	20000050 	.word	0x20000050
 80077b0:	20000064 	.word	0x20000064
 80077b4:	10624dd3 	.word	0x10624dd3
 80077b8:	20000068 	.word	0x20000068
 80077bc:	51eb851f 	.word	0x51eb851f
 80077c0:	66666667 	.word	0x66666667
 80077c4:	20000364 	.word	0x20000364

080077c8 <DMA1_Channel3_IRQHandler>:

/**
* @brief This function handles DMA1 channel3 global interrupt.
*/
void DMA1_Channel3_IRQHandler(void)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
	static int8_t tmp_tryb=-1;

	if(RxBuffer[0]=='d')	//Drive
 80077cc:	4b2b      	ldr	r3, [pc, #172]	; (800787c <DMA1_Channel3_IRQHandler+0xb4>)
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b64      	cmp	r3, #100	; 0x64
 80077d4:	d10c      	bne.n	80077f0 <DMA1_Channel3_IRQHandler+0x28>
	{
		Status=DRIVE_STATUS;
 80077d6:	4b2a      	ldr	r3, [pc, #168]	; (8007880 <DMA1_Channel3_IRQHandler+0xb8>)
 80077d8:	2202      	movs	r2, #2
 80077da:	701a      	strb	r2, [r3, #0]
		Transmit=1;
 80077dc:	4b29      	ldr	r3, [pc, #164]	; (8007884 <DMA1_Channel3_IRQHandler+0xbc>)
 80077de:	2201      	movs	r2, #1
 80077e0:	701a      	strb	r2, [r3, #0]
		tryb=tmp_tryb;
 80077e2:	4b29      	ldr	r3, [pc, #164]	; (8007888 <DMA1_Channel3_IRQHandler+0xc0>)
 80077e4:	781a      	ldrb	r2, [r3, #0]
 80077e6:	4b29      	ldr	r3, [pc, #164]	; (800788c <DMA1_Channel3_IRQHandler+0xc4>)
 80077e8:	701a      	strb	r2, [r3, #0]
		tmp_tryb=-1;
 80077ea:	4b27      	ldr	r3, [pc, #156]	; (8007888 <DMA1_Channel3_IRQHandler+0xc0>)
 80077ec:	22ff      	movs	r2, #255	; 0xff
 80077ee:	701a      	strb	r2, [r3, #0]
	}
	if(RxBuffer[0]=='p')	//Pause
 80077f0:	4b22      	ldr	r3, [pc, #136]	; (800787c <DMA1_Channel3_IRQHandler+0xb4>)
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b70      	cmp	r3, #112	; 0x70
 80077f8:	d112      	bne.n	8007820 <DMA1_Channel3_IRQHandler+0x58>
	{
		Status=PAUSE_STATUS;
 80077fa:	4b21      	ldr	r3, [pc, #132]	; (8007880 <DMA1_Channel3_IRQHandler+0xb8>)
 80077fc:	2201      	movs	r2, #1
 80077fe:	701a      	strb	r2, [r3, #0]
		Transmit=1;
 8007800:	4b20      	ldr	r3, [pc, #128]	; (8007884 <DMA1_Channel3_IRQHandler+0xbc>)
 8007802:	2201      	movs	r2, #1
 8007804:	701a      	strb	r2, [r3, #0]
		tmp_tryb=tryb;
 8007806:	4b21      	ldr	r3, [pc, #132]	; (800788c <DMA1_Channel3_IRQHandler+0xc4>)
 8007808:	781a      	ldrb	r2, [r3, #0]
 800780a:	4b1f      	ldr	r3, [pc, #124]	; (8007888 <DMA1_Channel3_IRQHandler+0xc0>)
 800780c:	701a      	strb	r2, [r3, #0]
		tryb=0;
 800780e:	4b1f      	ldr	r3, [pc, #124]	; (800788c <DMA1_Channel3_IRQHandler+0xc4>)
 8007810:	2200      	movs	r2, #0
 8007812:	701a      	strb	r2, [r3, #0]
		TIM1->CCR1=0;
 8007814:	4b1e      	ldr	r3, [pc, #120]	; (8007890 <DMA1_Channel3_IRQHandler+0xc8>)
 8007816:	2200      	movs	r2, #0
 8007818:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2=0;
 800781a:	4b1d      	ldr	r3, [pc, #116]	; (8007890 <DMA1_Channel3_IRQHandler+0xc8>)
 800781c:	2200      	movs	r2, #0
 800781e:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if(RxBuffer[0]=='r')	//Reset
 8007820:	4b16      	ldr	r3, [pc, #88]	; (800787c <DMA1_Channel3_IRQHandler+0xb4>)
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b72      	cmp	r3, #114	; 0x72
 8007828:	d101      	bne.n	800782e <DMA1_Channel3_IRQHandler+0x66>
	{
		NVIC_SystemReset();
 800782a:	f7ff fe3d 	bl	80074a8 <NVIC_SystemReset>
	}
	if(RxBuffer[0]=='P')
 800782e:	4b13      	ldr	r3, [pc, #76]	; (800787c <DMA1_Channel3_IRQHandler+0xb4>)
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	b2db      	uxtb	r3, r3
 8007834:	2b50      	cmp	r3, #80	; 0x50
 8007836:	d109      	bne.n	800784c <DMA1_Channel3_IRQHandler+0x84>
	{
		tryb=1;
 8007838:	4b14      	ldr	r3, [pc, #80]	; (800788c <DMA1_Channel3_IRQHandler+0xc4>)
 800783a:	2201      	movs	r2, #1
 800783c:	701a      	strb	r2, [r3, #0]
		drive(VEL);
 800783e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007842:	f7f8 fd67 	bl	8000314 <drive>
		tryb=0;
 8007846:	4b11      	ldr	r3, [pc, #68]	; (800788c <DMA1_Channel3_IRQHandler+0xc4>)
 8007848:	2200      	movs	r2, #0
 800784a:	701a      	strb	r2, [r3, #0]
	}
	if(RxBuffer[0]=='L') rotary(VELR,-95000);
 800784c:	4b0b      	ldr	r3, [pc, #44]	; (800787c <DMA1_Channel3_IRQHandler+0xb4>)
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b4c      	cmp	r3, #76	; 0x4c
 8007854:	d104      	bne.n	8007860 <DMA1_Channel3_IRQHandler+0x98>
 8007856:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800785a:	490e      	ldr	r1, [pc, #56]	; (8007894 <DMA1_Channel3_IRQHandler+0xcc>)
 800785c:	f7f8 fc76 	bl	800014c <rotary>
	if(RxBuffer[0]=='R') rotary(VELR,90000);
 8007860:	4b06      	ldr	r3, [pc, #24]	; (800787c <DMA1_Channel3_IRQHandler+0xb4>)
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	b2db      	uxtb	r3, r3
 8007866:	2b52      	cmp	r3, #82	; 0x52
 8007868:	d104      	bne.n	8007874 <DMA1_Channel3_IRQHandler+0xac>
 800786a:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800786e:	490a      	ldr	r1, [pc, #40]	; (8007898 <DMA1_Channel3_IRQHandler+0xd0>)
 8007870:	f7f8 fc6c 	bl	800014c <rotary>
  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8007874:	4809      	ldr	r0, [pc, #36]	; (800789c <DMA1_Channel3_IRQHandler+0xd4>)
 8007876:	f7fe fcb7 	bl	80061e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800787a:	bd80      	pop	{r7, pc}
 800787c:	200000b8 	.word	0x200000b8
 8007880:	20000060 	.word	0x20000060
 8007884:	20000088 	.word	0x20000088
 8007888:	20000004 	.word	0x20000004
 800788c:	20000075 	.word	0x20000075
 8007890:	40012c00 	.word	0x40012c00
 8007894:	fffe8ce8 	.word	0xfffe8ce8
 8007898:	00015f90 	.word	0x00015f90
 800789c:	200002b0 	.word	0x200002b0

080078a0 <TIM4_IRQHandler>:

/**
* @brief This function handles TIM4 global interrupt.
*/
void TIM4_IRQHandler(void)
{
 80078a0:	b598      	push	{r3, r4, r7, lr}
 80078a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	static uint8_t count=0;
	static int32_t rate[3]={0,0,0},prev_rate=0,tmp_rate[2],prev_vel=0;

	count++;
 80078a4:	4b57      	ldr	r3, [pc, #348]	; (8007a04 <TIM4_IRQHandler+0x164>)
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	3301      	adds	r3, #1
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	4b55      	ldr	r3, [pc, #340]	; (8007a04 <TIM4_IRQHandler+0x164>)
 80078ae:	701a      	strb	r2, [r3, #0]
	indexer=count%5;
 80078b0:	4b54      	ldr	r3, [pc, #336]	; (8007a04 <TIM4_IRQHandler+0x164>)
 80078b2:	781a      	ldrb	r2, [r3, #0]
 80078b4:	4b54      	ldr	r3, [pc, #336]	; (8007a08 <TIM4_IRQHandler+0x168>)
 80078b6:	fba3 0302 	umull	r0, r3, r3, r2
 80078ba:	0899      	lsrs	r1, r3, #2
 80078bc:	460b      	mov	r3, r1
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	440b      	add	r3, r1
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	b2da      	uxtb	r2, r3
 80078c8:	4b50      	ldr	r3, [pc, #320]	; (8007a0c <TIM4_IRQHandler+0x16c>)
 80078ca:	701a      	strb	r2, [r3, #0]
	if(count%2==0)
 80078cc:	4b4d      	ldr	r3, [pc, #308]	; (8007a04 <TIM4_IRQHandler+0x164>)
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f040 8086 	bne.w	80079e8 <TIM4_IRQHandler+0x148>
		{
			HAL_GPIO_WritePin(Sensor2_GPIO_Port,Sensor2_Pin,0);
 80078dc:	484c      	ldr	r0, [pc, #304]	; (8007a10 <TIM4_IRQHandler+0x170>)
 80078de:	2180      	movs	r1, #128	; 0x80
 80078e0:	2200      	movs	r2, #0
 80078e2:	f7fe fbb1 	bl	8006048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Sensor1_GPIO_Port,Sensor1_Pin,1);
 80078e6:	484a      	ldr	r0, [pc, #296]	; (8007a10 <TIM4_IRQHandler+0x170>)
 80078e8:	2140      	movs	r1, #64	; 0x40
 80078ea:	2201      	movs	r2, #1
 80078ec:	f7fe fbac 	bl	8006048 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(Sensor3_GPIO_Port,Sensor3_Pin,1);

			for(i=0;i<6;i++)
 80078f0:	4b48      	ldr	r3, [pc, #288]	; (8007a14 <TIM4_IRQHandler+0x174>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	701a      	strb	r2, [r3, #0]
 80078f6:	e071      	b.n	80079dc <TIM4_IRQHandler+0x13c>
			{
				if(i==1||i==2||i==5) MinMax[i][0]=Max3[i];
 80078f8:	4b46      	ldr	r3, [pc, #280]	; (8007a14 <TIM4_IRQHandler+0x174>)
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	b25b      	sxtb	r3, r3
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d009      	beq.n	8007916 <TIM4_IRQHandler+0x76>
 8007902:	4b44      	ldr	r3, [pc, #272]	; (8007a14 <TIM4_IRQHandler+0x174>)
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	b25b      	sxtb	r3, r3
 8007908:	2b02      	cmp	r3, #2
 800790a:	d004      	beq.n	8007916 <TIM4_IRQHandler+0x76>
 800790c:	4b41      	ldr	r3, [pc, #260]	; (8007a14 <TIM4_IRQHandler+0x174>)
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	b25b      	sxtb	r3, r3
 8007912:	2b05      	cmp	r3, #5
 8007914:	d10c      	bne.n	8007930 <TIM4_IRQHandler+0x90>
 8007916:	4b3f      	ldr	r3, [pc, #252]	; (8007a14 <TIM4_IRQHandler+0x174>)
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	b25a      	sxtb	r2, r3
 800791c:	4b3d      	ldr	r3, [pc, #244]	; (8007a14 <TIM4_IRQHandler+0x174>)
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	b259      	sxtb	r1, r3
 8007922:	4b3d      	ldr	r3, [pc, #244]	; (8007a18 <TIM4_IRQHandler+0x178>)
 8007924:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8007928:	b299      	uxth	r1, r3
 800792a:	4b3c      	ldr	r3, [pc, #240]	; (8007a1c <TIM4_IRQHandler+0x17c>)
 800792c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
				if(i==0||i==3||i==4) MinMax[i][1]=Min3[i];
 8007930:	4b38      	ldr	r3, [pc, #224]	; (8007a14 <TIM4_IRQHandler+0x174>)
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d009      	beq.n	800794c <TIM4_IRQHandler+0xac>
 8007938:	4b36      	ldr	r3, [pc, #216]	; (8007a14 <TIM4_IRQHandler+0x174>)
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	b25b      	sxtb	r3, r3
 800793e:	2b03      	cmp	r3, #3
 8007940:	d004      	beq.n	800794c <TIM4_IRQHandler+0xac>
 8007942:	4b34      	ldr	r3, [pc, #208]	; (8007a14 <TIM4_IRQHandler+0x174>)
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	b25b      	sxtb	r3, r3
 8007948:	2b04      	cmp	r3, #4
 800794a:	d10d      	bne.n	8007968 <TIM4_IRQHandler+0xc8>
 800794c:	4b31      	ldr	r3, [pc, #196]	; (8007a14 <TIM4_IRQHandler+0x174>)
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	b25b      	sxtb	r3, r3
 8007952:	4a30      	ldr	r2, [pc, #192]	; (8007a14 <TIM4_IRQHandler+0x174>)
 8007954:	7812      	ldrb	r2, [r2, #0]
 8007956:	b251      	sxtb	r1, r2
 8007958:	4a31      	ldr	r2, [pc, #196]	; (8007a20 <TIM4_IRQHandler+0x180>)
 800795a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800795e:	b292      	uxth	r2, r2
 8007960:	492e      	ldr	r1, [pc, #184]	; (8007a1c <TIM4_IRQHandler+0x17c>)
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	440b      	add	r3, r1
 8007966:	805a      	strh	r2, [r3, #2]
				SensorTab[i][indexer]=(MinMax[i][0]-MinMax[i][1])/10;
 8007968:	4b2a      	ldr	r3, [pc, #168]	; (8007a14 <TIM4_IRQHandler+0x174>)
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	b25a      	sxtb	r2, r3
 800796e:	4b27      	ldr	r3, [pc, #156]	; (8007a0c <TIM4_IRQHandler+0x16c>)
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	b25c      	sxtb	r4, r3
 8007974:	4b27      	ldr	r3, [pc, #156]	; (8007a14 <TIM4_IRQHandler+0x174>)
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	b259      	sxtb	r1, r3
 800797a:	4b28      	ldr	r3, [pc, #160]	; (8007a1c <TIM4_IRQHandler+0x17c>)
 800797c:	f833 3021 	ldrh.w	r3, [r3, r1, lsl #2]
 8007980:	b29b      	uxth	r3, r3
 8007982:	4619      	mov	r1, r3
 8007984:	4b23      	ldr	r3, [pc, #140]	; (8007a14 <TIM4_IRQHandler+0x174>)
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	b25b      	sxtb	r3, r3
 800798a:	4824      	ldr	r0, [pc, #144]	; (8007a1c <TIM4_IRQHandler+0x17c>)
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	4403      	add	r3, r0
 8007990:	885b      	ldrh	r3, [r3, #2]
 8007992:	b29b      	uxth	r3, r3
 8007994:	1acb      	subs	r3, r1, r3
 8007996:	4923      	ldr	r1, [pc, #140]	; (8007a24 <TIM4_IRQHandler+0x184>)
 8007998:	fb81 0103 	smull	r0, r1, r1, r3
 800799c:	1089      	asrs	r1, r1, #2
 800799e:	17db      	asrs	r3, r3, #31
 80079a0:	1ac8      	subs	r0, r1, r3
 80079a2:	4921      	ldr	r1, [pc, #132]	; (8007a28 <TIM4_IRQHandler+0x188>)
 80079a4:	4613      	mov	r3, r2
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	4413      	add	r3, r2
 80079aa:	4423      	add	r3, r4
 80079ac:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
				Min3[i]=4000;
 80079b0:	4b18      	ldr	r3, [pc, #96]	; (8007a14 <TIM4_IRQHandler+0x174>)
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	b25a      	sxtb	r2, r3
 80079b6:	4b1a      	ldr	r3, [pc, #104]	; (8007a20 <TIM4_IRQHandler+0x180>)
 80079b8:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80079bc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				Max3[i]=0;
 80079c0:	4b14      	ldr	r3, [pc, #80]	; (8007a14 <TIM4_IRQHandler+0x174>)
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	b25a      	sxtb	r2, r3
 80079c6:	4b14      	ldr	r3, [pc, #80]	; (8007a18 <TIM4_IRQHandler+0x178>)
 80079c8:	2100      	movs	r1, #0
 80079ca:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		{
			HAL_GPIO_WritePin(Sensor2_GPIO_Port,Sensor2_Pin,0);
			HAL_GPIO_WritePin(Sensor1_GPIO_Port,Sensor1_Pin,1);
//			HAL_GPIO_WritePin(Sensor3_GPIO_Port,Sensor3_Pin,1);

			for(i=0;i<6;i++)
 80079ce:	4b11      	ldr	r3, [pc, #68]	; (8007a14 <TIM4_IRQHandler+0x174>)
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	3301      	adds	r3, #1
 80079d6:	b2da      	uxtb	r2, r3
 80079d8:	4b0e      	ldr	r3, [pc, #56]	; (8007a14 <TIM4_IRQHandler+0x174>)
 80079da:	701a      	strb	r2, [r3, #0]
 80079dc:	4b0d      	ldr	r3, [pc, #52]	; (8007a14 <TIM4_IRQHandler+0x174>)
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	b25b      	sxtb	r3, r3
 80079e2:	2b05      	cmp	r3, #5
 80079e4:	dd88      	ble.n	80078f8 <TIM4_IRQHandler+0x58>
 80079e6:	e098      	b.n	8007b1a <TIM4_IRQHandler+0x27a>
				Max3[i]=0;
			}
		}
		else
		{
			HAL_GPIO_WritePin(Sensor1_GPIO_Port,Sensor1_Pin,0);
 80079e8:	4809      	ldr	r0, [pc, #36]	; (8007a10 <TIM4_IRQHandler+0x170>)
 80079ea:	2140      	movs	r1, #64	; 0x40
 80079ec:	2200      	movs	r2, #0
 80079ee:	f7fe fb2b 	bl	8006048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Sensor2_GPIO_Port,Sensor2_Pin,1);
 80079f2:	4807      	ldr	r0, [pc, #28]	; (8007a10 <TIM4_IRQHandler+0x170>)
 80079f4:	2180      	movs	r1, #128	; 0x80
 80079f6:	2201      	movs	r2, #1
 80079f8:	f7fe fb26 	bl	8006048 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(Sensor3_GPIO_Port,Sensor3_Pin,0);

			for(i=0;i<6;i++)
 80079fc:	4b05      	ldr	r3, [pc, #20]	; (8007a14 <TIM4_IRQHandler+0x174>)
 80079fe:	2200      	movs	r2, #0
 8007a00:	701a      	strb	r2, [r3, #0]
 8007a02:	e085      	b.n	8007b10 <TIM4_IRQHandler+0x270>
 8007a04:	20000030 	.word	0x20000030
 8007a08:	cccccccd 	.word	0xcccccccd
 8007a0c:	20000074 	.word	0x20000074
 8007a10:	40010c00 	.word	0x40010c00
 8007a14:	2000040d 	.word	0x2000040d
 8007a18:	200000ac 	.word	0x200000ac
 8007a1c:	20000094 	.word	0x20000094
 8007a20:	2000007c 	.word	0x2000007c
 8007a24:	66666667 	.word	0x66666667
 8007a28:	20000498 	.word	0x20000498
			{
				if(i==0||i==3||i==4) MinMax[i][0]=Max3[i];
 8007a2c:	4b9a      	ldr	r3, [pc, #616]	; (8007c98 <TIM4_IRQHandler+0x3f8>)
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d009      	beq.n	8007a48 <TIM4_IRQHandler+0x1a8>
 8007a34:	4b98      	ldr	r3, [pc, #608]	; (8007c98 <TIM4_IRQHandler+0x3f8>)
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	b25b      	sxtb	r3, r3
 8007a3a:	2b03      	cmp	r3, #3
 8007a3c:	d004      	beq.n	8007a48 <TIM4_IRQHandler+0x1a8>
 8007a3e:	4b96      	ldr	r3, [pc, #600]	; (8007c98 <TIM4_IRQHandler+0x3f8>)
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	b25b      	sxtb	r3, r3
 8007a44:	2b04      	cmp	r3, #4
 8007a46:	d10c      	bne.n	8007a62 <TIM4_IRQHandler+0x1c2>
 8007a48:	4b93      	ldr	r3, [pc, #588]	; (8007c98 <TIM4_IRQHandler+0x3f8>)
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	b25a      	sxtb	r2, r3
 8007a4e:	4b92      	ldr	r3, [pc, #584]	; (8007c98 <TIM4_IRQHandler+0x3f8>)
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	b259      	sxtb	r1, r3
 8007a54:	4b91      	ldr	r3, [pc, #580]	; (8007c9c <TIM4_IRQHandler+0x3fc>)
 8007a56:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8007a5a:	b299      	uxth	r1, r3
 8007a5c:	4b90      	ldr	r3, [pc, #576]	; (8007ca0 <TIM4_IRQHandler+0x400>)
 8007a5e:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
				if(i==1||i==2||i==5) MinMax[i][1]=Min3[i];
 8007a62:	4b8d      	ldr	r3, [pc, #564]	; (8007c98 <TIM4_IRQHandler+0x3f8>)
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	b25b      	sxtb	r3, r3
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d009      	beq.n	8007a80 <TIM4_IRQHandler+0x1e0>
 8007a6c:	4b8a      	ldr	r3, [pc, #552]	; (8007c98 <TIM4_IRQHandler+0x3f8>)
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	b25b      	sxtb	r3, r3
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d004      	beq.n	8007a80 <TIM4_IRQHandler+0x1e0>
 8007a76:	4b88      	ldr	r3, [pc, #544]	; (8007c98 <TIM4_IRQHandler+0x3f8>)
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	b25b      	sxtb	r3, r3
 8007a7c:	2b05      	cmp	r3, #5
 8007a7e:	d10d      	bne.n	8007a9c <TIM4_IRQHandler+0x1fc>
 8007a80:	4b85      	ldr	r3, [pc, #532]	; (8007c98 <TIM4_IRQHandler+0x3f8>)
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	b25b      	sxtb	r3, r3
 8007a86:	4a84      	ldr	r2, [pc, #528]	; (8007c98 <TIM4_IRQHandler+0x3f8>)
 8007a88:	7812      	ldrb	r2, [r2, #0]
 8007a8a:	b251      	sxtb	r1, r2
 8007a8c:	4a85      	ldr	r2, [pc, #532]	; (8007ca4 <TIM4_IRQHandler+0x404>)
 8007a8e:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8007a92:	b292      	uxth	r2, r2
 8007a94:	4982      	ldr	r1, [pc, #520]	; (8007ca0 <TIM4_IRQHandler+0x400>)
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	440b      	add	r3, r1
 8007a9a:	805a      	strh	r2, [r3, #2]
				SensorTab[i][indexer]=(MinMax[i][0]-MinMax[i][1])/10;
 8007a9c:	4b7e      	ldr	r3, [pc, #504]	; (8007c98 <TIM4_IRQHandler+0x3f8>)
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	b25a      	sxtb	r2, r3
 8007aa2:	4b81      	ldr	r3, [pc, #516]	; (8007ca8 <TIM4_IRQHandler+0x408>)
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	b25c      	sxtb	r4, r3
 8007aa8:	4b7b      	ldr	r3, [pc, #492]	; (8007c98 <TIM4_IRQHandler+0x3f8>)
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	b259      	sxtb	r1, r3
 8007aae:	4b7c      	ldr	r3, [pc, #496]	; (8007ca0 <TIM4_IRQHandler+0x400>)
 8007ab0:	f833 3021 	ldrh.w	r3, [r3, r1, lsl #2]
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	4b77      	ldr	r3, [pc, #476]	; (8007c98 <TIM4_IRQHandler+0x3f8>)
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	b25b      	sxtb	r3, r3
 8007abe:	4878      	ldr	r0, [pc, #480]	; (8007ca0 <TIM4_IRQHandler+0x400>)
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4403      	add	r3, r0
 8007ac4:	885b      	ldrh	r3, [r3, #2]
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	1acb      	subs	r3, r1, r3
 8007aca:	4978      	ldr	r1, [pc, #480]	; (8007cac <TIM4_IRQHandler+0x40c>)
 8007acc:	fb81 0103 	smull	r0, r1, r1, r3
 8007ad0:	1089      	asrs	r1, r1, #2
 8007ad2:	17db      	asrs	r3, r3, #31
 8007ad4:	1ac8      	subs	r0, r1, r3
 8007ad6:	4976      	ldr	r1, [pc, #472]	; (8007cb0 <TIM4_IRQHandler+0x410>)
 8007ad8:	4613      	mov	r3, r2
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	4413      	add	r3, r2
 8007ade:	4423      	add	r3, r4
 8007ae0:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
				Min3[i]=4000;
 8007ae4:	4b6c      	ldr	r3, [pc, #432]	; (8007c98 <TIM4_IRQHandler+0x3f8>)
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	b25a      	sxtb	r2, r3
 8007aea:	4b6e      	ldr	r3, [pc, #440]	; (8007ca4 <TIM4_IRQHandler+0x404>)
 8007aec:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8007af0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				Max3[i]=0;
 8007af4:	4b68      	ldr	r3, [pc, #416]	; (8007c98 <TIM4_IRQHandler+0x3f8>)
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	b25a      	sxtb	r2, r3
 8007afa:	4b68      	ldr	r3, [pc, #416]	; (8007c9c <TIM4_IRQHandler+0x3fc>)
 8007afc:	2100      	movs	r1, #0
 8007afe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		{
			HAL_GPIO_WritePin(Sensor1_GPIO_Port,Sensor1_Pin,0);
			HAL_GPIO_WritePin(Sensor2_GPIO_Port,Sensor2_Pin,1);
//			HAL_GPIO_WritePin(Sensor3_GPIO_Port,Sensor3_Pin,0);

			for(i=0;i<6;i++)
 8007b02:	4b65      	ldr	r3, [pc, #404]	; (8007c98 <TIM4_IRQHandler+0x3f8>)
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	3301      	adds	r3, #1
 8007b0a:	b2da      	uxtb	r2, r3
 8007b0c:	4b62      	ldr	r3, [pc, #392]	; (8007c98 <TIM4_IRQHandler+0x3f8>)
 8007b0e:	701a      	strb	r2, [r3, #0]
 8007b10:	4b61      	ldr	r3, [pc, #388]	; (8007c98 <TIM4_IRQHandler+0x3f8>)
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	b25b      	sxtb	r3, r3
 8007b16:	2b05      	cmp	r3, #5
 8007b18:	dd88      	ble.n	8007a2c <TIM4_IRQHandler+0x18c>
				Min3[i]=4000;
				Max3[i]=0;
			}
		}

	test3[0]=SensorTab[0][indexer];
 8007b1a:	4b63      	ldr	r3, [pc, #396]	; (8007ca8 <TIM4_IRQHandler+0x408>)
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	b25a      	sxtb	r2, r3
 8007b20:	4b63      	ldr	r3, [pc, #396]	; (8007cb0 <TIM4_IRQHandler+0x410>)
 8007b22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007b26:	4b63      	ldr	r3, [pc, #396]	; (8007cb4 <TIM4_IRQHandler+0x414>)
 8007b28:	601a      	str	r2, [r3, #0]

	/******************************************* Measurement rotational speed ***********************************/
	if(count%4==3)
 8007b2a:	4b63      	ldr	r3, [pc, #396]	; (8007cb8 <TIM4_IRQHandler+0x418>)
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	f003 0303 	and.w	r3, r3, #3
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	2b03      	cmp	r3, #3
 8007b36:	d12b      	bne.n	8007b90 <TIM4_IRQHandler+0x2f0>
	{
		tmp_rate[0]=TIM2->CNT;
 8007b38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3e:	461a      	mov	r2, r3
 8007b40:	4b5e      	ldr	r3, [pc, #376]	; (8007cbc <TIM4_IRQHandler+0x41c>)
 8007b42:	601a      	str	r2, [r3, #0]
		tmp_rate[1]=TIM3->CNT;
 8007b44:	4b5e      	ldr	r3, [pc, #376]	; (8007cc0 <TIM4_IRQHandler+0x420>)
 8007b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b48:	461a      	mov	r2, r3
 8007b4a:	4b5c      	ldr	r3, [pc, #368]	; (8007cbc <TIM4_IRQHandler+0x41c>)
 8007b4c:	605a      	str	r2, [r3, #4]
		rate[0]=( tmp_rate[0]-tmp_rate[1] )*13; //64/4
 8007b4e:	4b5b      	ldr	r3, [pc, #364]	; (8007cbc <TIM4_IRQHandler+0x41c>)
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	4b5a      	ldr	r3, [pc, #360]	; (8007cbc <TIM4_IRQHandler+0x41c>)
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	1ad2      	subs	r2, r2, r3
 8007b58:	4613      	mov	r3, r2
 8007b5a:	005b      	lsls	r3, r3, #1
 8007b5c:	4413      	add	r3, r2
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	441a      	add	r2, r3
 8007b62:	4b58      	ldr	r3, [pc, #352]	; (8007cc4 <TIM4_IRQHandler+0x424>)
 8007b64:	601a      	str	r2, [r3, #0]
		lin_vel=((tmp_rate[1]-16384)+(tmp_rate[0]-16384))*8;// 17/2
 8007b66:	4b55      	ldr	r3, [pc, #340]	; (8007cbc <TIM4_IRQHandler+0x41c>)
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f5a3 4280 	sub.w	r2, r3, #16384	; 0x4000
 8007b6e:	4b53      	ldr	r3, [pc, #332]	; (8007cbc <TIM4_IRQHandler+0x41c>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8007b76:	4413      	add	r3, r2
 8007b78:	00da      	lsls	r2, r3, #3
 8007b7a:	4b53      	ldr	r3, [pc, #332]	; (8007cc8 <TIM4_IRQHandler+0x428>)
 8007b7c:	601a      	str	r2, [r3, #0]
		TIM3->CNT=16384;
 8007b7e:	4b50      	ldr	r3, [pc, #320]	; (8007cc0 <TIM4_IRQHandler+0x420>)
 8007b80:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007b84:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2->CNT=16384;
 8007b86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007b8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	rate[1]=((Read_AXIS(0x2C)-dryf)*700)/10000;
 8007b90:	202c      	movs	r0, #44	; 0x2c
 8007b92:	f7f9 fc27 	bl	80013e4 <Read_AXIS>
 8007b96:	4603      	mov	r3, r0
 8007b98:	461a      	mov	r2, r3
 8007b9a:	4b4c      	ldr	r3, [pc, #304]	; (8007ccc <TIM4_IRQHandler+0x42c>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8007ba4:	fb02 f303 	mul.w	r3, r2, r3
 8007ba8:	4a49      	ldr	r2, [pc, #292]	; (8007cd0 <TIM4_IRQHandler+0x430>)
 8007baa:	fb82 1203 	smull	r1, r2, r2, r3
 8007bae:	1312      	asrs	r2, r2, #12
 8007bb0:	17db      	asrs	r3, r3, #31
 8007bb2:	1ad2      	subs	r2, r2, r3
 8007bb4:	4b43      	ldr	r3, [pc, #268]	; (8007cc4 <TIM4_IRQHandler+0x424>)
 8007bb6:	605a      	str	r2, [r3, #4]
	rot_vel=(rate[1]+rate[1])/2;
 8007bb8:	4b42      	ldr	r3, [pc, #264]	; (8007cc4 <TIM4_IRQHandler+0x424>)
 8007bba:	685a      	ldr	r2, [r3, #4]
 8007bbc:	4b41      	ldr	r3, [pc, #260]	; (8007cc4 <TIM4_IRQHandler+0x424>)
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	0fda      	lsrs	r2, r3, #31
 8007bc4:	4413      	add	r3, r2
 8007bc6:	105b      	asrs	r3, r3, #1
 8007bc8:	461a      	mov	r2, r3
 8007bca:	4b42      	ldr	r3, [pc, #264]	; (8007cd4 <TIM4_IRQHandler+0x434>)
 8007bcc:	601a      	str	r2, [r3, #0]
	angle +=(prev_rate + rot_vel)/2;
 8007bce:	4b42      	ldr	r3, [pc, #264]	; (8007cd8 <TIM4_IRQHandler+0x438>)
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	4b40      	ldr	r3, [pc, #256]	; (8007cd4 <TIM4_IRQHandler+0x434>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	0fda      	lsrs	r2, r3, #31
 8007bda:	4413      	add	r3, r2
 8007bdc:	105b      	asrs	r3, r3, #1
 8007bde:	461a      	mov	r2, r3
 8007be0:	4b3e      	ldr	r3, [pc, #248]	; (8007cdc <TIM4_IRQHandler+0x43c>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	441a      	add	r2, r3
 8007be6:	4b3d      	ldr	r3, [pc, #244]	; (8007cdc <TIM4_IRQHandler+0x43c>)
 8007be8:	601a      	str	r2, [r3, #0]
	angle1+=rate[0];
 8007bea:	4b36      	ldr	r3, [pc, #216]	; (8007cc4 <TIM4_IRQHandler+0x424>)
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	4b3c      	ldr	r3, [pc, #240]	; (8007ce0 <TIM4_IRQHandler+0x440>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	441a      	add	r2, r3
 8007bf4:	4b3a      	ldr	r3, [pc, #232]	; (8007ce0 <TIM4_IRQHandler+0x440>)
 8007bf6:	601a      	str	r2, [r3, #0]
	distance +=(prev_vel + lin_vel)/2; // [um]
 8007bf8:	4b3a      	ldr	r3, [pc, #232]	; (8007ce4 <TIM4_IRQHandler+0x444>)
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	4b32      	ldr	r3, [pc, #200]	; (8007cc8 <TIM4_IRQHandler+0x428>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4413      	add	r3, r2
 8007c02:	0fda      	lsrs	r2, r3, #31
 8007c04:	4413      	add	r3, r2
 8007c06:	105b      	asrs	r3, r3, #1
 8007c08:	461a      	mov	r2, r3
 8007c0a:	4b37      	ldr	r3, [pc, #220]	; (8007ce8 <TIM4_IRQHandler+0x448>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	441a      	add	r2, r3
 8007c10:	4b35      	ldr	r3, [pc, #212]	; (8007ce8 <TIM4_IRQHandler+0x448>)
 8007c12:	601a      	str	r2, [r3, #0]

	prev_rate = rot_vel;
 8007c14:	4b2f      	ldr	r3, [pc, #188]	; (8007cd4 <TIM4_IRQHandler+0x434>)
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	4b2f      	ldr	r3, [pc, #188]	; (8007cd8 <TIM4_IRQHandler+0x438>)
 8007c1a:	601a      	str	r2, [r3, #0]
	prev_vel = lin_vel;
 8007c1c:	4b2a      	ldr	r3, [pc, #168]	; (8007cc8 <TIM4_IRQHandler+0x428>)
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	4b30      	ldr	r3, [pc, #192]	; (8007ce4 <TIM4_IRQHandler+0x444>)
 8007c22:	601a      	str	r2, [r3, #0]

	test3[4]=test3[1]-angle;
 8007c24:	4b23      	ldr	r3, [pc, #140]	; (8007cb4 <TIM4_IRQHandler+0x414>)
 8007c26:	685a      	ldr	r2, [r3, #4]
 8007c28:	4b2c      	ldr	r3, [pc, #176]	; (8007cdc <TIM4_IRQHandler+0x43c>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	1ad2      	subs	r2, r2, r3
 8007c2e:	4b21      	ldr	r3, [pc, #132]	; (8007cb4 <TIM4_IRQHandler+0x414>)
 8007c30:	611a      	str	r2, [r3, #16]
	if ((test3[4]<1000 && test3[4]>0)||(test3[4]>-1000 && test3[4]<0)) test3[2]++;
 8007c32:	4b20      	ldr	r3, [pc, #128]	; (8007cb4 <TIM4_IRQHandler+0x414>)
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c3a:	da03      	bge.n	8007c44 <TIM4_IRQHandler+0x3a4>
 8007c3c:	4b1d      	ldr	r3, [pc, #116]	; (8007cb4 <TIM4_IRQHandler+0x414>)
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	dc08      	bgt.n	8007c56 <TIM4_IRQHandler+0x3b6>
 8007c44:	4b1b      	ldr	r3, [pc, #108]	; (8007cb4 <TIM4_IRQHandler+0x414>)
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8007c4c:	dd08      	ble.n	8007c60 <TIM4_IRQHandler+0x3c0>
 8007c4e:	4b19      	ldr	r3, [pc, #100]	; (8007cb4 <TIM4_IRQHandler+0x414>)
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	da04      	bge.n	8007c60 <TIM4_IRQHandler+0x3c0>
 8007c56:	4b17      	ldr	r3, [pc, #92]	; (8007cb4 <TIM4_IRQHandler+0x414>)
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	1c5a      	adds	r2, r3, #1
 8007c5c:	4b15      	ldr	r3, [pc, #84]	; (8007cb4 <TIM4_IRQHandler+0x414>)
 8007c5e:	609a      	str	r2, [r3, #8]

	/******************************************* Drive straight ***********************************/
	if(tryb==1)
 8007c60:	4b22      	ldr	r3, [pc, #136]	; (8007cec <TIM4_IRQHandler+0x44c>)
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	b25b      	sxtb	r3, r3
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	f040 819d 	bne.w	8007fa6 <TIM4_IRQHandler+0x706>
	{
		if (SensorTab[2][indexer]-dys0[2]>SSL_Tresh && SensorTab[0][indexer]-dys0[0] >SSL_Tresh && abs(SensorTab[2][indexer]-dys0[2]-(SensorTab[0][indexer]-dys0[0]))<50)
 8007c6c:	4b0e      	ldr	r3, [pc, #56]	; (8007ca8 <TIM4_IRQHandler+0x408>)
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	b25a      	sxtb	r2, r3
 8007c72:	4b0f      	ldr	r3, [pc, #60]	; (8007cb0 <TIM4_IRQHandler+0x410>)
 8007c74:	320a      	adds	r2, #10
 8007c76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007c7a:	4b1d      	ldr	r3, [pc, #116]	; (8007cf0 <TIM4_IRQHandler+0x450>)
 8007c7c:	889b      	ldrh	r3, [r3, #4]
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	1ad3      	subs	r3, r2, r3
 8007c82:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8007c86:	f2c0 808d 	blt.w	8007da4 <TIM4_IRQHandler+0x504>
 8007c8a:	4b07      	ldr	r3, [pc, #28]	; (8007ca8 <TIM4_IRQHandler+0x408>)
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	b25a      	sxtb	r2, r3
 8007c90:	4b07      	ldr	r3, [pc, #28]	; (8007cb0 <TIM4_IRQHandler+0x410>)
 8007c92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007c96:	e02d      	b.n	8007cf4 <TIM4_IRQHandler+0x454>
 8007c98:	2000040d 	.word	0x2000040d
 8007c9c:	200000ac 	.word	0x200000ac
 8007ca0:	20000094 	.word	0x20000094
 8007ca4:	2000007c 	.word	0x2000007c
 8007ca8:	20000074 	.word	0x20000074
 8007cac:	66666667 	.word	0x66666667
 8007cb0:	20000498 	.word	0x20000498
 8007cb4:	200000f0 	.word	0x200000f0
 8007cb8:	20000030 	.word	0x20000030
 8007cbc:	20000034 	.word	0x20000034
 8007cc0:	40000400 	.word	0x40000400
 8007cc4:	2000003c 	.word	0x2000003c
 8007cc8:	2000005c 	.word	0x2000005c
 8007ccc:	20000070 	.word	0x20000070
 8007cd0:	68db8bad 	.word	0x68db8bad
 8007cd4:	200003d8 	.word	0x200003d8
 8007cd8:	20000048 	.word	0x20000048
 8007cdc:	20000064 	.word	0x20000064
 8007ce0:	2000006c 	.word	0x2000006c
 8007ce4:	2000004c 	.word	0x2000004c
 8007ce8:	20000068 	.word	0x20000068
 8007cec:	20000075 	.word	0x20000075
 8007cf0:	20000050 	.word	0x20000050
 8007cf4:	4b97      	ldr	r3, [pc, #604]	; (8007f54 <TIM4_IRQHandler+0x6b4>)
 8007cf6:	881b      	ldrh	r3, [r3, #0]
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8007d00:	db50      	blt.n	8007da4 <TIM4_IRQHandler+0x504>
 8007d02:	4b95      	ldr	r3, [pc, #596]	; (8007f58 <TIM4_IRQHandler+0x6b8>)
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	b25a      	sxtb	r2, r3
 8007d08:	4b94      	ldr	r3, [pc, #592]	; (8007f5c <TIM4_IRQHandler+0x6bc>)
 8007d0a:	320a      	adds	r2, #10
 8007d0c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007d10:	4b90      	ldr	r3, [pc, #576]	; (8007f54 <TIM4_IRQHandler+0x6b4>)
 8007d12:	889b      	ldrh	r3, [r3, #4]
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	1ad2      	subs	r2, r2, r3
 8007d18:	4b8e      	ldr	r3, [pc, #568]	; (8007f54 <TIM4_IRQHandler+0x6b4>)
 8007d1a:	881b      	ldrh	r3, [r3, #0]
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	4619      	mov	r1, r3
 8007d20:	4b8d      	ldr	r3, [pc, #564]	; (8007f58 <TIM4_IRQHandler+0x6b8>)
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	b258      	sxtb	r0, r3
 8007d26:	4b8d      	ldr	r3, [pc, #564]	; (8007f5c <TIM4_IRQHandler+0x6bc>)
 8007d28:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007d2c:	1acb      	subs	r3, r1, r3
 8007d2e:	4413      	add	r3, r2
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	bfb8      	it	lt
 8007d34:	425b      	neglt	r3, r3
 8007d36:	2b31      	cmp	r3, #49	; 0x31
 8007d38:	dc34      	bgt.n	8007da4 <TIM4_IRQHandler+0x504>
		{
			error=(SensorTab[0][indexer]-dys0[0]-(SensorTab[2][indexer]-dys0[2]))*1 - (SensorTab[0][indexer]-dys0[0])*5/2-angle1/90;
 8007d3a:	4b87      	ldr	r3, [pc, #540]	; (8007f58 <TIM4_IRQHandler+0x6b8>)
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	b25a      	sxtb	r2, r3
 8007d40:	4b86      	ldr	r3, [pc, #536]	; (8007f5c <TIM4_IRQHandler+0x6bc>)
 8007d42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007d46:	4b83      	ldr	r3, [pc, #524]	; (8007f54 <TIM4_IRQHandler+0x6b4>)
 8007d48:	881b      	ldrh	r3, [r3, #0]
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	1ad2      	subs	r2, r2, r3
 8007d4e:	4b81      	ldr	r3, [pc, #516]	; (8007f54 <TIM4_IRQHandler+0x6b4>)
 8007d50:	889b      	ldrh	r3, [r3, #4]
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	4619      	mov	r1, r3
 8007d56:	4b80      	ldr	r3, [pc, #512]	; (8007f58 <TIM4_IRQHandler+0x6b8>)
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	b258      	sxtb	r0, r3
 8007d5c:	4b7f      	ldr	r3, [pc, #508]	; (8007f5c <TIM4_IRQHandler+0x6bc>)
 8007d5e:	300a      	adds	r0, #10
 8007d60:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007d64:	1acb      	subs	r3, r1, r3
 8007d66:	18d1      	adds	r1, r2, r3
 8007d68:	4b7b      	ldr	r3, [pc, #492]	; (8007f58 <TIM4_IRQHandler+0x6b8>)
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	b25a      	sxtb	r2, r3
 8007d6e:	4b7b      	ldr	r3, [pc, #492]	; (8007f5c <TIM4_IRQHandler+0x6bc>)
 8007d70:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007d74:	4b77      	ldr	r3, [pc, #476]	; (8007f54 <TIM4_IRQHandler+0x6b4>)
 8007d76:	881b      	ldrh	r3, [r3, #0]
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	1ad2      	subs	r2, r2, r3
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4413      	add	r3, r2
 8007d82:	0fda      	lsrs	r2, r3, #31
 8007d84:	4413      	add	r3, r2
 8007d86:	105b      	asrs	r3, r3, #1
 8007d88:	1aca      	subs	r2, r1, r3
 8007d8a:	4b75      	ldr	r3, [pc, #468]	; (8007f60 <TIM4_IRQHandler+0x6c0>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4975      	ldr	r1, [pc, #468]	; (8007f64 <TIM4_IRQHandler+0x6c4>)
 8007d90:	fb81 0103 	smull	r0, r1, r1, r3
 8007d94:	4419      	add	r1, r3
 8007d96:	1189      	asrs	r1, r1, #6
 8007d98:	17db      	asrs	r3, r3, #31
 8007d9a:	1acb      	subs	r3, r1, r3
 8007d9c:	1ad2      	subs	r2, r2, r3
 8007d9e:	4b72      	ldr	r3, [pc, #456]	; (8007f68 <TIM4_IRQHandler+0x6c8>)
 8007da0:	601a      	str	r2, [r3, #0]
 8007da2:	e07b      	b.n	8007e9c <TIM4_IRQHandler+0x5fc>
		}
		else if(SensorTab[3][indexer]-dys0[3]>SSR_Tresh && SensorTab[1][indexer]-dys0[1]>SSR_Tresh && abs(SensorTab[3][indexer]-dys0[3]-(SensorTab[1][indexer]-dys0[1]))<50)
 8007da4:	4b6c      	ldr	r3, [pc, #432]	; (8007f58 <TIM4_IRQHandler+0x6b8>)
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	b25a      	sxtb	r2, r3
 8007daa:	4b6c      	ldr	r3, [pc, #432]	; (8007f5c <TIM4_IRQHandler+0x6bc>)
 8007dac:	320f      	adds	r2, #15
 8007dae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007db2:	4b68      	ldr	r3, [pc, #416]	; (8007f54 <TIM4_IRQHandler+0x6b4>)
 8007db4:	88db      	ldrh	r3, [r3, #6]
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	1ad3      	subs	r3, r2, r3
 8007dba:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8007dbe:	db61      	blt.n	8007e84 <TIM4_IRQHandler+0x5e4>
 8007dc0:	4b65      	ldr	r3, [pc, #404]	; (8007f58 <TIM4_IRQHandler+0x6b8>)
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	b25a      	sxtb	r2, r3
 8007dc6:	4b65      	ldr	r3, [pc, #404]	; (8007f5c <TIM4_IRQHandler+0x6bc>)
 8007dc8:	3205      	adds	r2, #5
 8007dca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007dce:	4b61      	ldr	r3, [pc, #388]	; (8007f54 <TIM4_IRQHandler+0x6b4>)
 8007dd0:	885b      	ldrh	r3, [r3, #2]
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	1ad3      	subs	r3, r2, r3
 8007dd6:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8007dda:	db53      	blt.n	8007e84 <TIM4_IRQHandler+0x5e4>
 8007ddc:	4b5e      	ldr	r3, [pc, #376]	; (8007f58 <TIM4_IRQHandler+0x6b8>)
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	b25a      	sxtb	r2, r3
 8007de2:	4b5e      	ldr	r3, [pc, #376]	; (8007f5c <TIM4_IRQHandler+0x6bc>)
 8007de4:	320f      	adds	r2, #15
 8007de6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007dea:	4b5a      	ldr	r3, [pc, #360]	; (8007f54 <TIM4_IRQHandler+0x6b4>)
 8007dec:	88db      	ldrh	r3, [r3, #6]
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	1ad2      	subs	r2, r2, r3
 8007df2:	4b58      	ldr	r3, [pc, #352]	; (8007f54 <TIM4_IRQHandler+0x6b4>)
 8007df4:	885b      	ldrh	r3, [r3, #2]
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	4619      	mov	r1, r3
 8007dfa:	4b57      	ldr	r3, [pc, #348]	; (8007f58 <TIM4_IRQHandler+0x6b8>)
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	b258      	sxtb	r0, r3
 8007e00:	4b56      	ldr	r3, [pc, #344]	; (8007f5c <TIM4_IRQHandler+0x6bc>)
 8007e02:	3005      	adds	r0, #5
 8007e04:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007e08:	1acb      	subs	r3, r1, r3
 8007e0a:	4413      	add	r3, r2
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	bfb8      	it	lt
 8007e10:	425b      	neglt	r3, r3
 8007e12:	2b31      	cmp	r3, #49	; 0x31
 8007e14:	dc36      	bgt.n	8007e84 <TIM4_IRQHandler+0x5e4>
		{
			error= (SensorTab[3][indexer]-dys0[3]-(SensorTab[1][indexer]-dys0[1]))*1 + (SensorTab[1][indexer]-dys0[1])*5/2-angle1/90;
 8007e16:	4b50      	ldr	r3, [pc, #320]	; (8007f58 <TIM4_IRQHandler+0x6b8>)
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	b25a      	sxtb	r2, r3
 8007e1c:	4b4f      	ldr	r3, [pc, #316]	; (8007f5c <TIM4_IRQHandler+0x6bc>)
 8007e1e:	320f      	adds	r2, #15
 8007e20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007e24:	4b4b      	ldr	r3, [pc, #300]	; (8007f54 <TIM4_IRQHandler+0x6b4>)
 8007e26:	88db      	ldrh	r3, [r3, #6]
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	1ad2      	subs	r2, r2, r3
 8007e2c:	4b49      	ldr	r3, [pc, #292]	; (8007f54 <TIM4_IRQHandler+0x6b4>)
 8007e2e:	885b      	ldrh	r3, [r3, #2]
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	4619      	mov	r1, r3
 8007e34:	4b48      	ldr	r3, [pc, #288]	; (8007f58 <TIM4_IRQHandler+0x6b8>)
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	b258      	sxtb	r0, r3
 8007e3a:	4b48      	ldr	r3, [pc, #288]	; (8007f5c <TIM4_IRQHandler+0x6bc>)
 8007e3c:	3005      	adds	r0, #5
 8007e3e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007e42:	1acb      	subs	r3, r1, r3
 8007e44:	18d1      	adds	r1, r2, r3
 8007e46:	4b44      	ldr	r3, [pc, #272]	; (8007f58 <TIM4_IRQHandler+0x6b8>)
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	b25a      	sxtb	r2, r3
 8007e4c:	4b43      	ldr	r3, [pc, #268]	; (8007f5c <TIM4_IRQHandler+0x6bc>)
 8007e4e:	3205      	adds	r2, #5
 8007e50:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007e54:	4b3f      	ldr	r3, [pc, #252]	; (8007f54 <TIM4_IRQHandler+0x6b4>)
 8007e56:	885b      	ldrh	r3, [r3, #2]
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	1ad2      	subs	r2, r2, r3
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	4413      	add	r3, r2
 8007e62:	0fda      	lsrs	r2, r3, #31
 8007e64:	4413      	add	r3, r2
 8007e66:	105b      	asrs	r3, r3, #1
 8007e68:	18ca      	adds	r2, r1, r3
 8007e6a:	4b3d      	ldr	r3, [pc, #244]	; (8007f60 <TIM4_IRQHandler+0x6c0>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	493d      	ldr	r1, [pc, #244]	; (8007f64 <TIM4_IRQHandler+0x6c4>)
 8007e70:	fb81 0103 	smull	r0, r1, r1, r3
 8007e74:	4419      	add	r1, r3
 8007e76:	1189      	asrs	r1, r1, #6
 8007e78:	17db      	asrs	r3, r3, #31
 8007e7a:	1acb      	subs	r3, r1, r3
 8007e7c:	1ad2      	subs	r2, r2, r3
 8007e7e:	4b3a      	ldr	r3, [pc, #232]	; (8007f68 <TIM4_IRQHandler+0x6c8>)
 8007e80:	601a      	str	r2, [r3, #0]
 8007e82:	e00b      	b.n	8007e9c <TIM4_IRQHandler+0x5fc>
		}
		else error=-angle1/30;
 8007e84:	4b36      	ldr	r3, [pc, #216]	; (8007f60 <TIM4_IRQHandler+0x6c0>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	425b      	negs	r3, r3
 8007e8a:	4a38      	ldr	r2, [pc, #224]	; (8007f6c <TIM4_IRQHandler+0x6cc>)
 8007e8c:	fb82 1203 	smull	r1, r2, r2, r3
 8007e90:	441a      	add	r2, r3
 8007e92:	1112      	asrs	r2, r2, #4
 8007e94:	17db      	asrs	r3, r3, #31
 8007e96:	1ad2      	subs	r2, r2, r3
 8007e98:	4b33      	ldr	r3, [pc, #204]	; (8007f68 <TIM4_IRQHandler+0x6c8>)
 8007e9a:	601a      	str	r2, [r3, #0]

		propocjonal=error*K_drive;
 8007e9c:	4b32      	ldr	r3, [pc, #200]	; (8007f68 <TIM4_IRQHandler+0x6c8>)
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	005b      	lsls	r3, r3, #1
 8007ea4:	441a      	add	r2, r3
 8007ea6:	4b32      	ldr	r3, [pc, #200]	; (8007f70 <TIM4_IRQHandler+0x6d0>)
 8007ea8:	601a      	str	r2, [r3, #0]

		integral+=error*I_drive;
 8007eaa:	4b32      	ldr	r3, [pc, #200]	; (8007f74 <TIM4_IRQHandler+0x6d4>)
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	4b31      	ldr	r3, [pc, #196]	; (8007f74 <TIM4_IRQHandler+0x6d4>)
 8007eb0:	601a      	str	r2, [r3, #0]
		if (integral>1000) integral=100;
 8007eb2:	4b30      	ldr	r3, [pc, #192]	; (8007f74 <TIM4_IRQHandler+0x6d4>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007eba:	dd02      	ble.n	8007ec2 <TIM4_IRQHandler+0x622>
 8007ebc:	4b2d      	ldr	r3, [pc, #180]	; (8007f74 <TIM4_IRQHandler+0x6d4>)
 8007ebe:	2264      	movs	r2, #100	; 0x64
 8007ec0:	601a      	str	r2, [r3, #0]
		if (integral<-1000) integral=-100;
 8007ec2:	4b2c      	ldr	r3, [pc, #176]	; (8007f74 <TIM4_IRQHandler+0x6d4>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8007eca:	da03      	bge.n	8007ed4 <TIM4_IRQHandler+0x634>
 8007ecc:	4b29      	ldr	r3, [pc, #164]	; (8007f74 <TIM4_IRQHandler+0x6d4>)
 8007ece:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8007ed2:	601a      	str	r2, [r3, #0]

		derivative=(error-error2)*D_drive;
 8007ed4:	4b24      	ldr	r3, [pc, #144]	; (8007f68 <TIM4_IRQHandler+0x6c8>)
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	4b27      	ldr	r3, [pc, #156]	; (8007f78 <TIM4_IRQHandler+0x6d8>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	22c8      	movs	r2, #200	; 0xc8
 8007ee0:	fb02 f203 	mul.w	r2, r2, r3
 8007ee4:	4b25      	ldr	r3, [pc, #148]	; (8007f7c <TIM4_IRQHandler+0x6dc>)
 8007ee6:	601a      	str	r2, [r3, #0]
		error2=error;
 8007ee8:	4b1f      	ldr	r3, [pc, #124]	; (8007f68 <TIM4_IRQHandler+0x6c8>)
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	4b22      	ldr	r3, [pc, #136]	; (8007f78 <TIM4_IRQHandler+0x6d8>)
 8007eee:	601a      	str	r2, [r3, #0]
		regulator=propocjonal+integral+derivative;
 8007ef0:	4b1f      	ldr	r3, [pc, #124]	; (8007f70 <TIM4_IRQHandler+0x6d0>)
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	4b1f      	ldr	r3, [pc, #124]	; (8007f74 <TIM4_IRQHandler+0x6d4>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	441a      	add	r2, r3
 8007efa:	4b20      	ldr	r3, [pc, #128]	; (8007f7c <TIM4_IRQHandler+0x6dc>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	441a      	add	r2, r3
 8007f00:	4b1f      	ldr	r3, [pc, #124]	; (8007f80 <TIM4_IRQHandler+0x6e0>)
 8007f02:	601a      	str	r2, [r3, #0]

		speed[0]=VEL-regulator;
 8007f04:	4b1e      	ldr	r3, [pc, #120]	; (8007f80 <TIM4_IRQHandler+0x6e0>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f5c3 72fa 	rsb	r2, r3, #500	; 0x1f4
 8007f0c:	4b1d      	ldr	r3, [pc, #116]	; (8007f84 <TIM4_IRQHandler+0x6e4>)
 8007f0e:	601a      	str	r2, [r3, #0]
		speed[1]=VEL+regulator;
 8007f10:	4b1b      	ldr	r3, [pc, #108]	; (8007f80 <TIM4_IRQHandler+0x6e0>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8007f18:	4b1a      	ldr	r3, [pc, #104]	; (8007f84 <TIM4_IRQHandler+0x6e4>)
 8007f1a:	605a      	str	r2, [r3, #4]

		if(speed[0]>999) speed[0]=999;
 8007f1c:	4b19      	ldr	r3, [pc, #100]	; (8007f84 <TIM4_IRQHandler+0x6e4>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f24:	db04      	blt.n	8007f30 <TIM4_IRQHandler+0x690>
 8007f26:	4b17      	ldr	r3, [pc, #92]	; (8007f84 <TIM4_IRQHandler+0x6e4>)
 8007f28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007f2c:	601a      	str	r2, [r3, #0]
 8007f2e:	e006      	b.n	8007f3e <TIM4_IRQHandler+0x69e>
		else if(speed[0]<0) speed[0]=0;
 8007f30:	4b14      	ldr	r3, [pc, #80]	; (8007f84 <TIM4_IRQHandler+0x6e4>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	da02      	bge.n	8007f3e <TIM4_IRQHandler+0x69e>
 8007f38:	4b12      	ldr	r3, [pc, #72]	; (8007f84 <TIM4_IRQHandler+0x6e4>)
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	601a      	str	r2, [r3, #0]
		if(speed[1]>999) speed[1]=999;
 8007f3e:	4b11      	ldr	r3, [pc, #68]	; (8007f84 <TIM4_IRQHandler+0x6e4>)
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f46:	db1f      	blt.n	8007f88 <TIM4_IRQHandler+0x6e8>
 8007f48:	4b0e      	ldr	r3, [pc, #56]	; (8007f84 <TIM4_IRQHandler+0x6e4>)
 8007f4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007f4e:	605a      	str	r2, [r3, #4]
 8007f50:	e021      	b.n	8007f96 <TIM4_IRQHandler+0x6f6>
 8007f52:	bf00      	nop
 8007f54:	20000050 	.word	0x20000050
 8007f58:	20000074 	.word	0x20000074
 8007f5c:	20000498 	.word	0x20000498
 8007f60:	2000006c 	.word	0x2000006c
 8007f64:	b60b60b7 	.word	0xb60b60b7
 8007f68:	200000e8 	.word	0x200000e8
 8007f6c:	88888889 	.word	0x88888889
 8007f70:	200000ec 	.word	0x200000ec
 8007f74:	20000104 	.word	0x20000104
 8007f78:	20000114 	.word	0x20000114
 8007f7c:	20000078 	.word	0x20000078
 8007f80:	2000008c 	.word	0x2000008c
 8007f84:	20000654 	.word	0x20000654
		else if(speed[1]<0) speed[1]=0;
 8007f88:	4b09      	ldr	r3, [pc, #36]	; (8007fb0 <TIM4_IRQHandler+0x710>)
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	da02      	bge.n	8007f96 <TIM4_IRQHandler+0x6f6>
 8007f90:	4b07      	ldr	r3, [pc, #28]	; (8007fb0 <TIM4_IRQHandler+0x710>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	605a      	str	r2, [r3, #4]

		TIM1->CCR1=speed[0];
 8007f96:	4b07      	ldr	r3, [pc, #28]	; (8007fb4 <TIM4_IRQHandler+0x714>)
 8007f98:	4a05      	ldr	r2, [pc, #20]	; (8007fb0 <TIM4_IRQHandler+0x710>)
 8007f9a:	6812      	ldr	r2, [r2, #0]
 8007f9c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2=speed[1];
 8007f9e:	4b05      	ldr	r3, [pc, #20]	; (8007fb4 <TIM4_IRQHandler+0x714>)
 8007fa0:	4a03      	ldr	r2, [pc, #12]	; (8007fb0 <TIM4_IRQHandler+0x710>)
 8007fa2:	6852      	ldr	r2, [r2, #4]
 8007fa4:	639a      	str	r2, [r3, #56]	; 0x38
	}

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8007fa6:	4804      	ldr	r0, [pc, #16]	; (8007fb8 <TIM4_IRQHandler+0x718>)
 8007fa8:	f7fa fa6e 	bl	8002488 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8007fac:	bd98      	pop	{r3, r4, r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	20000654 	.word	0x20000654
 8007fb4:	40012c00 	.word	0x40012c00
 8007fb8:	20000274 	.word	0x20000274

08007fbc <USART3_IRQHandler>:

/**
* @brief This function handles USART3 global interrupt.
*/
void USART3_IRQHandler(void)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007fc0:	4801      	ldr	r0, [pc, #4]	; (8007fc8 <USART3_IRQHandler+0xc>)
 8007fc2:	f7f9 fc83 	bl	80018cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	200002e8 	.word	0x200002e8

08007fcc <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(Status==STOP_STATUS) Status=DRIVE_STATUS;
 8007fd0:	4b07      	ldr	r3, [pc, #28]	; (8007ff0 <EXTI15_10_IRQHandler+0x24>)
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d103      	bne.n	8007fe0 <EXTI15_10_IRQHandler+0x14>
 8007fd8:	4b05      	ldr	r3, [pc, #20]	; (8007ff0 <EXTI15_10_IRQHandler+0x24>)
 8007fda:	2202      	movs	r2, #2
 8007fdc:	701a      	strb	r2, [r3, #0]
 8007fde:	e002      	b.n	8007fe6 <EXTI15_10_IRQHandler+0x1a>
	else Status=STOP_STATUS;
 8007fe0:	4b03      	ldr	r3, [pc, #12]	; (8007ff0 <EXTI15_10_IRQHandler+0x24>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	701a      	strb	r2, [r3, #0]


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8007fe6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007fea:	f7fe f845 	bl	8006078 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	20000060 	.word	0x20000060

08007ff4 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007ffa:	4b10      	ldr	r3, [pc, #64]	; (800803c <HAL_MspInit+0x48>)
 8007ffc:	4a0f      	ldr	r2, [pc, #60]	; (800803c <HAL_MspInit+0x48>)
 8007ffe:	6992      	ldr	r2, [r2, #24]
 8008000:	f042 0201 	orr.w	r2, r2, #1
 8008004:	619a      	str	r2, [r3, #24]
 8008006:	4b0d      	ldr	r3, [pc, #52]	; (800803c <HAL_MspInit+0x48>)
 8008008:	699b      	ldr	r3, [r3, #24]
 800800a:	f003 0301 	and.w	r3, r3, #1
 800800e:	607b      	str	r3, [r7, #4]
 8008010:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008012:	2003      	movs	r0, #3
 8008014:	f7fe fbc4 	bl	80067a0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8008018:	f04f 30ff 	mov.w	r0, #4294967295
 800801c:	2100      	movs	r1, #0
 800801e:	2200      	movs	r2, #0
 8008020:	f7fe fbc8 	bl	80067b4 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008024:	4b06      	ldr	r3, [pc, #24]	; (8008040 <HAL_MspInit+0x4c>)
 8008026:	4a06      	ldr	r2, [pc, #24]	; (8008040 <HAL_MspInit+0x4c>)
 8008028:	6852      	ldr	r2, [r2, #4]
 800802a:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800802e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8008032:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008034:	3708      	adds	r7, #8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	40021000 	.word	0x40021000
 8008040:	40010000 	.word	0x40010000

08008044 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b088      	sub	sp, #32
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	4b29      	ldr	r3, [pc, #164]	; (80080f8 <HAL_ADC_MspInit+0xb4>)
 8008052:	429a      	cmp	r2, r3
 8008054:	d14c      	bne.n	80080f0 <HAL_ADC_MspInit+0xac>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __ADC1_CLK_ENABLE();
 8008056:	4b29      	ldr	r3, [pc, #164]	; (80080fc <HAL_ADC_MspInit+0xb8>)
 8008058:	4a28      	ldr	r2, [pc, #160]	; (80080fc <HAL_ADC_MspInit+0xb8>)
 800805a:	6992      	ldr	r2, [r2, #24]
 800805c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008060:	619a      	str	r2, [r3, #24]
 8008062:	4b26      	ldr	r3, [pc, #152]	; (80080fc <HAL_ADC_MspInit+0xb8>)
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800806a:	60fb      	str	r3, [r7, #12]
 800806c:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = A2_Pin|A1_Pin|A8_Pin|A7_Pin;
 800806e:	2333      	movs	r3, #51	; 0x33
 8008070:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008072:	2303      	movs	r3, #3
 8008074:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008076:	f107 0310 	add.w	r3, r7, #16
 800807a:	4821      	ldr	r0, [pc, #132]	; (8008100 <HAL_ADC_MspInit+0xbc>)
 800807c:	4619      	mov	r1, r3
 800807e:	f7fd fe85 	bl	8005d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CHECK_Pin|A4_Pin|A6_Pin;
 8008082:	23d0      	movs	r3, #208	; 0xd0
 8008084:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008086:	2303      	movs	r3, #3
 8008088:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800808a:	f107 0310 	add.w	r3, r7, #16
 800808e:	481d      	ldr	r0, [pc, #116]	; (8008104 <HAL_ADC_MspInit+0xc0>)
 8008090:	4619      	mov	r1, r3
 8008092:	f7fd fe7b 	bl	8005d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A5_Pin|A3_Pin;
 8008096:	2303      	movs	r3, #3
 8008098:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800809a:	2303      	movs	r3, #3
 800809c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800809e:	f107 0310 	add.w	r3, r7, #16
 80080a2:	4819      	ldr	r0, [pc, #100]	; (8008108 <HAL_ADC_MspInit+0xc4>)
 80080a4:	4619      	mov	r1, r3
 80080a6:	f7fd fe71 	bl	8005d8c <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA1_Channel1;
 80080aa:	4b18      	ldr	r3, [pc, #96]	; (800810c <HAL_ADC_MspInit+0xc8>)
 80080ac:	4a18      	ldr	r2, [pc, #96]	; (8008110 <HAL_ADC_MspInit+0xcc>)
 80080ae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80080b0:	4b16      	ldr	r3, [pc, #88]	; (800810c <HAL_ADC_MspInit+0xc8>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80080b6:	4b15      	ldr	r3, [pc, #84]	; (800810c <HAL_ADC_MspInit+0xc8>)
 80080b8:	2200      	movs	r2, #0
 80080ba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80080bc:	4b13      	ldr	r3, [pc, #76]	; (800810c <HAL_ADC_MspInit+0xc8>)
 80080be:	2280      	movs	r2, #128	; 0x80
 80080c0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80080c2:	4b12      	ldr	r3, [pc, #72]	; (800810c <HAL_ADC_MspInit+0xc8>)
 80080c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080c8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80080ca:	4b10      	ldr	r3, [pc, #64]	; (800810c <HAL_ADC_MspInit+0xc8>)
 80080cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80080d0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80080d2:	4b0e      	ldr	r3, [pc, #56]	; (800810c <HAL_ADC_MspInit+0xc8>)
 80080d4:	2220      	movs	r2, #32
 80080d6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80080d8:	4b0c      	ldr	r3, [pc, #48]	; (800810c <HAL_ADC_MspInit+0xc8>)
 80080da:	2200      	movs	r2, #0
 80080dc:	61da      	str	r2, [r3, #28]
    HAL_DMA_Init(&hdma_adc1);
 80080de:	480b      	ldr	r0, [pc, #44]	; (800810c <HAL_ADC_MspInit+0xc8>)
 80080e0:	f7fd ffec 	bl	80060bc <HAL_DMA_Init>

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a09      	ldr	r2, [pc, #36]	; (800810c <HAL_ADC_MspInit+0xc8>)
 80080e8:	621a      	str	r2, [r3, #32]
 80080ea:	4b08      	ldr	r3, [pc, #32]	; (800810c <HAL_ADC_MspInit+0xc8>)
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80080f0:	3720      	adds	r7, #32
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	40012400 	.word	0x40012400
 80080fc:	40021000 	.word	0x40021000
 8008100:	40011000 	.word	0x40011000
 8008104:	40010800 	.word	0x40010800
 8008108:	40010c00 	.word	0x40010c00
 800810c:	20000410 	.word	0x20000410
 8008110:	40020008 	.word	0x40020008

08008114 <HAL_I2C_MspInit>:
  /* USER CODE END ADC1_MspDeInit 1 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b088      	sub	sp, #32
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	4b12      	ldr	r3, [pc, #72]	; (800816c <HAL_I2C_MspInit+0x58>)
 8008122:	429a      	cmp	r2, r3
 8008124:	d11e      	bne.n	8008164 <HAL_I2C_MspInit+0x50>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008126:	f44f 7340 	mov.w	r3, #768	; 0x300
 800812a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800812c:	2312      	movs	r3, #18
 800812e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008130:	2303      	movs	r3, #3
 8008132:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008134:	f107 0310 	add.w	r3, r7, #16
 8008138:	480d      	ldr	r0, [pc, #52]	; (8008170 <HAL_I2C_MspInit+0x5c>)
 800813a:	4619      	mov	r1, r3
 800813c:	f7fd fe26 	bl	8005d8c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8008140:	4b0c      	ldr	r3, [pc, #48]	; (8008174 <HAL_I2C_MspInit+0x60>)
 8008142:	4a0c      	ldr	r2, [pc, #48]	; (8008174 <HAL_I2C_MspInit+0x60>)
 8008144:	6852      	ldr	r2, [r2, #4]
 8008146:	f042 0202 	orr.w	r2, r2, #2
 800814a:	605a      	str	r2, [r3, #4]
    /* Peripheral clock enable */
    __I2C1_CLK_ENABLE();
 800814c:	4b0a      	ldr	r3, [pc, #40]	; (8008178 <HAL_I2C_MspInit+0x64>)
 800814e:	4a0a      	ldr	r2, [pc, #40]	; (8008178 <HAL_I2C_MspInit+0x64>)
 8008150:	69d2      	ldr	r2, [r2, #28]
 8008152:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8008156:	61da      	str	r2, [r3, #28]
 8008158:	4b07      	ldr	r3, [pc, #28]	; (8008178 <HAL_I2C_MspInit+0x64>)
 800815a:	69db      	ldr	r3, [r3, #28]
 800815c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008160:	60fb      	str	r3, [r7, #12]
 8008162:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008164:	3720      	adds	r7, #32
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	40005400 	.word	0x40005400
 8008170:	40010c00 	.word	0x40010c00
 8008174:	40010000 	.word	0x40010000
 8008178:	40021000 	.word	0x40021000

0800817c <HAL_RTC_MspInit>:
  /* USER CODE END I2C1_MspDeInit 1 */

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b086      	sub	sp, #24
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]

  if(hrtc->Instance==RTC)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	4b11      	ldr	r3, [pc, #68]	; (80081d0 <HAL_RTC_MspInit+0x54>)
 800818a:	429a      	cmp	r2, r3
 800818c:	d11d      	bne.n	80081ca <HAL_RTC_MspInit+0x4e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800818e:	f7fd f8d5 	bl	800533c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8008192:	4b10      	ldr	r3, [pc, #64]	; (80081d4 <HAL_RTC_MspInit+0x58>)
 8008194:	4a0f      	ldr	r2, [pc, #60]	; (80081d4 <HAL_RTC_MspInit+0x58>)
 8008196:	69d2      	ldr	r2, [r2, #28]
 8008198:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800819c:	61da      	str	r2, [r3, #28]
 800819e:	4b0d      	ldr	r3, [pc, #52]	; (80081d4 <HAL_RTC_MspInit+0x58>)
 80081a0:	69db      	ldr	r3, [r3, #28]
 80081a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081a6:	60fb      	str	r3, [r7, #12]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081ae:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	fa93 f3a3 	rbit	r3, r3
 80081b6:	613b      	str	r3, [r7, #16]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80081b8:	693b      	ldr	r3, [r7, #16]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80081ba:	fab3 f383 	clz	r3, r3
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	461a      	mov	r2, r3
 80081c2:	4b05      	ldr	r3, [pc, #20]	; (80081d8 <HAL_RTC_MspInit+0x5c>)
 80081c4:	4413      	add	r3, r2
 80081c6:	2201      	movs	r2, #1
 80081c8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80081ca:	3718      	adds	r7, #24
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	40002800 	.word	0x40002800
 80081d4:	40021000 	.word	0x40021000
 80081d8:	42420400 	.word	0x42420400

080081dc <HAL_SPI_MspInit>:
  /* USER CODE END RTC_MspDeInit 1 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b088      	sub	sp, #32
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI2)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	4b15      	ldr	r3, [pc, #84]	; (8008240 <HAL_SPI_MspInit+0x64>)
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d125      	bne.n	800823a <HAL_SPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __SPI2_CLK_ENABLE();
 80081ee:	4b15      	ldr	r3, [pc, #84]	; (8008244 <HAL_SPI_MspInit+0x68>)
 80081f0:	4a14      	ldr	r2, [pc, #80]	; (8008244 <HAL_SPI_MspInit+0x68>)
 80081f2:	69d2      	ldr	r2, [r2, #28]
 80081f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081f8:	61da      	str	r2, [r3, #28]
 80081fa:	4b12      	ldr	r3, [pc, #72]	; (8008244 <HAL_SPI_MspInit+0x68>)
 80081fc:	69db      	ldr	r3, [r3, #28]
 80081fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008202:	60fb      	str	r3, [r7, #12]
 8008204:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8008206:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800820a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800820c:	2302      	movs	r3, #2
 800820e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008210:	2303      	movs	r3, #3
 8008212:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008214:	f107 0310 	add.w	r3, r7, #16
 8008218:	480b      	ldr	r0, [pc, #44]	; (8008248 <HAL_SPI_MspInit+0x6c>)
 800821a:	4619      	mov	r1, r3
 800821c:	f7fd fdb6 	bl	8005d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8008220:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008224:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008226:	2300      	movs	r3, #0
 8008228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800822a:	2300      	movs	r3, #0
 800822c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800822e:	f107 0310 	add.w	r3, r7, #16
 8008232:	4805      	ldr	r0, [pc, #20]	; (8008248 <HAL_SPI_MspInit+0x6c>)
 8008234:	4619      	mov	r1, r3
 8008236:	f7fd fda9 	bl	8005d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800823a:	3720      	adds	r7, #32
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	40003800 	.word	0x40003800
 8008244:	40021000 	.word	0x40021000
 8008248:	40010c00 	.word	0x40010c00

0800824c <HAL_TIM_Base_MspInit>:
  /* USER CODE END SPI2_MspDeInit 1 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b088      	sub	sp, #32
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM1)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	4b1c      	ldr	r3, [pc, #112]	; (80082cc <HAL_TIM_Base_MspInit+0x80>)
 800825a:	429a      	cmp	r2, r3
 800825c:	d119      	bne.n	8008292 <HAL_TIM_Base_MspInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __TIM1_CLK_ENABLE();
 800825e:	4b1c      	ldr	r3, [pc, #112]	; (80082d0 <HAL_TIM_Base_MspInit+0x84>)
 8008260:	4a1b      	ldr	r2, [pc, #108]	; (80082d0 <HAL_TIM_Base_MspInit+0x84>)
 8008262:	6992      	ldr	r2, [r2, #24]
 8008264:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008268:	619a      	str	r2, [r3, #24]
 800826a:	4b19      	ldr	r3, [pc, #100]	; (80082d0 <HAL_TIM_Base_MspInit+0x84>)
 800826c:	699b      	ldr	r3, [r3, #24]
 800826e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008272:	60fb      	str	r3, [r7, #12]
 8008274:	68fb      	ldr	r3, [r7, #12]
  
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = PWM_B_Pin|PWM_A_Pin;
 8008276:	f44f 7340 	mov.w	r3, #768	; 0x300
 800827a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800827c:	2302      	movs	r3, #2
 800827e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8008280:	2302      	movs	r3, #2
 8008282:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008284:	f107 0310 	add.w	r3, r7, #16
 8008288:	4812      	ldr	r0, [pc, #72]	; (80082d4 <HAL_TIM_Base_MspInit+0x88>)
 800828a:	4619      	mov	r1, r3
 800828c:	f7fd fd7e 	bl	8005d8c <HAL_GPIO_Init>
 8008290:	e018      	b.n	80082c4 <HAL_TIM_Base_MspInit+0x78>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	4b10      	ldr	r3, [pc, #64]	; (80082d8 <HAL_TIM_Base_MspInit+0x8c>)
 8008298:	429a      	cmp	r2, r3
 800829a:	d113      	bne.n	80082c4 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __TIM4_CLK_ENABLE();
 800829c:	4b0c      	ldr	r3, [pc, #48]	; (80082d0 <HAL_TIM_Base_MspInit+0x84>)
 800829e:	4a0c      	ldr	r2, [pc, #48]	; (80082d0 <HAL_TIM_Base_MspInit+0x84>)
 80082a0:	69d2      	ldr	r2, [r2, #28]
 80082a2:	f042 0204 	orr.w	r2, r2, #4
 80082a6:	61da      	str	r2, [r3, #28]
 80082a8:	4b09      	ldr	r3, [pc, #36]	; (80082d0 <HAL_TIM_Base_MspInit+0x84>)
 80082aa:	69db      	ldr	r3, [r3, #28]
 80082ac:	f003 0304 	and.w	r3, r3, #4
 80082b0:	60bb      	str	r3, [r7, #8]
 80082b2:	68bb      	ldr	r3, [r7, #8]
  /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80082b4:	201e      	movs	r0, #30
 80082b6:	2100      	movs	r1, #0
 80082b8:	2200      	movs	r2, #0
 80082ba:	f7fe fa7b 	bl	80067b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80082be:	201e      	movs	r0, #30
 80082c0:	f7fe fa94 	bl	80067ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80082c4:	3720      	adds	r7, #32
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	40012c00 	.word	0x40012c00
 80082d0:	40021000 	.word	0x40021000
 80082d4:	40010800 	.word	0x40010800
 80082d8:	40000800 	.word	0x40000800

080082dc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b088      	sub	sp, #32
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_encoder->Instance==TIM2)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082ec:	d118      	bne.n	8008320 <HAL_TIM_Encoder_MspInit+0x44>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __TIM2_CLK_ENABLE();
 80082ee:	4b1f      	ldr	r3, [pc, #124]	; (800836c <HAL_TIM_Encoder_MspInit+0x90>)
 80082f0:	4a1e      	ldr	r2, [pc, #120]	; (800836c <HAL_TIM_Encoder_MspInit+0x90>)
 80082f2:	69d2      	ldr	r2, [r2, #28]
 80082f4:	f042 0201 	orr.w	r2, r2, #1
 80082f8:	61da      	str	r2, [r3, #28]
 80082fa:	4b1c      	ldr	r3, [pc, #112]	; (800836c <HAL_TIM_Encoder_MspInit+0x90>)
 80082fc:	69db      	ldr	r3, [r3, #28]
 80082fe:	f003 0301 	and.w	r3, r3, #1
 8008302:	60fb      	str	r3, [r7, #12]
 8008304:	68fb      	ldr	r3, [r7, #12]
  
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = ENC_A_1_Pin|ENC_A_2_Pin;
 8008306:	2303      	movs	r3, #3
 8008308:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800830a:	2300      	movs	r3, #0
 800830c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800830e:	2300      	movs	r3, #0
 8008310:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008312:	f107 0310 	add.w	r3, r7, #16
 8008316:	4816      	ldr	r0, [pc, #88]	; (8008370 <HAL_TIM_Encoder_MspInit+0x94>)
 8008318:	4619      	mov	r1, r3
 800831a:	f7fd fd37 	bl	8005d8c <HAL_GPIO_Init>
 800831e:	e022      	b.n	8008366 <HAL_TIM_Encoder_MspInit+0x8a>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_encoder->Instance==TIM3)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	4b13      	ldr	r3, [pc, #76]	; (8008374 <HAL_TIM_Encoder_MspInit+0x98>)
 8008326:	429a      	cmp	r2, r3
 8008328:	d11d      	bne.n	8008366 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __TIM3_CLK_ENABLE();
 800832a:	4b10      	ldr	r3, [pc, #64]	; (800836c <HAL_TIM_Encoder_MspInit+0x90>)
 800832c:	4a0f      	ldr	r2, [pc, #60]	; (800836c <HAL_TIM_Encoder_MspInit+0x90>)
 800832e:	69d2      	ldr	r2, [r2, #28]
 8008330:	f042 0202 	orr.w	r2, r2, #2
 8008334:	61da      	str	r2, [r3, #28]
 8008336:	4b0d      	ldr	r3, [pc, #52]	; (800836c <HAL_TIM_Encoder_MspInit+0x90>)
 8008338:	69db      	ldr	r3, [r3, #28]
 800833a:	f003 0302 	and.w	r3, r3, #2
 800833e:	60bb      	str	r3, [r7, #8]
 8008340:	68bb      	ldr	r3, [r7, #8]
  
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = ENC_B_1_Pin|ENC_B_2_Pin;
 8008342:	23c0      	movs	r3, #192	; 0xc0
 8008344:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008346:	2300      	movs	r3, #0
 8008348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800834a:	2300      	movs	r3, #0
 800834c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800834e:	f107 0310 	add.w	r3, r7, #16
 8008352:	4809      	ldr	r0, [pc, #36]	; (8008378 <HAL_TIM_Encoder_MspInit+0x9c>)
 8008354:	4619      	mov	r1, r3
 8008356:	f7fd fd19 	bl	8005d8c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 800835a:	4b08      	ldr	r3, [pc, #32]	; (800837c <HAL_TIM_Encoder_MspInit+0xa0>)
 800835c:	4a07      	ldr	r2, [pc, #28]	; (800837c <HAL_TIM_Encoder_MspInit+0xa0>)
 800835e:	6852      	ldr	r2, [r2, #4]
 8008360:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
 8008364:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8008366:	3720      	adds	r7, #32
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	40021000 	.word	0x40021000
 8008370:	40010800 	.word	0x40010800
 8008374:	40000400 	.word	0x40000400
 8008378:	40011000 	.word	0x40011000
 800837c:	40010000 	.word	0x40010000

08008380 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b088      	sub	sp, #32
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART3)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	4b3a      	ldr	r3, [pc, #232]	; (8008478 <HAL_UART_MspInit+0xf8>)
 800838e:	429a      	cmp	r2, r3
 8008390:	d16f      	bne.n	8008472 <HAL_UART_MspInit+0xf2>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __USART3_CLK_ENABLE();
 8008392:	4b3a      	ldr	r3, [pc, #232]	; (800847c <HAL_UART_MspInit+0xfc>)
 8008394:	4a39      	ldr	r2, [pc, #228]	; (800847c <HAL_UART_MspInit+0xfc>)
 8008396:	69d2      	ldr	r2, [r2, #28]
 8008398:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800839c:	61da      	str	r2, [r3, #28]
 800839e:	4b37      	ldr	r3, [pc, #220]	; (800847c <HAL_UART_MspInit+0xfc>)
 80083a0:	69db      	ldr	r3, [r3, #28]
 80083a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083a6:	60fb      	str	r3, [r7, #12]
 80083a8:	68fb      	ldr	r3, [r7, #12]
  
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = Bluetooth_Tx_Pin;
 80083aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083b0:	2302      	movs	r3, #2
 80083b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80083b4:	2303      	movs	r3, #3
 80083b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Bluetooth_Tx_GPIO_Port, &GPIO_InitStruct);
 80083b8:	f107 0310 	add.w	r3, r7, #16
 80083bc:	4830      	ldr	r0, [pc, #192]	; (8008480 <HAL_UART_MspInit+0x100>)
 80083be:	4619      	mov	r1, r3
 80083c0:	f7fd fce4 	bl	8005d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Bluetooth_Rx_Pin;
 80083c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80083ca:	2300      	movs	r3, #0
 80083cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083ce:	2300      	movs	r3, #0
 80083d0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(Bluetooth_Rx_GPIO_Port, &GPIO_InitStruct);
 80083d2:	f107 0310 	add.w	r3, r7, #16
 80083d6:	482a      	ldr	r0, [pc, #168]	; (8008480 <HAL_UART_MspInit+0x100>)
 80083d8:	4619      	mov	r1, r3
 80083da:	f7fd fcd7 	bl	8005d8c <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80083de:	4b29      	ldr	r3, [pc, #164]	; (8008484 <HAL_UART_MspInit+0x104>)
 80083e0:	4a29      	ldr	r2, [pc, #164]	; (8008488 <HAL_UART_MspInit+0x108>)
 80083e2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80083e4:	4b27      	ldr	r3, [pc, #156]	; (8008484 <HAL_UART_MspInit+0x104>)
 80083e6:	2210      	movs	r2, #16
 80083e8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80083ea:	4b26      	ldr	r3, [pc, #152]	; (8008484 <HAL_UART_MspInit+0x104>)
 80083ec:	2200      	movs	r2, #0
 80083ee:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80083f0:	4b24      	ldr	r3, [pc, #144]	; (8008484 <HAL_UART_MspInit+0x104>)
 80083f2:	2280      	movs	r2, #128	; 0x80
 80083f4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80083f6:	4b23      	ldr	r3, [pc, #140]	; (8008484 <HAL_UART_MspInit+0x104>)
 80083f8:	2200      	movs	r2, #0
 80083fa:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80083fc:	4b21      	ldr	r3, [pc, #132]	; (8008484 <HAL_UART_MspInit+0x104>)
 80083fe:	2200      	movs	r2, #0
 8008400:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8008402:	4b20      	ldr	r3, [pc, #128]	; (8008484 <HAL_UART_MspInit+0x104>)
 8008404:	2200      	movs	r2, #0
 8008406:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008408:	4b1e      	ldr	r3, [pc, #120]	; (8008484 <HAL_UART_MspInit+0x104>)
 800840a:	2200      	movs	r2, #0
 800840c:	61da      	str	r2, [r3, #28]
    HAL_DMA_Init(&hdma_usart3_tx);
 800840e:	481d      	ldr	r0, [pc, #116]	; (8008484 <HAL_UART_MspInit+0x104>)
 8008410:	f7fd fe54 	bl	80060bc <HAL_DMA_Init>

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a1b      	ldr	r2, [pc, #108]	; (8008484 <HAL_UART_MspInit+0x104>)
 8008418:	631a      	str	r2, [r3, #48]	; 0x30
 800841a:	4b1a      	ldr	r3, [pc, #104]	; (8008484 <HAL_UART_MspInit+0x104>)
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	625a      	str	r2, [r3, #36]	; 0x24

    hdma_usart3_rx.Instance = DMA1_Channel3;
 8008420:	4b1a      	ldr	r3, [pc, #104]	; (800848c <HAL_UART_MspInit+0x10c>)
 8008422:	4a1b      	ldr	r2, [pc, #108]	; (8008490 <HAL_UART_MspInit+0x110>)
 8008424:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008426:	4b19      	ldr	r3, [pc, #100]	; (800848c <HAL_UART_MspInit+0x10c>)
 8008428:	2200      	movs	r2, #0
 800842a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800842c:	4b17      	ldr	r3, [pc, #92]	; (800848c <HAL_UART_MspInit+0x10c>)
 800842e:	2200      	movs	r2, #0
 8008430:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008432:	4b16      	ldr	r3, [pc, #88]	; (800848c <HAL_UART_MspInit+0x10c>)
 8008434:	2280      	movs	r2, #128	; 0x80
 8008436:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008438:	4b14      	ldr	r3, [pc, #80]	; (800848c <HAL_UART_MspInit+0x10c>)
 800843a:	2200      	movs	r2, #0
 800843c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800843e:	4b13      	ldr	r3, [pc, #76]	; (800848c <HAL_UART_MspInit+0x10c>)
 8008440:	2200      	movs	r2, #0
 8008442:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8008444:	4b11      	ldr	r3, [pc, #68]	; (800848c <HAL_UART_MspInit+0x10c>)
 8008446:	2220      	movs	r2, #32
 8008448:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800844a:	4b10      	ldr	r3, [pc, #64]	; (800848c <HAL_UART_MspInit+0x10c>)
 800844c:	2200      	movs	r2, #0
 800844e:	61da      	str	r2, [r3, #28]
    HAL_DMA_Init(&hdma_usart3_rx);
 8008450:	480e      	ldr	r0, [pc, #56]	; (800848c <HAL_UART_MspInit+0x10c>)
 8008452:	f7fd fe33 	bl	80060bc <HAL_DMA_Init>

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a0c      	ldr	r2, [pc, #48]	; (800848c <HAL_UART_MspInit+0x10c>)
 800845a:	635a      	str	r2, [r3, #52]	; 0x34
 800845c:	4b0b      	ldr	r3, [pc, #44]	; (800848c <HAL_UART_MspInit+0x10c>)
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	625a      	str	r2, [r3, #36]	; 0x24

  /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 8008462:	2027      	movs	r0, #39	; 0x27
 8008464:	2102      	movs	r1, #2
 8008466:	2200      	movs	r2, #0
 8008468:	f7fe f9a4 	bl	80067b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800846c:	2027      	movs	r0, #39	; 0x27
 800846e:	f7fe f9bd 	bl	80067ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8008472:	3720      	adds	r7, #32
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	40004800 	.word	0x40004800
 800847c:	40021000 	.word	0x40021000
 8008480:	40010c00 	.word	0x40010c00
 8008484:	20000364 	.word	0x20000364
 8008488:	4002001c 	.word	0x4002001c
 800848c:	200002b0 	.word	0x200002b0
 8008490:	40020030 	.word	0x40020030

08008494 <main>:
int16_t X=0,Y=0,Z=0;

/* USER CODE END 0 */

int main(void)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800849a:	f7fe ff6f 	bl	800737c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800849e:	f000 f8d7 	bl	8008650 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80084a2:	f000 fb65 	bl	8008b70 <MX_GPIO_Init>
  MX_DMA_Init();
 80084a6:	f000 fb37 	bl	8008b18 <MX_DMA_Init>
  MX_ADC1_Init();
 80084aa:	f000 f91f 	bl	80086ec <MX_ADC1_Init>
  MX_I2C1_Init();
 80084ae:	f000 f979 	bl	80087a4 <MX_I2C1_Init>
  MX_RTC_Init();
 80084b2:	f000 f99f 	bl	80087f4 <MX_RTC_Init>
  MX_SPI2_Init();
 80084b6:	f000 f9cf 	bl	8008858 <MX_SPI2_Init>
  MX_TIM1_Init();
 80084ba:	f000 f9fd 	bl	80088b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80084be:	f000 fa61 	bl	8008984 <MX_TIM2_Init>
  MX_TIM3_Init();
 80084c2:	f000 fa99 	bl	80089f8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80084c6:	f000 fad3 	bl	8008a70 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80084ca:	f000 fb01 	bl	8008ad0 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 80084ce:	4852      	ldr	r0, [pc, #328]	; (8008618 <main+0x184>)
 80084d0:	2118      	movs	r1, #24
 80084d2:	f7f9 ffa1 	bl	8002418 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 80084d6:	4851      	ldr	r0, [pc, #324]	; (800861c <main+0x188>)
 80084d8:	2118      	movs	r1, #24
 80084da:	f7f9 ff9d 	bl	8002418 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80084de:	4850      	ldr	r0, [pc, #320]	; (8008620 <main+0x18c>)
 80084e0:	2100      	movs	r1, #0
 80084e2:	f7f9 fedb 	bl	800229c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80084e6:	484e      	ldr	r0, [pc, #312]	; (8008620 <main+0x18c>)
 80084e8:	2104      	movs	r1, #4
 80084ea:	f7f9 fed7 	bl	800229c <HAL_TIM_PWM_Start>


    // Start ADC DMA
  HAL_ADC_Start(&hadc1);
 80084ee:	484d      	ldr	r0, [pc, #308]	; (8008624 <main+0x190>)
 80084f0:	f7fe fb50 	bl	8006b94 <HAL_ADC_Start>
  HAL_ADCEx_Calibration_Start(&hadc1);
 80084f4:	484b      	ldr	r0, [pc, #300]	; (8008624 <main+0x190>)
 80084f6:	f7fe f9bb 	bl	8006870 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcData, 6);
 80084fa:	484a      	ldr	r0, [pc, #296]	; (8008624 <main+0x190>)
 80084fc:	494a      	ldr	r1, [pc, #296]	; (8008628 <main+0x194>)
 80084fe:	2206      	movs	r2, #6
 8008500:	f7fe fbf8 	bl	8006cf4 <HAL_ADC_Start_DMA>

  HAL_UART_MspInit(&huart3);
 8008504:	4849      	ldr	r0, [pc, #292]	; (800862c <main+0x198>)
 8008506:	f7ff ff3b 	bl	8008380 <HAL_UART_MspInit>

  HAL_TIM_Base_Start(&htim4);
 800850a:	4849      	ldr	r0, [pc, #292]	; (8008630 <main+0x19c>)
 800850c:	f7f9 fe2c 	bl	8002168 <HAL_TIM_Base_Start>

  HAL_UART_Receive_DMA(&huart3,(uint8_t*)RxBuffer,1);
 8008510:	4846      	ldr	r0, [pc, #280]	; (800862c <main+0x198>)
 8008512:	4948      	ldr	r1, [pc, #288]	; (8008634 <main+0x1a0>)
 8008514:	2201      	movs	r2, #1
 8008516:	f7f9 f967 	bl	80017e8 <HAL_UART_Receive_DMA>

  int i1, j1;
  for(i1=0;i1<XMAZE;i1++)
 800851a:	2300      	movs	r3, #0
 800851c:	607b      	str	r3, [r7, #4]
 800851e:	e021      	b.n	8008564 <main+0xd0>
  {
    for(j1=0;j1<YMAZE;j1++)
 8008520:	2300      	movs	r3, #0
 8008522:	603b      	str	r3, [r7, #0]
 8008524:	e018      	b.n	8008558 <main+0xc4>
    {
      cell[i1][j1]=-1;
 8008526:	4944      	ldr	r1, [pc, #272]	; (8008638 <main+0x1a4>)
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	4613      	mov	r3, r2
 800852c:	00db      	lsls	r3, r3, #3
 800852e:	4413      	add	r3, r2
 8008530:	005b      	lsls	r3, r3, #1
 8008532:	683a      	ldr	r2, [r7, #0]
 8008534:	4413      	add	r3, r2
 8008536:	440b      	add	r3, r1
 8008538:	22ff      	movs	r2, #255	; 0xff
 800853a:	701a      	strb	r2, [r3, #0]
      walls[i1][j1]=-1;
 800853c:	493f      	ldr	r1, [pc, #252]	; (800863c <main+0x1a8>)
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	4613      	mov	r3, r2
 8008542:	00db      	lsls	r3, r3, #3
 8008544:	4413      	add	r3, r2
 8008546:	005b      	lsls	r3, r3, #1
 8008548:	683a      	ldr	r2, [r7, #0]
 800854a:	4413      	add	r3, r2
 800854c:	440b      	add	r3, r1
 800854e:	22ff      	movs	r2, #255	; 0xff
 8008550:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_DMA(&huart3,(uint8_t*)RxBuffer,1);

  int i1, j1;
  for(i1=0;i1<XMAZE;i1++)
  {
    for(j1=0;j1<YMAZE;j1++)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	3301      	adds	r3, #1
 8008556:	603b      	str	r3, [r7, #0]
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	2b11      	cmp	r3, #17
 800855c:	dde3      	ble.n	8008526 <main+0x92>
  HAL_TIM_Base_Start(&htim4);

  HAL_UART_Receive_DMA(&huart3,(uint8_t*)RxBuffer,1);

  int i1, j1;
  for(i1=0;i1<XMAZE;i1++)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	3301      	adds	r3, #1
 8008562:	607b      	str	r3, [r7, #4]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b11      	cmp	r3, #17
 8008568:	ddda      	ble.n	8008520 <main+0x8c>
    {
      cell[i1][j1]=-1;
      walls[i1][j1]=-1;
    }
  }
  while(Status==STOP_STATUS)
 800856a:	e013      	b.n	8008594 <main+0x100>
  {
	  HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,1);
 800856c:	4834      	ldr	r0, [pc, #208]	; (8008640 <main+0x1ac>)
 800856e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008572:	2201      	movs	r2, #1
 8008574:	f7fd fd68 	bl	8006048 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8008578:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800857c:	f7fe ff4a 	bl	8007414 <HAL_Delay>
	  HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,0);
 8008580:	482f      	ldr	r0, [pc, #188]	; (8008640 <main+0x1ac>)
 8008582:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008586:	2200      	movs	r2, #0
 8008588:	f7fd fd5e 	bl	8006048 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800858c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008590:	f7fe ff40 	bl	8007414 <HAL_Delay>
    {
      cell[i1][j1]=-1;
      walls[i1][j1]=-1;
    }
  }
  while(Status==STOP_STATUS)
 8008594:	4b2b      	ldr	r3, [pc, #172]	; (8008644 <main+0x1b0>)
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d0e7      	beq.n	800856c <main+0xd8>
	  HAL_Delay(500);
	  HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,0);
	  HAL_Delay(500);
  }

  calibration();
 800859c:	f7f8 ff4c 	bl	8001438 <calibration>

  while (1)
  {

		  if (istarget(x,y)==1) rstdrive();
 80085a0:	4b29      	ldr	r3, [pc, #164]	; (8008648 <main+0x1b4>)
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	b25a      	sxtb	r2, r3
 80085a6:	4b29      	ldr	r3, [pc, #164]	; (800864c <main+0x1b8>)
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	b25b      	sxtb	r3, r3
 80085ac:	4610      	mov	r0, r2
 80085ae:	4619      	mov	r1, r3
 80085b0:	f7f7 ff82 	bl	80004b8 <istarget>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d101      	bne.n	80085be <main+0x12a>
 80085ba:	f7f8 f8c5 	bl	8000748 <rstdrive>
  if(Status==DRIVE_STATUS)
 80085be:	4b21      	ldr	r3, [pc, #132]	; (8008644 <main+0x1b0>)
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d126      	bne.n	8008614 <main+0x180>
	  {
		  if (walls[x][y]==-1)
 80085c6:	4b20      	ldr	r3, [pc, #128]	; (8008648 <main+0x1b4>)
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	b25a      	sxtb	r2, r3
 80085cc:	4b1f      	ldr	r3, [pc, #124]	; (800864c <main+0x1b8>)
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	b258      	sxtb	r0, r3
 80085d2:	491a      	ldr	r1, [pc, #104]	; (800863c <main+0x1a8>)
 80085d4:	4613      	mov	r3, r2
 80085d6:	00db      	lsls	r3, r3, #3
 80085d8:	4413      	add	r3, r2
 80085da:	005b      	lsls	r3, r3, #1
 80085dc:	4403      	add	r3, r0
 80085de:	440b      	add	r3, r1
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	b25b      	sxtb	r3, r3
 80085e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e8:	d108      	bne.n	80085fc <main+0x168>
		  {
		 	 mapCell();
 80085ea:	f7f8 f8d3 	bl	8000794 <mapCell>

		 	 HAL_TIM_Base_Stop_IT(&htim4);
 80085ee:	4810      	ldr	r0, [pc, #64]	; (8008630 <main+0x19c>)
 80085f0:	f7f9 fdf2 	bl	80021d8 <HAL_TIM_Base_Stop_IT>

		 	 flood();
 80085f4:	f7f8 fda0 	bl	8001138 <flood>
		 	 findPath();
 80085f8:	f7f7 ffbc 	bl	8000574 <findPath>
		  }
		  readPath();
 80085fc:	f7f8 f820 	bl	8000640 <readPath>

		  HAL_TIM_Base_Start_IT(&htim4);
 8008600:	480b      	ldr	r0, [pc, #44]	; (8008630 <main+0x19c>)
 8008602:	f7f9 fdcd 	bl	80021a0 <HAL_TIM_Base_Start_IT>
		  set();
 8008606:	f7f8 f847 	bl	8000698 <set>
		  drive(VEL);
 800860a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800860e:	f7f7 fe81 	bl	8000314 <drive>

	  }
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
  }
 8008612:	e7c5      	b.n	80085a0 <main+0x10c>
 8008614:	e7c4      	b.n	80085a0 <main+0x10c>
 8008616:	bf00      	nop
 8008618:	2000039c 	.word	0x2000039c
 800861c:	2000065c 	.word	0x2000065c
 8008620:	2000045c 	.word	0x2000045c
 8008624:	200003dc 	.word	0x200003dc
 8008628:	20000108 	.word	0x20000108
 800862c:	200002e8 	.word	0x200002e8
 8008630:	20000274 	.word	0x20000274
 8008634:	200000b8 	.word	0x200000b8
 8008638:	20000510 	.word	0x20000510
 800863c:	20000698 	.word	0x20000698
 8008640:	40011000 	.word	0x40011000
 8008644:	20000060 	.word	0x20000060
 8008648:	20000005 	.word	0x20000005
 800864c:	20000006 	.word	0x20000006

08008650 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b094      	sub	sp, #80	; 0x50
 8008654:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8008656:	2309      	movs	r3, #9
 8008658:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800865a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800865e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008660:	2300      	movs	r3, #0
 8008662:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8008664:	2301      	movs	r3, #1
 8008666:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008668:	2302      	movs	r3, #2
 800866a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800866c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008670:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008672:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8008676:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8008678:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800867c:	4618      	mov	r0, r3
 800867e:	f7fb fa7d 	bl	8003b7c <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1;
 8008682:	2305      	movs	r3, #5
 8008684:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008686:	2302      	movs	r3, #2
 8008688:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800868a:	2300      	movs	r3, #0
 800868c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800868e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008692:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008694:	2300      	movs	r3, #0
 8008696:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8008698:	f107 0314 	add.w	r3, r7, #20
 800869c:	4618      	mov	r0, r3
 800869e:	2102      	movs	r1, #2
 80086a0:	f7fc fa78 	bl	8004b94 <HAL_RCC_ClockConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80086a4:	2303      	movs	r3, #3
 80086a6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80086a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086ac:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80086ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086b2:	60fb      	str	r3, [r7, #12]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80086b4:	1d3b      	adds	r3, r7, #4
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7fb f890 	bl	80037dc <HAL_RCCEx_PeriphCLKConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80086bc:	f7fc fdd4 	bl	8005268 <HAL_RCC_GetHCLKFreq>
 80086c0:	4602      	mov	r2, r0
 80086c2:	4b09      	ldr	r3, [pc, #36]	; (80086e8 <SystemClock_Config+0x98>)
 80086c4:	fba3 1302 	umull	r1, r3, r3, r2
 80086c8:	099b      	lsrs	r3, r3, #6
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7fe f89c 	bl	8006808 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80086d0:	2004      	movs	r0, #4
 80086d2:	f7fe f8a5 	bl	8006820 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80086d6:	f04f 30ff 	mov.w	r0, #4294967295
 80086da:	2100      	movs	r1, #0
 80086dc:	2200      	movs	r2, #0
 80086de:	f7fe f869 	bl	80067b4 <HAL_NVIC_SetPriority>
}
 80086e2:	3750      	adds	r7, #80	; 0x50
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	10624dd3 	.word	0x10624dd3

080086ec <MX_ADC1_Init>:

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 80086f2:	4b2a      	ldr	r3, [pc, #168]	; (800879c <MX_ADC1_Init+0xb0>)
 80086f4:	4a2a      	ldr	r2, [pc, #168]	; (80087a0 <MX_ADC1_Init+0xb4>)
 80086f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80086f8:	4b28      	ldr	r3, [pc, #160]	; (800879c <MX_ADC1_Init+0xb0>)
 80086fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8008700:	4b26      	ldr	r3, [pc, #152]	; (800879c <MX_ADC1_Init+0xb0>)
 8008702:	2201      	movs	r2, #1
 8008704:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008706:	4b25      	ldr	r3, [pc, #148]	; (800879c <MX_ADC1_Init+0xb0>)
 8008708:	2200      	movs	r2, #0
 800870a:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800870c:	4b23      	ldr	r3, [pc, #140]	; (800879c <MX_ADC1_Init+0xb0>)
 800870e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8008712:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008714:	4b21      	ldr	r3, [pc, #132]	; (800879c <MX_ADC1_Init+0xb0>)
 8008716:	2200      	movs	r2, #0
 8008718:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 6;
 800871a:	4b20      	ldr	r3, [pc, #128]	; (800879c <MX_ADC1_Init+0xb0>)
 800871c:	2206      	movs	r2, #6
 800871e:	611a      	str	r2, [r3, #16]
  HAL_ADC_Init(&hadc1);
 8008720:	481e      	ldr	r0, [pc, #120]	; (800879c <MX_ADC1_Init+0xb0>)
 8008722:	f7fe f941 	bl	80069a8 <HAL_ADC_Init>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_11;
 8008726:	230b      	movs	r3, #11
 8008728:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 800872a:	2301      	movs	r3, #1
 800872c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800872e:	2304      	movs	r3, #4
 8008730:	60fb      	str	r3, [r7, #12]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8008732:	1d3b      	adds	r3, r7, #4
 8008734:	4819      	ldr	r0, [pc, #100]	; (800879c <MX_ADC1_Init+0xb0>)
 8008736:	4619      	mov	r1, r3
 8008738:	f7fe fbdc 	bl	8006ef4 <HAL_ADC_ConfigChannel>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_10;
 800873c:	230a      	movs	r3, #10
 800873e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 2;
 8008740:	2302      	movs	r3, #2
 8008742:	60bb      	str	r3, [r7, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8008744:	1d3b      	adds	r3, r7, #4
 8008746:	4815      	ldr	r0, [pc, #84]	; (800879c <MX_ADC1_Init+0xb0>)
 8008748:	4619      	mov	r1, r3
 800874a:	f7fe fbd3 	bl	8006ef4 <HAL_ADC_ConfigChannel>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_9;
 800874e:	2309      	movs	r3, #9
 8008750:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 3;
 8008752:	2303      	movs	r3, #3
 8008754:	60bb      	str	r3, [r7, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8008756:	1d3b      	adds	r3, r7, #4
 8008758:	4810      	ldr	r0, [pc, #64]	; (800879c <MX_ADC1_Init+0xb0>)
 800875a:	4619      	mov	r1, r3
 800875c:	f7fe fbca 	bl	8006ef4 <HAL_ADC_ConfigChannel>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_6;
 8008760:	2306      	movs	r3, #6
 8008762:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 4;
 8008764:	2304      	movs	r3, #4
 8008766:	60bb      	str	r3, [r7, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8008768:	1d3b      	adds	r3, r7, #4
 800876a:	480c      	ldr	r0, [pc, #48]	; (800879c <MX_ADC1_Init+0xb0>)
 800876c:	4619      	mov	r1, r3
 800876e:	f7fe fbc1 	bl	8006ef4 <HAL_ADC_ConfigChannel>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_8;
 8008772:	2308      	movs	r3, #8
 8008774:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 5;
 8008776:	2305      	movs	r3, #5
 8008778:	60bb      	str	r3, [r7, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800877a:	1d3b      	adds	r3, r7, #4
 800877c:	4807      	ldr	r0, [pc, #28]	; (800879c <MX_ADC1_Init+0xb0>)
 800877e:	4619      	mov	r1, r3
 8008780:	f7fe fbb8 	bl	8006ef4 <HAL_ADC_ConfigChannel>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_7;
 8008784:	2307      	movs	r3, #7
 8008786:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 6;
 8008788:	2306      	movs	r3, #6
 800878a:	60bb      	str	r3, [r7, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800878c:	1d3b      	adds	r3, r7, #4
 800878e:	4803      	ldr	r0, [pc, #12]	; (800879c <MX_ADC1_Init+0xb0>)
 8008790:	4619      	mov	r1, r3
 8008792:	f7fe fbaf 	bl	8006ef4 <HAL_ADC_ConfigChannel>

}
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	200003dc 	.word	0x200003dc
 80087a0:	40012400 	.word	0x40012400

080087a4 <MX_I2C1_Init>:

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80087a8:	4b0f      	ldr	r3, [pc, #60]	; (80087e8 <MX_I2C1_Init+0x44>)
 80087aa:	4a10      	ldr	r2, [pc, #64]	; (80087ec <MX_I2C1_Init+0x48>)
 80087ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80087ae:	4b0e      	ldr	r3, [pc, #56]	; (80087e8 <MX_I2C1_Init+0x44>)
 80087b0:	4a0f      	ldr	r2, [pc, #60]	; (80087f0 <MX_I2C1_Init+0x4c>)
 80087b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80087b4:	4b0c      	ldr	r3, [pc, #48]	; (80087e8 <MX_I2C1_Init+0x44>)
 80087b6:	2200      	movs	r2, #0
 80087b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80087ba:	4b0b      	ldr	r3, [pc, #44]	; (80087e8 <MX_I2C1_Init+0x44>)
 80087bc:	2200      	movs	r2, #0
 80087be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80087c0:	4b09      	ldr	r3, [pc, #36]	; (80087e8 <MX_I2C1_Init+0x44>)
 80087c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80087c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80087c8:	4b07      	ldr	r3, [pc, #28]	; (80087e8 <MX_I2C1_Init+0x44>)
 80087ca:	2200      	movs	r2, #0
 80087cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80087ce:	4b06      	ldr	r3, [pc, #24]	; (80087e8 <MX_I2C1_Init+0x44>)
 80087d0:	2200      	movs	r2, #0
 80087d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 80087d4:	4b04      	ldr	r3, [pc, #16]	; (80087e8 <MX_I2C1_Init+0x44>)
 80087d6:	2200      	movs	r2, #0
 80087d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 80087da:	4b03      	ldr	r3, [pc, #12]	; (80087e8 <MX_I2C1_Init+0x44>)
 80087dc:	2200      	movs	r2, #0
 80087de:	621a      	str	r2, [r3, #32]
  HAL_I2C_Init(&hi2c1);
 80087e0:	4801      	ldr	r0, [pc, #4]	; (80087e8 <MX_I2C1_Init+0x44>)
 80087e2:	f7fc fdc5 	bl	8005370 <HAL_I2C_Init>

}
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	20000328 	.word	0x20000328
 80087ec:	40005400 	.word	0x40005400
 80087f0:	000186a0 	.word	0x000186a0

080087f4 <MX_RTC_Init>:

/* RTC init function */
void MX_RTC_Init(void)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef DateToUpdate;

    /**Initialize RTC and set the Time and Date 
    */
  hrtc.Instance = RTC;
 80087fa:	4b15      	ldr	r3, [pc, #84]	; (8008850 <MX_RTC_Init+0x5c>)
 80087fc:	4a15      	ldr	r2, [pc, #84]	; (8008854 <MX_RTC_Init+0x60>)
 80087fe:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8008800:	4b13      	ldr	r3, [pc, #76]	; (8008850 <MX_RTC_Init+0x5c>)
 8008802:	f04f 32ff 	mov.w	r2, #4294967295
 8008806:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8008808:	4b11      	ldr	r3, [pc, #68]	; (8008850 <MX_RTC_Init+0x5c>)
 800880a:	2200      	movs	r2, #0
 800880c:	609a      	str	r2, [r3, #8]
  HAL_RTC_Init(&hrtc);
 800880e:	4810      	ldr	r0, [pc, #64]	; (8008850 <MX_RTC_Init+0x5c>)
 8008810:	f7fa fc48 	bl	80030a4 <HAL_RTC_Init>

  sTime.Hours = 0x0;
 8008814:	2300      	movs	r3, #0
 8008816:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8008818:	2300      	movs	r3, #0
 800881a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800881c:	2300      	movs	r3, #0
 800881e:	71bb      	strb	r3, [r7, #6]

  HAL_RTC_SetTime(&hrtc, &sTime, FORMAT_BCD);
 8008820:	1d3b      	adds	r3, r7, #4
 8008822:	480b      	ldr	r0, [pc, #44]	; (8008850 <MX_RTC_Init+0x5c>)
 8008824:	4619      	mov	r1, r3
 8008826:	2201      	movs	r2, #1
 8008828:	f7fa fcd2 	bl	80031d0 <HAL_RTC_SetTime>

  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800882c:	2301      	movs	r3, #1
 800882e:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8008830:	2301      	movs	r3, #1
 8008832:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8008834:	2301      	movs	r3, #1
 8008836:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8008838:	2300      	movs	r3, #0
 800883a:	70fb      	strb	r3, [r7, #3]

  HAL_RTC_SetDate(&hrtc, &DateToUpdate, FORMAT_BCD);
 800883c:	463b      	mov	r3, r7
 800883e:	4804      	ldr	r0, [pc, #16]	; (8008850 <MX_RTC_Init+0x5c>)
 8008840:	4619      	mov	r1, r3
 8008842:	2201      	movs	r2, #1
 8008844:	f7fa fd5a 	bl	80032fc <HAL_RTC_SetDate>

}
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	20000448 	.word	0x20000448
 8008854:	40002800 	.word	0x40002800

08008858 <MX_SPI2_Init>:

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800885c:	4b14      	ldr	r3, [pc, #80]	; (80088b0 <MX_SPI2_Init+0x58>)
 800885e:	4a15      	ldr	r2, [pc, #84]	; (80088b4 <MX_SPI2_Init+0x5c>)
 8008860:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8008862:	4b13      	ldr	r3, [pc, #76]	; (80088b0 <MX_SPI2_Init+0x58>)
 8008864:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008868:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800886a:	4b11      	ldr	r3, [pc, #68]	; (80088b0 <MX_SPI2_Init+0x58>)
 800886c:	2200      	movs	r2, #0
 800886e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8008870:	4b0f      	ldr	r3, [pc, #60]	; (80088b0 <MX_SPI2_Init+0x58>)
 8008872:	2200      	movs	r2, #0
 8008874:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008876:	4b0e      	ldr	r3, [pc, #56]	; (80088b0 <MX_SPI2_Init+0x58>)
 8008878:	2200      	movs	r2, #0
 800887a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800887c:	4b0c      	ldr	r3, [pc, #48]	; (80088b0 <MX_SPI2_Init+0x58>)
 800887e:	2200      	movs	r2, #0
 8008880:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8008882:	4b0b      	ldr	r3, [pc, #44]	; (80088b0 <MX_SPI2_Init+0x58>)
 8008884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008888:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800888a:	4b09      	ldr	r3, [pc, #36]	; (80088b0 <MX_SPI2_Init+0x58>)
 800888c:	2200      	movs	r2, #0
 800888e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008890:	4b07      	ldr	r3, [pc, #28]	; (80088b0 <MX_SPI2_Init+0x58>)
 8008892:	2200      	movs	r2, #0
 8008894:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLED;
 8008896:	4b06      	ldr	r3, [pc, #24]	; (80088b0 <MX_SPI2_Init+0x58>)
 8008898:	2200      	movs	r2, #0
 800889a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800889c:	4b04      	ldr	r3, [pc, #16]	; (80088b0 <MX_SPI2_Init+0x58>)
 800889e:	2200      	movs	r2, #0
 80088a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80088a2:	4b03      	ldr	r3, [pc, #12]	; (80088b0 <MX_SPI2_Init+0x58>)
 80088a4:	220a      	movs	r2, #10
 80088a6:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_SPI_Init(&hspi2);
 80088a8:	4801      	ldr	r0, [pc, #4]	; (80088b0 <MX_SPI2_Init+0x58>)
 80088aa:	f7fa fb95 	bl	8002fd8 <HAL_SPI_Init>

}
 80088ae:	bd80      	pop	{r7, pc}
 80088b0:	2000021c 	.word	0x2000021c
 80088b4:	40003800 	.word	0x40003800

080088b8 <MX_TIM1_Init>:

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b094      	sub	sp, #80	; 0x50
 80088bc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim1.Instance = TIM1;
 80088be:	4b2f      	ldr	r3, [pc, #188]	; (800897c <MX_TIM1_Init+0xc4>)
 80088c0:	4a2f      	ldr	r2, [pc, #188]	; (8008980 <MX_TIM1_Init+0xc8>)
 80088c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6-1;
 80088c4:	4b2d      	ldr	r3, [pc, #180]	; (800897c <MX_TIM1_Init+0xc4>)
 80088c6:	2205      	movs	r2, #5
 80088c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80088ca:	4b2c      	ldr	r3, [pc, #176]	; (800897c <MX_TIM1_Init+0xc4>)
 80088cc:	2200      	movs	r2, #0
 80088ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80088d0:	4b2a      	ldr	r3, [pc, #168]	; (800897c <MX_TIM1_Init+0xc4>)
 80088d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80088d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80088d8:	4b28      	ldr	r3, [pc, #160]	; (800897c <MX_TIM1_Init+0xc4>)
 80088da:	2200      	movs	r2, #0
 80088dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80088de:	4b27      	ldr	r3, [pc, #156]	; (800897c <MX_TIM1_Init+0xc4>)
 80088e0:	2200      	movs	r2, #0
 80088e2:	615a      	str	r2, [r3, #20]
  HAL_TIM_Base_Init(&htim1);
 80088e4:	4825      	ldr	r0, [pc, #148]	; (800897c <MX_TIM1_Init+0xc4>)
 80088e6:	f7f9 fc13 	bl	8002110 <HAL_TIM_Base_Init>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80088ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088ee:	643b      	str	r3, [r7, #64]	; 0x40
  HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 80088f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80088f4:	4821      	ldr	r0, [pc, #132]	; (800897c <MX_TIM1_Init+0xc4>)
 80088f6:	4619      	mov	r1, r3
 80088f8:	f7f9 ff94 	bl	8002824 <HAL_TIM_ConfigClockSource>

  HAL_TIM_PWM_Init(&htim1);
 80088fc:	481f      	ldr	r0, [pc, #124]	; (800897c <MX_TIM1_Init+0xc4>)
 80088fe:	f7f9 fc97 	bl	8002230 <HAL_TIM_PWM_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008902:	2300      	movs	r3, #0
 8008904:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008906:	2300      	movs	r3, #0
 8008908:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 800890a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800890e:	481b      	ldr	r0, [pc, #108]	; (800897c <MX_TIM1_Init+0xc4>)
 8008910:	4619      	mov	r1, r3
 8008912:	f7f9 fba3 	bl	800205c <HAL_TIMEx_MasterConfigSynchronization>

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008916:	2300      	movs	r3, #0
 8008918:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800891a:	2300      	movs	r3, #0
 800891c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800891e:	2300      	movs	r3, #0
 8008920:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.DeadTime = 0;
 8008922:	2300      	movs	r3, #0
 8008924:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008926:	2300      	movs	r3, #0
 8008928:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800892a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800892e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008930:	2300      	movs	r3, #0
 8008932:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 8008934:	f107 031c 	add.w	r3, r7, #28
 8008938:	4810      	ldr	r0, [pc, #64]	; (800897c <MX_TIM1_Init+0xc4>)
 800893a:	4619      	mov	r1, r3
 800893c:	f7f9 fb54 	bl	8001fe8 <HAL_TIMEx_ConfigBreakDeadTime>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008940:	2360      	movs	r3, #96	; 0x60
 8008942:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008944:	2300      	movs	r3, #0
 8008946:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008948:	2300      	movs	r3, #0
 800894a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800894c:	2300      	movs	r3, #0
 800894e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008950:	2300      	movs	r3, #0
 8008952:	613b      	str	r3, [r7, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008954:	2300      	movs	r3, #0
 8008956:	617b      	str	r3, [r7, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008958:	2300      	movs	r3, #0
 800895a:	61bb      	str	r3, [r7, #24]
  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 800895c:	463b      	mov	r3, r7
 800895e:	4807      	ldr	r0, [pc, #28]	; (800897c <MX_TIM1_Init+0xc4>)
 8008960:	4619      	mov	r1, r3
 8008962:	2200      	movs	r2, #0
 8008964:	f7f9 fe98 	bl	8002698 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 8008968:	463b      	mov	r3, r7
 800896a:	4804      	ldr	r0, [pc, #16]	; (800897c <MX_TIM1_Init+0xc4>)
 800896c:	4619      	mov	r1, r3
 800896e:	2204      	movs	r2, #4
 8008970:	f7f9 fe92 	bl	8002698 <HAL_TIM_PWM_ConfigChannel>

}
 8008974:	3750      	adds	r7, #80	; 0x50
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	2000045c 	.word	0x2000045c
 8008980:	40012c00 	.word	0x40012c00

08008984 <MX_TIM2_Init>:

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b08c      	sub	sp, #48	; 0x30
 8008988:	af00      	add	r7, sp, #0

  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 800898a:	4b1a      	ldr	r3, [pc, #104]	; (80089f4 <MX_TIM2_Init+0x70>)
 800898c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008990:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8008992:	4b18      	ldr	r3, [pc, #96]	; (80089f4 <MX_TIM2_Init+0x70>)
 8008994:	2200      	movs	r2, #0
 8008996:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008998:	4b16      	ldr	r3, [pc, #88]	; (80089f4 <MX_TIM2_Init+0x70>)
 800899a:	2200      	movs	r2, #0
 800899c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32767;
 800899e:	4b15      	ldr	r3, [pc, #84]	; (80089f4 <MX_TIM2_Init+0x70>)
 80089a0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80089a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80089a6:	4b13      	ldr	r3, [pc, #76]	; (80089f4 <MX_TIM2_Init+0x70>)
 80089a8:	2200      	movs	r2, #0
 80089aa:	611a      	str	r2, [r3, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80089ac:	2303      	movs	r3, #3
 80089ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80089b0:	2300      	movs	r3, #0
 80089b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80089b4:	2301      	movs	r3, #1
 80089b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80089b8:	2300      	movs	r3, #0
 80089ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80089bc:	2300      	movs	r3, #0
 80089be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80089c0:	2302      	movs	r3, #2
 80089c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80089c4:	2301      	movs	r3, #1
 80089c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80089c8:	2300      	movs	r3, #0
 80089ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80089cc:	2300      	movs	r3, #0
 80089ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_TIM_Encoder_Init(&htim2, &sConfig);
 80089d0:	f107 030c 	add.w	r3, r7, #12
 80089d4:	4807      	ldr	r0, [pc, #28]	; (80089f4 <MX_TIM2_Init+0x70>)
 80089d6:	4619      	mov	r1, r3
 80089d8:	f7f9 fc88 	bl	80022ec <HAL_TIM_Encoder_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80089dc:	2300      	movs	r3, #0
 80089de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80089e0:	2300      	movs	r3, #0
 80089e2:	60bb      	str	r3, [r7, #8]
  HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 80089e4:	1d3b      	adds	r3, r7, #4
 80089e6:	4803      	ldr	r0, [pc, #12]	; (80089f4 <MX_TIM2_Init+0x70>)
 80089e8:	4619      	mov	r1, r3
 80089ea:	f7f9 fb37 	bl	800205c <HAL_TIMEx_MasterConfigSynchronization>

}
 80089ee:	3730      	adds	r7, #48	; 0x30
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	2000065c 	.word	0x2000065c

080089f8 <MX_TIM3_Init>:

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b08c      	sub	sp, #48	; 0x30
 80089fc:	af00      	add	r7, sp, #0

  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 80089fe:	4b1a      	ldr	r3, [pc, #104]	; (8008a68 <MX_TIM3_Init+0x70>)
 8008a00:	4a1a      	ldr	r2, [pc, #104]	; (8008a6c <MX_TIM3_Init+0x74>)
 8008a02:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8008a04:	4b18      	ldr	r3, [pc, #96]	; (8008a68 <MX_TIM3_Init+0x70>)
 8008a06:	2200      	movs	r2, #0
 8008a08:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008a0a:	4b17      	ldr	r3, [pc, #92]	; (8008a68 <MX_TIM3_Init+0x70>)
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 32767;
 8008a10:	4b15      	ldr	r3, [pc, #84]	; (8008a68 <MX_TIM3_Init+0x70>)
 8008a12:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008a16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008a18:	4b13      	ldr	r3, [pc, #76]	; (8008a68 <MX_TIM3_Init+0x70>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	611a      	str	r2, [r3, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8008a22:	2300      	movs	r3, #0
 8008a24:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8008a26:	2301      	movs	r3, #1
 8008a28:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8008a32:	2302      	movs	r3, #2
 8008a34:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8008a36:	2301      	movs	r3, #1
 8008a38:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_TIM_Encoder_Init(&htim3, &sConfig);
 8008a42:	f107 030c 	add.w	r3, r7, #12
 8008a46:	4808      	ldr	r0, [pc, #32]	; (8008a68 <MX_TIM3_Init+0x70>)
 8008a48:	4619      	mov	r1, r3
 8008a4a:	f7f9 fc4f 	bl	80022ec <HAL_TIM_Encoder_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008a52:	2300      	movs	r3, #0
 8008a54:	60bb      	str	r3, [r7, #8]
  HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 8008a56:	1d3b      	adds	r3, r7, #4
 8008a58:	4803      	ldr	r0, [pc, #12]	; (8008a68 <MX_TIM3_Init+0x70>)
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	f7f9 fafe 	bl	800205c <HAL_TIMEx_MasterConfigSynchronization>

}
 8008a60:	3730      	adds	r7, #48	; 0x30
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	2000039c 	.word	0x2000039c
 8008a6c:	40000400 	.word	0x40000400

08008a70 <MX_TIM4_Init>:

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b086      	sub	sp, #24
 8008a74:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
 8008a76:	4b14      	ldr	r3, [pc, #80]	; (8008ac8 <MX_TIM4_Init+0x58>)
 8008a78:	4a14      	ldr	r2, [pc, #80]	; (8008acc <MX_TIM4_Init+0x5c>)
 8008a7a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8008a7c:	4b12      	ldr	r3, [pc, #72]	; (8008ac8 <MX_TIM4_Init+0x58>)
 8008a7e:	2247      	movs	r2, #71	; 0x47
 8008a80:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008a82:	4b11      	ldr	r3, [pc, #68]	; (8008ac8 <MX_TIM4_Init+0x58>)
 8008a84:	2200      	movs	r2, #0
 8008a86:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8008a88:	4b0f      	ldr	r3, [pc, #60]	; (8008ac8 <MX_TIM4_Init+0x58>)
 8008a8a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008a8e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008a90:	4b0d      	ldr	r3, [pc, #52]	; (8008ac8 <MX_TIM4_Init+0x58>)
 8008a92:	2200      	movs	r2, #0
 8008a94:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Init(&htim4);
 8008a96:	480c      	ldr	r0, [pc, #48]	; (8008ac8 <MX_TIM4_Init+0x58>)
 8008a98:	f7f9 fb3a 	bl	8002110 <HAL_TIM_Base_Init>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008aa0:	60bb      	str	r3, [r7, #8]
  HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 8008aa2:	f107 0308 	add.w	r3, r7, #8
 8008aa6:	4808      	ldr	r0, [pc, #32]	; (8008ac8 <MX_TIM4_Init+0x58>)
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	f7f9 febb 	bl	8002824 <HAL_TIM_ConfigClockSource>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8008aae:	2310      	movs	r3, #16
 8008ab0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	607b      	str	r3, [r7, #4]
  HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 8008ab6:	463b      	mov	r3, r7
 8008ab8:	4803      	ldr	r0, [pc, #12]	; (8008ac8 <MX_TIM4_Init+0x58>)
 8008aba:	4619      	mov	r1, r3
 8008abc:	f7f9 face 	bl	800205c <HAL_TIMEx_MasterConfigSynchronization>

}
 8008ac0:	3718      	adds	r7, #24
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	20000274 	.word	0x20000274
 8008acc:	40000800 	.word	0x40000800

08008ad0 <MX_USART3_UART_Init>:

/* USART3 init function */
void MX_USART3_UART_Init(void)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8008ad4:	4b0e      	ldr	r3, [pc, #56]	; (8008b10 <MX_USART3_UART_Init+0x40>)
 8008ad6:	4a0f      	ldr	r2, [pc, #60]	; (8008b14 <MX_USART3_UART_Init+0x44>)
 8008ad8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8008ada:	4b0d      	ldr	r3, [pc, #52]	; (8008b10 <MX_USART3_UART_Init+0x40>)
 8008adc:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8008ae0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008ae2:	4b0b      	ldr	r3, [pc, #44]	; (8008b10 <MX_USART3_UART_Init+0x40>)
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008ae8:	4b09      	ldr	r3, [pc, #36]	; (8008b10 <MX_USART3_UART_Init+0x40>)
 8008aea:	2200      	movs	r2, #0
 8008aec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008aee:	4b08      	ldr	r3, [pc, #32]	; (8008b10 <MX_USART3_UART_Init+0x40>)
 8008af0:	2200      	movs	r2, #0
 8008af2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008af4:	4b06      	ldr	r3, [pc, #24]	; (8008b10 <MX_USART3_UART_Init+0x40>)
 8008af6:	220c      	movs	r2, #12
 8008af8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008afa:	4b05      	ldr	r3, [pc, #20]	; (8008b10 <MX_USART3_UART_Init+0x40>)
 8008afc:	2200      	movs	r2, #0
 8008afe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008b00:	4b03      	ldr	r3, [pc, #12]	; (8008b10 <MX_USART3_UART_Init+0x40>)
 8008b02:	2200      	movs	r2, #0
 8008b04:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart3);
 8008b06:	4802      	ldr	r0, [pc, #8]	; (8008b10 <MX_USART3_UART_Init+0x40>)
 8008b08:	f7f8 fdaa 	bl	8001660 <HAL_UART_Init>

}
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	200002e8 	.word	0x200002e8
 8008b14:	40004800 	.word	0x40004800

08008b18 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008b1e:	4b13      	ldr	r3, [pc, #76]	; (8008b6c <MX_DMA_Init+0x54>)
 8008b20:	4a12      	ldr	r2, [pc, #72]	; (8008b6c <MX_DMA_Init+0x54>)
 8008b22:	6952      	ldr	r2, [r2, #20]
 8008b24:	f042 0201 	orr.w	r2, r2, #1
 8008b28:	615a      	str	r2, [r3, #20]
 8008b2a:	4b10      	ldr	r3, [pc, #64]	; (8008b6c <MX_DMA_Init+0x54>)
 8008b2c:	695b      	ldr	r3, [r3, #20]
 8008b2e:	f003 0301 	and.w	r3, r3, #1
 8008b32:	607b      	str	r3, [r7, #4]
 8008b34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8008b36:	200b      	movs	r0, #11
 8008b38:	2101      	movs	r1, #1
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f7fd fe3a 	bl	80067b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8008b40:	200b      	movs	r0, #11
 8008b42:	f7fd fe53 	bl	80067ec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 8008b46:	200c      	movs	r0, #12
 8008b48:	2102      	movs	r1, #2
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f7fd fe32 	bl	80067b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8008b50:	200c      	movs	r0, #12
 8008b52:	f7fd fe4b 	bl	80067ec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 2, 0);
 8008b56:	200d      	movs	r0, #13
 8008b58:	2102      	movs	r1, #2
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f7fd fe2a 	bl	80067b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8008b60:	200d      	movs	r0, #13
 8008b62:	f7fd fe43 	bl	80067ec <HAL_NVIC_EnableIRQ>

}
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	40021000 	.word	0x40021000

08008b70 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b088      	sub	sp, #32
 8008b74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 8008b76:	4b43      	ldr	r3, [pc, #268]	; (8008c84 <MX_GPIO_Init+0x114>)
 8008b78:	4a42      	ldr	r2, [pc, #264]	; (8008c84 <MX_GPIO_Init+0x114>)
 8008b7a:	6992      	ldr	r2, [r2, #24]
 8008b7c:	f042 0210 	orr.w	r2, r2, #16
 8008b80:	619a      	str	r2, [r3, #24]
 8008b82:	4b40      	ldr	r3, [pc, #256]	; (8008c84 <MX_GPIO_Init+0x114>)
 8008b84:	699b      	ldr	r3, [r3, #24]
 8008b86:	f003 0310 	and.w	r3, r3, #16
 8008b8a:	60fb      	str	r3, [r7, #12]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
  __GPIOD_CLK_ENABLE();
 8008b8e:	4b3d      	ldr	r3, [pc, #244]	; (8008c84 <MX_GPIO_Init+0x114>)
 8008b90:	4a3c      	ldr	r2, [pc, #240]	; (8008c84 <MX_GPIO_Init+0x114>)
 8008b92:	6992      	ldr	r2, [r2, #24]
 8008b94:	f042 0220 	orr.w	r2, r2, #32
 8008b98:	619a      	str	r2, [r3, #24]
 8008b9a:	4b3a      	ldr	r3, [pc, #232]	; (8008c84 <MX_GPIO_Init+0x114>)
 8008b9c:	699b      	ldr	r3, [r3, #24]
 8008b9e:	f003 0320 	and.w	r3, r3, #32
 8008ba2:	60bb      	str	r3, [r7, #8]
 8008ba4:	68bb      	ldr	r3, [r7, #8]
  __GPIOA_CLK_ENABLE();
 8008ba6:	4b37      	ldr	r3, [pc, #220]	; (8008c84 <MX_GPIO_Init+0x114>)
 8008ba8:	4a36      	ldr	r2, [pc, #216]	; (8008c84 <MX_GPIO_Init+0x114>)
 8008baa:	6992      	ldr	r2, [r2, #24]
 8008bac:	f042 0204 	orr.w	r2, r2, #4
 8008bb0:	619a      	str	r2, [r3, #24]
 8008bb2:	4b34      	ldr	r3, [pc, #208]	; (8008c84 <MX_GPIO_Init+0x114>)
 8008bb4:	699b      	ldr	r3, [r3, #24]
 8008bb6:	f003 0304 	and.w	r3, r3, #4
 8008bba:	607b      	str	r3, [r7, #4]
 8008bbc:	687b      	ldr	r3, [r7, #4]
  __GPIOB_CLK_ENABLE();
 8008bbe:	4b31      	ldr	r3, [pc, #196]	; (8008c84 <MX_GPIO_Init+0x114>)
 8008bc0:	4a30      	ldr	r2, [pc, #192]	; (8008c84 <MX_GPIO_Init+0x114>)
 8008bc2:	6992      	ldr	r2, [r2, #24]
 8008bc4:	f042 0208 	orr.w	r2, r2, #8
 8008bc8:	619a      	str	r2, [r3, #24]
 8008bca:	4b2e      	ldr	r3, [pc, #184]	; (8008c84 <MX_GPIO_Init+0x114>)
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	f003 0308 	and.w	r3, r3, #8
 8008bd2:	603b      	str	r3, [r7, #0]
 8008bd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : Sensor3_Pin AIN2_Pin AIN1_Pin */
  GPIO_InitStruct.Pin = Sensor3_Pin|AIN2_Pin|AIN1_Pin;
 8008bd6:	f640 4308 	movw	r3, #3080	; 0xc08
 8008bda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8008be0:	2302      	movs	r3, #2
 8008be2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008be4:	f107 0310 	add.w	r3, r7, #16
 8008be8:	4827      	ldr	r0, [pc, #156]	; (8008c88 <MX_GPIO_Init+0x118>)
 8008bea:	4619      	mov	r1, r3
 8008bec:	f7fd f8ce 	bl	8005d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN2_Pin BIN1_Pin LED1_Pin */
  GPIO_InitStruct.Pin = BIN2_Pin|BIN1_Pin|LED1_Pin;
 8008bf0:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8008bf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8008bfa:	2302      	movs	r3, #2
 8008bfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008bfe:	f107 0310 	add.w	r3, r7, #16
 8008c02:	4822      	ldr	r0, [pc, #136]	; (8008c8c <MX_GPIO_Init+0x11c>)
 8008c04:	4619      	mov	r1, r3
 8008c06:	f7fd f8c1 	bl	8005d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT2_Pin */
  GPIO_InitStruct.Pin = BUT2_Pin;
 8008c0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c10:	2300      	movs	r3, #0
 8008c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c14:	2300      	movs	r3, #0
 8008c16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUT2_GPIO_Port, &GPIO_InitStruct);
 8008c18:	f107 0310 	add.w	r3, r7, #16
 8008c1c:	481b      	ldr	r0, [pc, #108]	; (8008c8c <MX_GPIO_Init+0x11c>)
 8008c1e:	4619      	mov	r1, r3
 8008c20:	f7fd f8b4 	bl	8005d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT1_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8008c24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008c2a:	4b19      	ldr	r3, [pc, #100]	; (8008c90 <MX_GPIO_Init+0x120>)
 8008c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8008c32:	f107 0310 	add.w	r3, r7, #16
 8008c36:	4815      	ldr	r0, [pc, #84]	; (8008c8c <MX_GPIO_Init+0x11c>)
 8008c38:	4619      	mov	r1, r3
 8008c3a:	f7fd f8a7 	bl	8005d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8008c3e:	2304      	movs	r3, #4
 8008c40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008c42:	2301      	movs	r3, #1
 8008c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8008c46:	2302      	movs	r3, #2
 8008c48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8008c4a:	f107 0310 	add.w	r3, r7, #16
 8008c4e:	4811      	ldr	r0, [pc, #68]	; (8008c94 <MX_GPIO_Init+0x124>)
 8008c50:	4619      	mov	r1, r3
 8008c52:	f7fd f89b 	bl	8005d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : Sensor1_Pin Sensor2_Pin */
  GPIO_InitStruct.Pin = Sensor1_Pin|Sensor2_Pin;
 8008c56:	23c0      	movs	r3, #192	; 0xc0
 8008c58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8008c5e:	2302      	movs	r3, #2
 8008c60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008c62:	f107 0310 	add.w	r3, r7, #16
 8008c66:	480c      	ldr	r0, [pc, #48]	; (8008c98 <MX_GPIO_Init+0x128>)
 8008c68:	4619      	mov	r1, r3
 8008c6a:	f7fd f88f 	bl	8005d8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8008c6e:	2028      	movs	r0, #40	; 0x28
 8008c70:	2100      	movs	r1, #0
 8008c72:	2200      	movs	r2, #0
 8008c74:	f7fd fd9e 	bl	80067b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008c78:	2028      	movs	r0, #40	; 0x28
 8008c7a:	f7fd fdb7 	bl	80067ec <HAL_NVIC_EnableIRQ>

}
 8008c7e:	3720      	adds	r7, #32
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	40021000 	.word	0x40021000
 8008c88:	40010800 	.word	0x40010800
 8008c8c:	40011000 	.word	0x40011000
 8008c90:	10110000 	.word	0x10110000
 8008c94:	40011400 	.word	0x40011400
 8008c98:	40010c00 	.word	0x40010c00

08008c9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8008c9c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8008c9e:	f000 b804 	b.w	8008caa <LoopCopyDataInit>

08008ca2 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8008ca2:	4b0d      	ldr	r3, [pc, #52]	; (8008cd8 <LoopFillZerobss+0x16>)
  ldr r3, [r3, r1]
 8008ca4:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8008ca6:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8008ca8:	3104      	adds	r1, #4

08008caa <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8008caa:	480c      	ldr	r0, [pc, #48]	; (8008cdc <LoopFillZerobss+0x1a>)
  ldr r3, =_edata
 8008cac:	4b0c      	ldr	r3, [pc, #48]	; (8008ce0 <LoopFillZerobss+0x1e>)
  adds r2, r0, r1
 8008cae:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8008cb0:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8008cb2:	f4ff aff6 	bcc.w	8008ca2 <CopyDataInit>
  ldr r2, =_sbss
 8008cb6:	4a0b      	ldr	r2, [pc, #44]	; (8008ce4 <LoopFillZerobss+0x22>)
  b LoopFillZerobss
 8008cb8:	f000 b803 	b.w	8008cc2 <LoopFillZerobss>

08008cbc <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8008cbc:	2300      	movs	r3, #0
  str r3, [r2], #4
 8008cbe:	f842 3b04 	str.w	r3, [r2], #4

08008cc2 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8008cc2:	4b09      	ldr	r3, [pc, #36]	; (8008ce8 <LoopFillZerobss+0x26>)
  cmp r2, r3
 8008cc4:	429a      	cmp	r2, r3
  bcc FillZerobss
 8008cc6:	f4ff aff9 	bcc.w	8008cbc <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008cca:	f7fe fbb9 	bl	8007440 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008cce:	f000 f80f 	bl	8008cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008cd2:	f7ff fbdf 	bl	8008494 <main>
  bx lr
 8008cd6:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8008cd8:	08008d94 	.word	0x08008d94
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8008cdc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8008ce0:	2000000c 	.word	0x2000000c
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8008ce4:	2000000c 	.word	0x2000000c
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8008ce8:	200007dc 	.word	0x200007dc

08008cec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008cec:	f7ff bffe 	b.w	8008cec <ADC1_2_IRQHandler>

08008cf0 <__libc_init_array>:
 8008cf0:	b570      	push	{r4, r5, r6, lr}
 8008cf2:	4b0e      	ldr	r3, [pc, #56]	; (8008d2c <__libc_init_array+0x3c>)
 8008cf4:	4d0e      	ldr	r5, [pc, #56]	; (8008d30 <__libc_init_array+0x40>)
 8008cf6:	2400      	movs	r4, #0
 8008cf8:	1aed      	subs	r5, r5, r3
 8008cfa:	10ad      	asrs	r5, r5, #2
 8008cfc:	461e      	mov	r6, r3
 8008cfe:	42ac      	cmp	r4, r5
 8008d00:	d004      	beq.n	8008d0c <__libc_init_array+0x1c>
 8008d02:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008d06:	4790      	blx	r2
 8008d08:	3401      	adds	r4, #1
 8008d0a:	e7f8      	b.n	8008cfe <__libc_init_array+0xe>
 8008d0c:	f000 f816 	bl	8008d3c <_init>
 8008d10:	4d08      	ldr	r5, [pc, #32]	; (8008d34 <__libc_init_array+0x44>)
 8008d12:	4b09      	ldr	r3, [pc, #36]	; (8008d38 <__libc_init_array+0x48>)
 8008d14:	2400      	movs	r4, #0
 8008d16:	1aed      	subs	r5, r5, r3
 8008d18:	10ad      	asrs	r5, r5, #2
 8008d1a:	461e      	mov	r6, r3
 8008d1c:	42ac      	cmp	r4, r5
 8008d1e:	d004      	beq.n	8008d2a <__libc_init_array+0x3a>
 8008d20:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008d24:	4790      	blx	r2
 8008d26:	3401      	adds	r4, #1
 8008d28:	e7f8      	b.n	8008d1c <__libc_init_array+0x2c>
 8008d2a:	bd70      	pop	{r4, r5, r6, pc}
 8008d2c:	08008d8c 	.word	0x08008d8c
 8008d30:	08008d8c 	.word	0x08008d8c
 8008d34:	08008d90 	.word	0x08008d90
 8008d38:	08008d8c 	.word	0x08008d8c

08008d3c <_init>:
 8008d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d3e:	bf00      	nop
 8008d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d42:	bc08      	pop	{r3}
 8008d44:	469e      	mov	lr, r3
 8008d46:	4770      	bx	lr

08008d48 <_fini>:
 8008d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d4a:	bf00      	nop
 8008d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d4e:	bc08      	pop	{r3}
 8008d50:	469e      	mov	lr, r3
 8008d52:	4770      	bx	lr
